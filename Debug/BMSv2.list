
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000555c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080056e8  080056e8  000066e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005728  08005728  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005728  08005728  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005728  08005728  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005728  08005728  00006728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800572c  0800572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005730  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000010  08005740  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005740  0000730c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015070  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003200  00000000  00000000  0001c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab8  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024663  00000000  00000000  00020ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014970  00000000  00000000  00045203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7d2  00000000  00000000  00059b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  00129388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012cb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080056d0 	.word	0x080056d0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080056d0 	.word	0x080056d0

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
BQ_data* BMS;
uint8_t control = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	72fb      	strb	r3, [r7, #11]
#ifdef USED_I2C1
	if(i2c == &hi2c1){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4a29      	ldr	r2, [pc, #164]	@ (8000280 <BQ_Init+0xb4>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d101      	bne.n	80001e4 <BQ_Init+0x18>
		BMS = &BMS_1;
 80001e0:	4b28      	ldr	r3, [pc, #160]	@ (8000284 <BQ_Init+0xb8>)
 80001e2:	60fb      	str	r3, [r7, #12]
	if(i2c == &hi2c2){
		BMS = &BMS_2;
	}
#endif
#ifdef USED_I2C3
	if(i2c == &hi2c3){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	4a28      	ldr	r2, [pc, #160]	@ (8000288 <BQ_Init+0xbc>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d101      	bne.n	80001f0 <BQ_Init+0x24>
		BMS = &BMS_3;
 80001ec:	4b27      	ldr	r3, [pc, #156]	@ (800028c <BQ_Init+0xc0>)
 80001ee:	60fb      	str	r3, [r7, #12]
	}
#endif
    BMS->bq_i2c = i2c;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
    BMS->bq_deviceAddress = Address;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2217      	movs	r2, #23
 80001fa:	711a      	strb	r2, [r3, #4]
#ifdef USE_SCANNER
	I2CHelper_CheckAddress(BMS);
 80001fc:	68f8      	ldr	r0, [r7, #12]
 80001fe:	f000 fe70 	bl	8000ee2 <I2CHelper_CheckAddress>
	while (BMS->connection != CONNECTED)
 8000202:	e00b      	b.n	800021c <BQ_Init+0x50>
	{
		I2CHelper_CheckAddress(BMS);
 8000204:	68f8      	ldr	r0, [r7, #12]
 8000206:	f000 fe6c 	bl	8000ee2 <I2CHelper_CheckAddress>
		HAL_Delay(20);
 800020a:	2014      	movs	r0, #20
 800020c:	f001 f9dc 	bl	80015c8 <HAL_Delay>
		control ++;
 8000210:	7afb      	ldrb	r3, [r7, #11]
 8000212:	3301      	adds	r3, #1
 8000214:	72fb      	strb	r3, [r7, #11]
		if(control >= 5){
 8000216:	7afb      	ldrb	r3, [r7, #11]
 8000218:	2b04      	cmp	r3, #4
 800021a:	d82d      	bhi.n	8000278 <BQ_Init+0xac>
	while (BMS->connection != CONNECTED)
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	7d1b      	ldrb	r3, [r3, #20]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1ef      	bne.n	8000204 <BQ_Init+0x38>
			return;
		}
	}
#endif

    HAL_Delay(1500);
 8000224:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000228:	f001 f9ce 	bl	80015c8 <HAL_Delay>
    BQAction_UpdateData(BMS);
 800022c:	68f8      	ldr	r0, [r7, #12]
 800022e:	f000 f9d6 	bl	80005de <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS);
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f000 f99f 	bl	8000576 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS, false);
 8000238:	2100      	movs	r1, #0
 800023a:	68f8      	ldr	r0, [r7, #12]
 800023c:	f000 f911 	bl	8000462 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS, false);
 8000240:	2100      	movs	r1, #0
 8000242:	68f8      	ldr	r0, [r7, #12]
 8000244:	f000 f924 	bl	8000490 <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS, false);
 8000248:	2100      	movs	r1, #0
 800024a:	68f8      	ldr	r0, [r7, #12]
 800024c:	f000 f937 	bl	80004be <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS, true);
 8000250:	2101      	movs	r1, #1
 8000252:	68f8      	ldr	r0, [r7, #12]
 8000254:	f000 f94a 	bl	80004ec <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS, true);
 8000258:	2101      	movs	r1, #1
 800025a:	68f8      	ldr	r0, [r7, #12]
 800025c:	f000 f95d 	bl	800051a <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS, true);
 8000260:	2101      	movs	r1, #1
 8000262:	68f8      	ldr	r0, [r7, #12]
 8000264:	f000 f970 	bl	8000548 <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS, false);
 8000268:	2100      	movs	r1, #0
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f000 f8e3 	bl	8000436 <BQAction_SetLed>

    BQAction_UpdateData(BMS);
 8000270:	68f8      	ldr	r0, [r7, #12]
 8000272:	f000 f9b4 	bl	80005de <BQAction_UpdateData>
 8000276:	e000      	b.n	800027a <BQ_Init+0xae>
			return;
 8000278:	bf00      	nop
}
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000098 	.word	0x20000098
 8000284:	20000194 	.word	0x20000194
 8000288:	20000140 	.word	0x20000140
 800028c:	20000224 	.word	0x20000224

08000290 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af02      	add	r7, sp, #8
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 800029c:	2344      	movs	r3, #68	@ 0x44
 800029e:	733b      	strb	r3, [r7, #12]
 80002a0:	2302      	movs	r3, #2
 80002a2:	737b      	strb	r3, [r7, #13]
 80002a4:	887b      	ldrh	r3, [r7, #2]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	73bb      	strb	r3, [r7, #14]
 80002aa:	887b      	ldrh	r3, [r7, #2]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	4619      	mov	r1, r3
 80002be:	f107 020c 	add.w	r2, r7, #12
 80002c2:	2364      	movs	r3, #100	@ 0x64
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2304      	movs	r3, #4
 80002c8:	f002 fa9a 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b092      	sub	sp, #72	@ 0x48
 80002d8:	af02      	add	r7, sp, #8
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	607a      	str	r2, [r7, #4]
 80002de:	461a      	mov	r2, r3
 80002e0:	460b      	mov	r3, r1
 80002e2:	817b      	strh	r3, [r7, #10]
 80002e4:	4613      	mov	r3, r2
 80002e6:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002e8:	2344      	movs	r3, #68	@ 0x44
 80002ea:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002ee:	2302      	movs	r3, #2
 80002f0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002f4:	897b      	ldrh	r3, [r7, #10]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002fc:	897b      	ldrh	r3, [r7, #10]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	b29b      	uxth	r3, r3
 8000302:	b2db      	uxtb	r3, r3
 8000304:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	4619      	mov	r1, r3
 8000312:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000316:	2364      	movs	r3, #100	@ 0x64
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2304      	movs	r3, #4
 800031c:	f002 fa70 	bl	8002800 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 8000320:	2344      	movs	r3, #68	@ 0x44
 8000322:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000326:	7a7b      	ldrb	r3, [r7, #9]
 8000328:	3302      	adds	r3, #2
 800032a:	b2db      	uxtb	r3, r3
 800032c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, addr, 2, 100);
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	6818      	ldr	r0, [r3, #0]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	4619      	mov	r1, r3
 800033a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800033e:	2364      	movs	r3, #100	@ 0x64
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2302      	movs	r3, #2
 8000344:	f002 fa5c 	bl	8002800 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	221f      	movs	r2, #31
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f005 f980 	bl	800565a <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress, result, 35, 100);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	6818      	ldr	r0, [r3, #0]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	4619      	mov	r1, r3
 8000364:	f107 0210 	add.w	r2, r7, #16
 8000368:	2364      	movs	r3, #100	@ 0x64
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2323      	movs	r3, #35	@ 0x23
 800036e:	f002 fb5f 	bl	8002a30 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000372:	2300      	movs	r3, #0
 8000374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000376:	e00c      	b.n	8000392 <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037a:	1cda      	adds	r2, r3, #3
 800037c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	440b      	add	r3, r1
 8000382:	3240      	adds	r2, #64	@ 0x40
 8000384:	443a      	add	r2, r7
 8000386:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800038a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800038c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800038e:	3301      	adds	r3, #1
 8000390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000392:	7a7b      	ldrb	r3, [r7, #9]
 8000394:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000396:	429a      	cmp	r2, r3
 8000398:	dbee      	blt.n	8000378 <BQ_ReadMABlockCommand+0xa4>
    }
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3740      	adds	r7, #64	@ 0x40
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80003b0:	f107 020c 	add.w	r2, r7, #12
 80003b4:	8879      	ldrh	r1, [r7, #2]
 80003b6:	2302      	movs	r3, #2
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff8b 	bl	80002d4 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003c2:	7b3b      	ldrb	r3, [r7, #12]
 80003c4:	461a      	mov	r2, r3
 80003c6:	89fb      	ldrh	r3, [r7, #14]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003cc:	7b7b      	ldrb	r3, [r7, #13]
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	b21a      	sxth	r2, r3
 80003d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b21b      	sxth	r3, r3
 80003da:	81fb      	strh	r3, [r7, #14]

    return result;
 80003dc:	89fb      	ldrh	r3, [r7, #14]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	460b      	mov	r3, r1
 80003f0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003f2:	f107 0208 	add.w	r2, r7, #8
 80003f6:	8879      	ldrh	r1, [r7, #2]
 80003f8:	2304      	movs	r3, #4
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f7ff ff6a 	bl	80002d4 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 8000404:	7a3b      	ldrb	r3, [r7, #8]
 8000406:	461a      	mov	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4313      	orrs	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 800040e:	7a7b      	ldrb	r3, [r7, #9]
 8000410:	021b      	lsls	r3, r3, #8
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	4313      	orrs	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000418:	7abb      	ldrb	r3, [r7, #10]
 800041a:	041b      	lsls	r3, r3, #16
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	4313      	orrs	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	061b      	lsls	r3, r3, #24
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	4313      	orrs	r3, r2
 800042a:	60fb      	str	r3, [r7, #12]

    return result;
 800042c:	68fb      	ldr	r3, [r7, #12]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7e9b      	ldrb	r3, [r3, #26]
 8000446:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	429a      	cmp	r2, r3
 8000450:	d003      	beq.n	800045a <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 8000452:	212b      	movs	r1, #43	@ 0x2b
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff1b 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000474:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000478:	b2db      	uxtb	r3, r3
 800047a:	78fa      	ldrb	r2, [r7, #3]
 800047c:	429a      	cmp	r2, r3
 800047e:	d003      	beq.n	8000488 <BQAction_SetManufacturingAllFet+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 8000480:	2122      	movs	r1, #34	@ 0x22
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ff04 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80004a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	78fa      	ldrb	r2, [r7, #3]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d003      	beq.n	80004b6 <BQAction_SetManufacturingFuse+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 80004ae:	2126      	movs	r1, #38	@ 0x26
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff feed 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80004d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	78fa      	ldrb	r2, [r7, #3]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d003      	beq.n	80004e4 <BQAction_SetCalibration+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004dc:	212d      	movs	r1, #45	@ 0x2d
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff fed6 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80004fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	78fa      	ldrb	r2, [r7, #3]
 8000506:	429a      	cmp	r2, r3
 8000508:	d003      	beq.n	8000512 <BQAction_SetManufacturingGauging+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 800050a:	2121      	movs	r1, #33	@ 0x21
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff febf 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	460b      	mov	r3, r1
 8000524:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800052c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	78fa      	ldrb	r2, [r7, #3]
 8000534:	429a      	cmp	r2, r3
 8000536:	d003      	beq.n	8000540 <BQAction_SetManufacturingPF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000538:	2124      	movs	r1, #36	@ 0x24
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fea8 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800055a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	78fa      	ldrb	r2, [r7, #3]
 8000562:	429a      	cmp	r2, r3
 8000564:	d003      	beq.n	800056e <BQAction_SetManufacturingLF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000566:	2123      	movs	r1, #35	@ 0x23
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f7ff fe91 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f893 	bl	80006aa <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode =  BMS->BQ_opStatus.bits.sec;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	7e5b      	ldrb	r3, [r3, #25]
 8000588:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000590:	e01a      	b.n	80005c8 <BQAction_TryUnsealedDevice+0x52>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 8000592:	f240 4114 	movw	r1, #1044	@ 0x414
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fe7a 	bl	8000290 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a0:	f001 f812 	bl	80015c8 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 80005a4:	f243 6172 	movw	r1, #13938	@ 0x3672
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe71 	bl	8000290 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 80005ae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005b2:	f001 f809 	bl	80015c8 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f877 	bl	80006aa <BQAction_UpdateOpStatus>
        securityMode = BMS->BQ_opStatus.bits.sec;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7e5b      	ldrb	r3, [r3, #25]
 80005c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d0e1      	beq.n	8000592 <BQAction_TryUnsealedDevice+0x1c>
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0de      	beq.n	8000592 <BQAction_TryUnsealedDevice+0x1c>
    }
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b088      	sub	sp, #32
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80005e6:	2157      	movs	r1, #87	@ 0x57
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fedb 	bl	80003a4 <BQ_ReadCommandAsShort>
 80005ee:	4603      	mov	r3, r0
 80005f0:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	8bfa      	ldrh	r2, [r7, #30]
 80005f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80005f8:	2155      	movs	r1, #85	@ 0x55
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fef3 	bl	80003e6 <BQ_ReadCommandAsInt>
 8000600:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	61da      	str	r2, [r3, #28]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 8000608:	2154      	movs	r1, #84	@ 0x54
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff feeb 	bl	80003e6 <BQ_ReadCommandAsInt>
 8000610:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	619a      	str	r2, [r3, #24]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000618:	2156      	movs	r1, #86	@ 0x56
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fee3 	bl	80003e6 <BQ_ReadCommandAsInt>
 8000620:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	621a      	str	r2, [r3, #32]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000628:	2103      	movs	r1, #3
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 fc00 	bl	8000e30 <I2CHelper_ReadRegisterAsShort>
 8000630:	4603      	mov	r3, r0
 8000632:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	84da      	strh	r2, [r3, #38]	@ 0x26
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryStatus);
 800063a:	2116      	movs	r1, #22
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 fbf7 	bl	8000e30 <I2CHelper_ReadRegisterAsShort>
 8000642:	4603      	mov	r3, r0
 8000644:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	89ba      	ldrh	r2, [r7, #12]
 800064a:	849a      	strh	r2, [r3, #36]	@ 0x24
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_GPIORead);
 800064c:	2148      	movs	r1, #72	@ 0x48
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fc0f 	bl	8000e72 <I2CHelper_ReadRegisterAsChar>
 8000654:	4603      	mov	r3, r0
 8000656:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7afa      	ldrb	r2, [r7, #11]
 800065c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000666:	2320      	movs	r3, #32
 8000668:	2171      	movs	r1, #113	@ 0x71
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff fe32 	bl	80002d4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS->BQ_daStatus2.all, 16);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8000676:	2310      	movs	r3, #16
 8000678:	2172      	movs	r1, #114	@ 0x72
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fe2a 	bl	80002d4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS->BQ_daStatus3.all, 18);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8000686:	2312      	movs	r3, #18
 8000688:	217b      	movs	r1, #123	@ 0x7b
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff fe22 	bl	80002d4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS->BQ_outCal.all, 32);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8000696:	2320      	movs	r3, #32
 8000698:	f24f 0181 	movw	r1, #61569	@ 0xf081
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff fe19 	bl	80002d4 <BQ_ReadMABlockCommand>
}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80006b8:	2320      	movs	r3, #32
 80006ba:	2171      	movs	r1, #113	@ 0x71
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fe09 	bl	80002d4 <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80006c2:	2154      	movs	r1, #84	@ 0x54
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff fe8e 	bl	80003e6 <BQ_ReadCommandAsInt>
 80006ca:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	619a      	str	r2, [r3, #24]
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006d2:	2157      	movs	r1, #87	@ 0x57
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe65 	bl	80003a4 <BQ_ReadCommandAsShort>
 80006da:	4603      	mov	r3, r0
 80006dc:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	897a      	ldrh	r2, [r7, #10]
 80006e2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <BQ_GetBoundaryCellVoltage>:
        return RELAX;
    }
}

BQ_BoundaryCellVoltage BQ_GetBoundaryCellVoltage(BQ_data* BMS)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    BQ_BoundaryCellVoltage result;
    result.Max = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	82fb      	strh	r3, [r7, #22]
    result.Min = 65535;
 80006f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fc:	82bb      	strh	r3, [r7, #20]

    uint16_t cells[6] =
        {
			BMS->BQ_daStatus1.sep.cell_voltage_1, // 1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
    uint16_t cells[6] =
 8000702:	813b      	strh	r3, [r7, #8]
			BMS->BQ_daStatus1.sep.cell_voltage_2, // 2
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    uint16_t cells[6] =
 8000708:	817b      	strh	r3, [r7, #10]
            BMS->BQ_daStatus1.sep.cell_voltage_3, // 3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
    uint16_t cells[6] =
 800070e:	81bb      	strh	r3, [r7, #12]
            BMS->BQ_daStatus1.sep.cell_voltage_4, // 4
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
    uint16_t cells[6] =
 8000714:	81fb      	strh	r3, [r7, #14]
            BMS->BQ_daStatus3.sep.cell_voltage_5, // 5
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
    uint16_t cells[6] =
 800071c:	823b      	strh	r3, [r7, #16]
            BMS->BQ_daStatus3.sep.cell_voltage_6  // 6
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
    uint16_t cells[6] =
 8000724:	827b      	strh	r3, [r7, #18]
        };

    for (int i = 0; i < 6; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
 800072a:	e022      	b.n	8000772 <BQ_GetBoundaryCellVoltage+0x86>
    {
        if (cells[i] > result.Max)
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	3320      	adds	r3, #32
 8000732:	443b      	add	r3, r7
 8000734:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000738:	8afb      	ldrh	r3, [r7, #22]
 800073a:	429a      	cmp	r2, r3
 800073c:	d906      	bls.n	800074c <BQ_GetBoundaryCellVoltage+0x60>
        {
            result.Max = cells[i];
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	3320      	adds	r3, #32
 8000744:	443b      	add	r3, r7
 8000746:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800074a:	82fb      	strh	r3, [r7, #22]
        }
        if (cells[i] < result.Min)
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	3320      	adds	r3, #32
 8000752:	443b      	add	r3, r7
 8000754:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000758:	8abb      	ldrh	r3, [r7, #20]
 800075a:	429a      	cmp	r2, r3
 800075c:	d206      	bcs.n	800076c <BQ_GetBoundaryCellVoltage+0x80>
        {
            result.Min = cells[i];
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	3320      	adds	r3, #32
 8000764:	443b      	add	r3, r7
 8000766:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800076a:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	3301      	adds	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	2b05      	cmp	r3, #5
 8000776:	ddd9      	ble.n	800072c <BQ_GetBoundaryCellVoltage+0x40>
        }
    }

    return result;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	2300      	movs	r3, #0
 800077e:	8b3a      	ldrh	r2, [r7, #24]
 8000780:	f362 030f 	bfi	r3, r2, #0, #16
 8000784:	8b7a      	ldrh	r2, [r7, #26]
 8000786:	f362 431f 	bfi	r3, r2, #16, #16
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	@ 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <BQ_GetSendData>:

void BQ_GetSendData(BQ_data* BMS){
 8000796:	b590      	push	{r4, r7, lr}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	BMS->data.voltage = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_Voltage);
 800079e:	2109      	movs	r1, #9
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 fb45 	bl	8000e30 <I2CHelper_ReadRegisterAsShort>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	815a      	strh	r2, [r3, #10]
	BMS->data.current = BMS->BQ_outCal.sep.current;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	@ 0x70
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	819a      	strh	r2, [r3, #12]
	BMS->data.balance = BQ_GetBoundaryCellVoltage(BMS);
 80007b8:	687c      	ldr	r4, [r7, #4]
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff96 	bl	80006ec <BQ_GetBoundaryCellVoltage>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	80e2      	strh	r2, [r4, #6]
 80007c6:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80007ca:	8123      	strh	r3, [r4, #8]
	BMS->data.cell_temperature = BMS->BQ_daStatus2.sep.ts1_temperature - KelvinToCelsius;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80007d2:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	825a      	strh	r2, [r3, #18]
	BMS->data.fet_temperature = BMS->BQ_daStatus2.sep.ts2_temperature - KelvinToCelsius;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80007e2:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	821a      	strh	r2, [r3, #16]
	BMS->data.percentage = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_RelativeStateOfCharge);
 80007ec:	210d      	movs	r1, #13
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 fb3f 	bl	8000e72 <I2CHelper_ReadRegisterAsChar>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	739a      	strb	r2, [r3, #14]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bd90      	pop	{r4, r7, pc}

08000804 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 800080a:	4a30      	ldr	r2, [pc, #192]	@ (80008cc <MX_CAN1_Init+0xc8>)
 800080c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800080e:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000810:	220a      	movs	r2, #10
 8000812:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081a:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000822:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000826:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 800082a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800082e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000832:	2200      	movs	r2, #0
 8000834:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000838:	2200      	movs	r2, #0
 800083a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 800083e:	2200      	movs	r2, #0
 8000840:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000844:	2201      	movs	r2, #1
 8000846:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 800084a:	2200      	movs	r2, #0
 800084c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800084e:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000850:	2200      	movs	r2, #0
 8000852:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000854:	481c      	ldr	r0, [pc, #112]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 8000856:	f000 fedb 	bl	8001610 <HAL_CAN_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 fd3c 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	canfil.FilterBank = 0;
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
    canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800086a:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
    canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
    canfil.FilterMaskIdHigh = 0 << 5;
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
    canfil.FilterMaskIdLow = 0 << 5;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
    canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 8000884:	2201      	movs	r2, #1
 8000886:	61da      	str	r2, [r3, #28]
    canfil.FilterActivation = ENABLE;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 800088a:	2201      	movs	r2, #1
 800088c:	621a      	str	r2, [r3, #32]
    canfil.SlaveStartFilterBank = 14;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 8000890:	220e      	movs	r2, #14
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24

    TxHeader.IDE = CAN_ID_EXT;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_CAN1_Init+0xd0>)
 8000896:	2204      	movs	r2, #4
 8000898:	609a      	str	r2, [r3, #8]
    TxHeader.ExtId = 0;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_CAN1_Init+0xd0>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_CAN1_Init+0xd0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_CAN1_Init+0xd0>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	611a      	str	r2, [r3, #16]

    HAL_CAN_ConfigFilter(&hcan1,&canfil);
 80008ac:	4908      	ldr	r1, [pc, #32]	@ (80008d0 <MX_CAN1_Init+0xcc>)
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 80008b0:	f000 ffa9 	bl	8001806 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 80008b6:	f001 f870 	bl	800199a <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 80008ba:	2103      	movs	r1, #3
 80008bc:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <MX_CAN1_Init+0xc4>)
 80008be:	f001 f980 	bl	8001bc2 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000070 	.word	0x20000070
 80008cc:	40006400 	.word	0x40006400
 80008d0:	20000048 	.word	0x20000048
 80008d4:	2000002c 	.word	0x2000002c

080008d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a2e      	ldr	r2, [pc, #184]	@ (80009b0 <HAL_CAN_MspInit+0xd8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d156      	bne.n	80009a8 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008fa:	4b2e      	ldr	r3, [pc, #184]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a2d      	ldr	r2, [pc, #180]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 8000900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b28      	ldr	r3, [pc, #160]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a27      	ldr	r2, [pc, #156]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b25      	ldr	r3, [pc, #148]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a21      	ldr	r2, [pc, #132]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <HAL_CAN_MspInit+0xdc>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000942:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000954:	2309      	movs	r3, #9
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000962:	f001 fced 	bl	8002340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000966:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000978:	2309      	movs	r3, #9
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <HAL_CAN_MspInit+0xe0>)
 8000984:	f001 fcdc 	bl	8002340 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 7, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2107      	movs	r1, #7
 800098c:	2013      	movs	r0, #19
 800098e:	f001 fc52 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000992:	2013      	movs	r0, #19
 8000994:	f001 fc6b 	bl	800226e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2108      	movs	r1, #8
 800099c:	2014      	movs	r0, #20
 800099e:	f001 fc4a 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009a2:	2014      	movs	r0, #20
 80009a4:	f001 fc63 	bl	800226e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	@ 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40006400 	.word	0x40006400
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000400 	.word	0x48000400

080009bc <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b38      	ldr	r3, [pc, #224]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a37      	ldr	r2, [pc, #220]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4b35      	ldr	r3, [pc, #212]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0e:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	4a25      	ldr	r2, [pc, #148]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a26:	4b23      	ldr	r3, [pc, #140]	@ (8000ab4 <MX_GPIO_Init+0xf8>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a38:	481f      	ldr	r0, [pc, #124]	@ (8000ab8 <MX_GPIO_Init+0xfc>)
 8000a3a:	f001 fdfb 	bl	8002634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4819      	ldr	r0, [pc, #100]	@ (8000abc <MX_GPIO_Init+0x100>)
 8000a56:	f001 fc73 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f001 fc62 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <MX_GPIO_Init+0xfc>)
 8000a96:	f001 fc53 	bl	8002340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	210c      	movs	r1, #12
 8000a9e:	2028      	movs	r0, #40	@ 0x28
 8000aa0:	f001 fbc9 	bl	8002236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa4:	2028      	movs	r0, #40	@ 0x28
 8000aa6:	f001 fbe2 	bl	800226e <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	@ 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	48000800 	.word	0x48000800

08000ac0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <MX_I2C1_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <MX_I2C1_Init+0x7c>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afa:	480e      	ldr	r0, [pc, #56]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000afc:	f001 fde4 	bl	80026c8 <HAL_I2C_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b06:	f000 fbe9 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4809      	ldr	r0, [pc, #36]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000b0e:	f003 f9ef 	bl	8003ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 fbe0 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_I2C1_Init+0x74>)
 8000b20:	f003 fa31 	bl	8003f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 fbd7 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000098 	.word	0x20000098
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	10d19ce4 	.word	0x10d19ce4

08000b40 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b46:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb8 <MX_I2C2_Init+0x78>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <MX_I2C2_Init+0x7c>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b7a:	480e      	ldr	r0, [pc, #56]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b7c:	f001 fda4 	bl	80026c8 <HAL_I2C_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b86:	f000 fba9 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4809      	ldr	r0, [pc, #36]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000b8e:	f003 f9af 	bl	8003ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b98:	f000 fba0 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_I2C2_Init+0x74>)
 8000ba0:	f003 f9f1 	bl	8003f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000baa:	f000 fb97 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000ec 	.word	0x200000ec
 8000bb8:	40005800 	.word	0x40005800
 8000bbc:	10d19ce4 	.word	0x10d19ce4

08000bc0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <MX_I2C3_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <MX_I2C3_Init+0x7c>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000be2:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000bfc:	f001 fd64 	bl	80026c8 <HAL_I2C_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c06:	f000 fb69 	bl	80012dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4809      	ldr	r0, [pc, #36]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000c0e:	f003 f96f 	bl	8003ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c18:	f000 fb60 	bl	80012dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_I2C3_Init+0x74>)
 8000c20:	f003 f9b1 	bl	8003f86 <HAL_I2CEx_ConfigDigitalFilter>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f000 fb57 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000140 	.word	0x20000140
 8000c38:	40005c00 	.word	0x40005c00
 8000c3c:	10d19ce4 	.word	0x10d19ce4

08000c40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0a6      	sub	sp, #152	@ 0x98
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	2260      	movs	r2, #96	@ 0x60
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 fcfa 	bl	800565a <memset>
  if(i2cHandle->Instance==I2C1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8000e18 <HAL_I2C_MspInit+0x1d8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d14c      	bne.n	8000d0a <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c70:	2340      	movs	r3, #64	@ 0x40
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 f833 	bl	8004ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c88:	f000 fb28 	bl	80012dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b63      	ldr	r3, [pc, #396]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	4a62      	ldr	r2, [pc, #392]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c98:	4b60      	ldr	r3, [pc, #384]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	623b      	str	r3, [r7, #32]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ca4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4855      	ldr	r0, [pc, #340]	@ (8000e20 <HAL_I2C_MspInit+0x1e0>)
 8000ccc:	f001 fb38 	bl	8002340 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd0:	4b52      	ldr	r3, [pc, #328]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd4:	4a51      	ldr	r2, [pc, #324]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000cd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	210a      	movs	r1, #10
 8000cec:	201f      	movs	r0, #31
 8000cee:	f001 faa2 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cf2:	201f      	movs	r0, #31
 8000cf4:	f001 fabb 	bl	800226e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2109      	movs	r1, #9
 8000cfc:	2020      	movs	r0, #32
 8000cfe:	f001 fa9a 	bl	8002236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d02:	2020      	movs	r0, #32
 8000d04:	f001 fab3 	bl	800226e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d08:	e082      	b.n	8000e10 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a45      	ldr	r2, [pc, #276]	@ (8000e24 <HAL_I2C_MspInit+0x1e4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d13c      	bne.n	8000d8e <HAL_I2C_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 ffe1 	bl	8004ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000d2c:	f000 fad6 	bl	80012dc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b3a      	ldr	r3, [pc, #232]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d34:	4a39      	ldr	r2, [pc, #228]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3c:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
 8000d46:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d48:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2312      	movs	r3, #18
 8000d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d62:	2304      	movs	r3, #4
 8000d64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	482c      	ldr	r0, [pc, #176]	@ (8000e20 <HAL_I2C_MspInit+0x1e0>)
 8000d70:	f001 fae6 	bl	8002340 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d74:	4b29      	ldr	r3, [pc, #164]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d78:	4a28      	ldr	r2, [pc, #160]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000d7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	697b      	ldr	r3, [r7, #20]
}
 8000d8c:	e040      	b.n	8000e10 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C3)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a25      	ldr	r2, [pc, #148]	@ (8000e28 <HAL_I2C_MspInit+0x1e8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d13b      	bne.n	8000e10 <HAL_I2C_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 ff9e 	bl	8004ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_I2C_MspInit+0x176>
      Error_Handler();
 8000db2:	f000 fa93 	bl	80012dc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a18      	ldr	r2, [pc, #96]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000de6:	2304      	movs	r3, #4
 8000de8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000df0:	4619      	mov	r1, r3
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <HAL_I2C_MspInit+0x1ec>)
 8000df4:	f001 faa4 	bl	8002340 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000dfe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <HAL_I2C_MspInit+0x1dc>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3798      	adds	r7, #152	@ 0x98
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000400 	.word	0x48000400
 8000e24:	40005800 	.word	0x40005800
 8000e28:	40005c00 	.word	0x40005c00
 8000e2c:	48000800 	.word	0x48000800

08000e30 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(BQ_data* BMS, uint8_t address)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2];
	I2CHelper_ReadRegister(BMS, address, buf, 2);
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	78f9      	ldrb	r1, [r7, #3]
 8000e42:	2302      	movs	r3, #2
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f826 	bl	8000e96 <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000e4e:	7b3b      	ldrb	r3, [r7, #12]
 8000e50:	461a      	mov	r2, r3
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000e58:	7b7b      	ldrb	r3, [r7, #13]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	81fb      	strh	r3, [r7, #14]

	return result;
 8000e68:	89fb      	ldrh	r3, [r7, #14]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(BQ_data* BMS, uint8_t address)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[1];
	I2CHelper_ReadRegister(BMS, address, buf, 1);
 8000e7e:	f107 020c 	add.w	r2, r7, #12
 8000e82:	78f9      	ldrb	r1, [r7, #3]
 8000e84:	2301      	movs	r3, #1
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f805 	bl	8000e96 <I2CHelper_ReadRegister>

	return buf[0];
 8000e8c:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(BQ_data* BMS, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af02      	add	r7, sp, #8
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	72fb      	strb	r3, [r7, #11]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, &address, 1, 100);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f107 020b 	add.w	r2, r7, #11
 8000eb8:	2364      	movs	r3, #100	@ 0x64
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f001 fc9f 	bl	8002800 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress,  receive_buffer, size, 100);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	791b      	ldrb	r3, [r3, #4]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	7abb      	ldrb	r3, [r7, #10]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2264      	movs	r2, #100	@ 0x64
 8000ed2:	9200      	str	r2, [sp, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	f001 fdab 	bl	8002a30 <HAL_I2C_Master_Receive>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <I2CHelper_CheckAddress>:
 * @brief scanning i2c devices and return first
 * @param i2c I2C_HandleTypeDef pointer
 * @return first i2c device
 */
void I2CHelper_CheckAddress(BQ_data* BMS)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, BMS->bq_deviceAddress, 3, 5);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f001 fe90 	bl	8002c1c <HAL_I2C_IsDeviceReady>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73bb      	strb	r3, [r7, #14]
	if (ret == HAL_BUSY){
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d103      	bne.n	8000f0e <I2CHelper_CheckAddress+0x2c>
		BMS->connection = NEED_RESET;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	751a      	strb	r2, [r3, #20]
		return;
 8000f0c:	e029      	b.n	8000f62 <I2CHelper_CheckAddress+0x80>
	}
	if (ret == HAL_OK)
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d103      	bne.n	8000f1c <I2CHelper_CheckAddress+0x3a>
	{
		BMS->connection = CONNECTED;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	751a      	strb	r2, [r3, #20]
		return;
 8000f1a:	e022      	b.n	8000f62 <I2CHelper_CheckAddress+0x80>
	}
	for (uint8_t i = 1; i < 255; i++)
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e019      	b.n	8000f56 <I2CHelper_CheckAddress+0x74>
	{
		ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, i, 3, 5);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	f001 fe75 	bl	8002c1c <HAL_I2C_IsDeviceReady>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73bb      	strb	r3, [r7, #14]
		if (ret == HAL_OK)
 8000f36:	7bbb      	ldrb	r3, [r7, #14]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d106      	bne.n	8000f4a <I2CHelper_CheckAddress+0x68>
		{
			BMS->bq_deviceAddress = i;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	711a      	strb	r2, [r3, #4]
			BMS->connection = CHANGED_ADDRESS;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	751a      	strb	r2, [r3, #20]
			return;
 8000f48:	e00b      	b.n	8000f62 <I2CHelper_CheckAddress+0x80>
		}
		HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fb3c 	bl	80015c8 <HAL_Delay>
	for (uint8_t i = 1; i < 255; i++)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	3301      	adds	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2bff      	cmp	r3, #255	@ 0xff
 8000f5a:	d1e2      	bne.n	8000f22 <I2CHelper_CheckAddress+0x40>
	}
	BMS->connection = INVALID_DEVICE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	751a      	strb	r2, [r3, #20]
}
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_GPIO_EXTI_Callback>:
bool first_transmit_3 = true;
#endif

bool status;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f78:	d113      	bne.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x3a>
		status = !status;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x44>)
 8000f96:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f9e:	f001 fb61 	bl	8002664 <HAL_GPIO_TogglePin>
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200002b4 	.word	0x200002b4
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb8:	f000 fa8a 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbc:	f000 f828 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f7ff fcfc 	bl	80009bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fc4:	f7ff fd7c 	bl	8000ac0 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000fc8:	f7ff fc1c 	bl	8000804 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000fcc:	f7ff fdb8 	bl	8000b40 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000fd0:	f7ff fdf6 	bl	8000bc0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	status = false;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <main+0x48>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
#ifdef USED_I2C1
	BQ_Init(&hi2c1);
 8000fda:	4809      	ldr	r0, [pc, #36]	@ (8001000 <main+0x4c>)
 8000fdc:	f7ff f8f6 	bl	80001cc <BQ_Init>
#endif
#ifdef USED_I2C2
  BQ_Init(&hi2c2);
#endif
#ifdef USED_I2C3
  BQ_Init(&hi2c3);
 8000fe0:	4808      	ldr	r0, [pc, #32]	@ (8001004 <main+0x50>)
 8000fe2:	f7ff f8f3 	bl	80001cc <BQ_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_Delay(200);
 8000fe6:	20c8      	movs	r0, #200	@ 0xc8
 8000fe8:	f000 faee 	bl	80015c8 <HAL_Delay>
#ifdef USED_I2C1
		BQ_and_can(&BMS_1);
 8000fec:	4806      	ldr	r0, [pc, #24]	@ (8001008 <main+0x54>)
 8000fee:	f000 f861 	bl	80010b4 <BQ_and_can>
#endif
#ifdef USED_I2C2
	  BQ_and_can(&BMS_2);
#endif
#ifdef USED_I2C3
	  BQ_and_can(&BMS_3);
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <main+0x58>)
 8000ff4:	f000 f85e 	bl	80010b4 <BQ_and_can>
		HAL_Delay(200);
 8000ff8:	bf00      	nop
 8000ffa:	e7f4      	b.n	8000fe6 <main+0x32>
 8000ffc:	200002b4 	.word	0x200002b4
 8001000:	20000098 	.word	0x20000098
 8001004:	20000140 	.word	0x20000140
 8001008:	20000194 	.word	0x20000194
 800100c:	20000224 	.word	0x20000224

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b096      	sub	sp, #88	@ 0x58
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2244      	movs	r2, #68	@ 0x44
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f004 fb1b 	bl	800565a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001032:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001036:	f003 f801 	bl	800403c <HAL_PWREx_ControlVoltageScaling>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001040:	f000 f94c 	bl	80012dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2310      	movs	r3, #16
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800105a:	2301      	movs	r3, #1
 800105c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800105e:	230a      	movs	r3, #10
 8001060:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001062:	2307      	movs	r3, #7
 8001064:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800106a:	2302      	movs	r3, #2
 800106c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4618      	mov	r0, r3
 8001074:	f003 f838 	bl	80040e8 <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800107e:	f000 f92d 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2303      	movs	r3, #3
 8001088:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fc38 	bl	8004910 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010a6:	f000 f919 	bl	80012dc <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3758      	adds	r7, #88	@ 0x58
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <BQ_and_can>:

/* USER CODE BEGIN 4 */
void BQ_and_can(BQ_data *BMS) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	I2CHelper_CheckAddress(BMS);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff10 	bl	8000ee2 <I2CHelper_CheckAddress>
	if (BMS->connection == CONNECTED) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7d1b      	ldrb	r3, [r3, #20]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 80a0 	bne.w	800120c <BQ_and_can+0x158>
		BQAction_UpdateData(BMS);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fa86 	bl	80005de <BQAction_UpdateData>
		BQ_GetSendData(BMS);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fb5f 	bl	8000796 <BQ_GetSendData>
#ifdef USED_I2C1
		if (BMS == &BMS_1) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a72      	ldr	r2, [pc, #456]	@ (80012a4 <BQ_and_can+0x1f0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d105      	bne.n	80010ec <BQ_and_can+0x38>
			stat4.vescID = 0x90;
 80010e0:	4b71      	ldr	r3, [pc, #452]	@ (80012a8 <BQ_and_can+0x1f4>)
 80010e2:	2290      	movs	r2, #144	@ 0x90
 80010e4:	701a      	strb	r2, [r3, #0]
			stat6.vescID = 0x90;
 80010e6:	4b71      	ldr	r3, [pc, #452]	@ (80012ac <BQ_and_can+0x1f8>)
 80010e8:	2290      	movs	r2, #144	@ 0x90
 80010ea:	701a      	strb	r2, [r3, #0]
			stat4.vescID = 0x91;
		  	stat6.vescID = 0x91;
		}
#endif
#ifdef USED_I2C3
		if(BMS == &BMS_3){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a70      	ldr	r2, [pc, #448]	@ (80012b0 <BQ_and_can+0x1fc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d105      	bne.n	8001100 <BQ_and_can+0x4c>
			stat4.vescID = 0x92;
 80010f4:	4b6c      	ldr	r3, [pc, #432]	@ (80012a8 <BQ_and_can+0x1f4>)
 80010f6:	2292      	movs	r2, #146	@ 0x92
 80010f8:	701a      	strb	r2, [r3, #0]
			stat6.vescID = 0x92;
 80010fa:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <BQ_and_can+0x1f8>)
 80010fc:	2292      	movs	r2, #146	@ 0x92
 80010fe:	701a      	strb	r2, [r3, #0]
		}
#endif
		stat4.pidPos = 0;
 8001100:	4b69      	ldr	r3, [pc, #420]	@ (80012a8 <BQ_and_can+0x1f4>)
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
		stat4.currentIn = (float) (BMS->data.current) / 1000;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001116:	eddf 6a67 	vldr	s13, [pc, #412]	@ 80012b4 <BQ_and_can+0x200>
 800111a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111e:	4b62      	ldr	r3, [pc, #392]	@ (80012a8 <BQ_and_can+0x1f4>)
 8001120:	edc3 7a03 	vstr	s15, [r3, #12]
		stat4.tempFet = (float) (BMS->data.fet_temperature) / 10;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	8a1b      	ldrh	r3, [r3, #16]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001130:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	4b5b      	ldr	r3, [pc, #364]	@ (80012a8 <BQ_and_can+0x1f4>)
 800113a:	edc3 7a01 	vstr	s15, [r3, #4]
		stat4.tempMotor = (float) (BMS->data.cell_temperature) / 10;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	8a5b      	ldrh	r3, [r3, #18]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800114a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800114e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001152:	4b55      	ldr	r3, [pc, #340]	@ (80012a8 <BQ_and_can+0x1f4>)
 8001154:	edc3 7a02 	vstr	s15, [r3, #8]
		VESC_convertStatus4ToRaw(&rawFrame, &stat4);
 8001158:	4953      	ldr	r1, [pc, #332]	@ (80012a8 <BQ_and_can+0x1f4>)
 800115a:	4857      	ldr	r0, [pc, #348]	@ (80012b8 <BQ_and_can+0x204>)
 800115c:	f004 f956 	bl	800540c <VESC_convertStatus4ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 8001160:	4b55      	ldr	r3, [pc, #340]	@ (80012b8 <BQ_and_can+0x204>)
 8001162:	2208      	movs	r2, #8
 8001164:	4955      	ldr	r1, [pc, #340]	@ (80012bc <BQ_and_can+0x208>)
 8001166:	4856      	ldr	r0, [pc, #344]	@ (80012c0 <BQ_and_can+0x20c>)
 8001168:	f000 f954 	bl	8001414 <vesc2halcan>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800116c:	4b55      	ldr	r3, [pc, #340]	@ (80012c4 <BQ_and_can+0x210>)
 800116e:	4a53      	ldr	r2, [pc, #332]	@ (80012bc <BQ_and_can+0x208>)
 8001170:	4953      	ldr	r1, [pc, #332]	@ (80012c0 <BQ_and_can+0x20c>)
 8001172:	4855      	ldr	r0, [pc, #340]	@ (80012c8 <BQ_and_can+0x214>)
 8001174:	f000 fc55 	bl	8001a22 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f000 fa25 	bl	80015c8 <HAL_Delay>
		stat6.adc1 = (float) (BMS->data.voltage)/1000;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	895b      	ldrh	r3, [r3, #10]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800118a:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80012b4 <BQ_and_can+0x200>
 800118e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001192:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <BQ_and_can+0x1f8>)
 8001194:	edc3 7a01 	vstr	s15, [r3, #4]
		stat6.adc2 = (float) (BMS->data.balance.Min)/1000;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	88db      	ldrh	r3, [r3, #6]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a4:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80012b4 <BQ_and_can+0x200>
 80011a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ac:	4b3f      	ldr	r3, [pc, #252]	@ (80012ac <BQ_and_can+0x1f8>)
 80011ae:	edc3 7a02 	vstr	s15, [r3, #8]
		stat6.adc3 = (float) (BMS->data.balance.Max)/1000;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	891b      	ldrh	r3, [r3, #8]
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80012b4 <BQ_and_can+0x200>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <BQ_and_can+0x1f8>)
 80011c8:	edc3 7a03 	vstr	s15, [r3, #12]
		stat6.ppm = (float) (BMS->data.percentage)/100;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7b9b      	ldrb	r3, [r3, #14]
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d8:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80012cc <BQ_and_can+0x218>
 80011dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e0:	4b32      	ldr	r3, [pc, #200]	@ (80012ac <BQ_and_can+0x1f8>)
 80011e2:	edc3 7a04 	vstr	s15, [r3, #16]
		VESC_convertStatus6ToRaw(&rawFrame, &stat6);
 80011e6:	4931      	ldr	r1, [pc, #196]	@ (80012ac <BQ_and_can+0x1f8>)
 80011e8:	4833      	ldr	r0, [pc, #204]	@ (80012b8 <BQ_and_can+0x204>)
 80011ea:	f004 f981 	bl	80054f0 <VESC_convertStatus6ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 80011ee:	4b32      	ldr	r3, [pc, #200]	@ (80012b8 <BQ_and_can+0x204>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	4932      	ldr	r1, [pc, #200]	@ (80012bc <BQ_and_can+0x208>)
 80011f4:	4832      	ldr	r0, [pc, #200]	@ (80012c0 <BQ_and_can+0x20c>)
 80011f6:	f000 f90d 	bl	8001414 <vesc2halcan>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80011fa:	4b32      	ldr	r3, [pc, #200]	@ (80012c4 <BQ_and_can+0x210>)
 80011fc:	4a2f      	ldr	r2, [pc, #188]	@ (80012bc <BQ_and_can+0x208>)
 80011fe:	4930      	ldr	r1, [pc, #192]	@ (80012c0 <BQ_and_can+0x20c>)
 8001200:	4831      	ldr	r0, [pc, #196]	@ (80012c8 <BQ_and_can+0x214>)
 8001202:	f000 fc0e 	bl	8001a22 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f000 f9de 	bl	80015c8 <HAL_Delay>
	}
	stat1.erpm = 0;
 800120c:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <BQ_and_can+0x21c>)
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
	stat1.dutyCycle = 0;
 8001214:	4b2e      	ldr	r3, [pc, #184]	@ (80012d0 <BQ_and_can+0x21c>)
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
	stat1.current = 1;
 800121c:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <BQ_and_can+0x21c>)
 800121e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001222:	609a      	str	r2, [r3, #8]
#ifdef USED_I2C1
	if(BMS == &BMS_1 && first_transmit_1){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <BQ_and_can+0x1f0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d119      	bne.n	8001260 <BQ_and_can+0x1ac>
 800122c:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <BQ_and_can+0x220>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d015      	beq.n	8001260 <BQ_and_can+0x1ac>
		first_transmit_1 = false;
 8001234:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <BQ_and_can+0x220>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
		stat1.vescID = 0x90;
 800123a:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <BQ_and_can+0x21c>)
 800123c:	2290      	movs	r2, #144	@ 0x90
 800123e:	701a      	strb	r2, [r3, #0]
		VESC_convertStatus1ToRaw(&rawFrame, &stat1);
 8001240:	4923      	ldr	r1, [pc, #140]	@ (80012d0 <BQ_and_can+0x21c>)
 8001242:	481d      	ldr	r0, [pc, #116]	@ (80012b8 <BQ_and_can+0x204>)
 8001244:	f004 f88c 	bl	8005360 <VESC_convertStatus1ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 8001248:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <BQ_and_can+0x204>)
 800124a:	2208      	movs	r2, #8
 800124c:	491b      	ldr	r1, [pc, #108]	@ (80012bc <BQ_and_can+0x208>)
 800124e:	481c      	ldr	r0, [pc, #112]	@ (80012c0 <BQ_and_can+0x20c>)
 8001250:	f000 f8e0 	bl	8001414 <vesc2halcan>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <BQ_and_can+0x210>)
 8001256:	4a19      	ldr	r2, [pc, #100]	@ (80012bc <BQ_and_can+0x208>)
 8001258:	4919      	ldr	r1, [pc, #100]	@ (80012c0 <BQ_and_can+0x20c>)
 800125a:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <BQ_and_can+0x214>)
 800125c:	f000 fbe1 	bl	8001a22 <HAL_CAN_AddTxMessage>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	}
#endif
#ifdef USED_I2C3
	if(BMS == &BMS_3 && first_transmit_3){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <BQ_and_can+0x1fc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d119      	bne.n	800129c <BQ_and_can+0x1e8>
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <BQ_and_can+0x224>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d015      	beq.n	800129c <BQ_and_can+0x1e8>
		first_transmit_3 = false;
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <BQ_and_can+0x224>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
		stat1.vescID = 0x92;
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <BQ_and_can+0x21c>)
 8001278:	2292      	movs	r2, #146	@ 0x92
 800127a:	701a      	strb	r2, [r3, #0]
		VESC_convertStatus1ToRaw(&rawFrame, &stat1);
 800127c:	4914      	ldr	r1, [pc, #80]	@ (80012d0 <BQ_and_can+0x21c>)
 800127e:	480e      	ldr	r0, [pc, #56]	@ (80012b8 <BQ_and_can+0x204>)
 8001280:	f004 f86e 	bl	8005360 <VESC_convertStatus1ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <BQ_and_can+0x204>)
 8001286:	2208      	movs	r2, #8
 8001288:	490c      	ldr	r1, [pc, #48]	@ (80012bc <BQ_and_can+0x208>)
 800128a:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <BQ_and_can+0x20c>)
 800128c:	f000 f8c2 	bl	8001414 <vesc2halcan>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <BQ_and_can+0x210>)
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <BQ_and_can+0x208>)
 8001294:	490a      	ldr	r1, [pc, #40]	@ (80012c0 <BQ_and_can+0x20c>)
 8001296:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <BQ_and_can+0x214>)
 8001298:	f000 fbc3 	bl	8001a22 <HAL_CAN_AddTxMessage>
	}
#endif
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000194 	.word	0x20000194
 80012a8:	200002c8 	.word	0x200002c8
 80012ac:	200002dc 	.word	0x200002dc
 80012b0:	20000224 	.word	0x20000224
 80012b4:	447a0000 	.word	0x447a0000
 80012b8:	200002f0 	.word	0x200002f0
 80012bc:	20000300 	.word	0x20000300
 80012c0:	2000002c 	.word	0x2000002c
 80012c4:	20000044 	.word	0x20000044
 80012c8:	20000070 	.word	0x20000070
 80012cc:	42c80000 	.word	0x42c80000
 80012d0:	200002b8 	.word	0x200002b8
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000001 	.word	0x20000001

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_Handler+0x8>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f2:	4a0e      	ldr	r2, [pc, #56]	@ (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012fa:	4b0c      	ldr	r3, [pc, #48]	@ (800132c <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	@ (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	@ 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <NMI_Handler+0x4>

08001338 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <MemManage_Handler+0x4>

08001348 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <UsageFault_Handler+0x4>

08001358 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f8ff 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <CAN1_TX_IRQHandler+0x10>)
 8001396:	f000 fc3a 	bl	8001c0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000070 	.word	0x20000070

080013a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <CAN1_RX0_IRQHandler+0x10>)
 80013aa:	f000 fc30 	bl	8001c0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000070 	.word	0x20000070

080013b8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <I2C1_EV_IRQHandler+0x10>)
 80013be:	f001 fd19 	bl	8002df4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000098 	.word	0x20000098

080013cc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <I2C1_ER_IRQHandler+0x10>)
 80013d2:	f001 fd29 	bl	8002e28 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000098 	.word	0x20000098

080013e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013e8:	f001 f956 	bl	8002698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <vesc2halcan>:
#include "vesc2halcan.h"

uint8_t vesc2halcan(CAN_TxHeaderTypeDef* txHeader, uint8_t* txData, size_t txDataSize, const VESC_RawFrame* vescRawFrame)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
	if (txDataSize < vescRawFrame->can_dlc){
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	791b      	ldrb	r3, [r3, #4]
 8001426:	461a      	mov	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4293      	cmp	r3, r2
 800142c:	d201      	bcs.n	8001432 <vesc2halcan+0x1e>
		return VESC2HALCAN_ERR_TXDATA;
 800142e:	2301      	movs	r3, #1
 8001430:	e020      	b.n	8001474 <vesc2halcan+0x60>
	}
	txHeader->ExtId = *(uint32_t*)vescRawFrame & 0x1FFFFFFF; //Identifier
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	605a      	str	r2, [r3, #4]
	txHeader->IDE = CAN_ID_EXT;//IdType
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2204      	movs	r2, #4
 8001442:	609a      	str	r2, [r3, #8]
	txHeader->RTR = CAN_RTR_DATA; //TxFrameType
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]

	// see FDCAN_data_length_code
	if (vescRawFrame->can_dlc >= 0u && vescRawFrame->can_dlc <= 8u){
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	2b08      	cmp	r3, #8
 8001450:	d80f      	bhi.n	8001472 <vesc2halcan+0x5e>
		txHeader->DLC = vescRawFrame->can_dlc;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	791b      	ldrb	r3, [r3, #4]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	611a      	str	r2, [r3, #16]
//	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
//	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
//	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	txHeader->MessageMarker = 0x0;

	memcpy(txData, vescRawFrame->rawData, vescRawFrame->can_dlc);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f103 0108 	add.w	r1, r3, #8
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	461a      	mov	r2, r3
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f004 f923 	bl	80056b4 <memcpy>

	return VESC2HALCAN_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <vesc2halcan+0x60>
		return VESC2HALCAN_ERR_DLC;
 8001472:	2303      	movs	r3, #3
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff ffb6 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopForever+0xe>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f004 f8df 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7ff fd81 	bl	8000fb4 <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014c0:	08005730 	.word	0x08005730
  ldr r2, =_sbss
 80014c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014c8:	2000030c 	.word	0x2000030c

080014cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014da:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_Init+0x3c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_Init+0x3c>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e6:	2003      	movs	r0, #3
 80014e8:	f000 fe9a 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 f80f 	bl	8001510 <HAL_InitTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	71fb      	strb	r3, [r7, #7]
 80014fc:	e001      	b.n	8001502 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fe:	f7ff fef3 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001502:	79fb      	ldrb	r3, [r7, #7]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_InitTick+0x6c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d023      	beq.n	800156c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_InitTick+0x70>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_InitTick+0x6c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fea5 	bl	800228a <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d809      	bhi.n	8001560 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 fe6f 	bl	8002236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_InitTick+0x74>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e007      	b.n	8001570 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e004      	b.n	8001570 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e001      	b.n	8001570 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000000c 	.word	0x2000000c
 8001580:	20000004 	.word	0x20000004
 8001584:	20000008 	.word	0x20000008

08001588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_IncTick+0x20>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x24>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <HAL_IncTick+0x24>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	2000000c 	.word	0x2000000c
 80015ac:	20000308 	.word	0x20000308

080015b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return uwTick;
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_GetTick+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000308 	.word	0x20000308

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff ffee 	bl	80015b0 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffde 	bl	80015b0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000000c 	.word	0x2000000c

08001610 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0ed      	b.n	80017fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff f952 	bl	80008d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001644:	f7ff ffb4 	bl	80015b0 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800164a:	e012      	b.n	8001672 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800164c:	f7ff ffb0 	bl	80015b0 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d90b      	bls.n	8001672 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2205      	movs	r2, #5
 800166a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0c5      	b.n	80017fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0e5      	beq.n	800164c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0202 	bic.w	r2, r2, #2
 800168e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff ff8e 	bl	80015b0 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001696:	e012      	b.n	80016be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001698:	f7ff ff8a 	bl	80015b0 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d90b      	bls.n	80016be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e09f      	b.n	80017fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e5      	bne.n	8001698 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e1b      	ldrb	r3, [r3, #24]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7e5b      	ldrb	r3, [r3, #25]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e9b      	ldrb	r3, [r3, #26]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0220 	orr.w	r2, r2, #32
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e007      	b.n	800174a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0220 	bic.w	r2, r2, #32
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7edb      	ldrb	r3, [r3, #27]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0210 	bic.w	r2, r2, #16
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e007      	b.n	8001774 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0210 	orr.w	r2, r2, #16
 8001772:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7f1b      	ldrb	r3, [r3, #28]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0208 	orr.w	r2, r2, #8
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e007      	b.n	800179e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0208 	bic.w	r2, r2, #8
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7f5b      	ldrb	r3, [r3, #29]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d108      	bne.n	80017b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0204 	orr.w	r2, r2, #4
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e007      	b.n	80017c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0204 	bic.w	r2, r2, #4
 80017c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	ea42 0103 	orr.w	r1, r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001806:	b480      	push	{r7}
 8001808:	b087      	sub	sp, #28
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800181e:	7cfb      	ldrb	r3, [r7, #19]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d003      	beq.n	800182c <HAL_CAN_ConfigFilter+0x26>
 8001824:	7cfb      	ldrb	r3, [r7, #19]
 8001826:	2b02      	cmp	r3, #2
 8001828:	f040 80aa 	bne.w	8001980 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2201      	movs	r2, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d123      	bne.n	80018ae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001888:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3248      	adds	r2, #72	@ 0x48
 800188e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a4:	6979      	ldr	r1, [r7, #20]
 80018a6:	3348      	adds	r3, #72	@ 0x48
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d122      	bne.n	80018fc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	431a      	orrs	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3248      	adds	r2, #72	@ 0x48
 80018dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018f2:	6979      	ldr	r1, [r7, #20]
 80018f4:	3348      	adds	r3, #72	@ 0x48
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001916:	e007      	b.n	8001928 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	43db      	mvns	r3, r3
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001942:	e007      	b.n	8001954 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d107      	bne.n	800196c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001972:	f023 0201 	bic.w	r2, r3, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e006      	b.n	800198e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
  }
}
 800198e:	4618      	mov	r0, r3
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d12e      	bne.n	8001a0c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019c6:	f7ff fdf3 	bl	80015b0 <HAL_GetTick>
 80019ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019cc:	e012      	b.n	80019f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ce:	f7ff fdef 	bl	80015b0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b0a      	cmp	r3, #10
 80019da:	d90b      	bls.n	80019f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2205      	movs	r2, #5
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e012      	b.n	8001a1a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1e5      	bne.n	80019ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e006      	b.n	8001a1a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b089      	sub	sp, #36	@ 0x24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a40:	7ffb      	ldrb	r3, [r7, #31]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d003      	beq.n	8001a4e <HAL_CAN_AddTxMessage+0x2c>
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f040 80ad 	bne.w	8001ba8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 8095 	beq.w	8001b98 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	0e1b      	lsrs	r3, r3, #24
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10d      	bne.n	8001aa6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	6809      	ldr	r1, [r1, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3318      	adds	r3, #24
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	440b      	add	r3, r1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e00f      	b.n	8001ac6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab6:	68f9      	ldr	r1, [r7, #12]
 8001ab8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001aba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3318      	adds	r3, #24
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	440b      	add	r3, r1
 8001ac4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3318      	adds	r3, #24
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	7d1b      	ldrb	r3, [r3, #20]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d111      	bne.n	8001b06 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	3304      	adds	r3, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	6811      	ldr	r1, [r2, #0]
 8001af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3318      	adds	r3, #24
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	440b      	add	r3, r1
 8001b02:	3304      	adds	r3, #4
 8001b04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3307      	adds	r3, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	061a      	lsls	r2, r3, #24
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3306      	adds	r3, #6
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3305      	adds	r3, #5
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	4313      	orrs	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	3204      	adds	r2, #4
 8001b26:	7812      	ldrb	r2, [r2, #0]
 8001b28:	4610      	mov	r0, r2
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	6811      	ldr	r1, [r2, #0]
 8001b2e:	ea43 0200 	orr.w	r2, r3, r0
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	440b      	add	r3, r1
 8001b38:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3303      	adds	r3, #3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	061a      	lsls	r2, r3, #24
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	041b      	lsls	r3, r3, #16
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	4610      	mov	r0, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	6811      	ldr	r1, [r2, #0]
 8001b64:	ea43 0200 	orr.w	r2, r3, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3318      	adds	r3, #24
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	6811      	ldr	r1, [r2, #0]
 8001b86:	f043 0201 	orr.w	r2, r3, #1
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e00e      	b.n	8001bb6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e006      	b.n	8001bb6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d002      	beq.n	8001be0 <HAL_CAN_ActivateNotification+0x1e>
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d109      	bne.n	8001bf4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6959      	ldr	r1, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e006      	b.n	8001c02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
  }
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b08a      	sub	sp, #40	@ 0x28
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d07c      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d023      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f983 	bl	8001f7c <HAL_CAN_TxMailbox0CompleteCallback>
 8001c76:	e016      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8a:	e00c      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	e002      	b.n	8001ca6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f989 	bl	8001fb8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d024      	beq.n	8001cfa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f963 	bl	8001f90 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cca:	e016      	b.n	8001cfa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cde:	e00c      	b.n	8001cfa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf2:	e002      	b.n	8001cfa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f969 	bl	8001fcc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d024      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f943 	bl	8001fa4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d1e:	e016      	b.n	8001d4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d32:	e00c      	b.n	8001d4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d46:	e002      	b.n	8001d4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f949 	bl	8001fe0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2210      	movs	r2, #16
 8001d70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f93a 	bl	8002008 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f921 	bl	8001ff4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00c      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00b      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2208      	movs	r2, #8
 8001df0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f91c 	bl	8002030 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	f003 0310 	and.w	r3, r3, #16
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f903 	bl	800201c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2210      	movs	r2, #16
 8001e30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f906 	bl	8002044 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2208      	movs	r2, #8
 8001e52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8ff 	bl	8002058 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d07b      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d072      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d043      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03e      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001edc:	2b60      	cmp	r3, #96	@ 0x60
 8001ede:	d02b      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x32a>
 8001ee0:	2b60      	cmp	r3, #96	@ 0x60
 8001ee2:	d82e      	bhi.n	8001f42 <HAL_CAN_IRQHandler+0x334>
 8001ee4:	2b50      	cmp	r3, #80	@ 0x50
 8001ee6:	d022      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x320>
 8001ee8:	2b50      	cmp	r3, #80	@ 0x50
 8001eea:	d82a      	bhi.n	8001f42 <HAL_CAN_IRQHandler+0x334>
 8001eec:	2b40      	cmp	r3, #64	@ 0x40
 8001eee:	d019      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x316>
 8001ef0:	2b40      	cmp	r3, #64	@ 0x40
 8001ef2:	d826      	bhi.n	8001f42 <HAL_CAN_IRQHandler+0x334>
 8001ef4:	2b30      	cmp	r3, #48	@ 0x30
 8001ef6:	d010      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x30c>
 8001ef8:	2b30      	cmp	r3, #48	@ 0x30
 8001efa:	d822      	bhi.n	8001f42 <HAL_CAN_IRQHandler+0x334>
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d002      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x2f8>
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d005      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f04:	e01d      	b.n	8001f42 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f0e:	e019      	b.n	8001f44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f18:	e014      	b.n	8001f44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f043 0320 	orr.w	r3, r3, #32
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f22:	e00f      	b.n	8001f44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f2c:	e00a      	b.n	8001f44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f36:	e005      	b.n	8001f44 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f40:	e000      	b.n	8001f44 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f42:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f52:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f87c 	bl	800206c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	@ 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4907      	ldr	r1, [pc, #28]	@ (800211c <__NVIC_EnableIRQ+0x38>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	@ 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	@ (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff29 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff3e 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff31 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffa2 	bl	80021dc <SysTick_Config>
 8002298:	4603      	mov	r3, r0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d005      	beq.n	80022c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e029      	b.n	800231a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 020e 	bic.w	r2, r2, #14
 80022d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f003 021c 	and.w	r2, r3, #28
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
    }
  }
  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002332:	b2db      	uxtb	r3, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234e:	e154      	b.n	80025fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8146 	beq.w	80025f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d005      	beq.n	8002380 <HAL_GPIO_Init+0x40>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d130      	bne.n	80023e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b6:	2201      	movs	r2, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0201 	and.w	r2, r3, #1
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d017      	beq.n	800241e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d123      	bne.n	8002472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	08da      	lsrs	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3208      	adds	r2, #8
 8002432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	6939      	ldr	r1, [r7, #16]
 800246e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0203 	and.w	r2, r3, #3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80a0 	beq.w	80025f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b4:	4b58      	ldr	r3, [pc, #352]	@ (8002618 <HAL_GPIO_Init+0x2d8>)
 80024b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b8:	4a57      	ldr	r2, [pc, #348]	@ (8002618 <HAL_GPIO_Init+0x2d8>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6613      	str	r3, [r2, #96]	@ 0x60
 80024c0:	4b55      	ldr	r3, [pc, #340]	@ (8002618 <HAL_GPIO_Init+0x2d8>)
 80024c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024cc:	4a53      	ldr	r2, [pc, #332]	@ (800261c <HAL_GPIO_Init+0x2dc>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024f6:	d019      	beq.n	800252c <HAL_GPIO_Init+0x1ec>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a49      	ldr	r2, [pc, #292]	@ (8002620 <HAL_GPIO_Init+0x2e0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_GPIO_Init+0x1e8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a48      	ldr	r2, [pc, #288]	@ (8002624 <HAL_GPIO_Init+0x2e4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d00d      	beq.n	8002524 <HAL_GPIO_Init+0x1e4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a47      	ldr	r2, [pc, #284]	@ (8002628 <HAL_GPIO_Init+0x2e8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <HAL_GPIO_Init+0x1e0>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a46      	ldr	r2, [pc, #280]	@ (800262c <HAL_GPIO_Init+0x2ec>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d101      	bne.n	800251c <HAL_GPIO_Init+0x1dc>
 8002518:	2304      	movs	r3, #4
 800251a:	e008      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 800251c:	2307      	movs	r3, #7
 800251e:	e006      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002520:	2303      	movs	r3, #3
 8002522:	e004      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002524:	2302      	movs	r3, #2
 8002526:	e002      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 800252c:	2300      	movs	r3, #0
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	f002 0203 	and.w	r2, r2, #3
 8002534:	0092      	lsls	r2, r2, #2
 8002536:	4093      	lsls	r3, r2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800253e:	4937      	ldr	r1, [pc, #220]	@ (800261c <HAL_GPIO_Init+0x2dc>)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254c:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002570:	4a2f      	ldr	r2, [pc, #188]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002576:	4b2e      	ldr	r3, [pc, #184]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800259a:	4a25      	ldr	r2, [pc, #148]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025a0:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025ca:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ee:	4a10      	ldr	r2, [pc, #64]	@ (8002630 <HAL_GPIO_Init+0x2f0>)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f aea3 	bne.w	8002350 <HAL_GPIO_Init+0x10>
  }
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40021000 	.word	0x40021000
 800261c:	40010000 	.word	0x40010000
 8002620:	48000400 	.word	0x48000400
 8002624:	48000800 	.word	0x48000800
 8002628:	48000c00 	.word	0x48000c00
 800262c:	48001000 	.word	0x48001000
 8002630:	40010400 	.word	0x40010400

08002634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	807b      	strh	r3, [r7, #2]
 8002640:	4613      	mov	r3, r2
 8002642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002644:	787b      	ldrb	r3, [r7, #1]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002650:	e002      	b.n	8002658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4013      	ands	r3, r2
 800267c:	041a      	lsls	r2, r3, #16
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	43d9      	mvns	r1, r3
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	400b      	ands	r3, r1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026a2:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ae:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fc56 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e08d      	b.n	80027f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe faa6 	bl	8000c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	@ 0x24
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	e006      	b.n	8002750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800274e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d108      	bne.n	800276a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	e007      	b.n	800277a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800278c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800279c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69d9      	ldr	r1, [r3, #28]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1a      	ldr	r2, [r3, #32]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b20      	cmp	r3, #32
 800281e:	f040 80fd 	bne.w	8002a1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_I2C_Master_Transmit+0x30>
 800282c:	2302      	movs	r3, #2
 800282e:	e0f6      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002838:	f7fe feba 	bl	80015b0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2319      	movs	r3, #25
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f001 f871 	bl	8003932 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0e1      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2221      	movs	r2, #33	@ 0x21
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2210      	movs	r2, #16
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	893a      	ldrh	r2, [r7, #8]
 800287a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2bff      	cmp	r3, #255	@ 0xff
 800288a:	d906      	bls.n	800289a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	22ff      	movs	r2, #255	@ 0xff
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002892:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e007      	b.n	80028aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d024      	beq.n	80028fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002a28 <HAL_I2C_Master_Transmit+0x228>)
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f001 fa6b 	bl	8003dd0 <I2C_TransferConfig>
 80028fa:	e066      	b.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	b2da      	uxtb	r2, r3
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <HAL_I2C_Master_Transmit+0x228>)
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f001 fa60 	bl	8003dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002910:	e05b      	b.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	6a39      	ldr	r1, [r7, #32]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f001 f864 	bl	80039e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e07b      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d034      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d130      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	@ 0x80
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 ffdd 	bl	8003932 <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e04d      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2bff      	cmp	r3, #255	@ 0xff
 800298a:	d90e      	bls.n	80029aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	22ff      	movs	r2, #255	@ 0xff
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	b2da      	uxtb	r2, r3
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f001 fa14 	bl	8003dd0 <I2C_TransferConfig>
 80029a8:	e00f      	b.n	80029ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	2300      	movs	r3, #0
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f001 fa03 	bl	8003dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d19e      	bne.n	8002912 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	6a39      	ldr	r1, [r7, #32]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f001 f84a 	bl	8003a72 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e01a      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2220      	movs	r2, #32
 80029ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <HAL_I2C_Master_Transmit+0x22c>)
 80029fc:	400b      	ands	r3, r1
 80029fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	80002000 	.word	0x80002000
 8002a2c:	fe00e800 	.word	0xfe00e800

08002a30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	817b      	strh	r3, [r7, #10]
 8002a40:	4613      	mov	r3, r2
 8002a42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	f040 80db 	bne.w	8002c08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Master_Receive+0x30>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e0d4      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a68:	f7fe fda2 	bl	80015b0 <HAL_GetTick>
 8002a6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 ff59 	bl	8003932 <I2C_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e0bf      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2222      	movs	r2, #34	@ 0x22
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2210      	movs	r2, #16
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	893a      	ldrh	r2, [r7, #8]
 8002aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2bff      	cmp	r3, #255	@ 0xff
 8002aba:	d90e      	bls.n	8002ada <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	4b52      	ldr	r3, [pc, #328]	@ (8002c14 <HAL_I2C_Master_Receive+0x1e4>)
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f001 f97c 	bl	8003dd0 <I2C_TransferConfig>
 8002ad8:	e06d      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	4b49      	ldr	r3, [pc, #292]	@ (8002c14 <HAL_I2C_Master_Receive+0x1e4>)
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f001 f96b 	bl	8003dd0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002afa:	e05c      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6a39      	ldr	r1, [r7, #32]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fff9 	bl	8003af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e07c      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d034      	beq.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d130      	bne.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fee7 	bl	8003932 <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e04d      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2bff      	cmp	r3, #255	@ 0xff
 8002b76:	d90e      	bls.n	8002b96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	22ff      	movs	r2, #255	@ 0xff
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f001 f91e 	bl	8003dd0 <I2C_TransferConfig>
 8002b94:	e00f      	b.n	8002bb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	8979      	ldrh	r1, [r7, #10]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f001 f90d 	bl	8003dd0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d19d      	bne.n	8002afc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	6a39      	ldr	r1, [r7, #32]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 ff54 	bl	8003a72 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e01a      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <HAL_I2C_Master_Receive+0x1e8>)
 8002be8:	400b      	ands	r3, r1
 8002bea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e000      	b.n	8002c0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
  }
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	80002400 	.word	0x80002400
 8002c18:	fe00e800 	.word	0xfe00e800

08002c1c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	607a      	str	r2, [r7, #4]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	f040 80d6 	bne.w	8002dea <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c4c:	d101      	bne.n	8002c52 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0cc      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_IsDeviceReady+0x44>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e0c5      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2224      	movs	r2, #36	@ 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_I2C_IsDeviceReady+0x72>
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c8c:	e006      	b.n	8002c9c <HAL_I2C_IsDeviceReady+0x80>
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fc85 	bl	80015b0 <HAL_GetTick>
 8002ca6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cd4:	e034      	b.n	8002d40 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d01a      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cde:	f7fe fc67 	bl	80015b0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d302      	bcc.n	8002cf4 <HAL_I2C_IsDeviceReady+0xd8>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e06b      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <HAL_I2C_IsDeviceReady+0x130>
 8002d46:	7fbb      	ldrb	r3, [r7, #30]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0c4      	beq.n	8002cd6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d01a      	beq.n	8002d90 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2120      	movs	r1, #32
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fde4 	bl	8003932 <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e03b      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e02d      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2120      	movs	r1, #32
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fdc9 	bl	8003932 <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e020      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2210      	movs	r2, #16
 8002db0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2220      	movs	r2, #32
 8002db8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f63f af56 	bhi.w	8002c76 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	4798      	blx	r3
  }
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00f      	beq.n	8002e6a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e68:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00f      	beq.n	8002e94 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f043 0208 	orr.w	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00f      	beq.n	8002ebe <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eac:	f043 0202 	orr.w	r2, r3, #2
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ebc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 030b 	and.w	r3, r3, #11
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002ece:	68f9      	ldr	r1, [r7, #12]
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fbd5 	bl	8003680 <I2C_ITError>
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
 8002f12:	4613      	mov	r3, r2
 8002f14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <I2C_Slave_ISR_IT+0x24>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0e2      	b.n	8003148 <I2C_Slave_ISR_IT+0x1ea>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d004      	beq.n	8002fa8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002f9e:	6939      	ldr	r1, [r7, #16]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f9b5 	bl	8003310 <I2C_ITSlaveCplt>
 8002fa6:	e0ca      	b.n	800313e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d04b      	beq.n	800304a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d046      	beq.n	800304a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d128      	bne.n	8003018 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b28      	cmp	r3, #40	@ 0x28
 8002fd0:	d108      	bne.n	8002fe4 <I2C_Slave_ISR_IT+0x86>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fd8:	d104      	bne.n	8002fe4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002fda:	6939      	ldr	r1, [r7, #16]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 fafb 	bl	80035d8 <I2C_ITListenCplt>
 8002fe2:	e031      	b.n	8003048 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b29      	cmp	r3, #41	@ 0x29
 8002fee:	d10e      	bne.n	800300e <I2C_Slave_ISR_IT+0xb0>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ff6:	d00a      	beq.n	800300e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fc54 	bl	80038ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f926 	bl	8003258 <I2C_ITSlaveSeqCplt>
 800300c:	e01c      	b.n	8003048 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003016:	e08f      	b.n	8003138 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2210      	movs	r2, #16
 800301e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <I2C_Slave_ISR_IT+0xdc>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003038:	d17e      	bne.n	8003138 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	4619      	mov	r1, r3
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fb1d 	bl	8003680 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003046:	e077      	b.n	8003138 <I2C_Slave_ISR_IT+0x1da>
 8003048:	e076      	b.n	8003138 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d02f      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02a      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d018      	beq.n	800309a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d14b      	bne.n	800313c <I2C_Slave_ISR_IT+0x1de>
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030aa:	d047      	beq.n	800313c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f8d3 	bl	8003258 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80030b2:	e043      	b.n	800313c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80030c8:	6939      	ldr	r1, [r7, #16]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f840 	bl	8003150 <I2C_ITAddrCplt>
 80030d0:	e035      	b.n	800313e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d030      	beq.n	800313e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d02b      	beq.n	800313e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d018      	beq.n	8003122 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003120:	e00d      	b.n	800313e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003128:	d002      	beq.n	8003130 <I2C_Slave_ISR_IT+0x1d2>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f891 	bl	8003258 <I2C_ITSlaveSeqCplt>
 8003136:	e002      	b.n	800313e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003138:	bf00      	nop
 800313a:	e000      	b.n	800313e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800313c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003166:	2b28      	cmp	r3, #40	@ 0x28
 8003168:	d16a      	bne.n	8003240 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	b29b      	uxth	r3, r3
 8003184:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003188:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003196:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80031a4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d138      	bne.n	8003220 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	09db      	lsrs	r3, r3, #7
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	89bb      	ldrh	r3, [r7, #12]
 80031b6:	4053      	eors	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f003 0306 	and.w	r3, r3, #6
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11c      	bne.n	80031fc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80031c2:	897b      	ldrh	r3, [r7, #10]
 80031c4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d13b      	bne.n	8003250 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2208      	movs	r2, #8
 80031e4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031ee:	89ba      	ldrh	r2, [r7, #12]
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fe86 	bl	8002f06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031fa:	e029      	b.n	8003250 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003200:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fe15 	bl	8003e34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003212:	89ba      	ldrh	r2, [r7, #12]
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fe74 	bl	8002f06 <HAL_I2C_AddrCallback>
}
 800321e:	e017      	b.n	8003250 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003220:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fe05 	bl	8003e34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003232:	89ba      	ldrh	r2, [r7, #12]
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fe64 	bl	8002f06 <HAL_I2C_AddrCallback>
}
 800323e:	e007      	b.n	8003250 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2208      	movs	r2, #8
 8003246:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00c      	b.n	80032a6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b29      	cmp	r3, #41	@ 0x29
 80032b0:	d112      	bne.n	80032d8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2228      	movs	r2, #40	@ 0x28
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2221      	movs	r2, #33	@ 0x21
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032c0:	2101      	movs	r1, #1
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fdb6 	bl	8003e34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fe04 	bl	8002ede <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032d6:	e017      	b.n	8003308 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e2:	d111      	bne.n	8003308 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2228      	movs	r2, #40	@ 0x28
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2222      	movs	r2, #34	@ 0x22
 80032f0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032f2:	2102      	movs	r1, #2
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fd9d 	bl	8003e34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff fdf5 	bl	8002ef2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003332:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2220      	movs	r2, #32
 800333a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800333c:	7afb      	ldrb	r3, [r7, #11]
 800333e:	2b21      	cmp	r3, #33	@ 0x21
 8003340:	d002      	beq.n	8003348 <I2C_ITSlaveCplt+0x38>
 8003342:	7afb      	ldrb	r3, [r7, #11]
 8003344:	2b29      	cmp	r3, #41	@ 0x29
 8003346:	d108      	bne.n	800335a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003348:	f248 0101 	movw	r1, #32769	@ 0x8001
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fd71 	bl	8003e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2221      	movs	r2, #33	@ 0x21
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
 8003358:	e019      	b.n	800338e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800335a:	7afb      	ldrb	r3, [r7, #11]
 800335c:	2b22      	cmp	r3, #34	@ 0x22
 800335e:	d002      	beq.n	8003366 <I2C_ITSlaveCplt+0x56>
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	2b2a      	cmp	r3, #42	@ 0x2a
 8003364:	d108      	bne.n	8003378 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003366:	f248 0102 	movw	r1, #32770	@ 0x8002
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fd62 	bl	8003e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2222      	movs	r2, #34	@ 0x22
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30
 8003376:	e00a      	b.n	800338e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003378:	7afb      	ldrb	r3, [r7, #11]
 800337a:	2b28      	cmp	r3, #40	@ 0x28
 800337c:	d107      	bne.n	800338e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800337e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fd56 	bl	8003e34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800339c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b89      	ldr	r3, [pc, #548]	@ (80035d0 <I2C_ITSlaveCplt+0x2c0>)
 80033aa:	400b      	ands	r3, r1
 80033ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa7d 	bl	80038ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01f      	beq.n	8003416 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	b29a      	uxth	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033e4:	e017      	b.n	8003416 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d006      	beq.n	8003416 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d020      	beq.n	8003462 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0304 	bic.w	r3, r3, #4
 8003426:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00c      	beq.n	8003462 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	f043 0204 	orr.w	r2, r3, #4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d049      	beq.n	8003516 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003488:	2b00      	cmp	r3, #0
 800348a:	d044      	beq.n	8003516 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d128      	bne.n	80034e8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b28      	cmp	r3, #40	@ 0x28
 80034a0:	d108      	bne.n	80034b4 <I2C_ITSlaveCplt+0x1a4>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034a8:	d104      	bne.n	80034b4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034aa:	6979      	ldr	r1, [r7, #20]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f893 	bl	80035d8 <I2C_ITListenCplt>
 80034b2:	e030      	b.n	8003516 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b29      	cmp	r3, #41	@ 0x29
 80034be:	d10e      	bne.n	80034de <I2C_ITSlaveCplt+0x1ce>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034c6:	d00a      	beq.n	80034de <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2210      	movs	r2, #16
 80034ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f9ec 	bl	80038ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff febe 	bl	8003258 <I2C_ITSlaveSeqCplt>
 80034dc:	e01b      	b.n	8003516 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2210      	movs	r2, #16
 80034e4:	61da      	str	r2, [r3, #28]
 80034e6:	e016      	b.n	8003516 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2210      	movs	r2, #16
 80034ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f4:	f043 0204 	orr.w	r2, r3, #4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <I2C_ITSlaveCplt+0x1fa>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003508:	d105      	bne.n	8003516 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8b5 	bl	8003680 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	2b00      	cmp	r3, #0
 800352a:	d010      	beq.n	800354e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8a4 	bl	8003680 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b28      	cmp	r3, #40	@ 0x28
 8003542:	d141      	bne.n	80035c8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003544:	6979      	ldr	r1, [r7, #20]
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f846 	bl	80035d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800354c:	e03c      	b.n	80035c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003556:	d014      	beq.n	8003582 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fe7d 	bl	8003258 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <I2C_ITSlaveCplt+0x2c4>)
 8003562:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff fcd1 	bl	8002f22 <HAL_I2C_ListenCpltCallback>
}
 8003580:	e022      	b.n	80035c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b22      	cmp	r3, #34	@ 0x22
 800358c:	d10e      	bne.n	80035ac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fca4 	bl	8002ef2 <HAL_I2C_SlaveRxCpltCallback>
}
 80035aa:	e00d      	b.n	80035c8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fc8b 	bl	8002ede <HAL_I2C_SlaveTxCpltCallback>
}
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	fe00e800 	.word	0xfe00e800
 80035d4:	ffff0000 	.word	0xffff0000

080035d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a25      	ldr	r2, [pc, #148]	@ (800367c <I2C_ITListenCplt+0xa4>)
 80035e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d022      	beq.n	8003654 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003654:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fbeb 	bl	8003e34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2210      	movs	r2, #16
 8003664:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fc57 	bl	8002f22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	ffff0000 	.word	0xffff0000

08003680 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003690:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a6d      	ldr	r2, [pc, #436]	@ (8003854 <I2C_ITError+0x1d4>)
 800369e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b28      	cmp	r3, #40	@ 0x28
 80036b6:	d005      	beq.n	80036c4 <I2C_ITError+0x44>
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b29      	cmp	r3, #41	@ 0x29
 80036bc:	d002      	beq.n	80036c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80036c2:	d10b      	bne.n	80036dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036c4:	2103      	movs	r1, #3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fbb4 	bl	8003e34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2228      	movs	r2, #40	@ 0x28
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a60      	ldr	r2, [pc, #384]	@ (8003858 <I2C_ITError+0x1d8>)
 80036d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80036da:	e030      	b.n	800373e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fba7 	bl	8003e34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8e1 	bl	80038ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b60      	cmp	r3, #96	@ 0x60
 80036f6:	d01f      	beq.n	8003738 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d114      	bne.n	8003738 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b10      	cmp	r3, #16
 800371a:	d109      	bne.n	8003730 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2210      	movs	r2, #16
 8003722:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2220      	movs	r2, #32
 8003736:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d039      	beq.n	80037c0 <I2C_ITError+0x140>
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b11      	cmp	r3, #17
 8003750:	d002      	beq.n	8003758 <I2C_ITError+0xd8>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b21      	cmp	r3, #33	@ 0x21
 8003756:	d133      	bne.n	80037c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003766:	d107      	bne.n	8003778 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003776:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	4618      	mov	r0, r3
 800377e:	f7fe fdd1 	bl	8002324 <HAL_DMA_GetState>
 8003782:	4603      	mov	r3, r0
 8003784:	2b01      	cmp	r3, #1
 8003786:	d017      	beq.n	80037b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	4a33      	ldr	r2, [pc, #204]	@ (800385c <I2C_ITError+0x1dc>)
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fd80 	bl	80022a2 <HAL_DMA_Abort_IT>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d04d      	beq.n	8003844 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037b2:	4610      	mov	r0, r2
 80037b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037b6:	e045      	b.n	8003844 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f851 	bl	8003860 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037be:	e041      	b.n	8003844 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d039      	beq.n	800383c <I2C_ITError+0x1bc>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b12      	cmp	r3, #18
 80037cc:	d002      	beq.n	80037d4 <I2C_ITError+0x154>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b22      	cmp	r3, #34	@ 0x22
 80037d2:	d133      	bne.n	800383c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037e2:	d107      	bne.n	80037f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fd93 	bl	8002324 <HAL_DMA_GetState>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d017      	beq.n	8003834 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003808:	4a14      	ldr	r2, [pc, #80]	@ (800385c <I2C_ITError+0x1dc>)
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fd42 	bl	80022a2 <HAL_DMA_Abort_IT>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d011      	beq.n	8003848 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800382e:	4610      	mov	r0, r2
 8003830:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003832:	e009      	b.n	8003848 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f813 	bl	8003860 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800383a:	e005      	b.n	8003848 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f80f 	bl	8003860 <I2C_TreatErrorCallback>
  }
}
 8003842:	e002      	b.n	800384a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003844:	bf00      	nop
 8003846:	e000      	b.n	800384a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003848:	bf00      	nop
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	ffff0000 	.word	0xffff0000
 8003858:	08002f5f 	.word	0x08002f5f
 800385c:	080038f7 	.word	0x080038f7

08003860 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b60      	cmp	r3, #96	@ 0x60
 8003872:	d10e      	bne.n	8003892 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fb5d 	bl	8002f4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003890:	e009      	b.n	80038a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fb48 	bl	8002f36 <HAL_I2C_ErrorCallback>
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d103      	bne.n	80038cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2200      	movs	r2, #0
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d007      	beq.n	80038ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	619a      	str	r2, [r3, #24]
  }
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	2200      	movs	r2, #0
 8003912:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	2200      	movs	r2, #0
 8003922:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff ff9b 	bl	8003860 <I2C_TreatErrorCallback>
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4613      	mov	r3, r2
 8003940:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003942:	e03b      	b.n	80039bc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	6839      	ldr	r1, [r7, #0]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f961 	bl	8003c10 <I2C_IsErrorOccurred>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e041      	b.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d02d      	beq.n	80039bc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003960:	f7fd fe26 	bl	80015b0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d302      	bcc.n	8003976 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d122      	bne.n	80039bc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699a      	ldr	r2, [r3, #24]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	429a      	cmp	r2, r3
 8003992:	d113      	bne.n	80039bc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e00f      	b.n	80039dc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4013      	ands	r3, r2
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d0b4      	beq.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039f0:	e033      	b.n	8003a5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f90a 	bl	8003c10 <I2C_IsErrorOccurred>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e031      	b.n	8003a6a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d025      	beq.n	8003a5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fd fdcf 	bl	80015b0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11a      	bne.n	8003a5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d013      	beq.n	8003a5a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e007      	b.n	8003a6a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d1c4      	bne.n	80039f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a7e:	e02f      	b.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f8c3 	bl	8003c10 <I2C_IsErrorOccurred>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e02d      	b.n	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a94:	f7fd fd8c 	bl	80015b0 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d11a      	bne.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d013      	beq.n	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	f043 0220 	orr.w	r2, r3, #32
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e007      	b.n	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d1c8      	bne.n	8003a80 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b08:	e071      	b.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f87e 	bl	8003c10 <I2C_IsErrorOccurred>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d13b      	bne.n	8003ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d138      	bne.n	8003ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d105      	bne.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d121      	bne.n	8003b9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2204      	movs	r2, #4
 8003b66:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003b7c:	400b      	ands	r3, r1
 8003b7e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	75fb      	strb	r3, [r7, #23]
 8003b9c:	e002      	b.n	8003ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003ba4:	f7fd fd04 	bl	80015b0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d302      	bcc.n	8003bba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d119      	bne.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d116      	bne.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d00f      	beq.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d002      	beq.n	8003c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d083      	beq.n	8003b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d068      	beq.n	8003d0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2210      	movs	r2, #16
 8003c42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c44:	e049      	b.n	8003cda <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d045      	beq.n	8003cda <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fd fcaf 	bl	80015b0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_IsErrorOccurred+0x54>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d13a      	bne.n	8003cda <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c86:	d121      	bne.n	8003ccc <I2C_IsErrorOccurred+0xbc>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8e:	d01d      	beq.n	8003ccc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d01a      	beq.n	8003ccc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ca4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ca6:	f7fd fc83 	bl	80015b0 <HAL_GetTick>
 8003caa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cac:	e00e      	b.n	8003ccc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cae:	f7fd fc7f 	bl	80015b0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b19      	cmp	r3, #25
 8003cba:	d907      	bls.n	8003ccc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f043 0320 	orr.w	r3, r3, #32
 8003cc2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cca:	e006      	b.n	8003cda <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d1e9      	bne.n	8003cae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d003      	beq.n	8003cf0 <I2C_IsErrorOccurred+0xe0>
 8003ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0aa      	beq.n	8003c46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d103      	bne.n	8003d00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f043 0308 	orr.w	r3, r3, #8
 8003d48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f043 0302 	orr.w	r3, r3, #2
 8003d6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01c      	beq.n	8003dbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff fd92 	bl	80038ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <I2C_IsErrorOccurred+0x1bc>)
 8003d96:	400b      	ands	r3, r1
 8003d98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	@ 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	fe00e800 	.word	0xfe00e800

08003dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	4613      	mov	r3, r2
 8003de0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003de8:	7a7b      	ldrb	r3, [r7, #9]
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003dfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	0d5b      	lsrs	r3, r3, #21
 8003e0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e0e:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <I2C_TransferConfig+0x60>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	43db      	mvns	r3, r3
 8003e14:	ea02 0103 	and.w	r1, r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	03ff63ff 	.word	0x03ff63ff

08003e34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00f      	beq.n	8003e6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003e54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e62:	2b28      	cmp	r3, #40	@ 0x28
 8003e64:	d003      	beq.n	8003e6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003e6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00f      	beq.n	8003e98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003e7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e8c:	2b28      	cmp	r3, #40	@ 0x28
 8003e8e:	d003      	beq.n	8003e98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003e96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	da03      	bge.n	8003ea8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ea8:	887b      	ldrh	r3, [r7, #2]
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d103      	bne.n	8003eb6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d103      	bne.n	8003ec4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f043 0320 	orr.w	r3, r3, #32
 8003ec2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d103      	bne.n	8003ed2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43da      	mvns	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d138      	bne.n	8003f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e032      	b.n	8003f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	@ 0x24
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d139      	bne.n	8004010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e033      	b.n	8004012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2224      	movs	r2, #36	@ 0x24
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004024:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <HAL_PWREx_GetVoltageRange+0x18>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800402c:	4618      	mov	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40007000 	.word	0x40007000

0800403c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404a:	d130      	bne.n	80040ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800404c:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004058:	d038      	beq.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800405a:	4b20      	ldr	r3, [pc, #128]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004062:	4a1e      	ldr	r2, [pc, #120]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004064:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004068:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800406a:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2232      	movs	r2, #50	@ 0x32
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	0c9b      	lsrs	r3, r3, #18
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004080:	e002      	b.n	8004088 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b01      	subs	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004088:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004094:	d102      	bne.n	800409c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f2      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409c:	4b0f      	ldr	r3, [pc, #60]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a8:	d110      	bne.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e00f      	b.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ba:	d007      	beq.n	80040cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040bc:	4b07      	ldr	r3, [pc, #28]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040c4:	4a05      	ldr	r2, [pc, #20]	@ (80040dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40007000 	.word	0x40007000
 80040e0:	20000004 	.word	0x20000004
 80040e4:	431bde83 	.word	0x431bde83

080040e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f000 bc02 	b.w	8004900 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fc:	4b96      	ldr	r3, [pc, #600]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004106:	4b94      	ldr	r3, [pc, #592]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80e4 	beq.w	80042e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <HAL_RCC_OscConfig+0x4c>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b0c      	cmp	r3, #12
 8004128:	f040 808b 	bne.w	8004242 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b01      	cmp	r3, #1
 8004130:	f040 8087 	bne.w	8004242 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004134:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_OscConfig+0x64>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e3d9      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	4b81      	ldr	r3, [pc, #516]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_RCC_OscConfig+0x7e>
 800415c:	4b7e      	ldr	r3, [pc, #504]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004164:	e005      	b.n	8004172 <HAL_RCC_OscConfig+0x8a>
 8004166:	4b7c      	ldr	r3, [pc, #496]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004172:	4293      	cmp	r3, r2
 8004174:	d223      	bcs.n	80041be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fd54 	bl	8004c28 <RCC_SetFlashLatencyFromMSIRange>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e3ba      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800418a:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a72      	ldr	r2, [pc, #456]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004190:	f043 0308 	orr.w	r3, r3, #8
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4b70      	ldr	r3, [pc, #448]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	496d      	ldr	r1, [pc, #436]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a8:	4b6b      	ldr	r3, [pc, #428]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	4968      	ldr	r1, [pc, #416]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
 80041bc:	e025      	b.n	800420a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041be:	4b66      	ldr	r3, [pc, #408]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a65      	ldr	r2, [pc, #404]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041c4:	f043 0308 	orr.w	r3, r3, #8
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b63      	ldr	r3, [pc, #396]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4960      	ldr	r1, [pc, #384]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041dc:	4b5e      	ldr	r3, [pc, #376]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	495b      	ldr	r1, [pc, #364]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fd14 	bl	8004c28 <RCC_SetFlashLatencyFromMSIRange>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e37a      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800420a:	f000 fc81 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 800420e:	4602      	mov	r2, r0
 8004210:	4b51      	ldr	r3, [pc, #324]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	4950      	ldr	r1, [pc, #320]	@ (800435c <HAL_RCC_OscConfig+0x274>)
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	fa22 f303 	lsr.w	r3, r2, r3
 8004226:	4a4e      	ldr	r2, [pc, #312]	@ (8004360 <HAL_RCC_OscConfig+0x278>)
 8004228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800422a:	4b4e      	ldr	r3, [pc, #312]	@ (8004364 <HAL_RCC_OscConfig+0x27c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd f96e 	bl	8001510 <HAL_InitTick>
 8004234:	4603      	mov	r3, r0
 8004236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d052      	beq.n	80042e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	e35e      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d032      	beq.n	80042b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800424a:	4b43      	ldr	r3, [pc, #268]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a42      	ldr	r2, [pc, #264]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004256:	f7fd f9ab 	bl	80015b0 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800425e:	f7fd f9a7 	bl	80015b0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e347      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004270:	4b39      	ldr	r3, [pc, #228]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800427c:	4b36      	ldr	r3, [pc, #216]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a35      	ldr	r2, [pc, #212]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004282:	f043 0308 	orr.w	r3, r3, #8
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b33      	ldr	r3, [pc, #204]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4930      	ldr	r1, [pc, #192]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004296:	4313      	orrs	r3, r2
 8004298:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800429a:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	492b      	ldr	r1, [pc, #172]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
 80042ae:	e01a      	b.n	80042e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042b0:	4b29      	ldr	r3, [pc, #164]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a28      	ldr	r2, [pc, #160]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042bc:	f7fd f978 	bl	80015b0 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042c4:	f7fd f974 	bl	80015b0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e314      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042d6:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1dc>
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d073      	beq.n	80043da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_OscConfig+0x21c>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d10e      	bne.n	800431c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b03      	cmp	r3, #3
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b14      	ldr	r3, [pc, #80]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d063      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2f0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d15f      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e2f1      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x24c>
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a0b      	ldr	r2, [pc, #44]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e025      	b.n	8004380 <HAL_RCC_OscConfig+0x298>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800433c:	d114      	bne.n	8004368 <HAL_RCC_OscConfig+0x280>
 800433e:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a05      	ldr	r2, [pc, #20]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b03      	ldr	r3, [pc, #12]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a02      	ldr	r2, [pc, #8]	@ (8004358 <HAL_RCC_OscConfig+0x270>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e013      	b.n	8004380 <HAL_RCC_OscConfig+0x298>
 8004358:	40021000 	.word	0x40021000
 800435c:	080056e8 	.word	0x080056e8
 8004360:	20000004 	.word	0x20000004
 8004364:	20000008 	.word	0x20000008
 8004368:	4ba0      	ldr	r3, [pc, #640]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a9f      	ldr	r2, [pc, #636]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 800436e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	4b9d      	ldr	r3, [pc, #628]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a9c      	ldr	r2, [pc, #624]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 800437a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800437e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd f912 	bl	80015b0 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fd f90e 	bl	80015b0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	@ 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e2ae      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a2:	4b92      	ldr	r3, [pc, #584]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x2a8>
 80043ae:	e014      	b.n	80043da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd f8fe 	bl	80015b0 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b8:	f7fd f8fa 	bl	80015b0 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b64      	cmp	r3, #100	@ 0x64
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e29a      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ca:	4b88      	ldr	r3, [pc, #544]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x2d0>
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d060      	beq.n	80044a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_OscConfig+0x310>
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	d119      	bne.n	8004426 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d116      	bne.n	8004426 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f8:	4b7c      	ldr	r3, [pc, #496]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_OscConfig+0x328>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e277      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b76      	ldr	r3, [pc, #472]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	4973      	ldr	r1, [pc, #460]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004424:	e040      	b.n	80044a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d023      	beq.n	8004476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442e:	4b6f      	ldr	r3, [pc, #444]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6e      	ldr	r2, [pc, #440]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd f8b9 	bl	80015b0 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004442:	f7fd f8b5 	bl	80015b0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e255      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004454:	4b65      	ldr	r3, [pc, #404]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b62      	ldr	r3, [pc, #392]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	495f      	ldr	r1, [pc, #380]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]
 8004474:	e018      	b.n	80044a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b5d      	ldr	r3, [pc, #372]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5c      	ldr	r2, [pc, #368]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 800447c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fd f895 	bl	80015b0 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448a:	f7fd f891 	bl	80015b0 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e231      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800449c:	4b53      	ldr	r3, [pc, #332]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f0      	bne.n	800448a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d03c      	beq.n	800452e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044bc:	4b4b      	ldr	r3, [pc, #300]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c2:	4a4a      	ldr	r2, [pc, #296]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd f870 	bl	80015b0 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d4:	f7fd f86c 	bl	80015b0 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e20c      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e6:	4b41      	ldr	r3, [pc, #260]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80044e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCC_OscConfig+0x3ec>
 80044f4:	e01b      	b.n	800452e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f6:	4b3d      	ldr	r3, [pc, #244]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80044f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fc:	4a3b      	ldr	r2, [pc, #236]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fd f853 	bl	80015b0 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450e:	f7fd f84f 	bl	80015b0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1ef      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004520:	4b32      	ldr	r3, [pc, #200]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ef      	bne.n	800450e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80a6 	beq.w	8004688 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800453c:	2300      	movs	r3, #0
 800453e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004540:	4b2a      	ldr	r3, [pc, #168]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10d      	bne.n	8004568 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454c:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004550:	4a26      	ldr	r2, [pc, #152]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 8004552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004556:	6593      	str	r3, [r2, #88]	@ 0x58
 8004558:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004564:	2301      	movs	r3, #1
 8004566:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004568:	4b21      	ldr	r3, [pc, #132]	@ (80045f0 <HAL_RCC_OscConfig+0x508>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d118      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004574:	4b1e      	ldr	r3, [pc, #120]	@ (80045f0 <HAL_RCC_OscConfig+0x508>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <HAL_RCC_OscConfig+0x508>)
 800457a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004580:	f7fd f816 	bl	80015b0 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004588:	f7fd f812 	bl	80015b0 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1b2      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_RCC_OscConfig+0x508>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d108      	bne.n	80045c0 <HAL_RCC_OscConfig+0x4d8>
 80045ae:	4b0f      	ldr	r3, [pc, #60]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b4:	4a0d      	ldr	r2, [pc, #52]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045be:	e029      	b.n	8004614 <HAL_RCC_OscConfig+0x52c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b05      	cmp	r3, #5
 80045c6:	d115      	bne.n	80045f4 <HAL_RCC_OscConfig+0x50c>
 80045c8:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ce:	4a07      	ldr	r2, [pc, #28]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80045d0:	f043 0304 	orr.w	r3, r3, #4
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045d8:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045de:	4a03      	ldr	r2, [pc, #12]	@ (80045ec <HAL_RCC_OscConfig+0x504>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045e8:	e014      	b.n	8004614 <HAL_RCC_OscConfig+0x52c>
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40007000 	.word	0x40007000
 80045f4:	4b9a      	ldr	r3, [pc, #616]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	4a99      	ldr	r2, [pc, #612]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004604:	4b96      	ldr	r3, [pc, #600]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	4a95      	ldr	r2, [pc, #596]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800460c:	f023 0304 	bic.w	r3, r3, #4
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d016      	beq.n	800464a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fc ffc8 	bl	80015b0 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004622:	e00a      	b.n	800463a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fc ffc4 	bl	80015b0 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e162      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463a:	4b89      	ldr	r3, [pc, #548]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ed      	beq.n	8004624 <HAL_RCC_OscConfig+0x53c>
 8004648:	e015      	b.n	8004676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fc ffb1 	bl	80015b0 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004650:	e00a      	b.n	8004668 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fc ffad 	bl	80015b0 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e14b      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004668:	4b7d      	ldr	r3, [pc, #500]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ed      	bne.n	8004652 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004676:	7ffb      	ldrb	r3, [r7, #31]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467c:	4b78      	ldr	r3, [pc, #480]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800467e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004680:	4a77      	ldr	r2, [pc, #476]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004686:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d03c      	beq.n	800470e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01c      	beq.n	80046d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800469c:	4b70      	ldr	r3, [pc, #448]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800469e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fc ff80 	bl	80015b0 <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b4:	f7fc ff7c 	bl	80015b0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e11c      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046c6:	4b66      	ldr	r3, [pc, #408]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80046c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ef      	beq.n	80046b4 <HAL_RCC_OscConfig+0x5cc>
 80046d4:	e01b      	b.n	800470e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046d6:	4b62      	ldr	r3, [pc, #392]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80046d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046dc:	4a60      	ldr	r2, [pc, #384]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80046de:	f023 0301 	bic.w	r3, r3, #1
 80046e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fc ff63 	bl	80015b0 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046ee:	f7fc ff5f 	bl	80015b0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0ff      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004700:	4b57      	ldr	r3, [pc, #348]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1ef      	bne.n	80046ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80f3 	beq.w	80048fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	2b02      	cmp	r3, #2
 800471e:	f040 80c9 	bne.w	80048b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004722:	4b4f      	ldr	r3, [pc, #316]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	429a      	cmp	r2, r3
 8004734:	d12c      	bne.n	8004790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	3b01      	subs	r3, #1
 8004742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d123      	bne.n	8004790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d11b      	bne.n	8004790 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d113      	bne.n	8004790 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	3b01      	subs	r3, #1
 8004776:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d109      	bne.n	8004790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	3b01      	subs	r3, #1
 800478a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d06b      	beq.n	8004868 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d062      	beq.n	800485c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004796:	4b32      	ldr	r3, [pc, #200]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0ac      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2d      	ldr	r2, [pc, #180]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80047ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b2:	f7fc fefd 	bl	80015b0 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fc fef9 	bl	80015b0 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e099      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047cc:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047d8:	4b21      	ldr	r3, [pc, #132]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	4b21      	ldr	r3, [pc, #132]	@ (8004864 <HAL_RCC_OscConfig+0x77c>)
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047e8:	3a01      	subs	r2, #1
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	4311      	orrs	r1, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047f2:	0212      	lsls	r2, r2, #8
 80047f4:	4311      	orrs	r1, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047fa:	0852      	lsrs	r2, r2, #1
 80047fc:	3a01      	subs	r2, #1
 80047fe:	0552      	lsls	r2, r2, #21
 8004800:	4311      	orrs	r1, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004806:	0852      	lsrs	r2, r2, #1
 8004808:	3a01      	subs	r2, #1
 800480a:	0652      	lsls	r2, r2, #25
 800480c:	4311      	orrs	r1, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004812:	06d2      	lsls	r2, r2, #27
 8004814:	430a      	orrs	r2, r1
 8004816:	4912      	ldr	r1, [pc, #72]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004818:	4313      	orrs	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800481c:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0f      	ldr	r2, [pc, #60]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004828:	4b0d      	ldr	r3, [pc, #52]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 800482e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004834:	f7fc febc 	bl	80015b0 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483c:	f7fc feb8 	bl	80015b0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e058      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800484e:	4b04      	ldr	r3, [pc, #16]	@ (8004860 <HAL_RCC_OscConfig+0x778>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800485a:	e050      	b.n	80048fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e04f      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
 8004860:	40021000 	.word	0x40021000
 8004864:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004868:	4b27      	ldr	r3, [pc, #156]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d144      	bne.n	80048fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004874:	4b24      	ldr	r3, [pc, #144]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a23      	ldr	r2, [pc, #140]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 800487a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800487e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004880:	4b21      	ldr	r3, [pc, #132]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a20      	ldr	r2, [pc, #128]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 8004886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800488a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800488c:	f7fc fe90 	bl	80015b0 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004894:	f7fc fe8c 	bl	80015b0 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e02c      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a6:	4b18      	ldr	r3, [pc, #96]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x7ac>
 80048b2:	e024      	b.n	80048fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b0c      	cmp	r3, #12
 80048b8:	d01f      	beq.n	80048fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b13      	ldr	r3, [pc, #76]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a12      	ldr	r2, [pc, #72]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 80048c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fc fe73 	bl	80015b0 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ce:	f7fc fe6f 	bl	80015b0 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e00f      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e0:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f0      	bne.n	80048ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	4905      	ldr	r1, [pc, #20]	@ (8004908 <HAL_RCC_OscConfig+0x820>)
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <HAL_RCC_OscConfig+0x824>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	60cb      	str	r3, [r1, #12]
 80048f8:	e001      	b.n	80048fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	feeefffc 	.word	0xfeeefffc

08004910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0e7      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004924:	4b75      	ldr	r3, [pc, #468]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d910      	bls.n	8004954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b72      	ldr	r3, [pc, #456]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 0207 	bic.w	r2, r3, #7
 800493a:	4970      	ldr	r1, [pc, #448]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b6e      	ldr	r3, [pc, #440]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0cf      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d010      	beq.n	8004982 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800496c:	429a      	cmp	r2, r3
 800496e:	d908      	bls.n	8004982 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004970:	4b63      	ldr	r3, [pc, #396]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4960      	ldr	r1, [pc, #384]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d04c      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004996:	4b5a      	ldr	r3, [pc, #360]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d121      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0a6      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ae:	4b54      	ldr	r3, [pc, #336]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d115      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e09a      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e08e      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e086      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049e6:	4b46      	ldr	r3, [pc, #280]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4943      	ldr	r1, [pc, #268]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f8:	f7fc fdda 	bl	80015b0 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a00:	f7fc fdd6 	bl	80015b0 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e06e      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	4b3a      	ldr	r3, [pc, #232]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 020c 	and.w	r2, r3, #12
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1eb      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d010      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	4b31      	ldr	r3, [pc, #196]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d208      	bcs.n	8004a56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b2e      	ldr	r3, [pc, #184]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	492b      	ldr	r1, [pc, #172]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a56:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d210      	bcs.n	8004a86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a64:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 0207 	bic.w	r2, r3, #7
 8004a6c:	4923      	ldr	r1, [pc, #140]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a74:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <HAL_RCC_ClockConfig+0x1ec>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e036      	b.n	8004af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a92:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4918      	ldr	r1, [pc, #96]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab0:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4910      	ldr	r1, [pc, #64]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ac4:	f000 f824 	bl	8004b10 <HAL_RCC_GetSysClockFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b0d      	ldr	r3, [pc, #52]	@ (8004b00 <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	490b      	ldr	r1, [pc, #44]	@ (8004b04 <HAL_RCC_ClockConfig+0x1f4>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	4a09      	ldr	r2, [pc, #36]	@ (8004b08 <HAL_RCC_ClockConfig+0x1f8>)
 8004ae2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <HAL_RCC_ClockConfig+0x1fc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fc fd11 	bl	8001510 <HAL_InitTick>
 8004aee:	4603      	mov	r3, r0
 8004af0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004af2:	7afb      	ldrb	r3, [r7, #11]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40022000 	.word	0x40022000
 8004b00:	40021000 	.word	0x40021000
 8004b04:	080056e8 	.word	0x080056e8
 8004b08:	20000004 	.word	0x20000004
 8004b0c:	20000008 	.word	0x20000008

08004b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b28:	4b3b      	ldr	r3, [pc, #236]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x34>
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d121      	bne.n	8004b82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d11e      	bne.n	8004b82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b44:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b50:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	e005      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b60:	4b2d      	ldr	r3, [pc, #180]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d102      	bne.n	8004b8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b88:	4b25      	ldr	r3, [pc, #148]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	e004      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b94:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d134      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0xac>
 8004bb4:	e005      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bb8:	617b      	str	r3, [r7, #20]
      break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bbc:	4b19      	ldr	r3, [pc, #100]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bbe:	617b      	str	r3, [r7, #20]
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	617b      	str	r3, [r7, #20]
      break;
 8004bc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc8:	4b13      	ldr	r3, [pc, #76]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bd6:	4b10      	ldr	r3, [pc, #64]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	fb03 f202 	mul.w	r2, r3, r2
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bee:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	0e5b      	lsrs	r3, r3, #25
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c08:	69bb      	ldr	r3, [r7, #24]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	080056f8 	.word	0x080056f8
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	007a1200 	.word	0x007a1200

08004c28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c40:	f7ff f9ee 	bl	8004020 <HAL_PWREx_GetVoltageRange>
 8004c44:	6178      	str	r0, [r7, #20]
 8004c46:	e014      	b.n	8004c72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c48:	4b25      	ldr	r3, [pc, #148]	@ (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4c:	4a24      	ldr	r2, [pc, #144]	@ (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c54:	4b22      	ldr	r3, [pc, #136]	@ (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c60:	f7ff f9de 	bl	8004020 <HAL_PWREx_GetVoltageRange>
 8004c64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c66:	4b1e      	ldr	r3, [pc, #120]	@ (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c78:	d10b      	bne.n	8004c92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b80      	cmp	r3, #128	@ 0x80
 8004c7e:	d919      	bls.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c84:	d902      	bls.n	8004c8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c86:	2302      	movs	r3, #2
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	e013      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	e010      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b80      	cmp	r3, #128	@ 0x80
 8004c96:	d902      	bls.n	8004c9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c98:	2303      	movs	r3, #3
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	e00a      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b80      	cmp	r3, #128	@ 0x80
 8004ca2:	d102      	bne.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e004      	b.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b70      	cmp	r3, #112	@ 0x70
 8004cae:	d101      	bne.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 0207 	bic.w	r2, r3, #7
 8004cbc:	4909      	ldr	r1, [pc, #36]	@ (8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cc4:	4b07      	ldr	r3, [pc, #28]	@ (8004ce4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d001      	beq.n	8004cd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	40022000 	.word	0x40022000

08004ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d031      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d0c:	d01a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d0e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d12:	d814      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d1c:	d10f      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a5c      	ldr	r2, [pc, #368]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d2a:	e00c      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa22 	bl	800517c <RCCEx_PLLSAI1_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	74fb      	strb	r3, [r7, #19]
      break;
 8004d42:	e000      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d4c:	4b51      	ldr	r3, [pc, #324]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	494e      	ldr	r1, [pc, #312]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d62:	e001      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	7cfb      	ldrb	r3, [r7, #19]
 8004d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 809e 	beq.w	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d76:	2300      	movs	r3, #0
 8004d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d7a:	4b46      	ldr	r3, [pc, #280]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00d      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d90:	4b40      	ldr	r3, [pc, #256]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	4a3f      	ldr	r2, [pc, #252]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da4:	60bb      	str	r3, [r7, #8]
 8004da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004da8:	2301      	movs	r3, #1
 8004daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dac:	4b3a      	ldr	r3, [pc, #232]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a39      	ldr	r2, [pc, #228]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004db8:	f7fc fbfa 	bl	80015b0 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dbe:	e009      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc0:	f7fc fbf6 	bl	80015b0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d902      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004dd2:	e005      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dd4:	4b30      	ldr	r3, [pc, #192]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ef      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004de0:	7cfb      	ldrb	r3, [r7, #19]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d15a      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004de6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01e      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d019      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e02:	4b24      	ldr	r3, [pc, #144]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e0e:	4b21      	ldr	r3, [pc, #132]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e14:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e24:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e2e:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d016      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fc fbb6 	bl	80015b0 <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e46:	e00b      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e48:	f7fc fbb2 	bl	80015b0 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d902      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	74fb      	strb	r3, [r7, #19]
            break;
 8004e5e:	e006      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e60:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0ec      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e74:	4b07      	ldr	r3, [pc, #28]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	4904      	ldr	r1, [pc, #16]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e8a:	e009      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	74bb      	strb	r3, [r7, #18]
 8004e90:	e006      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ea0:	7c7b      	ldrb	r3, [r7, #17]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eaa:	4a8c      	ldr	r2, [pc, #560]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ebe:	4b87      	ldr	r3, [pc, #540]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec4:	f023 0203 	bic.w	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	4983      	ldr	r1, [pc, #524]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	f023 020c 	bic.w	r2, r3, #12
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	497b      	ldr	r1, [pc, #492]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f02:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	4972      	ldr	r1, [pc, #456]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f24:	4b6d      	ldr	r3, [pc, #436]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	496a      	ldr	r1, [pc, #424]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f46:	4b65      	ldr	r3, [pc, #404]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f54:	4961      	ldr	r1, [pc, #388]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f68:	4b5c      	ldr	r3, [pc, #368]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	4959      	ldr	r1, [pc, #356]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f8a:	4b54      	ldr	r3, [pc, #336]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f90:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	4950      	ldr	r1, [pc, #320]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fac:	4b4b      	ldr	r3, [pc, #300]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fba:	4948      	ldr	r1, [pc, #288]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fce:	4b43      	ldr	r3, [pc, #268]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	493f      	ldr	r1, [pc, #252]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d028      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffe:	4937      	ldr	r1, [pc, #220]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800500e:	d106      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005010:	4b32      	ldr	r3, [pc, #200]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	4a31      	ldr	r2, [pc, #196]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800501a:	60d3      	str	r3, [r2, #12]
 800501c:	e011      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005026:	d10c      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	2101      	movs	r1, #1
 800502e:	4618      	mov	r0, r3
 8005030:	f000 f8a4 	bl	800517c <RCCEx_PLLSAI1_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800503e:	7cfb      	ldrb	r3, [r7, #19]
 8005040:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d028      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800504e:	4b23      	ldr	r3, [pc, #140]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505c:	491f      	ldr	r1, [pc, #124]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005068:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800506c:	d106      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800506e:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	4a1a      	ldr	r2, [pc, #104]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005074:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005078:	60d3      	str	r3, [r2, #12]
 800507a:	e011      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005080:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005084:	d10c      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3304      	adds	r3, #4
 800508a:	2101      	movs	r1, #1
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f875 	bl	800517c <RCCEx_PLLSAI1_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d02b      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ba:	4908      	ldr	r1, [pc, #32]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ca:	d109      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a02      	ldr	r2, [pc, #8]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050d6:	60d3      	str	r3, [r2, #12]
 80050d8:	e014      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050e8:	d10c      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3304      	adds	r3, #4
 80050ee:	2101      	movs	r1, #1
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 f843 	bl	800517c <RCCEx_PLLSAI1_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050fa:	7cfb      	ldrb	r3, [r7, #19]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01c      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005110:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005116:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511e:	4916      	ldr	r1, [pc, #88]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800512a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800512e:	d10c      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	2102      	movs	r1, #2
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f820 	bl	800517c <RCCEx_PLLSAI1_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005156:	4b08      	ldr	r3, [pc, #32]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005164:	4904      	ldr	r1, [pc, #16]	@ (8005178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800516c:	7cbb      	ldrb	r3, [r7, #18]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40021000 	.word	0x40021000

0800517c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800518a:	4b74      	ldr	r3, [pc, #464]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d018      	beq.n	80051c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005196:	4b71      	ldr	r3, [pc, #452]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0203 	and.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d10d      	bne.n	80051c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
       ||
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051ae:	4b6b      	ldr	r3, [pc, #428]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
       ||
 80051be:	429a      	cmp	r2, r3
 80051c0:	d047      	beq.n	8005252 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
 80051c6:	e044      	b.n	8005252 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d018      	beq.n	8005202 <RCCEx_PLLSAI1_Config+0x86>
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d825      	bhi.n	8005220 <RCCEx_PLLSAI1_Config+0xa4>
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d002      	beq.n	80051de <RCCEx_PLLSAI1_Config+0x62>
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d009      	beq.n	80051f0 <RCCEx_PLLSAI1_Config+0x74>
 80051dc:	e020      	b.n	8005220 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051de:	4b5f      	ldr	r3, [pc, #380]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11d      	bne.n	8005226 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ee:	e01a      	b.n	8005226 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051f0:	4b5a      	ldr	r3, [pc, #360]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d116      	bne.n	800522a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005200:	e013      	b.n	800522a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005202:	4b56      	ldr	r3, [pc, #344]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10f      	bne.n	800522e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800520e:	4b53      	ldr	r3, [pc, #332]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800521e:	e006      	b.n	800522e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
      break;
 8005224:	e004      	b.n	8005230 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005226:	bf00      	nop
 8005228:	e002      	b.n	8005230 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800522e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10d      	bne.n	8005252 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005236:	4b49      	ldr	r3, [pc, #292]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6819      	ldr	r1, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	3b01      	subs	r3, #1
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	430b      	orrs	r3, r1
 800524c:	4943      	ldr	r1, [pc, #268]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 800524e:	4313      	orrs	r3, r2
 8005250:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d17c      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005258:	4b40      	ldr	r3, [pc, #256]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3f      	ldr	r2, [pc, #252]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 800525e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005264:	f7fc f9a4 	bl	80015b0 <HAL_GetTick>
 8005268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800526a:	e009      	b.n	8005280 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800526c:	f7fc f9a0 	bl	80015b0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d902      	bls.n	8005280 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	73fb      	strb	r3, [r7, #15]
        break;
 800527e:	e005      	b.n	800528c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005280:	4b36      	ldr	r3, [pc, #216]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ef      	bne.n	800526c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d15f      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d110      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005298:	4b30      	ldr	r3, [pc, #192]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80052a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6892      	ldr	r2, [r2, #8]
 80052a8:	0211      	lsls	r1, r2, #8
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68d2      	ldr	r2, [r2, #12]
 80052ae:	06d2      	lsls	r2, r2, #27
 80052b0:	430a      	orrs	r2, r1
 80052b2:	492a      	ldr	r1, [pc, #168]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	610b      	str	r3, [r1, #16]
 80052b8:	e027      	b.n	800530a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d112      	bne.n	80052e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052c0:	4b26      	ldr	r3, [pc, #152]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80052c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6892      	ldr	r2, [r2, #8]
 80052d0:	0211      	lsls	r1, r2, #8
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6912      	ldr	r2, [r2, #16]
 80052d6:	0852      	lsrs	r2, r2, #1
 80052d8:	3a01      	subs	r2, #1
 80052da:	0552      	lsls	r2, r2, #21
 80052dc:	430a      	orrs	r2, r1
 80052de:	491f      	ldr	r1, [pc, #124]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
 80052e4:	e011      	b.n	800530a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052e6:	4b1d      	ldr	r3, [pc, #116]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052ee:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6892      	ldr	r2, [r2, #8]
 80052f6:	0211      	lsls	r1, r2, #8
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6952      	ldr	r2, [r2, #20]
 80052fc:	0852      	lsrs	r2, r2, #1
 80052fe:	3a01      	subs	r2, #1
 8005300:	0652      	lsls	r2, r2, #25
 8005302:	430a      	orrs	r2, r1
 8005304:	4915      	ldr	r1, [pc, #84]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005306:	4313      	orrs	r3, r2
 8005308:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800530a:	4b14      	ldr	r3, [pc, #80]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a13      	ldr	r2, [pc, #76]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005310:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005314:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7fc f94b 	bl	80015b0 <HAL_GetTick>
 800531a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800531c:	e009      	b.n	8005332 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800531e:	f7fc f947 	bl	80015b0 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d902      	bls.n	8005332 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	73fb      	strb	r3, [r7, #15]
          break;
 8005330:	e005      	b.n	800533e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0ef      	beq.n	800531e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4903      	ldr	r1, [pc, #12]	@ (800535c <RCCEx_PLLSAI1_Config+0x1e0>)
 800534e:	4313      	orrs	r3, r2
 8005350:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40021000 	.word	0x40021000

08005360 <VESC_convertStatus1ToRaw>:
	out->can_dlc = (int8_t)sizeof(VESC_CommandData_t);
	return true;
}

bool VESC_convertStatus1ToRaw(VESC_RawFrame* out, const VESC_Status_1* in)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781a      	ldrb	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2209      	movs	r2, #9
 8005376:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	709a      	strb	r2, [r3, #2]
 800537e:	2200      	movs	r2, #0
 8005380:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005384:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_1_DLEN;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2208      	movs	r2, #8
 800538a:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData32(out, _VESC_offset_Status_1[_VESC_OFFSETIDX_STATUS_1_ERPM], in->erpm, VESC_SCALE_STATUS_1_ERPM);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005396:	2300      	movs	r3, #0
 8005398:	3308      	adds	r3, #8
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	18d4      	adds	r4, r2, r3
 800539e:	ee17 0a90 	vmov	r0, s15
 80053a2:	f000 f935 	bl	8005610 <_VESC_b32_swap>
 80053a6:	4603      	mov	r3, r0
 80053a8:	6023      	str	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_1[_VESC_OFFSETIDX_STATUS_1_CURRENT], in->current, VESC_SCALE_STATUS_1_CURRENT);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80053b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80053b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053bc:	ee17 3a90 	vmov	r3, s15
 80053c0:	b219      	sxth	r1, r3
 80053c2:	2304      	movs	r3, #4
 80053c4:	3308      	adds	r3, #8
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	18d4      	adds	r4, r2, r3
 80053ca:	4608      	mov	r0, r1
 80053cc:	f000 f902 	bl	80055d4 <_VESC_b16_swap>
 80053d0:	4603      	mov	r3, r0
 80053d2:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_1[_VESC_OFFSETIDX_STATUS_1_DUTYCYCLE], in->dutyCycle, VESC_SCALE_STATUS_1_DUTYCYCLE);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80053da:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005408 <VESC_convertStatus1ToRaw+0xa8>
 80053de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053e6:	ee17 3a90 	vmov	r3, s15
 80053ea:	b219      	sxth	r1, r3
 80053ec:	2306      	movs	r3, #6
 80053ee:	3308      	adds	r3, #8
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	18d4      	adds	r4, r2, r3
 80053f4:	4608      	mov	r0, r1
 80053f6:	f000 f8ed 	bl	80055d4 <_VESC_b16_swap>
 80053fa:	4603      	mov	r3, r0
 80053fc:	8023      	strh	r3, [r4, #0]

	return true;
 80053fe:	2301      	movs	r3, #1
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bd90      	pop	{r4, r7, pc}
 8005408:	447a0000 	.word	0x447a0000

0800540c <VESC_convertStatus4ToRaw>:

	return true;
}

bool VESC_convertStatus4ToRaw(VESC_RawFrame* out, const VESC_Status_4* in)
{
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_4;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2210      	movs	r2, #16
 8005422:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	709a      	strb	r2, [r3, #2]
 800542a:	2200      	movs	r2, #0
 800542c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005430:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_4_DLEN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2208      	movs	r2, #8
 8005436:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPFET], in->tempFet, VESC_SCALE_STATUS_4_TEMPFET);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	edd3 7a01 	vldr	s15, [r3, #4]
 800543e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800544a:	ee17 3a90 	vmov	r3, s15
 800544e:	b219      	sxth	r1, r3
 8005450:	2300      	movs	r3, #0
 8005452:	3308      	adds	r3, #8
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	18d4      	adds	r4, r2, r3
 8005458:	4608      	mov	r0, r1
 800545a:	f000 f8bb 	bl	80055d4 <_VESC_b16_swap>
 800545e:	4603      	mov	r3, r0
 8005460:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPMOTOR], in->tempMotor, VESC_SCALE_STATUS_4_TEMPMOTOR);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	edd3 7a02 	vldr	s15, [r3, #8]
 8005468:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800546c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005474:	ee17 3a90 	vmov	r3, s15
 8005478:	b219      	sxth	r1, r3
 800547a:	2302      	movs	r3, #2
 800547c:	3308      	adds	r3, #8
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	18d4      	adds	r4, r2, r3
 8005482:	4608      	mov	r0, r1
 8005484:	f000 f8a6 	bl	80055d4 <_VESC_b16_swap>
 8005488:	4603      	mov	r3, r0
 800548a:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_CURRENTIN], in->currentIn, VESC_SCALE_STATUS_4_CURRENTIN);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005492:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800549a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800549e:	ee17 3a90 	vmov	r3, s15
 80054a2:	b219      	sxth	r1, r3
 80054a4:	2304      	movs	r3, #4
 80054a6:	3308      	adds	r3, #8
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	18d4      	adds	r4, r2, r3
 80054ac:	4608      	mov	r0, r1
 80054ae:	f000 f891 	bl	80055d4 <_VESC_b16_swap>
 80054b2:	4603      	mov	r3, r0
 80054b4:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_PIDPOS], in->pidPos, VESC_SCALE_STATUS_4_PIDPOS);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80054bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80054ec <VESC_convertStatus4ToRaw+0xe0>
 80054c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c8:	ee17 3a90 	vmov	r3, s15
 80054cc:	b219      	sxth	r1, r3
 80054ce:	2306      	movs	r3, #6
 80054d0:	3308      	adds	r3, #8
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	18d4      	adds	r4, r2, r3
 80054d6:	4608      	mov	r0, r1
 80054d8:	f000 f87c 	bl	80055d4 <_VESC_b16_swap>
 80054dc:	4603      	mov	r3, r0
 80054de:	8023      	strh	r3, [r4, #0]

	return true;
 80054e0:	2301      	movs	r3, #1
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}
 80054ea:	bf00      	nop
 80054ec:	42480000 	.word	0x42480000

080054f0 <VESC_convertStatus6ToRaw>:

	return true;
}

bool VESC_convertStatus6ToRaw(VESC_RawFrame* out, const VESC_Status_6* in)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_6;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	221c      	movs	r2, #28
 8005506:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	709a      	strb	r2, [r3, #2]
 800550e:	2200      	movs	r2, #0
 8005510:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005514:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_6_DLEN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2208      	movs	r2, #8
 800551a:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC1], in->adc1, VESC_SCALE_STATUS_6_ADC1);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005522:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80055d0 <VESC_convertStatus6ToRaw+0xe0>
 8005526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800552a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800552e:	ee17 3a90 	vmov	r3, s15
 8005532:	b219      	sxth	r1, r3
 8005534:	2300      	movs	r3, #0
 8005536:	3308      	adds	r3, #8
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	18d4      	adds	r4, r2, r3
 800553c:	4608      	mov	r0, r1
 800553e:	f000 f849 	bl	80055d4 <_VESC_b16_swap>
 8005542:	4603      	mov	r3, r0
 8005544:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC2], in->adc2, VESC_SCALE_STATUS_6_ADC2);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	edd3 7a02 	vldr	s15, [r3, #8]
 800554c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80055d0 <VESC_convertStatus6ToRaw+0xe0>
 8005550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005558:	ee17 3a90 	vmov	r3, s15
 800555c:	b219      	sxth	r1, r3
 800555e:	2302      	movs	r3, #2
 8005560:	3308      	adds	r3, #8
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	18d4      	adds	r4, r2, r3
 8005566:	4608      	mov	r0, r1
 8005568:	f000 f834 	bl	80055d4 <_VESC_b16_swap>
 800556c:	4603      	mov	r3, r0
 800556e:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC3], in->adc3, VESC_SCALE_STATUS_6_ADC3);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	edd3 7a03 	vldr	s15, [r3, #12]
 8005576:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80055d0 <VESC_convertStatus6ToRaw+0xe0>
 800557a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800557e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005582:	ee17 3a90 	vmov	r3, s15
 8005586:	b219      	sxth	r1, r3
 8005588:	2304      	movs	r3, #4
 800558a:	3308      	adds	r3, #8
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	18d4      	adds	r4, r2, r3
 8005590:	4608      	mov	r0, r1
 8005592:	f000 f81f 	bl	80055d4 <_VESC_b16_swap>
 8005596:	4603      	mov	r3, r0
 8005598:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_PPM], in->ppm, VESC_SCALE_STATUS_6_PPM);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	edd3 7a04 	vldr	s15, [r3, #16]
 80055a0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80055d0 <VESC_convertStatus6ToRaw+0xe0>
 80055a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ac:	ee17 3a90 	vmov	r3, s15
 80055b0:	b219      	sxth	r1, r3
 80055b2:	2306      	movs	r3, #6
 80055b4:	3308      	adds	r3, #8
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	18d4      	adds	r4, r2, r3
 80055ba:	4608      	mov	r0, r1
 80055bc:	f000 f80a 	bl	80055d4 <_VESC_b16_swap>
 80055c0:	4603      	mov	r3, r0
 80055c2:	8023      	strh	r3, [r4, #0]

	return true;
 80055c4:	2301      	movs	r3, #1
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd90      	pop	{r4, r7, pc}
 80055ce:	bf00      	nop
 80055d0:	447a0000 	.word	0x447a0000

080055d4 <_VESC_b16_swap>:
#include <libVescCan/VESC_Endian.h>

int16_t _VESC_b16_swap(int16_t val)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	80fb      	strh	r3, [r7, #6]
	int16_t ret = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0x00FF) << 8;
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	b21a      	sxth	r2, r3
 80055e8:	89fb      	ldrh	r3, [r7, #14]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0xFF00) >> 8;
 80055ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055f2:	121b      	asrs	r3, r3, #8
 80055f4:	b21b      	sxth	r3, r3
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	b21a      	sxth	r2, r3
 80055fa:	89fb      	ldrh	r3, [r7, #14]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	81fb      	strh	r3, [r7, #14]
	return ret;
 8005600:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <_VESC_b32_swap>:

int32_t _VESC_b32_swap(int32_t val)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0x000000FF) << 24;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	061b      	lsls	r3, r3, #24
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0x0000FF00) << 8;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0x00FF0000) >> 8;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	121b      	asrs	r3, r3, #8
 8005638:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0xFF000000) >> 24;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0e1a      	lsrs	r2, r3, #24
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4313      	orrs	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
	return ret;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <memset>:
 800565a:	4402      	add	r2, r0
 800565c:	4603      	mov	r3, r0
 800565e:	4293      	cmp	r3, r2
 8005660:	d100      	bne.n	8005664 <memset+0xa>
 8005662:	4770      	bx	lr
 8005664:	f803 1b01 	strb.w	r1, [r3], #1
 8005668:	e7f9      	b.n	800565e <memset+0x4>
	...

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4d0d      	ldr	r5, [pc, #52]	@ (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	@ (80056a8 <__libc_init_array+0x3c>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2600      	movs	r6, #0
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4d0b      	ldr	r5, [pc, #44]	@ (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	@ (80056b0 <__libc_init_array+0x44>)
 8005680:	f000 f826 	bl	80056d0 <_init>
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2600      	movs	r6, #0
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08005728 	.word	0x08005728
 80056a8:	08005728 	.word	0x08005728
 80056ac:	08005728 	.word	0x08005728
 80056b0:	0800572c 	.word	0x0800572c

080056b4 <memcpy>:
 80056b4:	440a      	add	r2, r1
 80056b6:	4291      	cmp	r1, r2
 80056b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056bc:	d100      	bne.n	80056c0 <memcpy+0xc>
 80056be:	4770      	bx	lr
 80056c0:	b510      	push	{r4, lr}
 80056c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ca:	4291      	cmp	r1, r2
 80056cc:	d1f9      	bne.n	80056c2 <memcpy+0xe>
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <_init>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr

080056dc <_fini>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr
