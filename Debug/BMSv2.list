
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800509c  0800509c  0000609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050dc  080050dc  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080050dc  080050dc  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050dc  080050dc  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050dc  080050dc  000060dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050e0  080050e0  000060e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080050e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000010  080050f4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080050f4  00007188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2b6  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000290c  00000000  00000000  000152f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00017c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000952  00000000  00000000  00018888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233e4  00000000  00000000  000191da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ccd  00000000  00000000  0003c5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca695  00000000  00000000  0004e28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f0  00000000  00000000  00118964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011bb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005084 	.word	0x08005084

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08005084 	.word	0x08005084

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b590      	push	{r4, r7, lr}
 80001ce:	b0c3      	sub	sp, #268	@ 0x10c
 80001d0:	af3e      	add	r7, sp, #248	@ 0xf8
 80001d2:	6078      	str	r0, [r7, #4]
    BMS_1.bq_i2c = i2c;
 80001d4:	4a61      	ldr	r2, [pc, #388]	@ (800035c <BQ_Init+0x190>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]
    if(i2c == &hi2c1){
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a60      	ldr	r2, [pc, #384]	@ (8000360 <BQ_Init+0x194>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d10b      	bne.n	80001fa <BQ_Init+0x2e>
    	__HAL_RCC_I2C1_CLK_ENABLE();
 80001e2:	4b60      	ldr	r3, [pc, #384]	@ (8000364 <BQ_Init+0x198>)
 80001e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001e6:	4a5f      	ldr	r2, [pc, #380]	@ (8000364 <BQ_Init+0x198>)
 80001e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80001ee:	4b5d      	ldr	r3, [pc, #372]	@ (8000364 <BQ_Init+0x198>)
 80001f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]

//    ("[BQ] Started", 12);
//    if (USE_SCANNER == 1)
//    {
#ifdef USE_SCANNER
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000368 <BQ_Init+0x19c>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	b299      	uxth	r1, r3
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	2203      	movs	r2, #3
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f002 fb60 	bl	80028cc <HAL_I2C_IsDeviceReady>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
	while (ret != HAL_OK)
 8000210:	e012      	b.n	8000238 <BQ_Init+0x6c>
	{
//            ("[BQ] device not founded", 23);
		ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 8000212:	4b55      	ldr	r3, [pc, #340]	@ (8000368 <BQ_Init+0x19c>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	b299      	uxth	r1, r3
 800021a:	2364      	movs	r3, #100	@ 0x64
 800021c:	2203      	movs	r2, #3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f002 fb54 	bl	80028cc <HAL_I2C_IsDeviceReady>
 8000224:	4603      	mov	r3, r0
 8000226:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022c:	f001 fd5c 	bl	8001ce8 <HAL_Delay>
	#ifdef debug
		if(ret == HAL_ERROR){
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d100      	bne.n	8000238 <BQ_Init+0x6c>
			__asm("nop");
 8000236:	bf00      	nop
	while (ret != HAL_OK)
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1e9      	bne.n	8000212 <BQ_Init+0x46>
#endif
//    }

    

    HAL_Delay(1500);
 800023e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000242:	f001 fd51 	bl	8001ce8 <HAL_Delay>
    BQAction_UpdateData(BMS_1);
 8000246:	4c45      	ldr	r4, [pc, #276]	@ (800035c <BQ_Init+0x190>)
 8000248:	4668      	mov	r0, sp
 800024a:	f104 0310 	add.w	r3, r4, #16
 800024e:	22f0      	movs	r2, #240	@ 0xf0
 8000250:	4619      	mov	r1, r3
 8000252:	f004 ff09 	bl	8005068 <memcpy>
 8000256:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800025a:	f000 fc95 	bl	8000b88 <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS_1);
 800025e:	4c3f      	ldr	r4, [pc, #252]	@ (800035c <BQ_Init+0x190>)
 8000260:	4668      	mov	r0, sp
 8000262:	f104 0310 	add.w	r3, r4, #16
 8000266:	22f0      	movs	r2, #240	@ 0xf0
 8000268:	4619      	mov	r1, r3
 800026a:	f004 fefd 	bl	8005068 <memcpy>
 800026e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000272:	f000 fc18 	bl	8000aa6 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS_1, false);
 8000276:	4c39      	ldr	r4, [pc, #228]	@ (800035c <BQ_Init+0x190>)
 8000278:	2300      	movs	r3, #0
 800027a:	933c      	str	r3, [sp, #240]	@ 0xf0
 800027c:	4668      	mov	r0, sp
 800027e:	f104 0310 	add.w	r3, r4, #16
 8000282:	22f0      	movs	r2, #240	@ 0xf0
 8000284:	4619      	mov	r1, r3
 8000286:	f004 feef 	bl	8005068 <memcpy>
 800028a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800028e:	f000 f99e 	bl	80005ce <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS_1, false);
 8000292:	4c32      	ldr	r4, [pc, #200]	@ (800035c <BQ_Init+0x190>)
 8000294:	2300      	movs	r3, #0
 8000296:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000298:	4668      	mov	r0, sp
 800029a:	f104 0310 	add.w	r3, r4, #16
 800029e:	22f0      	movs	r2, #240	@ 0xf0
 80002a0:	4619      	mov	r1, r3
 80002a2:	f004 fee1 	bl	8005068 <memcpy>
 80002a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002aa:	f000 f9be 	bl	800062a <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS_1, false);
 80002ae:	4c2b      	ldr	r4, [pc, #172]	@ (800035c <BQ_Init+0x190>)
 80002b0:	2300      	movs	r3, #0
 80002b2:	933c      	str	r3, [sp, #240]	@ 0xf0
 80002b4:	4668      	mov	r0, sp
 80002b6:	f104 0310 	add.w	r3, r4, #16
 80002ba:	22f0      	movs	r2, #240	@ 0xf0
 80002bc:	4619      	mov	r1, r3
 80002be:	f004 fed3 	bl	8005068 <memcpy>
 80002c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002c6:	f000 f9de 	bl	8000686 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS_1, true);
 80002ca:	4c24      	ldr	r4, [pc, #144]	@ (800035c <BQ_Init+0x190>)
 80002cc:	2301      	movs	r3, #1
 80002ce:	933c      	str	r3, [sp, #240]	@ 0xf0
 80002d0:	4668      	mov	r0, sp
 80002d2:	f104 0310 	add.w	r3, r4, #16
 80002d6:	22f0      	movs	r2, #240	@ 0xf0
 80002d8:	4619      	mov	r1, r3
 80002da:	f004 fec5 	bl	8005068 <memcpy>
 80002de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002e2:	f000 f9fe 	bl	80006e2 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS_1, true);
 80002e6:	4c1d      	ldr	r4, [pc, #116]	@ (800035c <BQ_Init+0x190>)
 80002e8:	2301      	movs	r3, #1
 80002ea:	933c      	str	r3, [sp, #240]	@ 0xf0
 80002ec:	4668      	mov	r0, sp
 80002ee:	f104 0310 	add.w	r3, r4, #16
 80002f2:	22f0      	movs	r2, #240	@ 0xf0
 80002f4:	4619      	mov	r1, r3
 80002f6:	f004 feb7 	bl	8005068 <memcpy>
 80002fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002fe:	f000 fa1e 	bl	800073e <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS_1, true);
 8000302:	4c16      	ldr	r4, [pc, #88]	@ (800035c <BQ_Init+0x190>)
 8000304:	2301      	movs	r3, #1
 8000306:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000308:	4668      	mov	r0, sp
 800030a:	f104 0310 	add.w	r3, r4, #16
 800030e:	22f0      	movs	r2, #240	@ 0xf0
 8000310:	4619      	mov	r1, r3
 8000312:	f004 fea9 	bl	8005068 <memcpy>
 8000316:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800031a:	f000 fa3e 	bl	800079a <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS_1, false);
 800031e:	4c0f      	ldr	r4, [pc, #60]	@ (800035c <BQ_Init+0x190>)
 8000320:	2300      	movs	r3, #0
 8000322:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000324:	4668      	mov	r0, sp
 8000326:	f104 0310 	add.w	r3, r4, #16
 800032a:	22f0      	movs	r2, #240	@ 0xf0
 800032c:	4619      	mov	r1, r3
 800032e:	f004 fe9b 	bl	8005068 <memcpy>
 8000332:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000336:	f000 f91c 	bl	8000572 <BQAction_SetLed>

    BQAction_UpdateData(BMS_1);
 800033a:	4c08      	ldr	r4, [pc, #32]	@ (800035c <BQ_Init+0x190>)
 800033c:	4668      	mov	r0, sp
 800033e:	f104 0310 	add.w	r3, r4, #16
 8000342:	22f0      	movs	r2, #240	@ 0xf0
 8000344:	4619      	mov	r1, r3
 8000346:	f004 fe8f 	bl	8005068 <memcpy>
 800034a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800034e:	f000 fc1b 	bl	8000b88 <BQAction_UpdateData>
    //BQ_ForceUpdateFlash();

    //BQ_BoundaryCellVoltage voltages = BQ_GetBoundaryCellVoltage();

//    ("[BQ] initialized", 16);
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bd90      	pop	{r4, r7, pc}
 800035a:	bf00      	nop
 800035c:	2000002c 	.word	0x2000002c
 8000360:	2000012c 	.word	0x2000012c
 8000364:	40021000 	.word	0x40021000
 8000368:	20000000 	.word	0x20000000

0800036c <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data BMS, uint16_t command)
{
 800036c:	b084      	sub	sp, #16
 800036e:	b580      	push	{r7, lr}
 8000370:	b084      	sub	sp, #16
 8000372:	af02      	add	r7, sp, #8
 8000374:	f107 0c10 	add.w	ip, r7, #16
 8000378:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 800037c:	2344      	movs	r3, #68	@ 0x44
 800037e:	713b      	strb	r3, [r7, #4]
 8000380:	2302      	movs	r3, #2
 8000382:	717b      	strb	r3, [r7, #5]
 8000384:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8000388:	b2db      	uxtb	r3, r3
 800038a:	71bb      	strb	r3, [r7, #6]
 800038c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8000390:	0a1b      	lsrs	r3, r3, #8
 8000392:	b29b      	uxth	r3, r3
 8000394:	b2db      	uxtb	r3, r3
 8000396:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000398:	6938      	ldr	r0, [r7, #16]
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <BQ_WriteMABlockCommand+0x50>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	b299      	uxth	r1, r3
 80003a2:	1d3a      	adds	r2, r7, #4
 80003a4:	2364      	movs	r3, #100	@ 0x64
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	2304      	movs	r3, #4
 80003aa:	f002 f881 	bl	80024b0 <HAL_I2C_Master_Transmit>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003b8:	b004      	add	sp, #16
 80003ba:	4770      	bx	lr
 80003bc:	20000000 	.word	0x20000000

080003c0 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80003c0:	b084      	sub	sp, #16
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b08e      	sub	sp, #56	@ 0x38
 80003c6:	af02      	add	r7, sp, #8
 80003c8:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 80003cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80003d0:	2344      	movs	r3, #68	@ 0x44
 80003d2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80003d6:	2302      	movs	r3, #2
 80003d8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80003dc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80003e6:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80003ea:	0a1b      	lsrs	r3, r3, #8
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80003f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80003f6:	4b28      	ldr	r3, [pc, #160]	@ (8000498 <BQ_ReadMABlockCommand+0xd8>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	b299      	uxth	r1, r3
 80003fe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000402:	2364      	movs	r3, #100	@ 0x64
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2304      	movs	r3, #4
 8000408:	f002 f852 	bl	80024b0 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 800040c:	2344      	movs	r3, #68	@ 0x44
 800040e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000412:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8000416:	3302      	adds	r3, #2
 8000418:	b2db      	uxtb	r3, r3
 800041a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 800041e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000420:	4b1d      	ldr	r3, [pc, #116]	@ (8000498 <BQ_ReadMABlockCommand+0xd8>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	b299      	uxth	r1, r3
 8000428:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800042c:	2364      	movs	r3, #100	@ 0x64
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2302      	movs	r3, #2
 8000432:	f002 f83d 	bl	80024b0 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	221f      	movs	r2, #31
 800043e:	2100      	movs	r1, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f004 fde5 	bl	8005010 <memset>
    HAL_I2C_Master_Receive(BMS.bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 8000446:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000448:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <BQ_ReadMABlockCommand+0xd8>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	b299      	uxth	r1, r3
 8000450:	463a      	mov	r2, r7
 8000452:	2364      	movs	r3, #100	@ 0x64
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2323      	movs	r3, #35	@ 0x23
 8000458:	f002 f942 	bl	80026e0 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 800045c:	2300      	movs	r3, #0
 800045e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000460:	e00d      	b.n	800047e <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000464:	1cda      	adds	r2, r3, #3
 8000466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000468:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800046c:	440b      	add	r3, r1
 800046e:	3230      	adds	r2, #48	@ 0x30
 8000470:	443a      	add	r2, r7
 8000472:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000476:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800047a:	3301      	adds	r3, #1
 800047c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800047e:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 8000482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000484:	429a      	cmp	r2, r3
 8000486:	dbec      	blt.n	8000462 <BQ_ReadMABlockCommand+0xa2>
    }
}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3730      	adds	r7, #48	@ 0x30
 800048e:	46bd      	mov	sp, r7
 8000490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000494:	b004      	add	sp, #16
 8000496:	4770      	bx	lr
 8000498:	20000000 	.word	0x20000000

0800049c <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data BMS, uint16_t command)
{
 800049c:	b084      	sub	sp, #16
 800049e:	b580      	push	{r7, lr}
 80004a0:	b0c2      	sub	sp, #264	@ 0x108
 80004a2:	af40      	add	r7, sp, #256	@ 0x100
 80004a4:	f107 0c10 	add.w	ip, r7, #16
 80004a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80004ac:	2302      	movs	r3, #2
 80004ae:	933e      	str	r3, [sp, #248]	@ 0xf8
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	933d      	str	r3, [sp, #244]	@ 0xf4
 80004b4:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80004b8:	933c      	str	r3, [sp, #240]	@ 0xf0
 80004ba:	4668      	mov	r0, sp
 80004bc:	f107 0320 	add.w	r3, r7, #32
 80004c0:	22f0      	movs	r2, #240	@ 0xf0
 80004c2:	4619      	mov	r1, r3
 80004c4:	f004 fdd0 	bl	8005068 <memcpy>
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ce:	f7ff ff77 	bl	80003c0 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	80fb      	strh	r3, [r7, #6]

    result = result | buf[0];
 80004d6:	793b      	ldrb	r3, [r7, #4]
 80004d8:	461a      	mov	r2, r3
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	4313      	orrs	r3, r2
 80004de:	80fb      	strh	r3, [r7, #6]
    result = result | (buf[1] << 8);
 80004e0:	797b      	ldrb	r3, [r7, #5]
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	b21a      	sxth	r2, r3
 80004e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	80fb      	strh	r3, [r7, #6]

    return result;
 80004f0:	88fb      	ldrh	r3, [r7, #6]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004fc:	b004      	add	sp, #16
 80004fe:	4770      	bx	lr

08000500 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data BMS, uint16_t command)
{
 8000500:	b084      	sub	sp, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	b0c2      	sub	sp, #264	@ 0x108
 8000506:	af40      	add	r7, sp, #256	@ 0x100
 8000508:	f107 0c10 	add.w	ip, r7, #16
 800050c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 8000510:	2304      	movs	r3, #4
 8000512:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000514:	463b      	mov	r3, r7
 8000516:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000518:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 800051c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800051e:	4668      	mov	r0, sp
 8000520:	f107 0320 	add.w	r3, r7, #32
 8000524:	22f0      	movs	r2, #240	@ 0xf0
 8000526:	4619      	mov	r1, r3
 8000528:	f004 fd9e 	bl	8005068 <memcpy>
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000532:	f7ff ff45 	bl	80003c0 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]

    result = result | (buf[0]);
 800053a:	783b      	ldrb	r3, [r7, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4313      	orrs	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
    result = result | (buf[1] << 8);
 8000544:	787b      	ldrb	r3, [r7, #1]
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4313      	orrs	r3, r2
 800054c:	607b      	str	r3, [r7, #4]
    result = result | (buf[2] << 16);
 800054e:	78bb      	ldrb	r3, [r7, #2]
 8000550:	041b      	lsls	r3, r3, #16
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	607b      	str	r3, [r7, #4]
    result = result | (buf[3] << 24);
 8000558:	78fb      	ldrb	r3, [r7, #3]
 800055a:	061b      	lsls	r3, r3, #24
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4313      	orrs	r3, r2
 8000560:	607b      	str	r3, [r7, #4]

    return result;
 8000562:	687b      	ldr	r3, [r7, #4]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800056e:	b004      	add	sp, #16
 8000570:	4770      	bx	lr

08000572 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data BMS, bool active)
{
 8000572:	b084      	sub	sp, #16
 8000574:	b580      	push	{r7, lr}
 8000576:	b0be      	sub	sp, #248	@ 0xf8
 8000578:	af3e      	add	r7, sp, #248	@ 0xf8
 800057a:	f107 0c08 	add.w	ip, r7, #8
 800057e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsLedEnabled(BMS) != active)
 8000582:	4668      	mov	r0, sp
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	22f0      	movs	r2, #240	@ 0xf0
 800058a:	4619      	mov	r1, r3
 800058c:	f004 fd6c 	bl	8005068 <memcpy>
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000596:	f000 ff35 	bl	8001404 <BQ_IsLedEnabled>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d00d      	beq.n	80005c2 <BQAction_SetLed+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 80005a6:	232b      	movs	r3, #43	@ 0x2b
 80005a8:	933c      	str	r3, [sp, #240]	@ 0xf0
 80005aa:	4668      	mov	r0, sp
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	22f0      	movs	r2, #240	@ 0xf0
 80005b2:	4619      	mov	r1, r3
 80005b4:	f004 fd58 	bl	8005068 <memcpy>
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005be:	f7ff fed5 	bl	800036c <BQ_WriteMABlockCommand>
    }
}
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ca:	b004      	add	sp, #16
 80005cc:	4770      	bx	lr

080005ce <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data BMS, bool active)
{
 80005ce:	b084      	sub	sp, #16
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0be      	sub	sp, #248	@ 0xf8
 80005d4:	af3e      	add	r7, sp, #248	@ 0xf8
 80005d6:	f107 0c08 	add.w	ip, r7, #8
 80005da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingAllFetEnabled(BMS) != active)
 80005de:	4668      	mov	r0, sp
 80005e0:	f107 0318 	add.w	r3, r7, #24
 80005e4:	22f0      	movs	r2, #240	@ 0xf0
 80005e6:	4619      	mov	r1, r3
 80005e8:	f004 fd3e 	bl	8005068 <memcpy>
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f2:	f000 fea8 	bl	8001346 <BQ_IsManufacturingAllFetEnabled>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80005fe:	4293      	cmp	r3, r2
 8000600:	d00d      	beq.n	800061e <BQAction_SetManufacturingAllFet+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 8000602:	2322      	movs	r3, #34	@ 0x22
 8000604:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000606:	4668      	mov	r0, sp
 8000608:	f107 0318 	add.w	r3, r7, #24
 800060c:	22f0      	movs	r2, #240	@ 0xf0
 800060e:	4619      	mov	r1, r3
 8000610:	f004 fd2a 	bl	8005068 <memcpy>
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061a:	f7ff fea7 	bl	800036c <BQ_WriteMABlockCommand>
    }
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000626:	b004      	add	sp, #16
 8000628:	4770      	bx	lr

0800062a <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data BMS, bool active)
{
 800062a:	b084      	sub	sp, #16
 800062c:	b580      	push	{r7, lr}
 800062e:	b0be      	sub	sp, #248	@ 0xf8
 8000630:	af3e      	add	r7, sp, #248	@ 0xf8
 8000632:	f107 0c08 	add.w	ip, r7, #8
 8000636:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingFuseEnabled(BMS) != active)
 800063a:	4668      	mov	r0, sp
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	22f0      	movs	r2, #240	@ 0xf0
 8000642:	4619      	mov	r1, r3
 8000644:	f004 fd10 	bl	8005068 <memcpy>
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064e:	f000 fe1b 	bl	8001288 <BQ_IsManufacturingFuseEnabled>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 800065a:	4293      	cmp	r3, r2
 800065c:	d00d      	beq.n	800067a <BQAction_SetManufacturingFuse+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 800065e:	2326      	movs	r3, #38	@ 0x26
 8000660:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000662:	4668      	mov	r0, sp
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	22f0      	movs	r2, #240	@ 0xf0
 800066a:	4619      	mov	r1, r3
 800066c:	f004 fcfc 	bl	8005068 <memcpy>
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000676:	f7ff fe79 	bl	800036c <BQ_WriteMABlockCommand>
    }
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000682:	b004      	add	sp, #16
 8000684:	4770      	bx	lr

08000686 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data BMS, bool active)
{
 8000686:	b084      	sub	sp, #16
 8000688:	b580      	push	{r7, lr}
 800068a:	b0be      	sub	sp, #248	@ 0xf8
 800068c:	af3e      	add	r7, sp, #248	@ 0xf8
 800068e:	f107 0c08 	add.w	ip, r7, #8
 8000692:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingCalibrationEnabled(BMS) != active)
 8000696:	4668      	mov	r0, sp
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	22f0      	movs	r2, #240	@ 0xf0
 800069e:	4619      	mov	r1, r3
 80006a0:	f004 fce2 	bl	8005068 <memcpy>
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006aa:	f000 fe72 	bl	8001392 <BQ_IsManufacturingCalibrationEnabled>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d00d      	beq.n	80006d6 <BQAction_SetCalibration+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80006ba:	232d      	movs	r3, #45	@ 0x2d
 80006bc:	933c      	str	r3, [sp, #240]	@ 0xf0
 80006be:	4668      	mov	r0, sp
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	22f0      	movs	r2, #240	@ 0xf0
 80006c6:	4619      	mov	r1, r3
 80006c8:	f004 fcce 	bl	8005068 <memcpy>
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d2:	f7ff fe4b 	bl	800036c <BQ_WriteMABlockCommand>
    }
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006de:	b004      	add	sp, #16
 80006e0:	4770      	bx	lr

080006e2 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data BMS, bool active)
{
 80006e2:	b084      	sub	sp, #16
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0be      	sub	sp, #248	@ 0xf8
 80006e8:	af3e      	add	r7, sp, #248	@ 0xf8
 80006ea:	f107 0c08 	add.w	ip, r7, #8
 80006ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingGaugingEnabled(BMS) != active)
 80006f2:	4668      	mov	r0, sp
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	22f0      	movs	r2, #240	@ 0xf0
 80006fa:	4619      	mov	r1, r3
 80006fc:	f004 fcb4 	bl	8005068 <memcpy>
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000706:	f000 fe31 	bl	800136c <BQ_IsManufacturingGaugingEnabled>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8000712:	4293      	cmp	r3, r2
 8000714:	d00d      	beq.n	8000732 <BQAction_SetManufacturingGauging+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 8000716:	2321      	movs	r3, #33	@ 0x21
 8000718:	933c      	str	r3, [sp, #240]	@ 0xf0
 800071a:	4668      	mov	r0, sp
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	22f0      	movs	r2, #240	@ 0xf0
 8000722:	4619      	mov	r1, r3
 8000724:	f004 fca0 	bl	8005068 <memcpy>
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072e:	f7ff fe1d 	bl	800036c <BQ_WriteMABlockCommand>
    }
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073a:	b004      	add	sp, #16
 800073c:	4770      	bx	lr

0800073e <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data BMS, bool active)
{
 800073e:	b084      	sub	sp, #16
 8000740:	b580      	push	{r7, lr}
 8000742:	b0be      	sub	sp, #248	@ 0xf8
 8000744:	af3e      	add	r7, sp, #248	@ 0xf8
 8000746:	f107 0c08 	add.w	ip, r7, #8
 800074a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingPermanentFailureEnabled(BMS) != active)
 800074e:	4668      	mov	r0, sp
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	22f0      	movs	r2, #240	@ 0xf0
 8000756:	4619      	mov	r1, r3
 8000758:	f004 fc86 	bl	8005068 <memcpy>
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000762:	f000 fe29 	bl	80013b8 <BQ_IsManufacturingPermanentFailureEnabled>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 800076e:	4293      	cmp	r3, r2
 8000770:	d00d      	beq.n	800078e <BQAction_SetManufacturingPF+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000772:	2324      	movs	r3, #36	@ 0x24
 8000774:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000776:	4668      	mov	r0, sp
 8000778:	f107 0318 	add.w	r3, r7, #24
 800077c:	22f0      	movs	r2, #240	@ 0xf0
 800077e:	4619      	mov	r1, r3
 8000780:	f004 fc72 	bl	8005068 <memcpy>
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800078a:	f7ff fdef 	bl	800036c <BQ_WriteMABlockCommand>
    }
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr

0800079a <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data BMS, bool active)
{
 800079a:	b084      	sub	sp, #16
 800079c:	b580      	push	{r7, lr}
 800079e:	b0be      	sub	sp, #248	@ 0xf8
 80007a0:	af3e      	add	r7, sp, #248	@ 0xf8
 80007a2:	f107 0c08 	add.w	ip, r7, #8
 80007a6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingLifetimeEnabled(BMS) != active)
 80007aa:	4668      	mov	r0, sp
 80007ac:	f107 0318 	add.w	r3, r7, #24
 80007b0:	22f0      	movs	r2, #240	@ 0xf0
 80007b2:	4619      	mov	r1, r3
 80007b4:	f004 fc58 	bl	8005068 <memcpy>
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007be:	f000 fe0e 	bl	80013de <BQ_IsManufacturingLifetimeEnabled>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d00d      	beq.n	80007ea <BQAction_SetManufacturingLF+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 80007ce:	2323      	movs	r3, #35	@ 0x23
 80007d0:	933c      	str	r3, [sp, #240]	@ 0xf0
 80007d2:	4668      	mov	r0, sp
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	22f0      	movs	r2, #240	@ 0xf0
 80007da:	4619      	mov	r1, r3
 80007dc:	f004 fc44 	bl	8005068 <memcpy>
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e6:	f7ff fdc1 	bl	800036c <BQ_WriteMABlockCommand>
    }
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr

080007f6 <BQAction_EnableDischarging>:
/**
 * @brief enable discharge fet and disable the rest
 * @param none
 */
bool BQAction_EnableDischarging(BQ_data BMS)
{
 80007f6:	b084      	sub	sp, #16
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0be      	sub	sp, #248	@ 0xf8
 80007fc:	af3e      	add	r7, sp, #248	@ 0xf8
 80007fe:	f107 0c08 	add.w	ip, r7, #8
 8000802:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_GetChargeMode(BMS) == DISCHARGE){
 8000806:	4668      	mov	r0, sp
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	22f0      	movs	r2, #240	@ 0xf0
 800080e:	4619      	mov	r1, r3
 8000810:	f004 fc2a 	bl	8005068 <memcpy>
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081a:	f000 fc43 	bl	80010a4 <BQ_GetChargeMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b02      	cmp	r3, #2
 8000822:	d101      	bne.n	8000828 <BQAction_EnableDischarging+0x32>
        return false;
 8000824:	2300      	movs	r3, #0
 8000826:	e0a9      	b.n	800097c <BQAction_EnableDischarging+0x186>
    }

    // turn off unused fets
    if (BQ_IsChargeFetTestEnabled(BMS)){
 8000828:	4668      	mov	r0, sp
 800082a:	f107 0318 	add.w	r3, r7, #24
 800082e:	22f0      	movs	r2, #240	@ 0xf0
 8000830:	4619      	mov	r1, r3
 8000832:	f004 fc19 	bl	8005068 <memcpy>
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083c:	f000 fd4a 	bl	80012d4 <BQ_IsChargeFetTestEnabled>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d00d      	beq.n	8000862 <BQAction_EnableDischarging+0x6c>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000846:	231f      	movs	r3, #31
 8000848:	933c      	str	r3, [sp, #240]	@ 0xf0
 800084a:	4668      	mov	r0, sp
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	22f0      	movs	r2, #240	@ 0xf0
 8000852:	4619      	mov	r1, r3
 8000854:	f004 fc08 	bl	8005068 <memcpy>
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085e:	f7ff fd85 	bl	800036c <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 8000862:	4668      	mov	r0, sp
 8000864:	f107 0318 	add.w	r3, r7, #24
 8000868:	22f0      	movs	r2, #240	@ 0xf0
 800086a:	4619      	mov	r1, r3
 800086c:	f004 fbfc 	bl	8005068 <memcpy>
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000876:	f000 fd40 	bl	80012fa <BQ_IsPreDischargeFetTestEnabled>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00d      	beq.n	800089c <BQAction_EnableDischarging+0xa6>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000880:	231c      	movs	r3, #28
 8000882:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000884:	4668      	mov	r0, sp
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	22f0      	movs	r2, #240	@ 0xf0
 800088c:	4619      	mov	r1, r3
 800088e:	f004 fbeb 	bl	8005068 <memcpy>
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000898:	f7ff fd68 	bl	800036c <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 800089c:	4668      	mov	r0, sp
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	22f0      	movs	r2, #240	@ 0xf0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f004 fbdf 	bl	8005068 <memcpy>
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b0:	f000 fd36 	bl	8001320 <BQ_IsPreChargeFetTestEnabled>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00d      	beq.n	80008d6 <BQAction_EnableDischarging+0xe0>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 80008ba:	231e      	movs	r3, #30
 80008bc:	933c      	str	r3, [sp, #240]	@ 0xf0
 80008be:	4668      	mov	r0, sp
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	22f0      	movs	r2, #240	@ 0xf0
 80008c6:	4619      	mov	r1, r3
 80008c8:	f004 fbce 	bl	8005068 <memcpy>
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d2:	f7ff fd4b 	bl	800036c <BQ_WriteMABlockCommand>
    }

    // turn on discharge
    if (!BQ_IsDischargeFetTestEnabled(BMS)){
 80008d6:	4668      	mov	r0, sp
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	22f0      	movs	r2, #240	@ 0xf0
 80008de:	4619      	mov	r1, r3
 80008e0:	f004 fbc2 	bl	8005068 <memcpy>
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ea:	f000 fce0 	bl	80012ae <BQ_IsDischargeFetTestEnabled>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f083 0301 	eor.w	r3, r3, #1
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00d      	beq.n	8000916 <BQAction_EnableDischarging+0x120>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80008fa:	2320      	movs	r3, #32
 80008fc:	933c      	str	r3, [sp, #240]	@ 0xf0
 80008fe:	4668      	mov	r0, sp
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	22f0      	movs	r2, #240	@ 0xf0
 8000906:	4619      	mov	r1, r3
 8000908:	f004 fbae 	bl	8005068 <memcpy>
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000912:	f7ff fd2b 	bl	800036c <BQ_WriteMABlockCommand>
    }

    HAL_Delay(1500);
 8000916:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800091a:	f001 f9e5 	bl	8001ce8 <HAL_Delay>

    if (BQ_GetChargeMode(BMS) != CHARGE){
 800091e:	4668      	mov	r0, sp
 8000920:	f107 0318 	add.w	r3, r7, #24
 8000924:	22f0      	movs	r2, #240	@ 0xf0
 8000926:	4619      	mov	r1, r3
 8000928:	f004 fb9e 	bl	8005068 <memcpy>
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000932:	f000 fbb7 	bl	80010a4 <BQ_GetChargeMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d001      	beq.n	8000940 <BQAction_EnableDischarging+0x14a>
        return true;
 800093c:	2301      	movs	r3, #1
 800093e:	e01d      	b.n	800097c <BQAction_EnableDischarging+0x186>
    }else{
        // turn off discharge
        if (BQ_IsDischargeFetTestEnabled(BMS)){
 8000940:	4668      	mov	r0, sp
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	22f0      	movs	r2, #240	@ 0xf0
 8000948:	4619      	mov	r1, r3
 800094a:	f004 fb8d 	bl	8005068 <memcpy>
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000954:	f000 fcab 	bl	80012ae <BQ_IsDischargeFetTestEnabled>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d00d      	beq.n	800097a <BQAction_EnableDischarging+0x184>
            BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 800095e:	2320      	movs	r3, #32
 8000960:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000962:	4668      	mov	r0, sp
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	22f0      	movs	r2, #240	@ 0xf0
 800096a:	4619      	mov	r1, r3
 800096c:	f004 fb7c 	bl	8005068 <memcpy>
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000976:	f7ff fcf9 	bl	800036c <BQ_WriteMABlockCommand>
        }
        return false;
 800097a:	2300      	movs	r3, #0
    }
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000984:	b004      	add	sp, #16
 8000986:	4770      	bx	lr

08000988 <BQAction_DisableFets>:
/**
 * @brief disable all fets
 * @param none
 */
bool BQAction_DisableFets(BQ_data BMS)
{
 8000988:	b084      	sub	sp, #16
 800098a:	b580      	push	{r7, lr}
 800098c:	b0be      	sub	sp, #248	@ 0xf8
 800098e:	af3e      	add	r7, sp, #248	@ 0xf8
 8000990:	f107 0c08 	add.w	ip, r7, #8
 8000994:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQAction_UpdateOpStatus(BMS);
 8000998:	4668      	mov	r0, sp
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	22f0      	movs	r2, #240	@ 0xf0
 80009a0:	4619      	mov	r1, r3
 80009a2:	f004 fb61 	bl	8005068 <memcpy>
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ac:	f000 f9c0 	bl	8000d30 <BQAction_UpdateOpStatus>
    if (BQ_IsChargeFetTestEnabled(BMS)){
 80009b0:	4668      	mov	r0, sp
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	22f0      	movs	r2, #240	@ 0xf0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f004 fb55 	bl	8005068 <memcpy>
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	f000 fc86 	bl	80012d4 <BQ_IsChargeFetTestEnabled>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00d      	beq.n	80009ea <BQAction_DisableFets+0x62>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 80009ce:	231f      	movs	r3, #31
 80009d0:	933c      	str	r3, [sp, #240]	@ 0xf0
 80009d2:	4668      	mov	r0, sp
 80009d4:	f107 0318 	add.w	r3, r7, #24
 80009d8:	22f0      	movs	r2, #240	@ 0xf0
 80009da:	4619      	mov	r1, r3
 80009dc:	f004 fb44 	bl	8005068 <memcpy>
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e6:	f7ff fcc1 	bl	800036c <BQ_WriteMABlockCommand>
    }
    if (BQ_IsDischargeFetTestEnabled(BMS)){
 80009ea:	4668      	mov	r0, sp
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	22f0      	movs	r2, #240	@ 0xf0
 80009f2:	4619      	mov	r1, r3
 80009f4:	f004 fb38 	bl	8005068 <memcpy>
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009fe:	f000 fc56 	bl	80012ae <BQ_IsDischargeFetTestEnabled>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00d      	beq.n	8000a24 <BQAction_DisableFets+0x9c>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000a08:	2320      	movs	r3, #32
 8000a0a:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000a0c:	4668      	mov	r0, sp
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	22f0      	movs	r2, #240	@ 0xf0
 8000a14:	4619      	mov	r1, r3
 8000a16:	f004 fb27 	bl	8005068 <memcpy>
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a20:	f7ff fca4 	bl	800036c <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 8000a24:	4668      	mov	r0, sp
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	22f0      	movs	r2, #240	@ 0xf0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f004 fb1b 	bl	8005068 <memcpy>
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a38:	f000 fc72 	bl	8001320 <BQ_IsPreChargeFetTestEnabled>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00d      	beq.n	8000a5e <BQAction_DisableFets+0xd6>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 8000a42:	231e      	movs	r3, #30
 8000a44:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000a46:	4668      	mov	r0, sp
 8000a48:	f107 0318 	add.w	r3, r7, #24
 8000a4c:	22f0      	movs	r2, #240	@ 0xf0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f004 fb0a 	bl	8005068 <memcpy>
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5a:	f7ff fc87 	bl	800036c <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 8000a5e:	4668      	mov	r0, sp
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	22f0      	movs	r2, #240	@ 0xf0
 8000a66:	4619      	mov	r1, r3
 8000a68:	f004 fafe 	bl	8005068 <memcpy>
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a72:	f000 fc42 	bl	80012fa <BQ_IsPreDischargeFetTestEnabled>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00d      	beq.n	8000a98 <BQAction_DisableFets+0x110>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000a7c:	231c      	movs	r3, #28
 8000a7e:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000a80:	4668      	mov	r0, sp
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	22f0      	movs	r2, #240	@ 0xf0
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f004 faed 	bl	8005068 <memcpy>
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a94:	f7ff fc6a 	bl	800036c <BQ_WriteMABlockCommand>
    }

    return true;
 8000a98:	2301      	movs	r3, #1
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa2:	b004      	add	sp, #16
 8000aa4:	4770      	bx	lr

08000aa6 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data BMS)
{
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b0c0      	sub	sp, #256	@ 0x100
 8000aac:	af3e      	add	r7, sp, #248	@ 0xf8
 8000aae:	f107 0c10 	add.w	ip, r7, #16
 8000ab2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//    bool isSealed = false;

    BQAction_UpdateOpStatus(BMS);
 8000ab6:	4668      	mov	r0, sp
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	22f0      	movs	r2, #240	@ 0xf0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f004 fad2 	bl	8005068 <memcpy>
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aca:	f000 f931 	bl	8000d30 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode(BMS);
 8000ace:	4668      	mov	r0, sp
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	22f0      	movs	r2, #240	@ 0xf0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f004 fac6 	bl	8005068 <memcpy>
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae2:	f000 fab9 	bl	8001058 <BQ_GetSecurityMode>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000aea:	e03f      	b.n	8000b6c <BQAction_TryUnsealedDevice+0xc6>
    {
//        isSealed = true;
//        ("[BQ] Security mode - Sealed", 27);

        BQ_WriteMABlockCommand(BMS, 0x0414);
 8000aec:	f240 4314 	movw	r3, #1044	@ 0x414
 8000af0:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000af2:	4668      	mov	r0, sp
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	22f0      	movs	r2, #240	@ 0xf0
 8000afa:	4619      	mov	r1, r3
 8000afc:	f004 fab4 	bl	8005068 <memcpy>
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b06:	f7ff fc31 	bl	800036c <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000b0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b0e:	f001 f8eb 	bl	8001ce8 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 8000b12:	f243 6372 	movw	r3, #13938	@ 0x3672
 8000b16:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000b18:	4668      	mov	r0, sp
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	22f0      	movs	r2, #240	@ 0xf0
 8000b20:	4619      	mov	r1, r3
 8000b22:	f004 faa1 	bl	8005068 <memcpy>
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b2c:	f7ff fc1e 	bl	800036c <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 8000b30:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b34:	f001 f8d8 	bl	8001ce8 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 8000b38:	4668      	mov	r0, sp
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	22f0      	movs	r2, #240	@ 0xf0
 8000b40:	4619      	mov	r1, r3
 8000b42:	f004 fa91 	bl	8005068 <memcpy>
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4c:	f000 f8f0 	bl	8000d30 <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode(BMS);
 8000b50:	4668      	mov	r0, sp
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	22f0      	movs	r2, #240	@ 0xf0
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f004 fa85 	bl	8005068 <memcpy>
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b64:	f000 fa78 	bl	8001058 <BQ_GetSecurityMode>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0bc      	beq.n	8000aec <BQAction_TryUnsealedDevice+0x46>
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d0b9      	beq.n	8000aec <BQAction_TryUnsealedDevice+0x46>
    // print only if the device was previously sealeded
//    if (isSealed){
//        ("[BQ] successfully unsealed", 27);
//    }

}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data BMS)
{
 8000b88:	b084      	sub	sp, #16
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b0ca      	sub	sp, #296	@ 0x128
 8000b8e:	af44      	add	r7, sp, #272	@ 0x110
 8000b90:	f107 0c20 	add.w	ip, r7, #32
 8000b94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 8000b98:	2357      	movs	r3, #87	@ 0x57
 8000b9a:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000b9c:	4668      	mov	r0, sp
 8000b9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ba2:	22f0      	movs	r2, #240	@ 0xf0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f004 fa5f 	bl	8005068 <memcpy>
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb0:	f7ff fc74 	bl	800049c <BQ_ReadCommandAsShort>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	82fb      	strh	r3, [r7, #22]
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 8000bb8:	2355      	movs	r3, #85	@ 0x55
 8000bba:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000bbc:	4668      	mov	r0, sp
 8000bbe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bc2:	22f0      	movs	r2, #240	@ 0xf0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f004 fa4f 	bl	8005068 <memcpy>
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd0:	f7ff fc96 	bl	8000500 <BQ_ReadCommandAsInt>
 8000bd4:	6138      	str	r0, [r7, #16]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 8000bd6:	2354      	movs	r3, #84	@ 0x54
 8000bd8:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000bda:	4668      	mov	r0, sp
 8000bdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000be0:	22f0      	movs	r2, #240	@ 0xf0
 8000be2:	4619      	mov	r1, r3
 8000be4:	f004 fa40 	bl	8005068 <memcpy>
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bee:	f7ff fc87 	bl	8000500 <BQ_ReadCommandAsInt>
 8000bf2:	60f8      	str	r0, [r7, #12]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000bf4:	2356      	movs	r3, #86	@ 0x56
 8000bf6:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bfe:	22f0      	movs	r2, #240	@ 0xf0
 8000c00:	4619      	mov	r1, r3
 8000c02:	f004 fa31 	bl	8005068 <memcpy>
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c0c:	f7ff fc78 	bl	8000500 <BQ_ReadCommandAsInt>
 8000c10:	60b8      	str	r0, [r7, #8]

    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode);
 8000c12:	6a3b      	ldr	r3, [r7, #32]
 8000c14:	4a41      	ldr	r2, [pc, #260]	@ (8000d1c <BQAction_UpdateData+0x194>)
 8000c16:	7811      	ldrb	r1, [r2, #0]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fd54 	bl	80016c8 <I2CHelper_ReadRegisterAsShort>
 8000c20:	4603      	mov	r3, r0
 8000c22:	80fb      	strh	r3, [r7, #6]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	4a3d      	ldr	r2, [pc, #244]	@ (8000d1c <BQAction_UpdateData+0x194>)
 8000c28:	7811      	ldrb	r1, [r2, #0]
 8000c2a:	2216      	movs	r2, #22
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fd4b 	bl	80016c8 <I2CHelper_ReadRegisterAsShort>
 8000c32:	4603      	mov	r3, r0
 8000c34:	80bb      	strh	r3, [r7, #4]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	4a38      	ldr	r2, [pc, #224]	@ (8000d1c <BQAction_UpdateData+0x194>)
 8000c3a:	7811      	ldrb	r1, [r2, #0]
 8000c3c:	2248      	movs	r2, #72	@ 0x48
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fd67 	bl	8001712 <I2CHelper_ReadRegisterAsChar>
 8000c44:	4603      	mov	r3, r0
 8000c46:	70fb      	strb	r3, [r7, #3]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000c48:	2320      	movs	r3, #32
 8000c4a:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000c4c:	4b34      	ldr	r3, [pc, #208]	@ (8000d20 <BQAction_UpdateData+0x198>)
 8000c4e:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000c50:	2371      	movs	r3, #113	@ 0x71
 8000c52:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000c54:	4668      	mov	r0, sp
 8000c56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c5a:	22f0      	movs	r2, #240	@ 0xf0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f004 fa03 	bl	8005068 <memcpy>
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c68:	f7ff fbaa 	bl	80003c0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2, 16);
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000c70:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <BQAction_UpdateData+0x19c>)
 8000c72:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000c74:	2372      	movs	r3, #114	@ 0x72
 8000c76:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000c78:	4668      	mov	r0, sp
 8000c7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c7e:	22f0      	movs	r2, #240	@ 0xf0
 8000c80:	4619      	mov	r1, r3
 8000c82:	f004 f9f1 	bl	8005068 <memcpy>
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8c:	f7ff fb98 	bl	80003c0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
 8000c90:	2312      	movs	r3, #18
 8000c92:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000c94:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <BQAction_UpdateData+0x1a0>)
 8000c96:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000c98:	237b      	movs	r3, #123	@ 0x7b
 8000c9a:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000c9c:	4668      	mov	r0, sp
 8000c9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca2:	22f0      	movs	r2, #240	@ 0xf0
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f004 f9df 	bl	8005068 <memcpy>
 8000caa:	f107 0320 	add.w	r3, r7, #32
 8000cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb0:	f7ff fb86 	bl	80003c0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal, 32);
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <BQAction_UpdateData+0x1a4>)
 8000cba:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000cbc:	f24f 0381 	movw	r3, #61569	@ 0xf081
 8000cc0:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000cc2:	4668      	mov	r0, sp
 8000cc4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cc8:	22f0      	movs	r2, #240	@ 0xf0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f004 f9cc 	bl	8005068 <memcpy>
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd6:	f7ff fb73 	bl	80003c0 <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags(BMS, operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	9342      	str	r3, [sp, #264]	@ 0x108
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	9341      	str	r3, [sp, #260]	@ 0x104
 8000ce2:	8afb      	ldrh	r3, [r7, #22]
 8000ce4:	9340      	str	r3, [sp, #256]	@ 0x100
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	933f      	str	r3, [sp, #252]	@ 0xfc
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000cf6:	4668      	mov	r0, sp
 8000cf8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cfc:	22f0      	movs	r2, #240	@ 0xf0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f004 f9b2 	bl	8005068 <memcpy>
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d0a:	f000 f89b 	bl	8000e44 <BQ_ParseAllFlags>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	200000c8 	.word	0x200000c8
 8000d24:	200000e8 	.word	0x200000e8
 8000d28:	200000f8 	.word	0x200000f8
 8000d2c:	2000010a 	.word	0x2000010a

08000d30 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data BMS)
{
 8000d30:	b084      	sub	sp, #16
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b0c0      	sub	sp, #256	@ 0x100
 8000d36:	af40      	add	r7, sp, #256	@ 0x100
 8000d38:	f107 0c08 	add.w	ip, r7, #8
 8000d3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000d40:	2320      	movs	r3, #32
 8000d42:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000d44:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <BQAction_UpdateOpStatus+0xb0>)
 8000d46:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000d48:	2371      	movs	r3, #113	@ 0x71
 8000d4a:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000d4c:	4668      	mov	r0, sp
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	22f0      	movs	r2, #240	@ 0xf0
 8000d54:	4619      	mov	r1, r3
 8000d56:	f004 f987 	bl	8005068 <memcpy>
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	f7ff fb2e 	bl	80003c0 <BQ_ReadMABlockCommand>
    BQ_ParseOperationStatus(BMS, BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS));
 8000d64:	2354      	movs	r3, #84	@ 0x54
 8000d66:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000d68:	4668      	mov	r0, sp
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	22f0      	movs	r2, #240	@ 0xf0
 8000d70:	4619      	mov	r1, r3
 8000d72:	f004 f979 	bl	8005068 <memcpy>
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d7c:	f7ff fbc0 	bl	8000500 <BQ_ReadCommandAsInt>
 8000d80:	4603      	mov	r3, r0
 8000d82:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000d84:	4668      	mov	r0, sp
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	22f0      	movs	r2, #240	@ 0xf0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f004 f96b 	bl	8005068 <memcpy>
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d98:	f000 f8cb 	bl	8000f32 <BQ_ParseOperationStatus>
    BQ_ParseManufacturingStatus(BMS, BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS));
 8000d9c:	2357      	movs	r3, #87	@ 0x57
 8000d9e:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000da0:	4668      	mov	r0, sp
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	22f0      	movs	r2, #240	@ 0xf0
 8000da8:	4619      	mov	r1, r3
 8000daa:	f004 f95d 	bl	8005068 <memcpy>
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db4:	f7ff fb72 	bl	800049c <BQ_ReadCommandAsShort>
 8000db8:	4603      	mov	r3, r0
 8000dba:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000dbc:	4668      	mov	r0, sp
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	22f0      	movs	r2, #240	@ 0xf0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f004 f94f 	bl	8005068 <memcpy>
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dd0:	f000 f918 	bl	8001004 <BQ_ParseManufacturingStatus>
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ddc:	b004      	add	sp, #16
 8000dde:	4770      	bx	lr
 8000de0:	200000c8 	.word	0x200000c8

08000de4 <decimalToBinary>:
 * @param value decimal value
 * @param array array to write
 * @param count array size
 */
void decimalToBinary(uint32_t value, uint8_t *array, uint8_t count)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	4613      	mov	r3, r2
 8000df0:	71fb      	strb	r3, [r7, #7]
	uint8_t currentCount = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000df6:	e00e      	b.n	8000e16 <decimalToBinary+0x32>
	{
		array[currentCount] = value % 2;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	440b      	add	r3, r1
 8000e02:	f002 0201 	and.w	r2, r2, #1
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	701a      	strb	r2, [r3, #0]
		value /= 2;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
		currentCount++;
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	3301      	adds	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1ed      	bne.n	8000df8 <decimalToBinary+0x14>
	}

	while (currentCount < count)
 8000e1c:	e007      	b.n	8000e2e <decimalToBinary+0x4a>
	{
		array[currentCount] = 0;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	4413      	add	r3, r2
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
		currentCount++;
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	75fb      	strb	r3, [r7, #23]
	while (currentCount < count)
 8000e2e:	7dfa      	ldrb	r2, [r7, #23]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d3f3      	bcc.n	8000e1e <decimalToBinary+0x3a>
	}
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <BQ_ParseAllFlags>:
					  uint16_t batteryMode,
					  uint8_t gpio,
					  uint16_t manStatus,
					  uint32_t chargeStatus,
					  uint32_t gaugStatus)
{
 8000e44:	b084      	sub	sp, #16
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b0be      	sub	sp, #248	@ 0xf8
 8000e4a:	af3e      	add	r7, sp, #248	@ 0xf8
 8000e4c:	f107 0c08 	add.w	ip, r7, #8
 8000e50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	BQ_ParseOperationStatus(BMS, opStatus);
 8000e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000e58:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000e5a:	4668      	mov	r0, sp
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	22f0      	movs	r2, #240	@ 0xf0
 8000e62:	4619      	mov	r1, r3
 8000e64:	f004 f900 	bl	8005068 <memcpy>
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6e:	f000 f860 	bl	8000f32 <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(BMS, chargeStatus);
 8000e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e76:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000e78:	4668      	mov	r0, sp
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	22f0      	movs	r2, #240	@ 0xf0
 8000e80:	4619      	mov	r1, r3
 8000e82:	f004 f8f1 	bl	8005068 <memcpy>
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e8c:	f000 f866 	bl	8000f5c <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(BMS, gaugStatus);
 8000e90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e94:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000e96:	4668      	mov	r0, sp
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	22f0      	movs	r2, #240	@ 0xf0
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f004 f8e2 	bl	8005068 <memcpy>
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eaa:	f000 f86c 	bl	8000f86 <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(BMS, batteryStatus);
 8000eae:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8000eb2:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000eb4:	4668      	mov	r0, sp
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	22f0      	movs	r2, #240	@ 0xf0
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f004 f8d3 	bl	8005068 <memcpy>
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec8:	f000 f872 	bl	8000fb0 <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(BMS, manStatus);
 8000ecc:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8000ed0:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000ed2:	4668      	mov	r0, sp
 8000ed4:	f107 0318 	add.w	r3, r7, #24
 8000ed8:	22f0      	movs	r2, #240	@ 0xf0
 8000eda:	4619      	mov	r1, r3
 8000edc:	f004 f8c4 	bl	8005068 <memcpy>
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee6:	f000 f88d 	bl	8001004 <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(BMS, batteryMode);
 8000eea:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8000eee:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000ef0:	4668      	mov	r0, sp
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	22f0      	movs	r2, #240	@ 0xf0
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f004 f8b5 	bl	8005068 <memcpy>
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f04:	f000 f869 	bl	8000fda <BQ_ParseBatteryMode>
	BQ_ParseGpio(BMS, gpio);
 8000f08:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8000f0c:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000f0e:	4668      	mov	r0, sp
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	22f0      	movs	r2, #240	@ 0xf0
 8000f16:	4619      	mov	r1, r3
 8000f18:	f004 f8a6 	bl	8005068 <memcpy>
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f22:	f000 f884 	bl	800102e <BQ_ParseGpio>
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr

08000f32 <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(BQ_data BMS, uint32_t raw)
{
 8000f32:	b084      	sub	sp, #16
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	f107 0c08 	add.w	ip, r7, #8
 8000f3c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_opStatus
	decimalToBinary(raw, BMS.BQ_opStatus, 32);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2220      	movs	r2, #32
 8000f46:	4619      	mov	r1, r3
 8000f48:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000f4c:	f7ff ff4a 	bl	8000de4 <decimalToBinary>
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f58:	b004      	add	sp, #16
 8000f5a:	4770      	bx	lr

08000f5c <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(BQ_data BMS, uint32_t raw)
{
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	f107 0c08 	add.w	ip, r7, #8
 8000f66:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_chargeStatus
	decimalToBinary(raw, BMS.BQ_chargeStatus, 32);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f6e:	2220      	movs	r2, #32
 8000f70:	4619      	mov	r1, r3
 8000f72:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000f76:	f7ff ff35 	bl	8000de4 <decimalToBinary>
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f82:	b004      	add	sp, #16
 8000f84:	4770      	bx	lr

08000f86 <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(BQ_data BMS, uint32_t raw)
{
 8000f86:	b084      	sub	sp, #16
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	f107 0c08 	add.w	ip, r7, #8
 8000f90:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_gaugeStatus
	decimalToBinary(raw, BMS.BQ_gaugeStatus, 32);
 8000f94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f98:	2220      	movs	r2, #32
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000fa0:	f7ff ff20 	bl	8000de4 <decimalToBinary>
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fac:	b004      	add	sp, #16
 8000fae:	4770      	bx	lr

08000fb0 <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(BQ_data BMS, uint16_t raw)
{
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f107 0c08 	add.w	ip, r7, #8
 8000fba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_batteryStatus
	decimalToBinary(raw, BMS.BQ_batteryStatus, 16);
 8000fbe:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8000fc2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff0b 	bl	8000de4 <decimalToBinary>
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd6:	b004      	add	sp, #16
 8000fd8:	4770      	bx	lr

08000fda <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(BQ_data BMS, uint16_t raw)
{
 8000fda:	b084      	sub	sp, #16
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	f107 0c08 	add.w	ip, r7, #8
 8000fe4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_batteryMode
	decimalToBinary(raw, BMS.BQ_batteryMode, 16);
 8000fe8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8000fec:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8000ff0:	2210      	movs	r2, #16
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fef6 	bl	8000de4 <decimalToBinary>
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001000:	b004      	add	sp, #16
 8001002:	4770      	bx	lr

08001004 <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(BQ_data BMS, uint16_t raw)
{
 8001004:	b084      	sub	sp, #16
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
 800100a:	f107 0c08 	add.w	ip, r7, #8
 800100e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	decimalToBinary(raw, BMS.BQ_manufacturingStatus, 16);
 8001012:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
 8001016:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 800101a:	2210      	movs	r2, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fee1 	bl	8000de4 <decimalToBinary>
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102a:	b004      	add	sp, #16
 800102c:	4770      	bx	lr

0800102e <BQ_ParseGpio>:

void BQ_ParseGpio(BQ_data BMS, uint8_t raw)
{
 800102e:	b084      	sub	sp, #16
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
 8001034:	f107 0c08 	add.w	ip, r7, #8
 8001038:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_gpio
	decimalToBinary(raw, BMS.BQ_gpio, 8);
 800103c:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8001040:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8001044:	2208      	movs	r2, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fecc 	bl	8000de4 <decimalToBinary>
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001054:	b004      	add	sp, #16
 8001056:	4770      	bx	lr

08001058 <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(BQ_data BMS)
{
 8001058:	b084      	sub	sp, #16
 800105a:	b490      	push	{r4, r7}
 800105c:	af00      	add	r7, sp, #0
 800105e:	f107 0408 	add.w	r4, r7, #8
 8001062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (BMS.BQ_opStatus[9] && BMS.BQ_opStatus[8]){
 8001066:	7d7b      	ldrb	r3, [r7, #21]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <BQ_GetSecurityMode+0x1e>
 800106c:	7d3b      	ldrb	r3, [r7, #20]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <BQ_GetSecurityMode+0x1e>
        return SEALED;//11
 8001072:	2300      	movs	r3, #0
 8001074:	e010      	b.n	8001098 <BQ_GetSecurityMode+0x40>
    }else if (BMS.BQ_opStatus[9] && !BMS.BQ_opStatus[8]){
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <BQ_GetSecurityMode+0x2e>
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <BQ_GetSecurityMode+0x2e>
        return UNSEALED;//10
 8001082:	2301      	movs	r3, #1
 8001084:	e008      	b.n	8001098 <BQ_GetSecurityMode+0x40>
    }else if (!BMS.BQ_opStatus[9] && BMS.BQ_opStatus[8]){
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d104      	bne.n	8001096 <BQ_GetSecurityMode+0x3e>
 800108c:	7d3b      	ldrb	r3, [r7, #20]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <BQ_GetSecurityMode+0x3e>
        return FULL_ACCESS;//01
 8001092:	2302      	movs	r3, #2
 8001094:	e000      	b.n	8001098 <BQ_GetSecurityMode+0x40>
    }else{
        return RESERVED;//00
 8001096:	2303      	movs	r3, #3
    }
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bc90      	pop	{r4, r7}
 800109e:	b004      	add	sp, #16
 80010a0:	4770      	bx	lr
	...

080010a4 <BQ_GetChargeMode>:
/**
 * @brief get charge from BQ_opStatus
 * @return CHARGE, DISCHARGE or RELAX
 */
CHARGE_MODE BQ_GetChargeMode(BQ_data BMS)
{
 80010a4:	b084      	sub	sp, #16
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b0be      	sub	sp, #248	@ 0xf8
 80010aa:	af3c      	add	r7, sp, #240	@ 0xf0
 80010ac:	f107 0c10 	add.w	ip, r7, #16
 80010b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQAction_UpdateOpStatus(BMS);
 80010b4:	4668      	mov	r0, sp
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	22f0      	movs	r2, #240	@ 0xf0
 80010bc:	4619      	mov	r1, r3
 80010be:	f003 ffd3 	bl	8005068 <memcpy>
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010c8:	f7ff fe32 	bl	8000d30 <BQAction_UpdateOpStatus>
    uint16_t packVoltage = BMS.BQ_daStatus1[10] | (BMS.BQ_daStatus1[11] << 8);
 80010cc:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	80fb      	strh	r3, [r7, #6]
    uint16_t current = I2CHelper_ReadRegisterAsShort(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4a44      	ldr	r2, [pc, #272]	@ (80011f4 <BQ_GetChargeMode+0x150>)
 80010e4:	7811      	ldrb	r1, [r2, #0]
 80010e6:	220a      	movs	r2, #10
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 faed 	bl	80016c8 <I2CHelper_ReadRegisterAsShort>
 80010ee:	4603      	mov	r3, r0
 80010f0:	80bb      	strh	r3, [r7, #4]

    if (packVoltage > 1000 && BQ_IsChargeEnabled(BMS) && BQ_IsChargeFetEnabled(BMS) && BQ_IsChargeFetTestEnabled(BMS) && current > 0 && current < 30000){
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f8:	d936      	bls.n	8001168 <BQ_GetChargeMode+0xc4>
 80010fa:	4668      	mov	r0, sp
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	22f0      	movs	r2, #240	@ 0xf0
 8001102:	4619      	mov	r1, r3
 8001104:	f003 ffb0 	bl	8005068 <memcpy>
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110e:	f000 f8a9 	bl	8001264 <BQ_IsChargeEnabled>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d027      	beq.n	8001168 <BQ_GetChargeMode+0xc4>
 8001118:	4668      	mov	r0, sp
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	22f0      	movs	r2, #240	@ 0xf0
 8001120:	4619      	mov	r1, r3
 8001122:	f003 ffa1 	bl	8005068 <memcpy>
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112c:	f000 f876 	bl	800121c <BQ_IsChargeFetEnabled>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d018      	beq.n	8001168 <BQ_GetChargeMode+0xc4>
 8001136:	4668      	mov	r0, sp
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	22f0      	movs	r2, #240	@ 0xf0
 800113e:	4619      	mov	r1, r3
 8001140:	f003 ff92 	bl	8005068 <memcpy>
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114a:	f000 f8c3 	bl	80012d4 <BQ_IsChargeFetTestEnabled>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d009      	beq.n	8001168 <BQ_GetChargeMode+0xc4>
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <BQ_GetChargeMode+0xc4>
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001160:	4293      	cmp	r3, r2
 8001162:	d801      	bhi.n	8001168 <BQ_GetChargeMode+0xc4>
        return CHARGE;
 8001164:	2301      	movs	r3, #1
 8001166:	e03e      	b.n	80011e6 <BQ_GetChargeMode+0x142>
    }else if (packVoltage > 1000 && BQ_IsDischargeEnabled(BMS) && BQ_IsDischargeFetEnabled(BMS) && BQ_IsDischargeFetTestEnabled(BMS) && 65535 - current > 0 && current > 30000){
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800116e:	d939      	bls.n	80011e4 <BQ_GetChargeMode+0x140>
 8001170:	4668      	mov	r0, sp
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	22f0      	movs	r2, #240	@ 0xf0
 8001178:	4619      	mov	r1, r3
 800117a:	f003 ff75 	bl	8005068 <memcpy>
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001184:	f000 f85c 	bl	8001240 <BQ_IsDischargeEnabled>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d02a      	beq.n	80011e4 <BQ_GetChargeMode+0x140>
 800118e:	4668      	mov	r0, sp
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	22f0      	movs	r2, #240	@ 0xf0
 8001196:	4619      	mov	r1, r3
 8001198:	f003 ff66 	bl	8005068 <memcpy>
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a2:	f000 f829 	bl	80011f8 <BQ_IsDischargeFetEnabled>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d01b      	beq.n	80011e4 <BQ_GetChargeMode+0x140>
 80011ac:	4668      	mov	r0, sp
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	22f0      	movs	r2, #240	@ 0xf0
 80011b4:	4619      	mov	r1, r3
 80011b6:	f003 ff57 	bl	8005068 <memcpy>
 80011ba:	f107 0310 	add.w	r3, r7, #16
 80011be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011c0:	f000 f875 	bl	80012ae <BQ_IsDischargeFetTestEnabled>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00c      	beq.n	80011e4 <BQ_GetChargeMode+0x140>
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80011d0:	33ff      	adds	r3, #255	@ 0xff
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dd06      	ble.n	80011e4 <BQ_GetChargeMode+0x140>
 80011d6:	88bb      	ldrh	r3, [r7, #4]
 80011d8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <BQ_GetChargeMode+0x140>
        return DISCHARGE;
 80011e0:	2302      	movs	r3, #2
 80011e2:	e000      	b.n	80011e6 <BQ_GetChargeMode+0x142>
    }else{
        return RELAX;
 80011e4:	2300      	movs	r3, #0
    }
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011f0:	b004      	add	sp, #16
 80011f2:	4770      	bx	lr
 80011f4:	20000000 	.word	0x20000000

080011f8 <BQ_IsDischargeFetEnabled>:
//
//    return result;
//}

bool BQ_IsDischargeFetEnabled(BQ_data BMS)
{
 80011f8:	b084      	sub	sp, #16
 80011fa:	b490      	push	{r4, r7}
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	f107 0408 	add.w	r4, r7, #8
 8001202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus[1];
 8001206:	7b7b      	ldrb	r3, [r7, #13]
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf14      	ite	ne
 800120c:	2301      	movne	r3, #1
 800120e:	2300      	moveq	r3, #0
 8001210:	b2db      	uxtb	r3, r3
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	bc90      	pop	{r4, r7}
 8001218:	b004      	add	sp, #16
 800121a:	4770      	bx	lr

0800121c <BQ_IsChargeFetEnabled>:

bool BQ_IsChargeFetEnabled(BQ_data BMS)
{
 800121c:	b084      	sub	sp, #16
 800121e:	b490      	push	{r4, r7}
 8001220:	af00      	add	r7, sp, #0
 8001222:	f107 0408 	add.w	r4, r7, #8
 8001226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus[2];
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc90      	pop	{r4, r7}
 800123c:	b004      	add	sp, #16
 800123e:	4770      	bx	lr

08001240 <BQ_IsDischargeEnabled>:
}



bool BQ_IsDischargeEnabled(BQ_data BMS)
{
 8001240:	b084      	sub	sp, #16
 8001242:	b490      	push	{r4, r7}
 8001244:	af00      	add	r7, sp, #0
 8001246:	f107 0408 	add.w	r4, r7, #8
 800124a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus[13];
 800124e:	7e7b      	ldrb	r3, [r7, #25]
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bc90      	pop	{r4, r7}
 8001260:	b004      	add	sp, #16
 8001262:	4770      	bx	lr

08001264 <BQ_IsChargeEnabled>:

bool BQ_IsChargeEnabled(BQ_data BMS)
{
 8001264:	b084      	sub	sp, #16
 8001266:	b490      	push	{r4, r7}
 8001268:	af00      	add	r7, sp, #0
 800126a:	f107 0408 	add.w	r4, r7, #8
 800126e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus[14];
 8001272:	7ebb      	ldrb	r3, [r7, #26]
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	bc90      	pop	{r4, r7}
 8001284:	b004      	add	sp, #16
 8001286:	4770      	bx	lr

08001288 <BQ_IsManufacturingFuseEnabled>:
}



bool BQ_IsManufacturingFuseEnabled(BQ_data BMS)
{
 8001288:	b084      	sub	sp, #16
 800128a:	b490      	push	{r4, r7}
 800128c:	af00      	add	r7, sp, #0
 800128e:	f107 0408 	add.w	r4, r7, #8
 8001292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[8];
 8001296:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800129a:	2b00      	cmp	r3, #0
 800129c:	bf14      	ite	ne
 800129e:	2301      	movne	r3, #1
 80012a0:	2300      	moveq	r3, #0
 80012a2:	b2db      	uxtb	r3, r3
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc90      	pop	{r4, r7}
 80012aa:	b004      	add	sp, #16
 80012ac:	4770      	bx	lr

080012ae <BQ_IsDischargeFetTestEnabled>:

bool BQ_IsDischargeFetTestEnabled(BQ_data BMS)
{
 80012ae:	b084      	sub	sp, #16
 80012b0:	b490      	push	{r4, r7}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f107 0408 	add.w	r4, r7, #8
 80012b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[2];
 80012bc:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc90      	pop	{r4, r7}
 80012d0:	b004      	add	sp, #16
 80012d2:	4770      	bx	lr

080012d4 <BQ_IsChargeFetTestEnabled>:

bool BQ_IsChargeFetTestEnabled(BQ_data BMS)
{
 80012d4:	b084      	sub	sp, #16
 80012d6:	b490      	push	{r4, r7}
 80012d8:	af00      	add	r7, sp, #0
 80012da:	f107 0408 	add.w	r4, r7, #8
 80012de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[1];
 80012e2:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc90      	pop	{r4, r7}
 80012f6:	b004      	add	sp, #16
 80012f8:	4770      	bx	lr

080012fa <BQ_IsPreDischargeFetTestEnabled>:

bool BQ_IsPreDischargeFetTestEnabled(BQ_data BMS)
{
 80012fa:	b084      	sub	sp, #16
 80012fc:	b490      	push	{r4, r7}
 80012fe:	af00      	add	r7, sp, #0
 8001300:	f107 0408 	add.w	r4, r7, #8
 8001304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[13];
 8001308:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2db      	uxtb	r3, r3
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc90      	pop	{r4, r7}
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr

08001320 <BQ_IsPreChargeFetTestEnabled>:

bool BQ_IsPreChargeFetTestEnabled(BQ_data BMS)
{
 8001320:	b084      	sub	sp, #16
 8001322:	b490      	push	{r4, r7}
 8001324:	af00      	add	r7, sp, #0
 8001326:	f107 0408 	add.w	r4, r7, #8
 800132a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[0];
 800132e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc90      	pop	{r4, r7}
 8001342:	b004      	add	sp, #16
 8001344:	4770      	bx	lr

08001346 <BQ_IsManufacturingAllFetEnabled>:
/**
 * @brief function shows fet control
 * @return 0 if fet control enabled, 1 if fet control disabled
 */
bool BQ_IsManufacturingAllFetEnabled(BQ_data BMS)
{
 8001346:	b084      	sub	sp, #16
 8001348:	b490      	push	{r4, r7}
 800134a:	af00      	add	r7, sp, #0
 800134c:	f107 0408 	add.w	r4, r7, #8
 8001350:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[4];
 8001354:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2db      	uxtb	r3, r3
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc90      	pop	{r4, r7}
 8001368:	b004      	add	sp, #16
 800136a:	4770      	bx	lr

0800136c <BQ_IsManufacturingGaugingEnabled>:

bool BQ_IsManufacturingGaugingEnabled(BQ_data BMS)
{
 800136c:	b084      	sub	sp, #16
 800136e:	b490      	push	{r4, r7}
 8001370:	af00      	add	r7, sp, #0
 8001372:	f107 0408 	add.w	r4, r7, #8
 8001376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[3];
 800137a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800137e:	2b00      	cmp	r3, #0
 8001380:	bf14      	ite	ne
 8001382:	2301      	movne	r3, #1
 8001384:	2300      	moveq	r3, #0
 8001386:	b2db      	uxtb	r3, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc90      	pop	{r4, r7}
 800138e:	b004      	add	sp, #16
 8001390:	4770      	bx	lr

08001392 <BQ_IsManufacturingCalibrationEnabled>:

bool BQ_IsManufacturingCalibrationEnabled(BQ_data BMS)
{
 8001392:	b084      	sub	sp, #16
 8001394:	b490      	push	{r4, r7}
 8001396:	af00      	add	r7, sp, #0
 8001398:	f107 0408 	add.w	r4, r7, #8
 800139c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[15];
 80013a0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc90      	pop	{r4, r7}
 80013b4:	b004      	add	sp, #16
 80013b6:	4770      	bx	lr

080013b8 <BQ_IsManufacturingPermanentFailureEnabled>:

bool BQ_IsManufacturingPermanentFailureEnabled(BQ_data BMS)
{
 80013b8:	b084      	sub	sp, #16
 80013ba:	b490      	push	{r4, r7}
 80013bc:	af00      	add	r7, sp, #0
 80013be:	f107 0408 	add.w	r4, r7, #8
 80013c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[6];
 80013c6:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	bf14      	ite	ne
 80013ce:	2301      	movne	r3, #1
 80013d0:	2300      	moveq	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc90      	pop	{r4, r7}
 80013da:	b004      	add	sp, #16
 80013dc:	4770      	bx	lr

080013de <BQ_IsManufacturingLifetimeEnabled>:

bool BQ_IsManufacturingLifetimeEnabled(BQ_data BMS)
{
 80013de:	b084      	sub	sp, #16
 80013e0:	b490      	push	{r4, r7}
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	f107 0408 	add.w	r4, r7, #8
 80013e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[5];
 80013ec:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc90      	pop	{r4, r7}
 8001400:	b004      	add	sp, #16
 8001402:	4770      	bx	lr

08001404 <BQ_IsLedEnabled>:

bool BQ_IsLedEnabled(BQ_data BMS)
{
 8001404:	b084      	sub	sp, #16
 8001406:	b490      	push	{r4, r7}
 8001408:	af00      	add	r7, sp, #0
 800140a:	f107 0408 	add.w	r4, r7, #8
 800140e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus[17];
 8001412:	7f7b      	ldrb	r3, [r7, #29]
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf14      	ite	ne
 8001418:	2301      	movne	r3, #1
 800141a:	2300      	moveq	r3, #0
 800141c:	b2db      	uxtb	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc90      	pop	{r4, r7}
 8001424:	b004      	add	sp, #16
 8001426:	4770      	bx	lr

08001428 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b49      	ldr	r3, [pc, #292]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	4a48      	ldr	r2, [pc, #288]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800144a:	4b46      	ldr	r3, [pc, #280]	@ (8001564 <MX_GPIO_Init+0x13c>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b43      	ldr	r3, [pc, #268]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a42      	ldr	r2, [pc, #264]	@ (8001564 <MX_GPIO_Init+0x13c>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b3d      	ldr	r3, [pc, #244]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a3c      	ldr	r2, [pc, #240]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b3a      	ldr	r3, [pc, #232]	@ (8001564 <MX_GPIO_Init+0x13c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b37      	ldr	r3, [pc, #220]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a36      	ldr	r2, [pc, #216]	@ (8001564 <MX_GPIO_Init+0x13c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <MX_GPIO_Init+0x13c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	21b0      	movs	r1, #176	@ 0xb0
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f000 ff1d 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014b0:	482d      	ldr	r0, [pc, #180]	@ (8001568 <MX_GPIO_Init+0x140>)
 80014b2:	f000 ff17 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4827      	ldr	r0, [pc, #156]	@ (800156c <MX_GPIO_Init+0x144>)
 80014ce:	f000 fd8f 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d2:	230c      	movs	r3, #12
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e2:	2307      	movs	r3, #7
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f0:	f000 fd7e 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80014f4:	23b0      	movs	r3, #176	@ 0xb0
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800150e:	f000 fd6f 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001512:	2340      	movs	r3, #64	@ 0x40
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001528:	f000 fd62 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800152c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4808      	ldr	r0, [pc, #32]	@ (8001568 <MX_GPIO_Init+0x140>)
 8001546:	f000 fd53 	bl	8001ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	210c      	movs	r1, #12
 800154e:	2028      	movs	r0, #40	@ 0x28
 8001550:	f000 fcc9 	bl	8001ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001554:	2028      	movs	r0, #40	@ 0x28
 8001556:	f000 fce2 	bl	8001f1e <HAL_NVIC_EnableIRQ>

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	@ 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800

08001570 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <MX_I2C1_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	@ (80015e8 <MX_I2C1_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <MX_I2C1_Init+0x74>)
 800157c:	4a1b      	ldr	r2, [pc, #108]	@ (80015ec <MX_I2C1_Init+0x7c>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001586:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <MX_I2C1_Init+0x74>)
 8001588:	2201      	movs	r2, #1
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <MX_I2C1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <MX_I2C1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_I2C1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_I2C1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015aa:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <MX_I2C1_Init+0x74>)
 80015ac:	f000 fee4 	bl	8002378 <HAL_I2C_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015b6:	f000 fa68 	bl	8001a8a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ba:	2100      	movs	r1, #0
 80015bc:	4809      	ldr	r0, [pc, #36]	@ (80015e4 <MX_I2C1_Init+0x74>)
 80015be:	f002 faef 	bl	8003ba0 <HAL_I2CEx_ConfigAnalogFilter>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c8:	f000 fa5f 	bl	8001a8a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015cc:	2100      	movs	r1, #0
 80015ce:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_I2C1_Init+0x74>)
 80015d0:	f002 fb31 	bl	8003c36 <HAL_I2CEx_ConfigDigitalFilter>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015da:	f000 fa56 	bl	8001a8a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000012c 	.word	0x2000012c
 80015e8:	40005400 	.word	0x40005400
 80015ec:	10909cec 	.word	0x10909cec

080015f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0a2      	sub	sp, #136	@ 0x88
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2260      	movs	r2, #96	@ 0x60
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fcfd 	bl	8005010 <memset>
  if(i2cHandle->Instance==I2C1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a28      	ldr	r2, [pc, #160]	@ (80016bc <HAL_I2C_MspInit+0xcc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d148      	bne.n	80016b2 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001620:	2340      	movs	r3, #64	@ 0x40
 8001622:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001624:	2300      	movs	r3, #0
 8001626:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f9b3 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001638:	f000 fa27 	bl	8001a8a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_I2C_MspInit+0xd0>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001640:	4a1f      	ldr	r2, [pc, #124]	@ (80016c0 <HAL_I2C_MspInit+0xd0>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <HAL_I2C_MspInit+0xd0>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001654:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001658:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165e:	2301      	movs	r3, #1
 8001660:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001668:	2304      	movs	r3, #4
 800166a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001672:	4619      	mov	r1, r3
 8001674:	4813      	ldr	r0, [pc, #76]	@ (80016c4 <HAL_I2C_MspInit+0xd4>)
 8001676:	f000 fcbb 	bl	8001ff0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_I2C_MspInit+0xd0>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <HAL_I2C_MspInit+0xd0>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <HAL_I2C_MspInit+0xd0>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	210a      	movs	r1, #10
 8001696:	201f      	movs	r0, #31
 8001698:	f000 fc25 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800169c:	201f      	movs	r0, #31
 800169e:	f000 fc3e 	bl	8001f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2109      	movs	r1, #9
 80016a6:	2020      	movs	r0, #32
 80016a8:	f000 fc1d 	bl	8001ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016ac:	2020      	movs	r0, #32
 80016ae:	f000 fc36 	bl	8001f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016b2:	bf00      	nop
 80016b4:	3788      	adds	r7, #136	@ 0x88
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400

080016c8 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
 80016d4:	4613      	mov	r3, r2
 80016d6:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	78ba      	ldrb	r2, [r7, #2]
 80016de:	78f9      	ldrb	r1, [r7, #3]
 80016e0:	2002      	movs	r0, #2
 80016e2:	9000      	str	r0, [sp, #0]
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f82a 	bl	800173e <I2CHelper_ReadRegister>
	uint16_t result = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	461a      	mov	r2, r3
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001702:	4313      	orrs	r3, r2
 8001704:	b21b      	sxth	r3, r3
 8001706:	81fb      	strh	r3, [r7, #14]

	return result;
 8001708:	89fb      	ldrh	r3, [r7, #14]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af02      	add	r7, sp, #8
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	4613      	mov	r3, r2
 8001720:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	78ba      	ldrb	r2, [r7, #2]
 8001728:	78f9      	ldrb	r1, [r7, #3]
 800172a:	2001      	movs	r0, #1
 800172c:	9000      	str	r0, [sp, #0]
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f805 	bl	800173e <I2CHelper_ReadRegister>

	return buf[0];
 8001734:	7b3b      	ldrb	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af02      	add	r7, sp, #8
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	72fb      	strb	r3, [r7, #11]
 800174c:	4613      	mov	r3, r2
 800174e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8001750:	7afb      	ldrb	r3, [r7, #11]
 8001752:	b29b      	uxth	r3, r3
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	b299      	uxth	r1, r3
 8001758:	f107 020a 	add.w	r2, r7, #10
 800175c:	2364      	movs	r3, #100	@ 0x64
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fea4 	bl	80024b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	b29b      	uxth	r3, r3
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	b299      	uxth	r1, r3
 8001770:	7e3b      	ldrb	r3, [r7, #24]
 8001772:	b29b      	uxth	r3, r3
 8001774:	2264      	movs	r2, #100	@ 0x64
 8001776:	9200      	str	r2, [sp, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 ffb0 	bl	80026e0 <HAL_I2C_Master_Receive>
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001798:	d113      	bne.n	80017c2 <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_GPIO_EXTI_Callback+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f083 0301 	eor.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_GPIO_EXTI_Callback+0x44>)
 80017b6:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80017b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017bc:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <HAL_GPIO_EXTI_Callback+0x48>)
 80017be:	f000 fda9 	bl	8002314 <HAL_GPIO_TogglePin>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000180 	.word	0x20000180
 80017d0:	48000400 	.word	0x48000400

080017d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b0cb      	sub	sp, #300	@ 0x12c
 80017d8:	af40      	add	r7, sp, #256	@ 0x100
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017da:	f000 fa09 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017de:	f000 f903 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e2:	f7ff fe21 	bl	8001428 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017e6:	f7ff fec3 	bl	8001570 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 80017ea:	487b      	ldr	r0, [pc, #492]	@ (80019d8 <main+0x204>)
 80017ec:	f000 fdc4 	bl	8002378 <HAL_I2C_Init>
  HAL_I2C_MspInit(&hi2c1);
 80017f0:	4879      	ldr	r0, [pc, #484]	@ (80019d8 <main+0x204>)
 80017f2:	f7ff fefd 	bl	80015f0 <HAL_I2C_MspInit>
  status = false;
 80017f6:	4b79      	ldr	r3, [pc, #484]	@ (80019dc <main+0x208>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t current = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t percentage[2] = {0};
 8001804:	2300      	movs	r3, #0
 8001806:	843b      	strh	r3, [r7, #32]
  uint16_t cells[6] = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f8c3 2003 	str.w	r2, [r3, #3]
  BQ_Init(&hi2c1);
 800182c:	486a      	ldr	r0, [pc, #424]	@ (80019d8 <main+0x204>)
 800182e:	f7fe fccd 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 8001832:	4c6b      	ldr	r4, [pc, #428]	@ (80019e0 <main+0x20c>)
 8001834:	2306      	movs	r3, #6
 8001836:	933e      	str	r3, [sp, #248]	@ 0xf8
 8001838:	463b      	mov	r3, r7
 800183a:	933d      	str	r3, [sp, #244]	@ 0xf4
 800183c:	2302      	movs	r3, #2
 800183e:	933c      	str	r3, [sp, #240]	@ 0xf0
 8001840:	4668      	mov	r0, sp
 8001842:	f104 0310 	add.w	r3, r4, #16
 8001846:	22f0      	movs	r2, #240	@ 0xf0
 8001848:	4619      	mov	r1, r3
 800184a:	f003 fc0d 	bl	8005068 <memcpy>
 800184e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001852:	f7fe fdb5 	bl	80003c0 <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 8001856:	20c8      	movs	r0, #200	@ 0xc8
 8001858:	f000 fa46 	bl	8001ce8 <HAL_Delay>
	  BQAction_UpdateData(BMS_1);
 800185c:	4c60      	ldr	r4, [pc, #384]	@ (80019e0 <main+0x20c>)
 800185e:	4668      	mov	r0, sp
 8001860:	f104 0310 	add.w	r3, r4, #16
 8001864:	22f0      	movs	r2, #240	@ 0xf0
 8001866:	4619      	mov	r1, r3
 8001868:	f003 fbfe 	bl	8005068 <memcpy>
 800186c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001870:	f7ff f98a 	bl	8000b88 <BQAction_UpdateData>
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_DA_STATUS_2, 16);
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_OUTPUT_CADC_CAL, BQ_outCal, 32);
	  voltage = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 8001874:	4b5a      	ldr	r3, [pc, #360]	@ (80019e0 <main+0x20c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5a      	ldr	r2, [pc, #360]	@ (80019e4 <main+0x210>)
 800187a:	7811      	ldrb	r1, [r2, #0]
 800187c:	2209      	movs	r2, #9
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff22 	bl	80016c8 <I2CHelper_ReadRegisterAsShort>
 8001884:	4603      	mov	r3, r0
 8001886:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  current = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);//TODO fix 1A = -400
 8001888:	4b55      	ldr	r3, [pc, #340]	@ (80019e0 <main+0x20c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a55      	ldr	r2, [pc, #340]	@ (80019e4 <main+0x210>)
 800188e:	7811      	ldrb	r1, [r2, #0]
 8001890:	220a      	movs	r2, #10
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff18 	bl	80016c8 <I2CHelper_ReadRegisterAsShort>
 8001898:	4603      	mov	r3, r0
 800189a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  percentage[0] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 800189c:	4b50      	ldr	r3, [pc, #320]	@ (80019e0 <main+0x20c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a50      	ldr	r2, [pc, #320]	@ (80019e4 <main+0x210>)
 80018a2:	7811      	ldrb	r1, [r2, #0]
 80018a4:	220d      	movs	r2, #13
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff33 	bl	8001712 <I2CHelper_ReadRegisterAsChar>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f887 3020 	strb.w	r3, [r7, #32]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 80018b2:	4b4b      	ldr	r3, [pc, #300]	@ (80019e0 <main+0x20c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a4b      	ldr	r2, [pc, #300]	@ (80019e4 <main+0x210>)
 80018b8:	7811      	ldrb	r1, [r2, #0]
 80018ba:	220e      	movs	r2, #14
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff28 	bl	8001712 <I2CHelper_ReadRegisterAsChar>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1[0] | (BMS_1.BQ_daStatus1[1] << 8);
 80018c8:	4b45      	ldr	r3, [pc, #276]	@ (80019e0 <main+0x20c>)
 80018ca:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <main+0x20c>)
 80018d2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21b      	sxth	r3, r3
 80018de:	b29b      	uxth	r3, r3
 80018e0:	82bb      	strh	r3, [r7, #20]
	  cells[1] = BMS_1.BQ_daStatus1[2] | (BMS_1.BQ_daStatus1[3] << 8);
 80018e2:	4b3f      	ldr	r3, [pc, #252]	@ (80019e0 <main+0x20c>)
 80018e4:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <main+0x20c>)
 80018ec:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	82fb      	strh	r3, [r7, #22]
	  cells[2] = BMS_1.BQ_daStatus1[4] | (BMS_1.BQ_daStatus1[5] << 8);
 80018fc:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <main+0x20c>)
 80018fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8001902:	b21a      	sxth	r2, r3
 8001904:	4b36      	ldr	r3, [pc, #216]	@ (80019e0 <main+0x20c>)
 8001906:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21b      	sxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b21b      	sxth	r3, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	833b      	strh	r3, [r7, #24]
	  cells[3] = BMS_1.BQ_daStatus1[6] | (BMS_1.BQ_daStatus1[7] << 8);
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <main+0x20c>)
 8001918:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800191c:	b21a      	sxth	r2, r3
 800191e:	4b30      	ldr	r3, [pc, #192]	@ (80019e0 <main+0x20c>)
 8001920:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	b29b      	uxth	r3, r3
 800192e:	837b      	strh	r3, [r7, #26]
	  cells[4] = BMS_1.BQ_daStatus3[0] | (BMS_1.BQ_daStatus3[1] << 8);
 8001930:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <main+0x20c>)
 8001932:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8001936:	b21a      	sxth	r2, r3
 8001938:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <main+0x20c>)
 800193a:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21b      	sxth	r3, r3
 8001942:	4313      	orrs	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	83bb      	strh	r3, [r7, #28]
	  cells[5] = BMS_1.BQ_daStatus3[6] | (BMS_1.BQ_daStatus3[7] << 8);
 800194a:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <main+0x20c>)
 800194c:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <main+0x20c>)
 8001954:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21b      	sxth	r3, r3
 8001960:	b29b      	uxth	r3, r3
 8001962:	83fb      	strh	r3, [r7, #30]

	  // -----toggle fets--------
	  if(status){
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <main+0x208>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00c      	beq.n	8001986 <main+0x1b2>
		  BQAction_EnableDischarging(BMS_1);
 800196c:	4c1c      	ldr	r4, [pc, #112]	@ (80019e0 <main+0x20c>)
 800196e:	4668      	mov	r0, sp
 8001970:	f104 0310 	add.w	r3, r4, #16
 8001974:	22f0      	movs	r2, #240	@ 0xf0
 8001976:	4619      	mov	r1, r3
 8001978:	f003 fb76 	bl	8005068 <memcpy>
 800197c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001980:	f7fe ff39 	bl	80007f6 <BQAction_EnableDischarging>
 8001984:	e00b      	b.n	800199e <main+0x1ca>
	  }else{
		  BQAction_DisableFets(BMS_1);
 8001986:	4c16      	ldr	r4, [pc, #88]	@ (80019e0 <main+0x20c>)
 8001988:	4668      	mov	r0, sp
 800198a:	f104 0310 	add.w	r3, r4, #16
 800198e:	22f0      	movs	r2, #240	@ 0xf0
 8001990:	4619      	mov	r1, r3
 8001992:	f003 fb69 	bl	8005068 <memcpy>
 8001996:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800199a:	f7fe fff5 	bl	8000988 <BQAction_DisableFets>
	  }
	  fun[0] = BQ_IsDischargeFetEnabled(BMS_1);
 800199e:	4c10      	ldr	r4, [pc, #64]	@ (80019e0 <main+0x20c>)
 80019a0:	4668      	mov	r0, sp
 80019a2:	f104 0310 	add.w	r3, r4, #16
 80019a6:	22f0      	movs	r2, #240	@ 0xf0
 80019a8:	4619      	mov	r1, r3
 80019aa:	f003 fb5d 	bl	8005068 <memcpy>
 80019ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b2:	f7ff fc21 	bl	80011f8 <BQ_IsDischargeFetEnabled>
 80019b6:	4603      	mov	r3, r0
 80019b8:	733b      	strb	r3, [r7, #12]
	  fun[1] = BQ_IsDischargeEnabled(BMS_1);
 80019ba:	4c09      	ldr	r4, [pc, #36]	@ (80019e0 <main+0x20c>)
 80019bc:	4668      	mov	r0, sp
 80019be:	f104 0310 	add.w	r3, r4, #16
 80019c2:	22f0      	movs	r2, #240	@ 0xf0
 80019c4:	4619      	mov	r1, r3
 80019c6:	f003 fb4f 	bl	8005068 <memcpy>
 80019ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019ce:	f7ff fc37 	bl	8001240 <BQ_IsDischargeEnabled>
 80019d2:	4603      	mov	r3, r0
 80019d4:	737b      	strb	r3, [r7, #13]
	  HAL_Delay(200);
 80019d6:	e73e      	b.n	8001856 <main+0x82>
 80019d8:	2000012c 	.word	0x2000012c
 80019dc:	20000180 	.word	0x20000180
 80019e0:	2000002c 	.word	0x2000002c
 80019e4:	20000000 	.word	0x20000000

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b096      	sub	sp, #88	@ 0x58
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	2244      	movs	r2, #68	@ 0x44
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fb0a 	bl	8005010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a0e:	f002 f96d 	bl	8003cec <HAL_PWREx_ControlVoltageScaling>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a18:	f000 f837 	bl	8001a8a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a26:	2310      	movs	r3, #16
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a36:	230a      	movs	r3, #10
 8001a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 f9a4 	bl	8003d98 <HAL_RCC_OscConfig>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a56:	f000 f818 	bl	8001a8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5a:	230f      	movs	r3, #15
 8001a5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2104      	movs	r1, #4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fda4 	bl	80045c0 <HAL_RCC_ClockConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a7e:	f000 f804 	bl	8001a8a <Error_Handler>
  }
}
 8001a82:	bf00      	nop
 8001a84:	3758      	adds	r7, #88	@ 0x58
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8e:	b672      	cpsid	i
}
 8001a90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a92:	bf00      	nop
 8001a94:	e7fd      	b.n	8001a92 <Error_Handler+0x8>
	...

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <HAL_MspInit+0x44>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <MemManage_Handler+0x4>

08001af8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b36:	f000 f8b7 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <I2C1_EV_IRQHandler+0x10>)
 8001b46:	f000 ffad 	bl	8002aa4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000012c 	.word	0x2000012c

08001b54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b58:	4802      	ldr	r0, [pc, #8]	@ (8001b64 <I2C1_ER_IRQHandler+0x10>)
 8001b5a:	f000 ffbd 	bl	8002ad8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000012c 	.word	0x2000012c

08001b68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b70:	f000 fbea 	bl	8002348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <SystemInit+0x20>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <SystemInit+0x20>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba0:	f7ff ffea 	bl	8001b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f003 fa29 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7ff fe01 	bl	80017d4 <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001be0:	080050e4 	.word	0x080050e4
  ldr r2, =_sbss
 8001be4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001be8:	20000188 	.word	0x20000188

08001bec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <HAL_Init+0x3c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <HAL_Init+0x3c>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f000 f962 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f80f 	bl	8001c30 <HAL_InitTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	e001      	b.n	8001c22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c1e:	f7ff ff3b 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c3c:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <HAL_InitTick+0x6c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d023      	beq.n	8001c8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <HAL_InitTick+0x70>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <HAL_InitTick+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f96d 	bl	8001f3a <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10f      	bne.n	8001c86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d809      	bhi.n	8001c80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 f937 	bl	8001ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca4 <HAL_InitTick+0x74>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e007      	b.n	8001c90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e004      	b.n	8001c90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
 8001c8a:	e001      	b.n	8001c90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	20000184 	.word	0x20000184

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000184 	.word	0x20000184

08001ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_Delay+0x44>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4907      	ldr	r1, [pc, #28]	@ (8001dcc <__NVIC_EnableIRQ+0x38>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff29 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef8:	f7ff ff3e 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	6978      	ldr	r0, [r7, #20]
 8001f04:	f7ff ff8e 	bl	8001e24 <NVIC_EncodePriority>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5d 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffa2 	bl	8001e8c <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d005      	beq.n	8001f76 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	e029      	b.n	8001fca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020e 	bic.w	r2, r2, #14
 8001f84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9a:	f003 021c 	and.w	r2, r3, #28
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
    }
  }
  return status;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fe2:	b2db      	uxtb	r3, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	e154      	b.n	80022aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 8146 	beq.w	80022a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d005      	beq.n	8002030 <HAL_GPIO_Init+0x40>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d130      	bne.n	8002092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002066:	2201      	movs	r2, #1
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0201 	and.w	r2, r3, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b03      	cmp	r3, #3
 800209c:	d017      	beq.n	80020ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d123      	bne.n	8002122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	6939      	ldr	r1, [r7, #16]
 800211e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0203 	and.w	r2, r3, #3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a0 	beq.w	80022a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002164:	4b58      	ldr	r3, [pc, #352]	@ (80022c8 <HAL_GPIO_Init+0x2d8>)
 8002166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002168:	4a57      	ldr	r2, [pc, #348]	@ (80022c8 <HAL_GPIO_Init+0x2d8>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002170:	4b55      	ldr	r3, [pc, #340]	@ (80022c8 <HAL_GPIO_Init+0x2d8>)
 8002172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800217c:	4a53      	ldr	r2, [pc, #332]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021a6:	d019      	beq.n	80021dc <HAL_GPIO_Init+0x1ec>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a49      	ldr	r2, [pc, #292]	@ (80022d0 <HAL_GPIO_Init+0x2e0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <HAL_GPIO_Init+0x1e8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a48      	ldr	r2, [pc, #288]	@ (80022d4 <HAL_GPIO_Init+0x2e4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00d      	beq.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a47      	ldr	r2, [pc, #284]	@ (80022d8 <HAL_GPIO_Init+0x2e8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <HAL_GPIO_Init+0x1e0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a46      	ldr	r2, [pc, #280]	@ (80022dc <HAL_GPIO_Init+0x2ec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_GPIO_Init+0x1dc>
 80021c8:	2304      	movs	r3, #4
 80021ca:	e008      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021cc:	2307      	movs	r3, #7
 80021ce:	e006      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d0:	2303      	movs	r3, #3
 80021d2:	e004      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e002      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_GPIO_Init+0x1ee>
 80021dc:	2300      	movs	r3, #0
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ee:	4937      	ldr	r1, [pc, #220]	@ (80022cc <HAL_GPIO_Init+0x2dc>)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fc:	4b38      	ldr	r3, [pc, #224]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002220:	4a2f      	ldr	r2, [pc, #188]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002226:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800224a:	4a25      	ldr	r2, [pc, #148]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002250:	4b23      	ldr	r3, [pc, #140]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43db      	mvns	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002274:	4a1a      	ldr	r2, [pc, #104]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800229e:	4a10      	ldr	r2, [pc, #64]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f aea3 	bne.w	8002000 <HAL_GPIO_Init+0x10>
  }
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010000 	.word	0x40010000
 80022d0:	48000400 	.word	0x48000400
 80022d4:	48000800 	.word	0x48000800
 80022d8:	48000c00 	.word	0x48000c00
 80022dc:	48001000 	.word	0x48001000
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002300:	e002      	b.n	8002308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	041a      	lsls	r2, r3, #16
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43d9      	mvns	r1, r3
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	400b      	ands	r3, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002352:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800235e:	4a05      	ldr	r2, [pc, #20]	@ (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fa0e 	bl	8001788 <HAL_GPIO_EXTI_Callback>
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e08d      	b.n	80024a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff f926 	bl	80015f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2224      	movs	r2, #36	@ 0x24
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e006      	b.n	8002400 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d108      	bne.n	800241a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	e007      	b.n	800242a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002428:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002438:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800243c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800244c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69d9      	ldr	r1, [r3, #28]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1a      	ldr	r2, [r3, #32]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	461a      	mov	r2, r3
 80024bc:	460b      	mov	r3, r1
 80024be:	817b      	strh	r3, [r7, #10]
 80024c0:	4613      	mov	r3, r2
 80024c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	f040 80fd 	bne.w	80026cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_I2C_Master_Transmit+0x30>
 80024dc:	2302      	movs	r3, #2
 80024de:	e0f6      	b.n	80026ce <HAL_I2C_Master_Transmit+0x21e>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024e8:	f7ff fbf2 	bl	8001cd0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2319      	movs	r3, #25
 80024f4:	2201      	movs	r2, #1
 80024f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f001 f871 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0e1      	b.n	80026ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	@ 0x21
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2210      	movs	r2, #16
 8002516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	2bff      	cmp	r3, #255	@ 0xff
 800253a:	d906      	bls.n	800254a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	22ff      	movs	r2, #255	@ 0xff
 8002540:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002542:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e007      	b.n	800255a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002554:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002558:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255e:	2b00      	cmp	r3, #0
 8002560:	d024      	beq.n	80025ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3301      	adds	r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	4b4e      	ldr	r3, [pc, #312]	@ (80026d8 <HAL_I2C_Master_Transmit+0x228>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f001 fa6b 	bl	8003a80 <I2C_TransferConfig>
 80025aa:	e066      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	4b48      	ldr	r3, [pc, #288]	@ (80026d8 <HAL_I2C_Master_Transmit+0x228>)
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f001 fa60 	bl	8003a80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025c0:	e05b      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	6a39      	ldr	r1, [r7, #32]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f001 f864 	bl	8003694 <I2C_WaitOnTXISFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07b      	b.n	80026ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d034      	beq.n	800267a <HAL_I2C_Master_Transmit+0x1ca>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	d130      	bne.n	800267a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 ffdd 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e04d      	b.n	80026ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	2bff      	cmp	r3, #255	@ 0xff
 800263a:	d90e      	bls.n	800265a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	22ff      	movs	r2, #255	@ 0xff
 8002640:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002646:	b2da      	uxtb	r2, r3
 8002648:	8979      	ldrh	r1, [r7, #10]
 800264a:	2300      	movs	r3, #0
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f001 fa14 	bl	8003a80 <I2C_TransferConfig>
 8002658:	e00f      	b.n	800267a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002668:	b2da      	uxtb	r2, r3
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	2300      	movs	r3, #0
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f001 fa03 	bl	8003a80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d19e      	bne.n	80025c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	6a39      	ldr	r1, [r7, #32]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f001 f84a 	bl	8003722 <I2C_WaitOnSTOPFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <HAL_I2C_Master_Transmit+0x22c>)
 80026ac:	400b      	ands	r3, r1
 80026ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	80002000 	.word	0x80002000
 80026dc:	fe00e800 	.word	0xfe00e800

080026e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
 80026f0:	4613      	mov	r3, r2
 80026f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	f040 80db 	bne.w	80028b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_I2C_Master_Receive+0x30>
 800270c:	2302      	movs	r3, #2
 800270e:	e0d4      	b.n	80028ba <HAL_I2C_Master_Receive+0x1da>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002718:	f7ff fada 	bl	8001cd0 <HAL_GetTick>
 800271c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2319      	movs	r3, #25
 8002724:	2201      	movs	r2, #1
 8002726:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 ff59 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e0bf      	b.n	80028ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2222      	movs	r2, #34	@ 0x22
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2210      	movs	r2, #16
 8002746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	2bff      	cmp	r3, #255	@ 0xff
 800276a:	d90e      	bls.n	800278a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002776:	b2da      	uxtb	r2, r3
 8002778:	8979      	ldrh	r1, [r7, #10]
 800277a:	4b52      	ldr	r3, [pc, #328]	@ (80028c4 <HAL_I2C_Master_Receive+0x1e4>)
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f001 f97c 	bl	8003a80 <I2C_TransferConfig>
 8002788:	e06d      	b.n	8002866 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002798:	b2da      	uxtb	r2, r3
 800279a:	8979      	ldrh	r1, [r7, #10]
 800279c:	4b49      	ldr	r3, [pc, #292]	@ (80028c4 <HAL_I2C_Master_Receive+0x1e4>)
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f001 f96b 	bl	8003a80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027aa:	e05c      	b.n	8002866 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	6a39      	ldr	r1, [r7, #32]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fff9 	bl	80037a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e07c      	b.n	80028ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d034      	beq.n	8002866 <HAL_I2C_Master_Receive+0x186>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002800:	2b00      	cmp	r3, #0
 8002802:	d130      	bne.n	8002866 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2200      	movs	r2, #0
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fee7 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e04d      	b.n	80028ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	2bff      	cmp	r3, #255	@ 0xff
 8002826:	d90e      	bls.n	8002846 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	22ff      	movs	r2, #255	@ 0xff
 800282c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002832:	b2da      	uxtb	r2, r3
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	2300      	movs	r3, #0
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f001 f91e 	bl	8003a80 <I2C_TransferConfig>
 8002844:	e00f      	b.n	8002866 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8979      	ldrh	r1, [r7, #10]
 8002858:	2300      	movs	r3, #0
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f001 f90d 	bl	8003a80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d19d      	bne.n	80027ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6a39      	ldr	r1, [r7, #32]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 ff54 	bl	8003722 <I2C_WaitOnSTOPFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e01a      	b.n	80028ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2220      	movs	r2, #32
 800288a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <HAL_I2C_Master_Receive+0x1e8>)
 8002898:	400b      	ands	r3, r1
 800289a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	80002400 	.word	0x80002400
 80028c8:	fe00e800 	.word	0xfe00e800

080028cc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	460b      	mov	r3, r1
 80028da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	f040 80d6 	bne.w	8002a9a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
 8002900:	e0cc      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_I2C_IsDeviceReady+0x44>
 800290c:	2302      	movs	r3, #2
 800290e:	e0c5      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d0>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2224      	movs	r2, #36	@ 0x24
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d107      	bne.n	800293e <HAL_I2C_IsDeviceReady+0x72>
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002938:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800293c:	e006      	b.n	800294c <HAL_I2C_IsDeviceReady+0x80>
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002944:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002948:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002952:	f7ff f9bd 	bl	8001cd0 <HAL_GetTick>
 8002956:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b20      	cmp	r3, #32
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002984:	e034      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d01a      	beq.n	80029c4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7ff f99f 	bl	8001cd0 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <HAL_I2C_IsDeviceReady+0xd8>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10f      	bne.n	80029c4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e06b      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_I2C_IsDeviceReady+0x130>
 80029f6:	7fbb      	ldrb	r3, [r7, #30]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0c4      	beq.n	8002986 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d01a      	beq.n	8002a40 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2120      	movs	r1, #32
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fde4 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e03b      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e02d      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	2120      	movs	r1, #32
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fdc9 	bl	80035e2 <I2C_WaitOnFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e020      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2220      	movs	r2, #32
 8002a68:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f63f af56 	bhi.w	8002926 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	4798      	blx	r3
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00f      	beq.n	8002b1a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00f      	beq.n	8002b44 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f043 0208 	orr.w	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00f      	beq.n	8002b6e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5c:	f043 0202 	orr.w	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f003 030b 	and.w	r3, r3, #11
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fbd5 	bl	8003330 <I2C_ITError>
  }
}
 8002b86:	bf00      	nop
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <I2C_Slave_ISR_IT+0x24>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0e2      	b.n	8002df8 <I2C_Slave_ISR_IT+0x1ea>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c4e:	6939      	ldr	r1, [r7, #16]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9b5 	bl	8002fc0 <I2C_ITSlaveCplt>
 8002c56:	e0ca      	b.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d04b      	beq.n	8002cfa <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d046      	beq.n	8002cfa <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d128      	bne.n	8002cc8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b28      	cmp	r3, #40	@ 0x28
 8002c80:	d108      	bne.n	8002c94 <I2C_Slave_ISR_IT+0x86>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c88:	d104      	bne.n	8002c94 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c8a:	6939      	ldr	r1, [r7, #16]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fafb 	bl	8003288 <I2C_ITListenCplt>
 8002c92:	e031      	b.n	8002cf8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b29      	cmp	r3, #41	@ 0x29
 8002c9e:	d10e      	bne.n	8002cbe <I2C_Slave_ISR_IT+0xb0>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ca6:	d00a      	beq.n	8002cbe <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2210      	movs	r2, #16
 8002cae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fc54 	bl	800355e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f926 	bl	8002f08 <I2C_ITSlaveSeqCplt>
 8002cbc:	e01c      	b.n	8002cf8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002cc6:	e08f      	b.n	8002de8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <I2C_Slave_ISR_IT+0xdc>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce8:	d17e      	bne.n	8002de8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4619      	mov	r1, r3
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fb1d 	bl	8003330 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cf6:	e077      	b.n	8002de8 <I2C_Slave_ISR_IT+0x1da>
 8002cf8:	e076      	b.n	8002de8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d02f      	beq.n	8002d64 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02a      	beq.n	8002d64 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d018      	beq.n	8002d4a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d14b      	bne.n	8002dec <I2C_Slave_ISR_IT+0x1de>
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d5a:	d047      	beq.n	8002dec <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f8d3 	bl	8002f08 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d62:	e043      	b.n	8002dec <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d004      	beq.n	8002d82 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d78:	6939      	ldr	r1, [r7, #16]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f840 	bl	8002e00 <I2C_ITAddrCplt>
 8002d80:	e035      	b.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d030      	beq.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d02b      	beq.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d018      	beq.n	8002dd2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002dd0:	e00d      	b.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd8:	d002      	beq.n	8002de0 <I2C_Slave_ISR_IT+0x1d2>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f891 	bl	8002f08 <I2C_ITSlaveSeqCplt>
 8002de6:	e002      	b.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002dec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e16:	2b28      	cmp	r3, #40	@ 0x28
 8002e18:	d16a      	bne.n	8002ef0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e38:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e46:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e54:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d138      	bne.n	8002ed0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	09db      	lsrs	r3, r3, #7
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	89bb      	ldrh	r3, [r7, #12]
 8002e66:	4053      	eors	r3, r2
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11c      	bne.n	8002eac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d13b      	bne.n	8002f00 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2208      	movs	r2, #8
 8002e94:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e9e:	89ba      	ldrh	r2, [r7, #12]
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff fe86 	bl	8002bb6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002eaa:	e029      	b.n	8002f00 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002eac:	893b      	ldrh	r3, [r7, #8]
 8002eae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002eb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 fe15 	bl	8003ae4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ec2:	89ba      	ldrh	r2, [r7, #12]
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fe74 	bl	8002bb6 <HAL_I2C_AddrCallback>
}
 8002ece:	e017      	b.n	8002f00 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ed0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fe05 	bl	8003ae4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ee2:	89ba      	ldrh	r2, [r7, #12]
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fe64 	bl	8002bb6 <HAL_I2C_AddrCallback>
}
 8002eee:	e007      	b.n	8002f00 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e00c      	b.n	8002f56 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b29      	cmp	r3, #41	@ 0x29
 8002f60:	d112      	bne.n	8002f88 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2228      	movs	r2, #40	@ 0x28
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2221      	movs	r2, #33	@ 0x21
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f70:	2101      	movs	r1, #1
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fdb6 	bl	8003ae4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fe04 	bl	8002b8e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f86:	e017      	b.n	8002fb8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f92:	d111      	bne.n	8002fb8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2228      	movs	r2, #40	@ 0x28
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2222      	movs	r2, #34	@ 0x22
 8002fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fd9d 	bl	8003ae4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fdf5 	bl	8002ba2 <HAL_I2C_SlaveRxCpltCallback>
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	2b21      	cmp	r3, #33	@ 0x21
 8002ff0:	d002      	beq.n	8002ff8 <I2C_ITSlaveCplt+0x38>
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	2b29      	cmp	r3, #41	@ 0x29
 8002ff6:	d108      	bne.n	800300a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ff8:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fd71 	bl	8003ae4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2221      	movs	r2, #33	@ 0x21
 8003006:	631a      	str	r2, [r3, #48]	@ 0x30
 8003008:	e019      	b.n	800303e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	2b22      	cmp	r3, #34	@ 0x22
 800300e:	d002      	beq.n	8003016 <I2C_ITSlaveCplt+0x56>
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	2b2a      	cmp	r3, #42	@ 0x2a
 8003014:	d108      	bne.n	8003028 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003016:	f248 0102 	movw	r1, #32770	@ 0x8002
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fd62 	bl	8003ae4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2222      	movs	r2, #34	@ 0x22
 8003024:	631a      	str	r2, [r3, #48]	@ 0x30
 8003026:	e00a      	b.n	800303e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	2b28      	cmp	r3, #40	@ 0x28
 800302c:	d107      	bne.n	800303e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800302e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fd56 	bl	8003ae4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800304c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b89      	ldr	r3, [pc, #548]	@ (8003280 <I2C_ITSlaveCplt+0x2c0>)
 800305a:	400b      	ands	r3, r1
 800305c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa7d 	bl	800355e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d013      	beq.n	8003096 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800307c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01f      	beq.n	80030c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003094:	e017      	b.n	80030c6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d012      	beq.n	80030c6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d006      	beq.n	80030c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f023 0304 	bic.w	r3, r3, #4
 80030d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d049      	beq.n	80031c6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003138:	2b00      	cmp	r3, #0
 800313a:	d044      	beq.n	80031c6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d128      	bne.n	8003198 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b28      	cmp	r3, #40	@ 0x28
 8003150:	d108      	bne.n	8003164 <I2C_ITSlaveCplt+0x1a4>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003158:	d104      	bne.n	8003164 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800315a:	6979      	ldr	r1, [r7, #20]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f893 	bl	8003288 <I2C_ITListenCplt>
 8003162:	e030      	b.n	80031c6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b29      	cmp	r3, #41	@ 0x29
 800316e:	d10e      	bne.n	800318e <I2C_ITSlaveCplt+0x1ce>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003176:	d00a      	beq.n	800318e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f9ec 	bl	800355e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff febe 	bl	8002f08 <I2C_ITSlaveSeqCplt>
 800318c:	e01b      	b.n	80031c6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2210      	movs	r2, #16
 8003194:	61da      	str	r2, [r3, #28]
 8003196:	e016      	b.n	80031c6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2210      	movs	r2, #16
 800319e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a4:	f043 0204 	orr.w	r2, r3, #4
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <I2C_ITSlaveCplt+0x1fa>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031b8:	d105      	bne.n	80031c6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f8b5 	bl	8003330 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	4619      	mov	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8a4 	bl	8003330 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b28      	cmp	r3, #40	@ 0x28
 80031f2:	d141      	bne.n	8003278 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031f4:	6979      	ldr	r1, [r7, #20]
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f846 	bl	8003288 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031fc:	e03c      	b.n	8003278 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003206:	d014      	beq.n	8003232 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fe7d 	bl	8002f08 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a1c      	ldr	r2, [pc, #112]	@ (8003284 <I2C_ITSlaveCplt+0x2c4>)
 8003212:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fcd1 	bl	8002bd2 <HAL_I2C_ListenCpltCallback>
}
 8003230:	e022      	b.n	8003278 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b22      	cmp	r3, #34	@ 0x22
 800323c:	d10e      	bne.n	800325c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff fca4 	bl	8002ba2 <HAL_I2C_SlaveRxCpltCallback>
}
 800325a:	e00d      	b.n	8003278 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7ff fc8b 	bl	8002b8e <HAL_I2C_SlaveTxCpltCallback>
}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	fe00e800 	.word	0xfe00e800
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a25      	ldr	r2, [pc, #148]	@ (800332c <I2C_ITListenCplt+0xa4>)
 8003296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d022      	beq.n	8003304 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003304:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fbeb 	bl	8003ae4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2210      	movs	r2, #16
 8003314:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff fc57 	bl	8002bd2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	ffff0000 	.word	0xffff0000

08003330 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003340:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a6d      	ldr	r2, [pc, #436]	@ (8003504 <I2C_ITError+0x1d4>)
 800334e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b28      	cmp	r3, #40	@ 0x28
 8003366:	d005      	beq.n	8003374 <I2C_ITError+0x44>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b29      	cmp	r3, #41	@ 0x29
 800336c:	d002      	beq.n	8003374 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b2a      	cmp	r3, #42	@ 0x2a
 8003372:	d10b      	bne.n	800338c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003374:	2103      	movs	r1, #3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fbb4 	bl	8003ae4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2228      	movs	r2, #40	@ 0x28
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a60      	ldr	r2, [pc, #384]	@ (8003508 <I2C_ITError+0x1d8>)
 8003388:	635a      	str	r2, [r3, #52]	@ 0x34
 800338a:	e030      	b.n	80033ee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800338c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fba7 	bl	8003ae4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8e1 	bl	800355e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b60      	cmp	r3, #96	@ 0x60
 80033a6:	d01f      	beq.n	80033e8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d114      	bne.n	80033e8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d109      	bne.n	80033e0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2210      	movs	r2, #16
 80033d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2220      	movs	r2, #32
 80033e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d039      	beq.n	8003470 <I2C_ITError+0x140>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b11      	cmp	r3, #17
 8003400:	d002      	beq.n	8003408 <I2C_ITError+0xd8>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b21      	cmp	r3, #33	@ 0x21
 8003406:	d133      	bne.n	8003470 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003412:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003416:	d107      	bne.n	8003428 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003426:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe fdd1 	bl	8001fd4 <HAL_DMA_GetState>
 8003432:	4603      	mov	r3, r0
 8003434:	2b01      	cmp	r3, #1
 8003436:	d017      	beq.n	8003468 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343c:	4a33      	ldr	r2, [pc, #204]	@ (800350c <I2C_ITError+0x1dc>)
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fd80 	bl	8001f52 <HAL_DMA_Abort_IT>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d04d      	beq.n	80034f4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003462:	4610      	mov	r0, r2
 8003464:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003466:	e045      	b.n	80034f4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f851 	bl	8003510 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800346e:	e041      	b.n	80034f4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d039      	beq.n	80034ec <I2C_ITError+0x1bc>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b12      	cmp	r3, #18
 800347c:	d002      	beq.n	8003484 <I2C_ITError+0x154>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b22      	cmp	r3, #34	@ 0x22
 8003482:	d133      	bne.n	80034ec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800348e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003492:	d107      	bne.n	80034a4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fd93 	bl	8001fd4 <HAL_DMA_GetState>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d017      	beq.n	80034e4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	4a14      	ldr	r2, [pc, #80]	@ (800350c <I2C_ITError+0x1dc>)
 80034ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fd42 	bl	8001f52 <HAL_DMA_Abort_IT>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d011      	beq.n	80034f8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034de:	4610      	mov	r0, r2
 80034e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034e2:	e009      	b.n	80034f8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f813 	bl	8003510 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ea:	e005      	b.n	80034f8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f80f 	bl	8003510 <I2C_TreatErrorCallback>
  }
}
 80034f2:	e002      	b.n	80034fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f8:	bf00      	nop
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	ffff0000 	.word	0xffff0000
 8003508:	08002c0f 	.word	0x08002c0f
 800350c:	080035a7 	.word	0x080035a7

08003510 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b60      	cmp	r3, #96	@ 0x60
 8003522:	d10e      	bne.n	8003542 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff fb5d 	bl	8002bfa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003540:	e009      	b.n	8003556 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fb48 	bl	8002be6 <HAL_I2C_ErrorCallback>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b02      	cmp	r3, #2
 8003572:	d103      	bne.n	800357c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d007      	beq.n	800359a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	619a      	str	r2, [r3, #24]
  }
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	2200      	movs	r2, #0
 80035c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	2200      	movs	r2, #0
 80035d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff ff9b 	bl	8003510 <I2C_TreatErrorCallback>
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f2:	e03b      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f961 	bl	80038c0 <I2C_IsErrorOccurred>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e041      	b.n	800368c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d02d      	beq.n	800366c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fb5e 	bl	8001cd0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d122      	bne.n	800366c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d113      	bne.n	800366c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e00f      	b.n	800368c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	429a      	cmp	r2, r3
 8003688:	d0b4      	beq.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036a0:	e033      	b.n	800370a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f90a 	bl	80038c0 <I2C_IsErrorOccurred>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e031      	b.n	800371a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d025      	beq.n	800370a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fe fb07 	bl	8001cd0 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11a      	bne.n	800370a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d013      	beq.n	800370a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e007      	b.n	800371a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d1c4      	bne.n	80036a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800372e:	e02f      	b.n	8003790 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f8c3 	bl	80038c0 <I2C_IsErrorOccurred>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e02d      	b.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fac4 	bl	8001cd0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11a      	bne.n	8003790 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b20      	cmp	r3, #32
 8003766:	d013      	beq.n	8003790 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e007      	b.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b20      	cmp	r3, #32
 800379c:	d1c8      	bne.n	8003730 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037b8:	e071      	b.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f87e 	bl	80038c0 <I2C_IsErrorOccurred>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d13b      	bne.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d138      	bne.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d105      	bne.n	80037fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b10      	cmp	r3, #16
 8003808:	d121      	bne.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2210      	movs	r2, #16
 8003810:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2204      	movs	r2, #4
 8003816:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2220      	movs	r2, #32
 800381e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b24      	ldr	r3, [pc, #144]	@ (80038bc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800382c:	400b      	ands	r3, r1
 800382e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
 800384c:	e002      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003854:	f7fe fa3c 	bl	8001cd0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d302      	bcc.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d119      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d116      	bne.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b04      	cmp	r3, #4
 800387c:	d00f      	beq.n	800389e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d002      	beq.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d083      	beq.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	fe00e800 	.word	0xfe00e800

080038c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	@ 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d068      	beq.n	80039be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2210      	movs	r2, #16
 80038f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038f4:	e049      	b.n	800398a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d045      	beq.n	800398a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038fe:	f7fe f9e7 	bl	8001cd0 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <I2C_IsErrorOccurred+0x54>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d13a      	bne.n	800398a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800391e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003926:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003936:	d121      	bne.n	800397c <I2C_IsErrorOccurred+0xbc>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393e:	d01d      	beq.n	800397c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b20      	cmp	r3, #32
 8003944:	d01a      	beq.n	800397c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003954:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003956:	f7fe f9bb 	bl	8001cd0 <HAL_GetTick>
 800395a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800395c:	e00e      	b.n	800397c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800395e:	f7fe f9b7 	bl	8001cd0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b19      	cmp	r3, #25
 800396a:	d907      	bls.n	800397c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f043 0320 	orr.w	r3, r3, #32
 8003972:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800397a:	e006      	b.n	800398a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b20      	cmp	r3, #32
 8003988:	d1e9      	bne.n	800395e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b20      	cmp	r3, #32
 8003996:	d003      	beq.n	80039a0 <I2C_IsErrorOccurred+0xe0>
 8003998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0aa      	beq.n	80038f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2220      	movs	r2, #32
 80039ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f043 0304 	orr.w	r3, r3, #4
 80039b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f043 0308 	orr.w	r3, r3, #8
 80039f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	f043 0302 	orr.w	r3, r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01c      	beq.n	8003a6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f7ff fd92 	bl	800355e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <I2C_IsErrorOccurred+0x1bc>)
 8003a46:	400b      	ands	r3, r1
 8003a48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3728      	adds	r7, #40	@ 0x28
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	fe00e800 	.word	0xfe00e800

08003a80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a92:	897b      	ldrh	r3, [r7, #10]
 8003a94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a98:	7a7b      	ldrb	r3, [r7, #9]
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003aae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	0d5b      	lsrs	r3, r3, #21
 8003aba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <I2C_TransferConfig+0x60>)
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	ea02 0103 	and.w	r1, r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	03ff63ff 	.word	0x03ff63ff

08003ae4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00f      	beq.n	8003b1e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003b04:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b12:	2b28      	cmp	r3, #40	@ 0x28
 8003b14:	d003      	beq.n	8003b1e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b1e:	887b      	ldrh	r3, [r7, #2]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00f      	beq.n	8003b48 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003b2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b3c:	2b28      	cmp	r3, #40	@ 0x28
 8003b3e:	d003      	beq.n	8003b48 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da03      	bge.n	8003b58 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003b56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b58:	887b      	ldrh	r3, [r7, #2]
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d103      	bne.n	8003b66 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d103      	bne.n	8003b74 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f043 0320 	orr.w	r3, r3, #32
 8003b72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d103      	bne.n	8003b82 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6819      	ldr	r1, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	400a      	ands	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b20      	cmp	r3, #32
 8003bb4:	d138      	bne.n	8003c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e032      	b.n	8003c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2224      	movs	r2, #36	@ 0x24
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0201 	bic.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d139      	bne.n	8003cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e033      	b.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2224      	movs	r2, #36	@ 0x24
 8003c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40007000 	.word	0x40007000

08003cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfa:	d130      	bne.n	8003d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfc:	4b23      	ldr	r3, [pc, #140]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d08:	d038      	beq.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d0a:	4b20      	ldr	r3, [pc, #128]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d12:	4a1e      	ldr	r2, [pc, #120]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2232      	movs	r2, #50	@ 0x32
 8003d20:	fb02 f303 	mul.w	r3, r2, r3
 8003d24:	4a1b      	ldr	r2, [pc, #108]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0c9b      	lsrs	r3, r3, #18
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d30:	e002      	b.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d38:	4b14      	ldr	r3, [pc, #80]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d44:	d102      	bne.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f2      	bne.n	8003d32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d58:	d110      	bne.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e00f      	b.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6a:	d007      	beq.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d74:	4a05      	ldr	r2, [pc, #20]	@ (8003d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	20000004 	.word	0x20000004
 8003d94:	431bde83 	.word	0x431bde83

08003d98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f000 bc02 	b.w	80045b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dac:	4b96      	ldr	r3, [pc, #600]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db6:	4b94      	ldr	r3, [pc, #592]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80e4 	beq.w	8003f96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4c>
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	f040 808b 	bne.w	8003ef2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	f040 8087 	bne.w	8003ef2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003de4:	4b88      	ldr	r3, [pc, #544]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_OscConfig+0x64>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e3d9      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	4b81      	ldr	r3, [pc, #516]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_RCC_OscConfig+0x7e>
 8003e0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e14:	e005      	b.n	8003e22 <HAL_RCC_OscConfig+0x8a>
 8003e16:	4b7c      	ldr	r3, [pc, #496]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d223      	bcs.n	8003e6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fd54 	bl	80048d8 <RCC_SetFlashLatencyFromMSIRange>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e3ba      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e3a:	4b73      	ldr	r3, [pc, #460]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a72      	ldr	r2, [pc, #456]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e40:	f043 0308 	orr.w	r3, r3, #8
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4b70      	ldr	r3, [pc, #448]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	496d      	ldr	r1, [pc, #436]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e58:	4b6b      	ldr	r3, [pc, #428]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	4968      	ldr	r1, [pc, #416]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
 8003e6c:	e025      	b.n	8003eba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e6e:	4b66      	ldr	r3, [pc, #408]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a65      	ldr	r2, [pc, #404]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e74:	f043 0308 	orr.w	r3, r3, #8
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b63      	ldr	r3, [pc, #396]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4960      	ldr	r1, [pc, #384]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	495b      	ldr	r1, [pc, #364]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fd14 	bl	80048d8 <RCC_SetFlashLatencyFromMSIRange>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e37a      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eba:	f000 fc81 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b51      	ldr	r3, [pc, #324]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	4950      	ldr	r1, [pc, #320]	@ (800400c <HAL_RCC_OscConfig+0x274>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a4e      	ldr	r2, [pc, #312]	@ (8004010 <HAL_RCC_OscConfig+0x278>)
 8003ed8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003eda:	4b4e      	ldr	r3, [pc, #312]	@ (8004014 <HAL_RCC_OscConfig+0x27c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd fea6 	bl	8001c30 <HAL_InitTick>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d052      	beq.n	8003f94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	e35e      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d032      	beq.n	8003f60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003efa:	4b43      	ldr	r3, [pc, #268]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a42      	ldr	r2, [pc, #264]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f06:	f7fd fee3 	bl	8001cd0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f0e:	f7fd fedf 	bl	8001cd0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e347      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f20:	4b39      	ldr	r3, [pc, #228]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2c:	4b36      	ldr	r3, [pc, #216]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a35      	ldr	r2, [pc, #212]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f32:	f043 0308 	orr.w	r3, r3, #8
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b33      	ldr	r3, [pc, #204]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4930      	ldr	r1, [pc, #192]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	492b      	ldr	r1, [pc, #172]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
 8003f5e:	e01a      	b.n	8003f96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f60:	4b29      	ldr	r3, [pc, #164]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a28      	ldr	r2, [pc, #160]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6c:	f7fd feb0 	bl	8001cd0 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f74:	f7fd feac 	bl	8001cd0 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e314      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f86:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1dc>
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d073      	beq.n	800408a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x21c>
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d10e      	bne.n	8003fcc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d10b      	bne.n	8003fcc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb4:	4b14      	ldr	r3, [pc, #80]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d063      	beq.n	8004088 <HAL_RCC_OscConfig+0x2f0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d15f      	bne.n	8004088 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e2f1      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0b      	ldr	r2, [pc, #44]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e025      	b.n	8004030 <HAL_RCC_OscConfig+0x298>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fec:	d114      	bne.n	8004018 <HAL_RCC_OscConfig+0x280>
 8003fee:	4b06      	ldr	r3, [pc, #24]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a05      	ldr	r2, [pc, #20]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a02      	ldr	r2, [pc, #8]	@ (8004008 <HAL_RCC_OscConfig+0x270>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e013      	b.n	8004030 <HAL_RCC_OscConfig+0x298>
 8004008:	40021000 	.word	0x40021000
 800400c:	0800509c 	.word	0x0800509c
 8004010:	20000004 	.word	0x20000004
 8004014:	20000008 	.word	0x20000008
 8004018:	4ba0      	ldr	r3, [pc, #640]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a9f      	ldr	r2, [pc, #636]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b9d      	ldr	r3, [pc, #628]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a9c      	ldr	r2, [pc, #624]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd fe4a 	bl	8001cd0 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd fe46 	bl	8001cd0 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	@ 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e2ae      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004052:	4b92      	ldr	r3, [pc, #584]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x2a8>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd fe36 	bl	8001cd0 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd fe32 	bl	8001cd0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	@ 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e29a      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407a:	4b88      	ldr	r3, [pc, #544]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x2d0>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d060      	beq.n	8004158 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_OscConfig+0x310>
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b0c      	cmp	r3, #12
 80040a0:	d119      	bne.n	80040d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d116      	bne.n	80040d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a8:	4b7c      	ldr	r3, [pc, #496]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x328>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e277      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b76      	ldr	r3, [pc, #472]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	4973      	ldr	r1, [pc, #460]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d4:	e040      	b.n	8004158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d023      	beq.n	8004126 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040de:	4b6f      	ldr	r3, [pc, #444]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6e      	ldr	r2, [pc, #440]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80040e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd fdf1 	bl	8001cd0 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fd fded 	bl	8001cd0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e255      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004104:	4b65      	ldr	r3, [pc, #404]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b62      	ldr	r3, [pc, #392]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	495f      	ldr	r1, [pc, #380]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
 8004124:	e018      	b.n	8004158 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004126:	4b5d      	ldr	r3, [pc, #372]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5c      	ldr	r2, [pc, #368]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800412c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fd fdcd 	bl	8001cd0 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fd fdc9 	bl	8001cd0 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e231      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800414c:	4b53      	ldr	r3, [pc, #332]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d03c      	beq.n	80041de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416c:	4b4b      	ldr	r3, [pc, #300]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004172:	4a4a      	ldr	r2, [pc, #296]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fda8 	bl	8001cd0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fda4 	bl	8001cd0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e20c      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004196:	4b41      	ldr	r3, [pc, #260]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ef      	beq.n	8004184 <HAL_RCC_OscConfig+0x3ec>
 80041a4:	e01b      	b.n	80041de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a6:	4b3d      	ldr	r3, [pc, #244]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80041a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ac:	4a3b      	ldr	r2, [pc, #236]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fd fd8b 	bl	8001cd0 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041bc:	e008      	b.n	80041d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041be:	f7fd fd87 	bl	8001cd0 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d901      	bls.n	80041d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e1ef      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d0:	4b32      	ldr	r3, [pc, #200]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ef      	bne.n	80041be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80a6 	beq.w	8004338 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041f0:	4b2a      	ldr	r3, [pc, #168]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b27      	ldr	r3, [pc, #156]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004200:	4a26      	ldr	r2, [pc, #152]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	@ 0x58
 8004208:	4b24      	ldr	r3, [pc, #144]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004214:	2301      	movs	r3, #1
 8004216:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <HAL_RCC_OscConfig+0x508>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d118      	bne.n	8004256 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004224:	4b1e      	ldr	r3, [pc, #120]	@ (80042a0 <HAL_RCC_OscConfig+0x508>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <HAL_RCC_OscConfig+0x508>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800422e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004230:	f7fd fd4e 	bl	8001cd0 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004238:	f7fd fd4a 	bl	8001cd0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e1b2      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424a:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <HAL_RCC_OscConfig+0x508>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d108      	bne.n	8004270 <HAL_RCC_OscConfig+0x4d8>
 800425e:	4b0f      	ldr	r3, [pc, #60]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004264:	4a0d      	ldr	r2, [pc, #52]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800426e:	e029      	b.n	80042c4 <HAL_RCC_OscConfig+0x52c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d115      	bne.n	80042a4 <HAL_RCC_OscConfig+0x50c>
 8004278:	4b08      	ldr	r3, [pc, #32]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	4a07      	ldr	r2, [pc, #28]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004280:	f043 0304 	orr.w	r3, r3, #4
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004288:	4b04      	ldr	r3, [pc, #16]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	4a03      	ldr	r2, [pc, #12]	@ (800429c <HAL_RCC_OscConfig+0x504>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004298:	e014      	b.n	80042c4 <HAL_RCC_OscConfig+0x52c>
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
 80042a0:	40007000 	.word	0x40007000
 80042a4:	4b9a      	ldr	r3, [pc, #616]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042aa:	4a99      	ldr	r2, [pc, #612]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042b4:	4b96      	ldr	r3, [pc, #600]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ba:	4a95      	ldr	r2, [pc, #596]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d016      	beq.n	80042fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd fd00 	bl	8001cd0 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fd fcfc 	bl	8001cd0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e162      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ea:	4b89      	ldr	r3, [pc, #548]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ed      	beq.n	80042d4 <HAL_RCC_OscConfig+0x53c>
 80042f8:	e015      	b.n	8004326 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fa:	f7fd fce9 	bl	8001cd0 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004300:	e00a      	b.n	8004318 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fd fce5 	bl	8001cd0 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004310:	4293      	cmp	r3, r2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e14b      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004318:	4b7d      	ldr	r3, [pc, #500]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1ed      	bne.n	8004302 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004326:	7ffb      	ldrb	r3, [r7, #31]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d105      	bne.n	8004338 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432c:	4b78      	ldr	r3, [pc, #480]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	4a77      	ldr	r2, [pc, #476]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 8004332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004336:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03c      	beq.n	80043be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01c      	beq.n	8004386 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800434c:	4b70      	ldr	r3, [pc, #448]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800434e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004352:	4a6f      	ldr	r2, [pc, #444]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fd fcb8 	bl	8001cd0 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004364:	f7fd fcb4 	bl	8001cd0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e11c      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004376:	4b66      	ldr	r3, [pc, #408]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 8004378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ef      	beq.n	8004364 <HAL_RCC_OscConfig+0x5cc>
 8004384:	e01b      	b.n	80043be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004386:	4b62      	ldr	r3, [pc, #392]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 8004388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438c:	4a60      	ldr	r2, [pc, #384]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fd fc9b 	bl	8001cd0 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800439e:	f7fd fc97 	bl	8001cd0 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0ff      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b0:	4b57      	ldr	r3, [pc, #348]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80043b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1ef      	bne.n	800439e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80f3 	beq.w	80045ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	f040 80c9 	bne.w	8004564 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f003 0203 	and.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d12c      	bne.n	8004440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f0:	3b01      	subs	r3, #1
 80043f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d123      	bne.n	8004440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004402:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d11b      	bne.n	8004440 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d113      	bne.n	8004440 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	3b01      	subs	r3, #1
 8004426:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d109      	bne.n	8004440 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	085b      	lsrs	r3, r3, #1
 8004438:	3b01      	subs	r3, #1
 800443a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d06b      	beq.n	8004518 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d062      	beq.n	800450c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004446:	4b32      	ldr	r3, [pc, #200]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0ac      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004456:	4b2e      	ldr	r3, [pc, #184]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2d      	ldr	r2, [pc, #180]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800445c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004460:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004462:	f7fd fc35 	bl	8001cd0 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446a:	f7fd fc31 	bl	8001cd0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e099      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447c:	4b24      	ldr	r3, [pc, #144]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004488:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	4b21      	ldr	r3, [pc, #132]	@ (8004514 <HAL_RCC_OscConfig+0x77c>)
 800448e:	4013      	ands	r3, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004498:	3a01      	subs	r2, #1
 800449a:	0112      	lsls	r2, r2, #4
 800449c:	4311      	orrs	r1, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044a2:	0212      	lsls	r2, r2, #8
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044aa:	0852      	lsrs	r2, r2, #1
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0552      	lsls	r2, r2, #21
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044b6:	0852      	lsrs	r2, r2, #1
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0652      	lsls	r2, r2, #25
 80044bc:	4311      	orrs	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044c2:	06d2      	lsls	r2, r2, #27
 80044c4:	430a      	orrs	r2, r1
 80044c6:	4912      	ldr	r1, [pc, #72]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044cc:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a0f      	ldr	r2, [pc, #60]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 80044de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044e4:	f7fd fbf4 	bl	8001cd0 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fd fbf0 	bl	8001cd0 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e058      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fe:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <HAL_RCC_OscConfig+0x778>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800450a:	e050      	b.n	80045ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e04f      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
 8004510:	40021000 	.word	0x40021000
 8004514:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004518:	4b27      	ldr	r3, [pc, #156]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d144      	bne.n	80045ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004524:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a23      	ldr	r2, [pc, #140]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 800452a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800452e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004530:	4b21      	ldr	r3, [pc, #132]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a20      	ldr	r2, [pc, #128]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 8004536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800453a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800453c:	f7fd fbc8 	bl	8001cd0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004544:	f7fd fbc4 	bl	8001cd0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e02c      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004556:	4b18      	ldr	r3, [pc, #96]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x7ac>
 8004562:	e024      	b.n	80045ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d01f      	beq.n	80045aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a12      	ldr	r2, [pc, #72]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 8004570:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fd fbab 	bl	8001cd0 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457e:	f7fd fba7 	bl	8001cd0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e00f      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800459c:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	4905      	ldr	r1, [pc, #20]	@ (80045b8 <HAL_RCC_OscConfig+0x820>)
 80045a2:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <HAL_RCC_OscConfig+0x824>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
 80045a8:	e001      	b.n	80045ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	feeefffc 	.word	0xfeeefffc

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0e7      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b75      	ldr	r3, [pc, #468]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d910      	bls.n	8004604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b72      	ldr	r3, [pc, #456]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 0207 	bic.w	r2, r3, #7
 80045ea:	4970      	ldr	r1, [pc, #448]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b6e      	ldr	r3, [pc, #440]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0cf      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d010      	beq.n	8004632 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	4b66      	ldr	r3, [pc, #408]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800461c:	429a      	cmp	r2, r3
 800461e:	d908      	bls.n	8004632 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004620:	4b63      	ldr	r3, [pc, #396]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4960      	ldr	r1, [pc, #384]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d04c      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004646:	4b5a      	ldr	r3, [pc, #360]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d121      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0a6      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800465e:	4b54      	ldr	r3, [pc, #336]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d115      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e09a      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004676:	4b4e      	ldr	r3, [pc, #312]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e08e      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004686:	4b4a      	ldr	r3, [pc, #296]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e086      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004696:	4b46      	ldr	r3, [pc, #280]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4943      	ldr	r1, [pc, #268]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a8:	f7fd fb12 	bl	8001cd0 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b0:	f7fd fb0e 	bl	8001cd0 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e06e      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	4b3a      	ldr	r3, [pc, #232]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 020c 	and.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1eb      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d208      	bcs.n	8004706 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f4:	4b2e      	ldr	r3, [pc, #184]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	492b      	ldr	r1, [pc, #172]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004706:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d210      	bcs.n	8004736 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004714:	4b25      	ldr	r3, [pc, #148]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f023 0207 	bic.w	r2, r3, #7
 800471c:	4923      	ldr	r1, [pc, #140]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004724:	4b21      	ldr	r3, [pc, #132]	@ (80047ac <HAL_RCC_ClockConfig+0x1ec>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d001      	beq.n	8004736 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e036      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004742:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	4918      	ldr	r1, [pc, #96]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004760:	4b13      	ldr	r3, [pc, #76]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4910      	ldr	r1, [pc, #64]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004774:	f000 f824 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <HAL_RCC_ClockConfig+0x1f0>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	490b      	ldr	r1, [pc, #44]	@ (80047b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	4a09      	ldr	r2, [pc, #36]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004794:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <HAL_RCC_ClockConfig+0x1fc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f7fd fa49 	bl	8001c30 <HAL_InitTick>
 800479e:	4603      	mov	r3, r0
 80047a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80047a2:	7afb      	ldrb	r3, [r7, #11]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40021000 	.word	0x40021000
 80047b4:	0800509c 	.word	0x0800509c
 80047b8:	20000004 	.word	0x20000004
 80047bc:	20000008 	.word	0x20000008

080047c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	@ 0x24
 80047c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ce:	4b3e      	ldr	r3, [pc, #248]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d8:	4b3b      	ldr	r3, [pc, #236]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x34>
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d121      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d11e      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047f4:	4b34      	ldr	r3, [pc, #208]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004800:	4b31      	ldr	r3, [pc, #196]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e005      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004810:	4b2d      	ldr	r3, [pc, #180]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800481c:	4a2b      	ldr	r2, [pc, #172]	@ (80048cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10d      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004830:	e00a      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d102      	bne.n	800483e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004838:	4b25      	ldr	r3, [pc, #148]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	e004      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d101      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004844:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d134      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800484e:	4b1e      	ldr	r3, [pc, #120]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d003      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0xa6>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d003      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0xac>
 8004864:	e005      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004866:	4b1a      	ldr	r3, [pc, #104]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004868:	617b      	str	r3, [r7, #20]
      break;
 800486a:	e005      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800486c:	4b19      	ldr	r3, [pc, #100]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800486e:	617b      	str	r3, [r7, #20]
      break;
 8004870:	e002      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	617b      	str	r3, [r7, #20]
      break;
 8004876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004878:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	3301      	adds	r3, #1
 8004884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004886:	4b10      	ldr	r3, [pc, #64]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	fb03 f202 	mul.w	r2, r3, r2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800489e:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	0e5b      	lsrs	r3, r3, #25
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	3301      	adds	r3, #1
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048b8:	69bb      	ldr	r3, [r7, #24]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	@ 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	080050ac 	.word	0x080050ac
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	007a1200 	.word	0x007a1200

080048d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f0:	f7ff f9ee 	bl	8003cd0 <HAL_PWREx_GetVoltageRange>
 80048f4:	6178      	str	r0, [r7, #20]
 80048f6:	e014      	b.n	8004922 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f8:	4b25      	ldr	r3, [pc, #148]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	4a24      	ldr	r2, [pc, #144]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004902:	6593      	str	r3, [r2, #88]	@ 0x58
 8004904:	4b22      	ldr	r3, [pc, #136]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004910:	f7ff f9de 	bl	8003cd0 <HAL_PWREx_GetVoltageRange>
 8004914:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004916:	4b1e      	ldr	r3, [pc, #120]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	4a1d      	ldr	r2, [pc, #116]	@ (8004990 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004920:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004928:	d10b      	bne.n	8004942 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b80      	cmp	r3, #128	@ 0x80
 800492e:	d919      	bls.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2ba0      	cmp	r3, #160	@ 0xa0
 8004934:	d902      	bls.n	800493c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004936:	2302      	movs	r3, #2
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e013      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800493c:	2301      	movs	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	e010      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b80      	cmp	r3, #128	@ 0x80
 8004946:	d902      	bls.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004948:	2303      	movs	r3, #3
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	e00a      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b80      	cmp	r3, #128	@ 0x80
 8004952:	d102      	bne.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004954:	2302      	movs	r3, #2
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e004      	b.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b70      	cmp	r3, #112	@ 0x70
 800495e:	d101      	bne.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004960:	2301      	movs	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 0207 	bic.w	r2, r3, #7
 800496c:	4909      	ldr	r1, [pc, #36]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004974:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	d001      	beq.n	8004986 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	40022000 	.word	0x40022000

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a0:	2300      	movs	r3, #0
 80049a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a4:	2300      	movs	r3, #0
 80049a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d031      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049bc:	d01a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049c2:	d814      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049cc:	d10f      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80049ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049da:	e00c      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa22 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ec:	e003      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	74fb      	strb	r3, [r7, #19]
      break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80049f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049fc:	4b51      	ldr	r3, [pc, #324]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	494e      	ldr	r1, [pc, #312]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a12:	e001      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 809e 	beq.w	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a2a:	4b46      	ldr	r3, [pc, #280]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b40      	ldr	r3, [pc, #256]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	4a3f      	ldr	r2, [pc, #252]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a39      	ldr	r2, [pc, #228]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a68:	f7fd f932 	bl	8001cd0 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a6e:	e009      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a70:	f7fd f92e 	bl	8001cd0 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	74fb      	strb	r3, [r7, #19]
        break;
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a84:	4b30      	ldr	r3, [pc, #192]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ef      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d15a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a96:	4b2b      	ldr	r3, [pc, #172]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01e      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d019      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ab2:	4b24      	ldr	r3, [pc, #144]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004abe:	4b21      	ldr	r3, [pc, #132]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ace:	4b1d      	ldr	r3, [pc, #116]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ade:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d016      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fd f8ee 	bl	8001cd0 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af6:	e00b      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af8:	f7fd f8ea 	bl	8001cd0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d902      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	74fb      	strb	r3, [r7, #19]
            break;
 8004b0e:	e006      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b10:	4b0c      	ldr	r3, [pc, #48]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ec      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10b      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	4b07      	ldr	r3, [pc, #28]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	4904      	ldr	r1, [pc, #16]	@ (8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b3a:	e009      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	74bb      	strb	r3, [r7, #18]
 8004b40:	e006      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004b42:	bf00      	nop
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b50:	7c7b      	ldrb	r3, [r7, #17]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d105      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b56:	4b8d      	ldr	r3, [pc, #564]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5a:	4a8c      	ldr	r2, [pc, #560]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b6e:	4b87      	ldr	r3, [pc, #540]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b74:	f023 0203 	bic.w	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	4983      	ldr	r1, [pc, #524]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b90:	4b7e      	ldr	r3, [pc, #504]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b96:	f023 020c 	bic.w	r2, r3, #12
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	497b      	ldr	r1, [pc, #492]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb2:	4b76      	ldr	r3, [pc, #472]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	4972      	ldr	r1, [pc, #456]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bd4:	4b6d      	ldr	r3, [pc, #436]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	496a      	ldr	r1, [pc, #424]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf6:	4b65      	ldr	r3, [pc, #404]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	4961      	ldr	r1, [pc, #388]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c18:	4b5c      	ldr	r3, [pc, #368]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	4959      	ldr	r1, [pc, #356]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c3a:	4b54      	ldr	r3, [pc, #336]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	4950      	ldr	r1, [pc, #320]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c5c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6a:	4948      	ldr	r1, [pc, #288]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c7e:	4b43      	ldr	r3, [pc, #268]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	493f      	ldr	r1, [pc, #252]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d028      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cae:	4937      	ldr	r1, [pc, #220]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cbe:	d106      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc0:	4b32      	ldr	r3, [pc, #200]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a31      	ldr	r2, [pc, #196]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cca:	60d3      	str	r3, [r2, #12]
 8004ccc:	e011      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f8a4 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d028      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cfe:	4b23      	ldr	r3, [pc, #140]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0c:	491f      	ldr	r1, [pc, #124]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	4a1a      	ldr	r2, [pc, #104]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d28:	60d3      	str	r3, [r2, #12]
 8004d2a:	e011      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f875 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d46:	7cfb      	ldrb	r3, [r7, #19]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004d4c:	7cfb      	ldrb	r3, [r7, #19]
 8004d4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02b      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6a:	4908      	ldr	r1, [pc, #32]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d7a:	d109      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d7c:	4b03      	ldr	r3, [pc, #12]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4a02      	ldr	r2, [pc, #8]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d86:	60d3      	str	r3, [r2, #12]
 8004d88:	e014      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	2101      	movs	r1, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 f843 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004db0:	7cfb      	ldrb	r3, [r7, #19]
 8004db2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01c      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc0:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dce:	4916      	ldr	r1, [pc, #88]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f820 	bl	8004e2c <RCCEx_PLLSAI1_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df0:	7cfb      	ldrb	r3, [r7, #19]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e06:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	4904      	ldr	r1, [pc, #16]	@ (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40021000 	.word	0x40021000

08004e2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e3a:	4b74      	ldr	r3, [pc, #464]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e46:	4b71      	ldr	r3, [pc, #452]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f003 0203 	and.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d10d      	bne.n	8004e72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
       ||
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e5e:	4b6b      	ldr	r3, [pc, #428]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d047      	beq.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	e044      	b.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d018      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0x86>
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d825      	bhi.n	8004ed0 <RCCEx_PLLSAI1_Config+0xa4>
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d002      	beq.n	8004e8e <RCCEx_PLLSAI1_Config+0x62>
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d009      	beq.n	8004ea0 <RCCEx_PLLSAI1_Config+0x74>
 8004e8c:	e020      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e8e:	4b5f      	ldr	r3, [pc, #380]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11d      	bne.n	8004ed6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9e:	e01a      	b.n	8004ed6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d116      	bne.n	8004eda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb0:	e013      	b.n	8004eda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eb2:	4b56      	ldr	r3, [pc, #344]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ebe:	4b53      	ldr	r3, [pc, #332]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ece:	e006      	b.n	8004ede <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e004      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ede:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ee6:	4b49      	ldr	r3, [pc, #292]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	430b      	orrs	r3, r1
 8004efc:	4943      	ldr	r1, [pc, #268]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d17c      	bne.n	8005002 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f08:	4b40      	ldr	r3, [pc, #256]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f14:	f7fc fedc 	bl	8001cd0 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f1a:	e009      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f1c:	f7fc fed8 	bl	8001cd0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d902      	bls.n	8004f30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f2e:	e005      	b.n	8004f3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f30:	4b36      	ldr	r3, [pc, #216]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ef      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d15f      	bne.n	8005002 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d110      	bne.n	8004f6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f48:	4b30      	ldr	r3, [pc, #192]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004f50:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	0211      	lsls	r1, r2, #8
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68d2      	ldr	r2, [r2, #12]
 8004f5e:	06d2      	lsls	r2, r2, #27
 8004f60:	430a      	orrs	r2, r1
 8004f62:	492a      	ldr	r1, [pc, #168]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	610b      	str	r3, [r1, #16]
 8004f68:	e027      	b.n	8004fba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d112      	bne.n	8004f96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f70:	4b26      	ldr	r3, [pc, #152]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6892      	ldr	r2, [r2, #8]
 8004f80:	0211      	lsls	r1, r2, #8
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6912      	ldr	r2, [r2, #16]
 8004f86:	0852      	lsrs	r2, r2, #1
 8004f88:	3a01      	subs	r2, #1
 8004f8a:	0552      	lsls	r2, r2, #21
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	491f      	ldr	r1, [pc, #124]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	610b      	str	r3, [r1, #16]
 8004f94:	e011      	b.n	8004fba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f96:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f9e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6892      	ldr	r2, [r2, #8]
 8004fa6:	0211      	lsls	r1, r2, #8
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6952      	ldr	r2, [r2, #20]
 8004fac:	0852      	lsrs	r2, r2, #1
 8004fae:	3a01      	subs	r2, #1
 8004fb0:	0652      	lsls	r2, r2, #25
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	4915      	ldr	r1, [pc, #84]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fba:	4b14      	ldr	r3, [pc, #80]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a13      	ldr	r2, [pc, #76]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc6:	f7fc fe83 	bl	8001cd0 <HAL_GetTick>
 8004fca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fcc:	e009      	b.n	8004fe2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fce:	f7fc fe7f 	bl	8001cd0 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d902      	bls.n	8004fe2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	73fb      	strb	r3, [r7, #15]
          break;
 8004fe0:	e005      	b.n	8004fee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0ef      	beq.n	8004fce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	4903      	ldr	r1, [pc, #12]	@ (800500c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005002:	7bfb      	ldrb	r3, [r7, #15]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000

08005010 <memset>:
 8005010:	4402      	add	r2, r0
 8005012:	4603      	mov	r3, r0
 8005014:	4293      	cmp	r3, r2
 8005016:	d100      	bne.n	800501a <memset+0xa>
 8005018:	4770      	bx	lr
 800501a:	f803 1b01 	strb.w	r1, [r3], #1
 800501e:	e7f9      	b.n	8005014 <memset+0x4>

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4d0d      	ldr	r5, [pc, #52]	@ (8005058 <__libc_init_array+0x38>)
 8005024:	4c0d      	ldr	r4, [pc, #52]	@ (800505c <__libc_init_array+0x3c>)
 8005026:	1b64      	subs	r4, r4, r5
 8005028:	10a4      	asrs	r4, r4, #2
 800502a:	2600      	movs	r6, #0
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	4d0b      	ldr	r5, [pc, #44]	@ (8005060 <__libc_init_array+0x40>)
 8005032:	4c0c      	ldr	r4, [pc, #48]	@ (8005064 <__libc_init_array+0x44>)
 8005034:	f000 f826 	bl	8005084 <_init>
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	2600      	movs	r6, #0
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	f855 3b04 	ldr.w	r3, [r5], #4
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	080050dc 	.word	0x080050dc
 800505c:	080050dc 	.word	0x080050dc
 8005060:	080050dc 	.word	0x080050dc
 8005064:	080050e0 	.word	0x080050e0

08005068 <memcpy>:
 8005068:	440a      	add	r2, r1
 800506a:	4291      	cmp	r1, r2
 800506c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005070:	d100      	bne.n	8005074 <memcpy+0xc>
 8005072:	4770      	bx	lr
 8005074:	b510      	push	{r4, lr}
 8005076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800507a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800507e:	4291      	cmp	r1, r2
 8005080:	d1f9      	bne.n	8005076 <memcpy+0xe>
 8005082:	bd10      	pop	{r4, pc}

08005084 <_init>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr

08005090 <_fini>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr
