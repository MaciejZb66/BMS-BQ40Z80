
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ac  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004838  08004838  00005838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004878  08004878  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004878  08004878  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004878  08004878  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800487c  0800487c  0000587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004880  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  08004890  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004890  00006184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de1e  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002967  00000000  00000000  00013e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000167c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000959  00000000  00000000  00017450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233d8  00000000  00000000  00017da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e4d  00000000  00000000  0003b181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca70e  00000000  00000000  0004cfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001176dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000317c  00000000  00000000  00117720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004820 	.word	0x08004820

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004820 	.word	0x08004820

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b590      	push	{r4, r7, lr}
 80001ce:	b0c3      	sub	sp, #268	@ 0x10c
 80001d0:	af3e      	add	r7, sp, #248	@ 0xf8
 80001d2:	6078      	str	r0, [r7, #4]
    BMS_1.bq_i2c = i2c;
 80001d4:	4a5f      	ldr	r2, [pc, #380]	@ (8000354 <BQ_Init+0x188>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]
    if(i2c == &hi2c1){
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a5e      	ldr	r2, [pc, #376]	@ (8000358 <BQ_Init+0x18c>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d10b      	bne.n	80001fa <BQ_Init+0x2e>
    	__HAL_RCC_I2C1_CLK_ENABLE();
 80001e2:	4b5e      	ldr	r3, [pc, #376]	@ (800035c <BQ_Init+0x190>)
 80001e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001e6:	4a5d      	ldr	r2, [pc, #372]	@ (800035c <BQ_Init+0x190>)
 80001e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80001ee:	4b5b      	ldr	r3, [pc, #364]	@ (800035c <BQ_Init+0x190>)
 80001f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]

//    ("[BQ] Started", 12);
//    if (USE_SCANNER == 1)
//    {
#ifdef USE_SCANNER
        HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001fa:	4b59      	ldr	r3, [pc, #356]	@ (8000360 <BQ_Init+0x194>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	b299      	uxth	r1, r3
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	2203      	movs	r2, #3
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f001 ff2e 	bl	8002068 <HAL_I2C_IsDeviceReady>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
        while (ret != HAL_OK)
 8000210:	e00e      	b.n	8000230 <BQ_Init+0x64>
        {
//            ("[BQ] device not founded", 23);
            ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 8000212:	4b53      	ldr	r3, [pc, #332]	@ (8000360 <BQ_Init+0x194>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	b299      	uxth	r1, r3
 800021a:	2364      	movs	r3, #100	@ 0x64
 800021c:	2203      	movs	r2, #3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f001 ff22 	bl	8002068 <HAL_I2C_IsDeviceReady>
 8000224:	4603      	mov	r3, r0
 8000226:	73fb      	strb	r3, [r7, #15]
            HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022c:	f001 f95c 	bl	80014e8 <HAL_Delay>
        while (ret != HAL_OK)
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d1ed      	bne.n	8000212 <BQ_Init+0x46>
#endif
//    }

    

    HAL_Delay(1500);
 8000236:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800023a:	f001 f955 	bl	80014e8 <HAL_Delay>
    BQAction_UpdateData(BMS_1);
 800023e:	4c45      	ldr	r4, [pc, #276]	@ (8000354 <BQ_Init+0x188>)
 8000240:	4668      	mov	r0, sp
 8000242:	f104 0310 	add.w	r3, r4, #16
 8000246:	22f0      	movs	r2, #240	@ 0xf0
 8000248:	4619      	mov	r1, r3
 800024a:	f004 fadb 	bl	8004804 <memcpy>
 800024e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000252:	f000 fae3 	bl	800081c <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS_1);
 8000256:	4c3f      	ldr	r4, [pc, #252]	@ (8000354 <BQ_Init+0x188>)
 8000258:	4668      	mov	r0, sp
 800025a:	f104 0310 	add.w	r3, r4, #16
 800025e:	22f0      	movs	r2, #240	@ 0xf0
 8000260:	4619      	mov	r1, r3
 8000262:	f004 facf 	bl	8004804 <memcpy>
 8000266:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800026a:	f000 fa7a 	bl	8000762 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS_1, false);
 800026e:	4c39      	ldr	r4, [pc, #228]	@ (8000354 <BQ_Init+0x188>)
 8000270:	2300      	movs	r3, #0
 8000272:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000274:	4668      	mov	r0, sp
 8000276:	f104 0310 	add.w	r3, r4, #16
 800027a:	22f0      	movs	r2, #240	@ 0xf0
 800027c:	4619      	mov	r1, r3
 800027e:	f004 fac1 	bl	8004804 <memcpy>
 8000282:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000286:	f000 f994 	bl	80005b2 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS_1, false);
 800028a:	4c32      	ldr	r4, [pc, #200]	@ (8000354 <BQ_Init+0x188>)
 800028c:	2300      	movs	r3, #0
 800028e:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000290:	4668      	mov	r0, sp
 8000292:	f104 0310 	add.w	r3, r4, #16
 8000296:	22f0      	movs	r2, #240	@ 0xf0
 8000298:	4619      	mov	r1, r3
 800029a:	f004 fab3 	bl	8004804 <memcpy>
 800029e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002a2:	f000 f9aa 	bl	80005fa <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS_1, false);
 80002a6:	4c2b      	ldr	r4, [pc, #172]	@ (8000354 <BQ_Init+0x188>)
 80002a8:	2300      	movs	r3, #0
 80002aa:	933c      	str	r3, [sp, #240]	@ 0xf0
 80002ac:	4668      	mov	r0, sp
 80002ae:	f104 0310 	add.w	r3, r4, #16
 80002b2:	22f0      	movs	r2, #240	@ 0xf0
 80002b4:	4619      	mov	r1, r3
 80002b6:	f004 faa5 	bl	8004804 <memcpy>
 80002ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002be:	f000 f9c0 	bl	8000642 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS_1, true);
 80002c2:	4c24      	ldr	r4, [pc, #144]	@ (8000354 <BQ_Init+0x188>)
 80002c4:	2301      	movs	r3, #1
 80002c6:	933c      	str	r3, [sp, #240]	@ 0xf0
 80002c8:	4668      	mov	r0, sp
 80002ca:	f104 0310 	add.w	r3, r4, #16
 80002ce:	22f0      	movs	r2, #240	@ 0xf0
 80002d0:	4619      	mov	r1, r3
 80002d2:	f004 fa97 	bl	8004804 <memcpy>
 80002d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002da:	f000 f9d6 	bl	800068a <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS_1, true);
 80002de:	4c1d      	ldr	r4, [pc, #116]	@ (8000354 <BQ_Init+0x188>)
 80002e0:	2301      	movs	r3, #1
 80002e2:	933c      	str	r3, [sp, #240]	@ 0xf0
 80002e4:	4668      	mov	r0, sp
 80002e6:	f104 0310 	add.w	r3, r4, #16
 80002ea:	22f0      	movs	r2, #240	@ 0xf0
 80002ec:	4619      	mov	r1, r3
 80002ee:	f004 fa89 	bl	8004804 <memcpy>
 80002f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002f6:	f000 f9ec 	bl	80006d2 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS_1, true);
 80002fa:	4c16      	ldr	r4, [pc, #88]	@ (8000354 <BQ_Init+0x188>)
 80002fc:	2301      	movs	r3, #1
 80002fe:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000300:	4668      	mov	r0, sp
 8000302:	f104 0310 	add.w	r3, r4, #16
 8000306:	22f0      	movs	r2, #240	@ 0xf0
 8000308:	4619      	mov	r1, r3
 800030a:	f004 fa7b 	bl	8004804 <memcpy>
 800030e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000312:	f000 fa02 	bl	800071a <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS_1, false);
 8000316:	4c0f      	ldr	r4, [pc, #60]	@ (8000354 <BQ_Init+0x188>)
 8000318:	2300      	movs	r3, #0
 800031a:	933c      	str	r3, [sp, #240]	@ 0xf0
 800031c:	4668      	mov	r0, sp
 800031e:	f104 0310 	add.w	r3, r4, #16
 8000322:	22f0      	movs	r2, #240	@ 0xf0
 8000324:	4619      	mov	r1, r3
 8000326:	f004 fa6d 	bl	8004804 <memcpy>
 800032a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800032e:	f000 f91c 	bl	800056a <BQAction_SetLed>

    BQAction_UpdateData(BMS_1);
 8000332:	4c08      	ldr	r4, [pc, #32]	@ (8000354 <BQ_Init+0x188>)
 8000334:	4668      	mov	r0, sp
 8000336:	f104 0310 	add.w	r3, r4, #16
 800033a:	22f0      	movs	r2, #240	@ 0xf0
 800033c:	4619      	mov	r1, r3
 800033e:	f004 fa61 	bl	8004804 <memcpy>
 8000342:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000346:	f000 fa69 	bl	800081c <BQAction_UpdateData>
    //BQ_ForceUpdateFlash();

    //BQ_BoundaryCellVoltage voltages = BQ_GetBoundaryCellVoltage();

//    ("[BQ] initialized", 16);
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bd90      	pop	{r4, r7, pc}
 8000352:	bf00      	nop
 8000354:	2000002c 	.word	0x2000002c
 8000358:	2000012c 	.word	0x2000012c
 800035c:	40021000 	.word	0x40021000
 8000360:	20000000 	.word	0x20000000

08000364 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data BMS, uint16_t command)
{
 8000364:	b084      	sub	sp, #16
 8000366:	b580      	push	{r7, lr}
 8000368:	b084      	sub	sp, #16
 800036a:	af02      	add	r7, sp, #8
 800036c:	f107 0c10 	add.w	ip, r7, #16
 8000370:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000374:	2344      	movs	r3, #68	@ 0x44
 8000376:	713b      	strb	r3, [r7, #4]
 8000378:	2302      	movs	r3, #2
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8000380:	b2db      	uxtb	r3, r3
 8000382:	71bb      	strb	r3, [r7, #6]
 8000384:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000390:	6938      	ldr	r0, [r7, #16]
 8000392:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <BQ_WriteMABlockCommand+0x50>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	005b      	lsls	r3, r3, #1
 8000398:	b299      	uxth	r1, r3
 800039a:	1d3a      	adds	r2, r7, #4
 800039c:	2364      	movs	r3, #100	@ 0x64
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2304      	movs	r3, #4
 80003a2:	f001 fc53 	bl	8001c4c <HAL_I2C_Master_Transmit>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003b0:	b004      	add	sp, #16
 80003b2:	4770      	bx	lr
 80003b4:	20000000 	.word	0x20000000

080003b8 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80003b8:	b084      	sub	sp, #16
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b08e      	sub	sp, #56	@ 0x38
 80003be:	af02      	add	r7, sp, #8
 80003c0:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 80003c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80003c8:	2344      	movs	r3, #68	@ 0x44
 80003ca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80003ce:	2302      	movs	r3, #2
 80003d0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80003d4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80003de:	f8b7 3138 	ldrh.w	r3, [r7, #312]	@ 0x138
 80003e2:	0a1b      	lsrs	r3, r3, #8
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80003ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80003ee:	4b28      	ldr	r3, [pc, #160]	@ (8000490 <BQ_ReadMABlockCommand+0xd8>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	b299      	uxth	r1, r3
 80003f6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80003fa:	2364      	movs	r3, #100	@ 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	f001 fc24 	bl	8001c4c <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 8000404:	2344      	movs	r3, #68	@ 0x44
 8000406:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800040a:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 800040e:	3302      	adds	r3, #2
 8000410:	b2db      	uxtb	r3, r3
 8000412:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 8000416:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000418:	4b1d      	ldr	r3, [pc, #116]	@ (8000490 <BQ_ReadMABlockCommand+0xd8>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	b299      	uxth	r1, r3
 8000420:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000424:	2364      	movs	r3, #100	@ 0x64
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2302      	movs	r3, #2
 800042a:	f001 fc0f 	bl	8001c4c <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	221f      	movs	r2, #31
 8000436:	2100      	movs	r1, #0
 8000438:	4618      	mov	r0, r3
 800043a:	f004 f9b7 	bl	80047ac <memset>
    HAL_I2C_Master_Receive(BMS.bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 800043e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <BQ_ReadMABlockCommand+0xd8>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	b299      	uxth	r1, r3
 8000448:	463a      	mov	r2, r7
 800044a:	2364      	movs	r3, #100	@ 0x64
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2323      	movs	r3, #35	@ 0x23
 8000450:	f001 fd14 	bl	8001e7c <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000454:	2300      	movs	r3, #0
 8000456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000458:	e00d      	b.n	8000476 <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 800045a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800045c:	1cda      	adds	r2, r3, #3
 800045e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000460:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8000464:	440b      	add	r3, r1
 8000466:	3230      	adds	r2, #48	@ 0x30
 8000468:	443a      	add	r2, r7
 800046a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800046e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000472:	3301      	adds	r3, #1
 8000474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000476:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 800047a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800047c:	429a      	cmp	r2, r3
 800047e:	dbec      	blt.n	800045a <BQ_ReadMABlockCommand+0xa2>
    }
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	3730      	adds	r7, #48	@ 0x30
 8000486:	46bd      	mov	sp, r7
 8000488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800048c:	b004      	add	sp, #16
 800048e:	4770      	bx	lr
 8000490:	20000000 	.word	0x20000000

08000494 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data BMS, uint16_t command)
{
 8000494:	b084      	sub	sp, #16
 8000496:	b580      	push	{r7, lr}
 8000498:	b0c2      	sub	sp, #264	@ 0x108
 800049a:	af40      	add	r7, sp, #256	@ 0x100
 800049c:	f107 0c10 	add.w	ip, r7, #16
 80004a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80004a4:	2302      	movs	r3, #2
 80004a6:	933e      	str	r3, [sp, #248]	@ 0xf8
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	933d      	str	r3, [sp, #244]	@ 0xf4
 80004ac:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80004b0:	933c      	str	r3, [sp, #240]	@ 0xf0
 80004b2:	4668      	mov	r0, sp
 80004b4:	f107 0320 	add.w	r3, r7, #32
 80004b8:	22f0      	movs	r2, #240	@ 0xf0
 80004ba:	4619      	mov	r1, r3
 80004bc:	f004 f9a2 	bl	8004804 <memcpy>
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004c6:	f7ff ff77 	bl	80003b8 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	80fb      	strh	r3, [r7, #6]

    result = result | buf[0];
 80004ce:	793b      	ldrb	r3, [r7, #4]
 80004d0:	461a      	mov	r2, r3
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	80fb      	strh	r3, [r7, #6]
    result = result | (buf[1] << 8);
 80004d8:	797b      	ldrb	r3, [r7, #5]
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	b21a      	sxth	r2, r3
 80004de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	80fb      	strh	r3, [r7, #6]

    return result;
 80004e8:	88fb      	ldrh	r3, [r7, #6]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004f4:	b004      	add	sp, #16
 80004f6:	4770      	bx	lr

080004f8 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data BMS, uint16_t command)
{
 80004f8:	b084      	sub	sp, #16
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b0c2      	sub	sp, #264	@ 0x108
 80004fe:	af40      	add	r7, sp, #256	@ 0x100
 8000500:	f107 0c10 	add.w	ip, r7, #16
 8000504:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 8000508:	2304      	movs	r3, #4
 800050a:	933e      	str	r3, [sp, #248]	@ 0xf8
 800050c:	463b      	mov	r3, r7
 800050e:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000510:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8000514:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000516:	4668      	mov	r0, sp
 8000518:	f107 0320 	add.w	r3, r7, #32
 800051c:	22f0      	movs	r2, #240	@ 0xf0
 800051e:	4619      	mov	r1, r3
 8000520:	f004 f970 	bl	8004804 <memcpy>
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800052a:	f7ff ff45 	bl	80003b8 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]

    result = result | (buf[0]);
 8000532:	783b      	ldrb	r3, [r7, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4313      	orrs	r3, r2
 800053a:	607b      	str	r3, [r7, #4]
    result = result | (buf[1] << 8);
 800053c:	787b      	ldrb	r3, [r7, #1]
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4313      	orrs	r3, r2
 8000544:	607b      	str	r3, [r7, #4]
    result = result | (buf[2] << 16);
 8000546:	78bb      	ldrb	r3, [r7, #2]
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	4313      	orrs	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
    result = result | (buf[3] << 24);
 8000550:	78fb      	ldrb	r3, [r7, #3]
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	607b      	str	r3, [r7, #4]

    return result;
 800055a:	687b      	ldr	r3, [r7, #4]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000566:	b004      	add	sp, #16
 8000568:	4770      	bx	lr

0800056a <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data BMS, bool active)
{
 800056a:	b084      	sub	sp, #16
 800056c:	b580      	push	{r7, lr}
 800056e:	b0be      	sub	sp, #248	@ 0xf8
 8000570:	af3e      	add	r7, sp, #248	@ 0xf8
 8000572:	f107 0c08 	add.w	ip, r7, #8
 8000576:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsLedEnabled() != active)
 800057a:	f000 fbc3 	bl	8000d04 <BQ_IsLedEnabled>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8000586:	4293      	cmp	r3, r2
 8000588:	d00d      	beq.n	80005a6 <BQAction_SetLed+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 800058a:	232b      	movs	r3, #43	@ 0x2b
 800058c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800058e:	4668      	mov	r0, sp
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	22f0      	movs	r2, #240	@ 0xf0
 8000596:	4619      	mov	r1, r3
 8000598:	f004 f934 	bl	8004804 <memcpy>
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	f7ff fedf 	bl	8000364 <BQ_WriteMABlockCommand>
    }
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ae:	b004      	add	sp, #16
 80005b0:	4770      	bx	lr

080005b2 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data BMS, bool active)
{
 80005b2:	b084      	sub	sp, #16
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0be      	sub	sp, #248	@ 0xf8
 80005b8:	af3e      	add	r7, sp, #248	@ 0xf8
 80005ba:	f107 0c08 	add.w	ip, r7, #8
 80005be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingAllFetEnabled() != active)
 80005c2:	f000 fb45 	bl	8000c50 <BQ_IsManufacturingAllFetEnabled>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d00d      	beq.n	80005ee <BQAction_SetManufacturingAllFet+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 80005d2:	2322      	movs	r3, #34	@ 0x22
 80005d4:	933c      	str	r3, [sp, #240]	@ 0xf0
 80005d6:	4668      	mov	r0, sp
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	22f0      	movs	r2, #240	@ 0xf0
 80005de:	4619      	mov	r1, r3
 80005e0:	f004 f910 	bl	8004804 <memcpy>
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ea:	f7ff febb 	bl	8000364 <BQ_WriteMABlockCommand>
    }
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f6:	b004      	add	sp, #16
 80005f8:	4770      	bx	lr

080005fa <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data BMS, bool active)
{
 80005fa:	b084      	sub	sp, #16
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0be      	sub	sp, #248	@ 0xf8
 8000600:	af3e      	add	r7, sp, #248	@ 0xf8
 8000602:	f107 0c08 	add.w	ip, r7, #8
 8000606:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingFuseEnabled() != active)
 800060a:	f000 fb0f 	bl	8000c2c <BQ_IsManufacturingFuseEnabled>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8000616:	4293      	cmp	r3, r2
 8000618:	d00d      	beq.n	8000636 <BQAction_SetManufacturingFuse+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 800061a:	2326      	movs	r3, #38	@ 0x26
 800061c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800061e:	4668      	mov	r0, sp
 8000620:	f107 0318 	add.w	r3, r7, #24
 8000624:	22f0      	movs	r2, #240	@ 0xf0
 8000626:	4619      	mov	r1, r3
 8000628:	f004 f8ec 	bl	8004804 <memcpy>
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000632:	f7ff fe97 	bl	8000364 <BQ_WriteMABlockCommand>
    }
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800063e:	b004      	add	sp, #16
 8000640:	4770      	bx	lr

08000642 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data BMS, bool active)
{
 8000642:	b084      	sub	sp, #16
 8000644:	b580      	push	{r7, lr}
 8000646:	b0be      	sub	sp, #248	@ 0xf8
 8000648:	af3e      	add	r7, sp, #248	@ 0xf8
 800064a:	f107 0c08 	add.w	ip, r7, #8
 800064e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingCalibrationEnabled() != active)
 8000652:	f000 fb21 	bl	8000c98 <BQ_IsManufacturingCalibrationEnabled>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 800065e:	4293      	cmp	r3, r2
 8000660:	d00d      	beq.n	800067e <BQAction_SetCalibration+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 8000662:	232d      	movs	r3, #45	@ 0x2d
 8000664:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000666:	4668      	mov	r0, sp
 8000668:	f107 0318 	add.w	r3, r7, #24
 800066c:	22f0      	movs	r2, #240	@ 0xf0
 800066e:	4619      	mov	r1, r3
 8000670:	f004 f8c8 	bl	8004804 <memcpy>
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067a:	f7ff fe73 	bl	8000364 <BQ_WriteMABlockCommand>
    }
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000686:	b004      	add	sp, #16
 8000688:	4770      	bx	lr

0800068a <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data BMS, bool active)
{
 800068a:	b084      	sub	sp, #16
 800068c:	b580      	push	{r7, lr}
 800068e:	b0be      	sub	sp, #248	@ 0xf8
 8000690:	af3e      	add	r7, sp, #248	@ 0xf8
 8000692:	f107 0c08 	add.w	ip, r7, #8
 8000696:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingGaugingEnabled() != active)
 800069a:	f000 faeb 	bl	8000c74 <BQ_IsManufacturingGaugingEnabled>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d00d      	beq.n	80006c6 <BQAction_SetManufacturingGauging+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 80006aa:	2321      	movs	r3, #33	@ 0x21
 80006ac:	933c      	str	r3, [sp, #240]	@ 0xf0
 80006ae:	4668      	mov	r0, sp
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	22f0      	movs	r2, #240	@ 0xf0
 80006b6:	4619      	mov	r1, r3
 80006b8:	f004 f8a4 	bl	8004804 <memcpy>
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c2:	f7ff fe4f 	bl	8000364 <BQ_WriteMABlockCommand>
    }
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ce:	b004      	add	sp, #16
 80006d0:	4770      	bx	lr

080006d2 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data BMS, bool active)
{
 80006d2:	b084      	sub	sp, #16
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0be      	sub	sp, #248	@ 0xf8
 80006d8:	af3e      	add	r7, sp, #248	@ 0xf8
 80006da:	f107 0c08 	add.w	ip, r7, #8
 80006de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingPermanentFailureEnabled() != active)
 80006e2:	f000 faeb 	bl	8000cbc <BQ_IsManufacturingPermanentFailureEnabled>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d00d      	beq.n	800070e <BQAction_SetManufacturingPF+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 80006f2:	2324      	movs	r3, #36	@ 0x24
 80006f4:	933c      	str	r3, [sp, #240]	@ 0xf0
 80006f6:	4668      	mov	r0, sp
 80006f8:	f107 0318 	add.w	r3, r7, #24
 80006fc:	22f0      	movs	r2, #240	@ 0xf0
 80006fe:	4619      	mov	r1, r3
 8000700:	f004 f880 	bl	8004804 <memcpy>
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070a:	f7ff fe2b 	bl	8000364 <BQ_WriteMABlockCommand>
    }
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000716:	b004      	add	sp, #16
 8000718:	4770      	bx	lr

0800071a <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data BMS, bool active)
{
 800071a:	b084      	sub	sp, #16
 800071c:	b580      	push	{r7, lr}
 800071e:	b0be      	sub	sp, #248	@ 0xf8
 8000720:	af3e      	add	r7, sp, #248	@ 0xf8
 8000722:	f107 0c08 	add.w	ip, r7, #8
 8000726:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingLifetimeEnabled() != active)
 800072a:	f000 fad9 	bl	8000ce0 <BQ_IsManufacturingLifetimeEnabled>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8000736:	4293      	cmp	r3, r2
 8000738:	d00d      	beq.n	8000756 <BQAction_SetManufacturingLF+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 800073a:	2323      	movs	r3, #35	@ 0x23
 800073c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800073e:	4668      	mov	r0, sp
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	22f0      	movs	r2, #240	@ 0xf0
 8000746:	4619      	mov	r1, r3
 8000748:	f004 f85c 	bl	8004804 <memcpy>
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000752:	f7ff fe07 	bl	8000364 <BQ_WriteMABlockCommand>
    }
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075e:	b004      	add	sp, #16
 8000760:	4770      	bx	lr

08000762 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data BMS)
{
 8000762:	b084      	sub	sp, #16
 8000764:	b580      	push	{r7, lr}
 8000766:	b0c0      	sub	sp, #256	@ 0x100
 8000768:	af3e      	add	r7, sp, #248	@ 0xf8
 800076a:	f107 0c10 	add.w	ip, r7, #16
 800076e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//    bool isSealed = false;

    BQAction_UpdateOpStatus(BMS);
 8000772:	4668      	mov	r0, sp
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	22f0      	movs	r2, #240	@ 0xf0
 800077a:	4619      	mov	r1, r3
 800077c:	f004 f842 	bl	8004804 <memcpy>
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000786:	f000 f911 	bl	80009ac <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode();
 800078a:	f000 fa27 	bl	8000bdc <BQ_GetSecurityMode>
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000792:	e035      	b.n	8000800 <BQAction_TryUnsealedDevice+0x9e>
    {
//        isSealed = true;
//        ("[BQ] Security mode - Sealed", 27);

        BQ_WriteMABlockCommand(BMS, 0x0414);
 8000794:	f240 4314 	movw	r3, #1044	@ 0x414
 8000798:	933c      	str	r3, [sp, #240]	@ 0xf0
 800079a:	4668      	mov	r0, sp
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	22f0      	movs	r2, #240	@ 0xf0
 80007a2:	4619      	mov	r1, r3
 80007a4:	f004 f82e 	bl	8004804 <memcpy>
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ae:	f7ff fdd9 	bl	8000364 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 80007b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007b6:	f000 fe97 	bl	80014e8 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 80007ba:	f243 6372 	movw	r3, #13938	@ 0x3672
 80007be:	933c      	str	r3, [sp, #240]	@ 0xf0
 80007c0:	4668      	mov	r0, sp
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	22f0      	movs	r2, #240	@ 0xf0
 80007c8:	4619      	mov	r1, r3
 80007ca:	f004 f81b 	bl	8004804 <memcpy>
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d4:	f7ff fdc6 	bl	8000364 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 80007d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80007dc:	f000 fe84 	bl	80014e8 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80007e0:	4668      	mov	r0, sp
 80007e2:	f107 0320 	add.w	r3, r7, #32
 80007e6:	22f0      	movs	r2, #240	@ 0xf0
 80007e8:	4619      	mov	r1, r3
 80007ea:	f004 f80b 	bl	8004804 <memcpy>
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f4:	f000 f8da 	bl	80009ac <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode();
 80007f8:	f000 f9f0 	bl	8000bdc <BQ_GetSecurityMode>
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0c6      	beq.n	8000794 <BQAction_TryUnsealedDevice+0x32>
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d0c3      	beq.n	8000794 <BQAction_TryUnsealedDevice+0x32>
    // print only if the device was previously sealeded
//    if (isSealed){
//        ("[BQ] successfully unsealed", 27);
//    }

}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data BMS)
{
 800081c:	b084      	sub	sp, #16
 800081e:	b580      	push	{r7, lr}
 8000820:	b0c6      	sub	sp, #280	@ 0x118
 8000822:	af40      	add	r7, sp, #256	@ 0x100
 8000824:	f107 0c20 	add.w	ip, r7, #32
 8000828:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 800082c:	2357      	movs	r3, #87	@ 0x57
 800082e:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000830:	4668      	mov	r0, sp
 8000832:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000836:	22f0      	movs	r2, #240	@ 0xf0
 8000838:	4619      	mov	r1, r3
 800083a:	f003 ffe3 	bl	8004804 <memcpy>
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000844:	f7ff fe26 	bl	8000494 <BQ_ReadCommandAsShort>
 8000848:	4603      	mov	r3, r0
 800084a:	82fb      	strh	r3, [r7, #22]
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 800084c:	2355      	movs	r3, #85	@ 0x55
 800084e:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000850:	4668      	mov	r0, sp
 8000852:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000856:	22f0      	movs	r2, #240	@ 0xf0
 8000858:	4619      	mov	r1, r3
 800085a:	f003 ffd3 	bl	8004804 <memcpy>
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000864:	f7ff fe48 	bl	80004f8 <BQ_ReadCommandAsInt>
 8000868:	6138      	str	r0, [r7, #16]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 800086a:	2354      	movs	r3, #84	@ 0x54
 800086c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800086e:	4668      	mov	r0, sp
 8000870:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000874:	22f0      	movs	r2, #240	@ 0xf0
 8000876:	4619      	mov	r1, r3
 8000878:	f003 ffc4 	bl	8004804 <memcpy>
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000882:	f7ff fe39 	bl	80004f8 <BQ_ReadCommandAsInt>
 8000886:	60f8      	str	r0, [r7, #12]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000888:	2356      	movs	r3, #86	@ 0x56
 800088a:	933c      	str	r3, [sp, #240]	@ 0xf0
 800088c:	4668      	mov	r0, sp
 800088e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000892:	22f0      	movs	r2, #240	@ 0xf0
 8000894:	4619      	mov	r1, r3
 8000896:	f003 ffb5 	bl	8004804 <memcpy>
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a0:	f7ff fe2a 	bl	80004f8 <BQ_ReadCommandAsInt>
 80008a4:	60b8      	str	r0, [r7, #8]

    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode);
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	4a3b      	ldr	r2, [pc, #236]	@ (8000998 <BQAction_UpdateData+0x17c>)
 80008aa:	7811      	ldrb	r1, [r2, #0]
 80008ac:	2203      	movs	r2, #3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fb80 	bl	8000fb4 <I2CHelper_ReadRegisterAsShort>
 80008b4:	4603      	mov	r3, r0
 80008b6:	80fb      	strh	r3, [r7, #6]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	4a37      	ldr	r2, [pc, #220]	@ (8000998 <BQAction_UpdateData+0x17c>)
 80008bc:	7811      	ldrb	r1, [r2, #0]
 80008be:	2216      	movs	r2, #22
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fb77 	bl	8000fb4 <I2CHelper_ReadRegisterAsShort>
 80008c6:	4603      	mov	r3, r0
 80008c8:	80bb      	strh	r3, [r7, #4]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	4a32      	ldr	r2, [pc, #200]	@ (8000998 <BQAction_UpdateData+0x17c>)
 80008ce:	7811      	ldrb	r1, [r2, #0]
 80008d0:	2248      	movs	r2, #72	@ 0x48
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fb93 	bl	8000ffe <I2CHelper_ReadRegisterAsChar>
 80008d8:	4603      	mov	r3, r0
 80008da:	70fb      	strb	r3, [r7, #3]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 80008dc:	2320      	movs	r3, #32
 80008de:	933e      	str	r3, [sp, #248]	@ 0xf8
 80008e0:	4b2e      	ldr	r3, [pc, #184]	@ (800099c <BQAction_UpdateData+0x180>)
 80008e2:	933d      	str	r3, [sp, #244]	@ 0xf4
 80008e4:	2371      	movs	r3, #113	@ 0x71
 80008e6:	933c      	str	r3, [sp, #240]	@ 0xf0
 80008e8:	4668      	mov	r0, sp
 80008ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ee:	22f0      	movs	r2, #240	@ 0xf0
 80008f0:	4619      	mov	r1, r3
 80008f2:	f003 ff87 	bl	8004804 <memcpy>
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fc:	f7ff fd5c 	bl	80003b8 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2, 16);
 8000900:	2310      	movs	r3, #16
 8000902:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000904:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <BQAction_UpdateData+0x184>)
 8000906:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000908:	2372      	movs	r3, #114	@ 0x72
 800090a:	933c      	str	r3, [sp, #240]	@ 0xf0
 800090c:	4668      	mov	r0, sp
 800090e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000912:	22f0      	movs	r2, #240	@ 0xf0
 8000914:	4619      	mov	r1, r3
 8000916:	f003 ff75 	bl	8004804 <memcpy>
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000920:	f7ff fd4a 	bl	80003b8 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
 8000924:	2312      	movs	r3, #18
 8000926:	933e      	str	r3, [sp, #248]	@ 0xf8
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <BQAction_UpdateData+0x188>)
 800092a:	933d      	str	r3, [sp, #244]	@ 0xf4
 800092c:	237b      	movs	r3, #123	@ 0x7b
 800092e:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000930:	4668      	mov	r0, sp
 8000932:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000936:	22f0      	movs	r2, #240	@ 0xf0
 8000938:	4619      	mov	r1, r3
 800093a:	f003 ff63 	bl	8004804 <memcpy>
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000944:	f7ff fd38 	bl	80003b8 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal, 32);
 8000948:	2320      	movs	r3, #32
 800094a:	933e      	str	r3, [sp, #248]	@ 0xf8
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <BQAction_UpdateData+0x18c>)
 800094e:	933d      	str	r3, [sp, #244]	@ 0xf4
 8000950:	f24f 0381 	movw	r3, #61569	@ 0xf081
 8000954:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000956:	4668      	mov	r0, sp
 8000958:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800095c:	22f0      	movs	r2, #240	@ 0xf0
 800095e:	4619      	mov	r1, r3
 8000960:	f003 ff50 	bl	8004804 <memcpy>
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096a:	f7ff fd25 	bl	80003b8 <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags(operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 800096e:	78f8      	ldrb	r0, [r7, #3]
 8000970:	88ba      	ldrh	r2, [r7, #4]
 8000972:	88f9      	ldrh	r1, [r7, #6]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	8afb      	ldrh	r3, [r7, #22]
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4603      	mov	r3, r0
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f000 f888 	bl	8000a98 <BQ_ParseAllFlags>
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000992:	b004      	add	sp, #16
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000000 	.word	0x20000000
 800099c:	200000c8 	.word	0x200000c8
 80009a0:	200000e8 	.word	0x200000e8
 80009a4:	200000f8 	.word	0x200000f8
 80009a8:	2000010a 	.word	0x2000010a

080009ac <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data BMS)
{
 80009ac:	b084      	sub	sp, #16
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b0c0      	sub	sp, #256	@ 0x100
 80009b2:	af40      	add	r7, sp, #256	@ 0x100
 80009b4:	f107 0c08 	add.w	ip, r7, #8
 80009b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 80009bc:	2320      	movs	r3, #32
 80009be:	933e      	str	r3, [sp, #248]	@ 0xf8
 80009c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a34 <BQAction_UpdateOpStatus+0x88>)
 80009c2:	933d      	str	r3, [sp, #244]	@ 0xf4
 80009c4:	2371      	movs	r3, #113	@ 0x71
 80009c6:	933c      	str	r3, [sp, #240]	@ 0xf0
 80009c8:	4668      	mov	r0, sp
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	22f0      	movs	r2, #240	@ 0xf0
 80009d0:	4619      	mov	r1, r3
 80009d2:	f003 ff17 	bl	8004804 <memcpy>
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009dc:	f7ff fcec 	bl	80003b8 <BQ_ReadMABlockCommand>
    BQ_ParseOperationStatus(BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS));
 80009e0:	2354      	movs	r3, #84	@ 0x54
 80009e2:	933c      	str	r3, [sp, #240]	@ 0xf0
 80009e4:	4668      	mov	r0, sp
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	22f0      	movs	r2, #240	@ 0xf0
 80009ec:	4619      	mov	r1, r3
 80009ee:	f003 ff09 	bl	8004804 <memcpy>
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f8:	f7ff fd7e 	bl	80004f8 <BQ_ReadCommandAsInt>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f874 	bl	8000aec <BQ_ParseOperationStatus>
    BQ_ParseManufacturingStatus(BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS));
 8000a04:	2357      	movs	r3, #87	@ 0x57
 8000a06:	933c      	str	r3, [sp, #240]	@ 0xf0
 8000a08:	4668      	mov	r0, sp
 8000a0a:	f107 0318 	add.w	r3, r7, #24
 8000a0e:	22f0      	movs	r2, #240	@ 0xf0
 8000a10:	4619      	mov	r1, r3
 8000a12:	f003 fef7 	bl	8004804 <memcpy>
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1c:	f7ff fd3a 	bl	8000494 <BQ_ReadCommandAsShort>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f8b6 	bl	8000b94 <BQ_ParseManufacturingStatus>
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr
 8000a34:	200000c8 	.word	0x200000c8

08000a38 <decimalToBinary>:
 * @param value decimal value
 * @param array array to write
 * @param count array size
 */
void decimalToBinary(uint32_t value, uint8_t *array, uint8_t count)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	4613      	mov	r3, r2
 8000a44:	71fb      	strb	r3, [r7, #7]
	uint8_t currentCount = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000a4a:	e00e      	b.n	8000a6a <decimalToBinary+0x32>
	{
		array[currentCount] = value % 2;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	440b      	add	r3, r1
 8000a56:	f002 0201 	and.w	r2, r2, #1
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	701a      	strb	r2, [r3, #0]
		value /= 2;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
		currentCount++;
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	3301      	adds	r3, #1
 8000a68:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ed      	bne.n	8000a4c <decimalToBinary+0x14>
	}

	while (currentCount < count)
 8000a70:	e007      	b.n	8000a82 <decimalToBinary+0x4a>
	{
		array[currentCount] = 0;
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	4413      	add	r3, r2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
		currentCount++;
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	75fb      	strb	r3, [r7, #23]
	while (currentCount < count)
 8000a82:	7dfa      	ldrb	r2, [r7, #23]
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3f3      	bcc.n	8000a72 <decimalToBinary+0x3a>
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	371c      	adds	r7, #28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <BQ_ParseAllFlags>:
					  uint16_t batteryMode,
					  uint8_t gpio,
					  uint16_t manStatus,
					  uint32_t chargeStatus,
					  uint32_t gaugStatus)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	817b      	strh	r3, [r7, #10]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	813b      	strh	r3, [r7, #8]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	71fb      	strb	r3, [r7, #7]
	BQ_ParseOperationStatus(opStatus);
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f000 f81a 	bl	8000aec <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(chargeStatus);
 8000ab8:	69f8      	ldr	r0, [r7, #28]
 8000aba:	f000 f827 	bl	8000b0c <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(gaugStatus);
 8000abe:	6a38      	ldr	r0, [r7, #32]
 8000ac0:	f000 f834 	bl	8000b2c <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(batteryStatus);
 8000ac4:	897b      	ldrh	r3, [r7, #10]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f840 	bl	8000b4c <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(manStatus);
 8000acc:	8b3b      	ldrh	r3, [r7, #24]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f860 	bl	8000b94 <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(batteryMode);
 8000ad4:	893b      	ldrh	r3, [r7, #8]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f84a 	bl	8000b70 <BQ_ParseBatteryMode>
	BQ_ParseGpio(gpio);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f86a 	bl	8000bb8 <BQ_ParseGpio>
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(uint32_t raw)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_opStatus
	decimalToBinary(raw, BMS_1.BQ_opStatus, 32);
 8000af4:	2220      	movs	r2, #32
 8000af6:	4904      	ldr	r1, [pc, #16]	@ (8000b08 <BQ_ParseOperationStatus+0x1c>)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff9d 	bl	8000a38 <decimalToBinary>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000030 	.word	0x20000030

08000b0c <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(uint32_t raw)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_chargeStatus
	decimalToBinary(raw, BMS_1.BQ_chargeStatus, 32);
 8000b14:	2220      	movs	r2, #32
 8000b16:	4904      	ldr	r1, [pc, #16]	@ (8000b28 <BQ_ParseChargeStatus+0x1c>)
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff8d 	bl	8000a38 <decimalToBinary>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000050 	.word	0x20000050

08000b2c <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(uint32_t raw)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_gaugeStatus
	decimalToBinary(raw, BMS_1.BQ_gaugeStatus, 32);
 8000b34:	2220      	movs	r2, #32
 8000b36:	4904      	ldr	r1, [pc, #16]	@ (8000b48 <BQ_ParseGaugeStatus+0x1c>)
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff7d 	bl	8000a38 <decimalToBinary>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000070 	.word	0x20000070

08000b4c <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(uint16_t raw)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	//convert to binary array and save in BQ_batteryStatus
	decimalToBinary(raw, BMS_1.BQ_batteryStatus, 16);
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2210      	movs	r2, #16
 8000b5a:	4904      	ldr	r1, [pc, #16]	@ (8000b6c <BQ_ParseBatteryStatus+0x20>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff6b 	bl	8000a38 <decimalToBinary>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000090 	.word	0x20000090

08000b70 <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(uint16_t raw)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	//convert to binary array and save in BQ_batteryMode
	decimalToBinary(raw, BMS_1.BQ_batteryMode, 16);
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	2210      	movs	r2, #16
 8000b7e:	4904      	ldr	r1, [pc, #16]	@ (8000b90 <BQ_ParseBatteryMode+0x20>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff59 	bl	8000a38 <decimalToBinary>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000a0 	.word	0x200000a0

08000b94 <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(uint16_t raw)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
	decimalToBinary(raw, BMS_1.BQ_manufacturingStatus, 16);
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	2210      	movs	r2, #16
 8000ba2:	4904      	ldr	r1, [pc, #16]	@ (8000bb4 <BQ_ParseManufacturingStatus+0x20>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff47 	bl	8000a38 <decimalToBinary>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000b0 	.word	0x200000b0

08000bb8 <BQ_ParseGpio>:

void BQ_ParseGpio(uint8_t raw)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	//convert to binary array and save in BQ_gpio
	decimalToBinary(raw, BMS_1.BQ_gpio, 8);
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	4904      	ldr	r1, [pc, #16]	@ (8000bd8 <BQ_ParseGpio+0x20>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff35 	bl	8000a38 <decimalToBinary>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000c0 	.word	0x200000c0

08000bdc <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
    if (BMS_1.BQ_opStatus[9] && BMS_1.BQ_opStatus[8]){
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <BQ_GetSecurityMode+0x4c>)
 8000be2:	7b5b      	ldrb	r3, [r3, #13]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d005      	beq.n	8000bf4 <BQ_GetSecurityMode+0x18>
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <BQ_GetSecurityMode+0x4c>)
 8000bea:	7b1b      	ldrb	r3, [r3, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <BQ_GetSecurityMode+0x18>
        return SEALED;//11
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e014      	b.n	8000c1e <BQ_GetSecurityMode+0x42>
    }else if (BMS_1.BQ_opStatus[9] && !BMS_1.BQ_opStatus[8]){
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <BQ_GetSecurityMode+0x4c>)
 8000bf6:	7b5b      	ldrb	r3, [r3, #13]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <BQ_GetSecurityMode+0x2c>
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <BQ_GetSecurityMode+0x4c>)
 8000bfe:	7b1b      	ldrb	r3, [r3, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <BQ_GetSecurityMode+0x2c>
        return UNSEALED;//10
 8000c04:	2301      	movs	r3, #1
 8000c06:	e00a      	b.n	8000c1e <BQ_GetSecurityMode+0x42>
    }else if (!BMS_1.BQ_opStatus[9] && BMS_1.BQ_opStatus[8]){
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <BQ_GetSecurityMode+0x4c>)
 8000c0a:	7b5b      	ldrb	r3, [r3, #13]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d105      	bne.n	8000c1c <BQ_GetSecurityMode+0x40>
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <BQ_GetSecurityMode+0x4c>)
 8000c12:	7b1b      	ldrb	r3, [r3, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <BQ_GetSecurityMode+0x40>
        return FULL_ACCESS;//01
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e000      	b.n	8000c1e <BQ_GetSecurityMode+0x42>
    }else{
        return RESERVED;//00
 8000c1c:	2303      	movs	r3, #3
    }
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	2000002c 	.word	0x2000002c

08000c2c <BQ_IsManufacturingFuseEnabled>:
}



bool BQ_IsManufacturingFuseEnabled(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
    return BMS_1.BQ_manufacturingStatus[8];
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <BQ_IsManufacturingFuseEnabled+0x20>)
 8000c32:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bf14      	ite	ne
 8000c3a:	2301      	movne	r3, #1
 8000c3c:	2300      	moveq	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000002c 	.word	0x2000002c

08000c50 <BQ_IsManufacturingAllFetEnabled>:
/**
 * @brief function shows fet control
 * @return 0 if fet control enabled, 1 if fet control disabled
 */
bool BQ_IsManufacturingAllFetEnabled(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
    return BMS_1.BQ_manufacturingStatus[4];
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <BQ_IsManufacturingAllFetEnabled+0x20>)
 8000c56:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bf14      	ite	ne
 8000c5e:	2301      	movne	r3, #1
 8000c60:	2300      	moveq	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2000002c 	.word	0x2000002c

08000c74 <BQ_IsManufacturingGaugingEnabled>:

bool BQ_IsManufacturingGaugingEnabled(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
    return BMS_1.BQ_manufacturingStatus[3];
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <BQ_IsManufacturingGaugingEnabled+0x20>)
 8000c7a:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	2000002c 	.word	0x2000002c

08000c98 <BQ_IsManufacturingCalibrationEnabled>:

bool BQ_IsManufacturingCalibrationEnabled(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
    return BMS_1.BQ_manufacturingStatus[15];
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <BQ_IsManufacturingCalibrationEnabled+0x20>)
 8000c9e:	f893 3093 	ldrb.w	r3, [r3, #147]	@ 0x93
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2000002c 	.word	0x2000002c

08000cbc <BQ_IsManufacturingPermanentFailureEnabled>:

bool BQ_IsManufacturingPermanentFailureEnabled(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
    return BMS_1.BQ_manufacturingStatus[6];
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <BQ_IsManufacturingPermanentFailureEnabled+0x20>)
 8000cc2:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	bf14      	ite	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	2300      	moveq	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000002c 	.word	0x2000002c

08000ce0 <BQ_IsManufacturingLifetimeEnabled>:

bool BQ_IsManufacturingLifetimeEnabled(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
    return BMS_1.BQ_manufacturingStatus[5];
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <BQ_IsManufacturingLifetimeEnabled+0x20>)
 8000ce6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf14      	ite	ne
 8000cee:	2301      	movne	r3, #1
 8000cf0:	2300      	moveq	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	2000002c 	.word	0x2000002c

08000d04 <BQ_IsLedEnabled>:

bool BQ_IsLedEnabled(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
    return BMS_1.BQ_opStatus[17];
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <BQ_IsLedEnabled+0x1c>)
 8000d0a:	7d5b      	ldrb	r3, [r3, #21]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	2000002c 	.word	0x2000002c

08000d24 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b45      	ldr	r3, [pc, #276]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a44      	ldr	r2, [pc, #272]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	4b3f      	ldr	r3, [pc, #252]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	4a3e      	ldr	r2, [pc, #248]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b39      	ldr	r3, [pc, #228]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a38      	ldr	r2, [pc, #224]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b36      	ldr	r3, [pc, #216]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b33      	ldr	r3, [pc, #204]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a32      	ldr	r2, [pc, #200]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b30      	ldr	r3, [pc, #192]	@ (8000e50 <MX_GPIO_Init+0x12c>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	21b0      	movs	r1, #176	@ 0xb0
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f000 fe9f 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dac:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <MX_GPIO_Init+0x130>)
 8000dae:	f000 fe99 	bl	8001ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4823      	ldr	r0, [pc, #140]	@ (8000e58 <MX_GPIO_Init+0x134>)
 8000dca:	f000 fd11 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dce:	230c      	movs	r3, #12
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dde:	2307      	movs	r3, #7
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dec:	f000 fd00 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000df0:	23b0      	movs	r3, #176	@ 0xb0
 8000df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0a:	f000 fcf1 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000e0e:	2340      	movs	r3, #64	@ 0x40
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f000 fce4 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_GPIO_Init+0x130>)
 8000e42:	f000 fcd5 	bl	80017f0 <HAL_GPIO_Init>

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400
 8000e58:	48000800 	.word	0x48000800

08000e5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed4 <MX_I2C1_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <MX_I2C1_Init+0x7c>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e96:	480e      	ldr	r0, [pc, #56]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000e98:	f000 fe3c 	bl	8001b14 <HAL_I2C_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ea2:	f000 f9fa 	bl	800129a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000eaa:	f002 fa47 	bl	800333c <HAL_I2CEx_ConfigAnalogFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f000 f9f1 	bl	800129a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_I2C1_Init+0x74>)
 8000ebc:	f002 fa89 	bl	80033d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 f9e8 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000012c 	.word	0x2000012c
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	10909cec 	.word	0x10909cec

08000edc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0a2      	sub	sp, #136	@ 0x88
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2260      	movs	r2, #96	@ 0x60
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 fc55 	bl	80047ac <memset>
  if(i2cHandle->Instance==I2C1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a28      	ldr	r2, [pc, #160]	@ (8000fa8 <HAL_I2C_MspInit+0xcc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d148      	bne.n	8000f9e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f0c:	2340      	movs	r3, #64	@ 0x40
 8000f0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 f90b 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f24:	f000 f9b9 	bl	800129a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_I2C_MspInit+0xd0>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fac <HAL_I2C_MspInit+0xd0>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f34:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <HAL_I2C_MspInit+0xd0>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f40:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f44:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f46:	2312      	movs	r3, #18
 8000f48:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f54:	2304      	movs	r3, #4
 8000f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4813      	ldr	r0, [pc, #76]	@ (8000fb0 <HAL_I2C_MspInit+0xd4>)
 8000f62:	f000 fc45 	bl	80017f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_I2C_MspInit+0xd0>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	4a10      	ldr	r2, [pc, #64]	@ (8000fac <HAL_I2C_MspInit+0xd0>)
 8000f6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <HAL_I2C_MspInit+0xd0>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210a      	movs	r1, #10
 8000f82:	201f      	movs	r0, #31
 8000f84:	f000 fbaf 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f88:	201f      	movs	r0, #31
 8000f8a:	f000 fbc8 	bl	800171e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2109      	movs	r1, #9
 8000f92:	2020      	movs	r0, #32
 8000f94:	f000 fba7 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f98:	2020      	movs	r0, #32
 8000f9a:	f000 fbc0 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3788      	adds	r7, #136	@ 0x88
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	78ba      	ldrb	r2, [r7, #2]
 8000fca:	78f9      	ldrb	r1, [r7, #3]
 8000fcc:	2002      	movs	r0, #2
 8000fce:	9000      	str	r0, [sp, #0]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f82a 	bl	800102a <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000fda:	7b3b      	ldrb	r3, [r7, #12]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	89fb      	ldrh	r3, [r7, #14]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000fe4:	7b7b      	ldrb	r3, [r7, #13]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	81fb      	strh	r3, [r7, #14]

	return result;
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af02      	add	r7, sp, #8
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	70fb      	strb	r3, [r7, #3]
 800100a:	4613      	mov	r3, r2
 800100c:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	78ba      	ldrb	r2, [r7, #2]
 8001014:	78f9      	ldrb	r1, [r7, #3]
 8001016:	2001      	movs	r0, #1
 8001018:	9000      	str	r0, [sp, #0]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f805 	bl	800102a <I2CHelper_ReadRegister>

	return buf[0];
 8001020:	7b3b      	ldrb	r3, [r7, #12]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af02      	add	r7, sp, #8
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	4613      	mov	r3, r2
 800103a:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 800103c:	7afb      	ldrb	r3, [r7, #11]
 800103e:	b29b      	uxth	r3, r3
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	b299      	uxth	r1, r3
 8001044:	f107 020a 	add.w	r2, r7, #10
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f000 fdfc 	bl	8001c4c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8001054:	7afb      	ldrb	r3, [r7, #11]
 8001056:	b29b      	uxth	r3, r3
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	b299      	uxth	r1, r3
 800105c:	7e3b      	ldrb	r3, [r7, #24]
 800105e:	b29b      	uxth	r3, r3
 8001060:	2264      	movs	r2, #100	@ 0x64
 8001062:	9200      	str	r2, [sp, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 ff08 	bl	8001e7c <HAL_I2C_Master_Receive>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b0c7      	sub	sp, #284	@ 0x11c
 8001078:	af40      	add	r7, sp, #256	@ 0x100
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f000 f9b9 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f8bb 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f7ff fe4f 	bl	8000d24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001086:	f7ff fee9 	bl	8000e5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 800108a:	4856      	ldr	r0, [pc, #344]	@ (80011e4 <main+0x170>)
 800108c:	f000 fd42 	bl	8001b14 <HAL_I2C_Init>
  HAL_I2C_MspInit(&hi2c1);
 8001090:	4854      	ldr	r0, [pc, #336]	@ (80011e4 <main+0x170>)
 8001092:	f7ff ff23 	bl	8000edc <HAL_I2C_MspInit>
  uint16_t voltage = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	82fb      	strh	r3, [r7, #22]
  uint16_t current = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	82bb      	strh	r3, [r7, #20]
  uint8_t percentage[2];
  uint16_t cells[6];
  BQ_Init(&hi2c1);
 800109e:	4851      	ldr	r0, [pc, #324]	@ (80011e4 <main+0x170>)
 80010a0:	f7ff f894 	bl	80001cc <BQ_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 80010a4:	2064      	movs	r0, #100	@ 0x64
 80010a6:	f000 fa1f 	bl	80014e8 <HAL_Delay>

	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 80010aa:	4c4f      	ldr	r4, [pc, #316]	@ (80011e8 <main+0x174>)
 80010ac:	2320      	movs	r3, #32
 80010ae:	933e      	str	r3, [sp, #248]	@ 0xf8
 80010b0:	4b4e      	ldr	r3, [pc, #312]	@ (80011ec <main+0x178>)
 80010b2:	933d      	str	r3, [sp, #244]	@ 0xf4
 80010b4:	2371      	movs	r3, #113	@ 0x71
 80010b6:	933c      	str	r3, [sp, #240]	@ 0xf0
 80010b8:	4668      	mov	r0, sp
 80010ba:	f104 0310 	add.w	r3, r4, #16
 80010be:	22f0      	movs	r2, #240	@ 0xf0
 80010c0:	4619      	mov	r1, r3
 80010c2:	f003 fb9f 	bl	8004804 <memcpy>
 80010c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ca:	f7ff f975 	bl	80003b8 <BQ_ReadMABlockCommand>
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_DA_STATUS_2, 16);
	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
 80010ce:	4c46      	ldr	r4, [pc, #280]	@ (80011e8 <main+0x174>)
 80010d0:	2312      	movs	r3, #18
 80010d2:	933e      	str	r3, [sp, #248]	@ 0xf8
 80010d4:	4b46      	ldr	r3, [pc, #280]	@ (80011f0 <main+0x17c>)
 80010d6:	933d      	str	r3, [sp, #244]	@ 0xf4
 80010d8:	237b      	movs	r3, #123	@ 0x7b
 80010da:	933c      	str	r3, [sp, #240]	@ 0xf0
 80010dc:	4668      	mov	r0, sp
 80010de:	f104 0310 	add.w	r3, r4, #16
 80010e2:	22f0      	movs	r2, #240	@ 0xf0
 80010e4:	4619      	mov	r1, r3
 80010e6:	f003 fb8d 	bl	8004804 <memcpy>
 80010ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010ee:	f7ff f963 	bl	80003b8 <BQ_ReadMABlockCommand>
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_OUTPUT_CADC_CAL, BQ_outCal, 32);
	  voltage = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 80010f2:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <main+0x174>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a3f      	ldr	r2, [pc, #252]	@ (80011f4 <main+0x180>)
 80010f8:	7811      	ldrb	r1, [r2, #0]
 80010fa:	2209      	movs	r2, #9
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff59 	bl	8000fb4 <I2CHelper_ReadRegisterAsShort>
 8001102:	4603      	mov	r3, r0
 8001104:	82fb      	strh	r3, [r7, #22]
	  current = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);
 8001106:	4b38      	ldr	r3, [pc, #224]	@ (80011e8 <main+0x174>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a3a      	ldr	r2, [pc, #232]	@ (80011f4 <main+0x180>)
 800110c:	7811      	ldrb	r1, [r2, #0]
 800110e:	220a      	movs	r2, #10
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff4f 	bl	8000fb4 <I2CHelper_ReadRegisterAsShort>
 8001116:	4603      	mov	r3, r0
 8001118:	82bb      	strh	r3, [r7, #20]
	  percentage[0] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 800111a:	4b33      	ldr	r3, [pc, #204]	@ (80011e8 <main+0x174>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a35      	ldr	r2, [pc, #212]	@ (80011f4 <main+0x180>)
 8001120:	7811      	ldrb	r1, [r2, #0]
 8001122:	220d      	movs	r2, #13
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff6a 	bl	8000ffe <I2CHelper_ReadRegisterAsChar>
 800112a:	4603      	mov	r3, r0
 800112c:	743b      	strb	r3, [r7, #16]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 800112e:	4b2e      	ldr	r3, [pc, #184]	@ (80011e8 <main+0x174>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a30      	ldr	r2, [pc, #192]	@ (80011f4 <main+0x180>)
 8001134:	7811      	ldrb	r1, [r2, #0]
 8001136:	220e      	movs	r2, #14
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff60 	bl	8000ffe <I2CHelper_ReadRegisterAsChar>
 800113e:	4603      	mov	r3, r0
 8001140:	747b      	strb	r3, [r7, #17]
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1[0] | (BMS_1.BQ_daStatus1[1] << 8);
 8001142:	4b29      	ldr	r3, [pc, #164]	@ (80011e8 <main+0x174>)
 8001144:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b27      	ldr	r3, [pc, #156]	@ (80011e8 <main+0x174>)
 800114c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	80bb      	strh	r3, [r7, #4]
	  cells[1] = BMS_1.BQ_daStatus1[2] | (BMS_1.BQ_daStatus1[3] << 8);
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <main+0x174>)
 800115e:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8001162:	b21a      	sxth	r2, r3
 8001164:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <main+0x174>)
 8001166:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 800116a:	021b      	lsls	r3, r3, #8
 800116c:	b21b      	sxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b21b      	sxth	r3, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	80fb      	strh	r3, [r7, #6]
	  cells[2] = BMS_1.BQ_daStatus1[4] | (BMS_1.BQ_daStatus1[5] << 8);
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <main+0x174>)
 8001178:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <main+0x174>)
 8001180:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21b      	sxth	r3, r3
 800118c:	b29b      	uxth	r3, r3
 800118e:	813b      	strh	r3, [r7, #8]
	  cells[3] = BMS_1.BQ_daStatus1[6] | (BMS_1.BQ_daStatus1[7] << 8);
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <main+0x174>)
 8001192:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <main+0x174>)
 800119a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	817b      	strh	r3, [r7, #10]
	  cells[4] = BMS_1.BQ_daStatus3[0] | (BMS_1.BQ_daStatus3[1] << 8);
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <main+0x174>)
 80011ac:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <main+0x174>)
 80011b4:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21b      	sxth	r3, r3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	81bb      	strh	r3, [r7, #12]
	  cells[5] = BMS_1.BQ_daStatus3[6] | (BMS_1.BQ_daStatus3[7] << 8);
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <main+0x174>)
 80011c6:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <main+0x174>)
 80011ce:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	b29b      	uxth	r3, r3
 80011dc:	81fb      	strh	r3, [r7, #14]
	  HAL_Delay(100);
 80011de:	bf00      	nop
 80011e0:	e760      	b.n	80010a4 <main+0x30>
 80011e2:	bf00      	nop
 80011e4:	2000012c 	.word	0x2000012c
 80011e8:	2000002c 	.word	0x2000002c
 80011ec:	200000c8 	.word	0x200000c8
 80011f0:	200000f8 	.word	0x200000f8
 80011f4:	20000000 	.word	0x20000000

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b096      	sub	sp, #88	@ 0x58
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2244      	movs	r2, #68	@ 0x44
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fad0 	bl	80047ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800121a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800121e:	f002 f933 	bl	8003488 <HAL_PWREx_ControlVoltageScaling>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001228:	f000 f837 	bl	800129a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001234:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001236:	2310      	movs	r3, #16
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123e:	2302      	movs	r3, #2
 8001240:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001242:	2301      	movs	r3, #1
 8001244:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001246:	230a      	movs	r3, #10
 8001248:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124a:	2307      	movs	r3, #7
 800124c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4618      	mov	r0, r3
 800125c:	f002 f96a 	bl	8003534 <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001266:	f000 f818 	bl	800129a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2303      	movs	r3, #3
 8001270:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	2104      	movs	r1, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fd6a 	bl	8003d5c <HAL_RCC_ClockConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800128e:	f000 f804 	bl	800129a <Error_Handler>
  }
}
 8001292:	bf00      	nop
 8001294:	3758      	adds	r7, #88	@ 0x58
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129e:	b672      	cpsid	i
}
 80012a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a2:	bf00      	nop
 80012a4:	e7fd      	b.n	80012a2 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_MspInit+0x44>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b2:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <HAL_MspInit+0x44>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ba:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <HAL_MspInit+0x44>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_MspInit+0x44>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_MspInit+0x44>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <NMI_Handler+0x4>

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <HardFault_Handler+0x4>

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <MemManage_Handler+0x4>

08001308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001346:	f000 f8af 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <I2C1_EV_IRQHandler+0x10>)
 8001356:	f000 ff73 	bl	8002240 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000012c 	.word	0x2000012c

08001364 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001368:	4802      	ldr	r0, [pc, #8]	@ (8001374 <I2C1_ER_IRQHandler+0x10>)
 800136a:	f000 ff83 	bl	8002274 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000012c 	.word	0x2000012c

08001378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff ffea 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <LoopForever+0xe>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	@ (80013e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	@ (80013e8 <LoopForever+0x16>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f003 f9f7 	bl	80047bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ce:	f7ff fe51 	bl	8001074 <main>

080013d2 <LoopForever>:

LoopForever:
    b LoopForever
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013e0:	08004880 	.word	0x08004880
  ldr r2, =_sbss
 80013e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013e8:	20000184 	.word	0x20000184

080013ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_Init+0x3c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <HAL_Init+0x3c>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001404:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001406:	2003      	movs	r0, #3
 8001408:	f000 f962 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140c:	2000      	movs	r0, #0
 800140e:	f000 f80f 	bl	8001430 <HAL_InitTick>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	e001      	b.n	8001422 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141e:	f7ff ff43 	bl	80012a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001422:	79fb      	ldrb	r3, [r7, #7]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_InitTick+0x6c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d023      	beq.n	800148c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_InitTick+0x70>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_InitTick+0x6c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f96d 	bl	800173a <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d809      	bhi.n	8001480 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f937 	bl	80016e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_InitTick+0x74>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e007      	b.n	8001490 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e004      	b.n	8001490 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e001      	b.n	8001490 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000004 	.word	0x20000004
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	20000180 	.word	0x20000180

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000180 	.word	0x20000180

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_Delay+0x44>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000000c 	.word	0x2000000c

08001530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800155c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	db0b      	blt.n	80015be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4907      	ldr	r1, [pc, #28]	@ (80015cc <__NVIC_EnableIRQ+0x38>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	2001      	movs	r0, #1
 80015b6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	@ (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	@ 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	@ 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff29 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff3e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff31 	bl	8001594 <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d005      	beq.n	8001776 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2204      	movs	r2, #4
 800176e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
 8001774:	e029      	b.n	80017ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 020e 	bic.w	r2, r2, #14
 8001784:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f003 021c 	and.w	r2, r3, #28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	2101      	movs	r1, #1
 80017a4:	fa01 f202 	lsl.w	r2, r1, r2
 80017a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
    }
  }
  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017e2:	b2db      	uxtb	r3, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fe:	e154      	b.n	8001aaa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa01 f303 	lsl.w	r3, r1, r3
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8146 	beq.w	8001aa4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d005      	beq.n	8001830 <HAL_GPIO_Init+0x40>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d123      	bne.n	8001922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0203 	and.w	r2, r3, #3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80a0 	beq.w	8001aa4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	4b58      	ldr	r3, [pc, #352]	@ (8001ac8 <HAL_GPIO_Init+0x2d8>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001968:	4a57      	ldr	r2, [pc, #348]	@ (8001ac8 <HAL_GPIO_Init+0x2d8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001970:	4b55      	ldr	r3, [pc, #340]	@ (8001ac8 <HAL_GPIO_Init+0x2d8>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800197c:	4a53      	ldr	r2, [pc, #332]	@ (8001acc <HAL_GPIO_Init+0x2dc>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019a6:	d019      	beq.n	80019dc <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a49      	ldr	r2, [pc, #292]	@ (8001ad0 <HAL_GPIO_Init+0x2e0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a48      	ldr	r2, [pc, #288]	@ (8001ad4 <HAL_GPIO_Init+0x2e4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00d      	beq.n	80019d4 <HAL_GPIO_Init+0x1e4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a47      	ldr	r2, [pc, #284]	@ (8001ad8 <HAL_GPIO_Init+0x2e8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d007      	beq.n	80019d0 <HAL_GPIO_Init+0x1e0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a46      	ldr	r2, [pc, #280]	@ (8001adc <HAL_GPIO_Init+0x2ec>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_GPIO_Init+0x1dc>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e008      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019cc:	2307      	movs	r3, #7
 80019ce:	e006      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d0:	2303      	movs	r3, #3
 80019d2:	e004      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019dc:	2300      	movs	r3, #0
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	f002 0203 	and.w	r2, r2, #3
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	4093      	lsls	r3, r2
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ee:	4937      	ldr	r1, [pc, #220]	@ (8001acc <HAL_GPIO_Init+0x2dc>)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019fc:	4b38      	ldr	r3, [pc, #224]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a20:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a26:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a4a:	4a25      	ldr	r2, [pc, #148]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a9e:	4a10      	ldr	r2, [pc, #64]	@ (8001ae0 <HAL_GPIO_Init+0x2f0>)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f47f aea3 	bne.w	8001800 <HAL_GPIO_Init+0x10>
  }
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	48000c00 	.word	0x48000c00
 8001adc:	48001000 	.word	0x48001000
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
 8001af0:	4613      	mov	r3, r2
 8001af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af4:	787b      	ldrb	r3, [r7, #1]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b00:	e002      	b.n	8001b08 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e08d      	b.n	8001c42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff f9ce 	bl	8000edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2224      	movs	r2, #36	@ 0x24
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e006      	b.n	8001b9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d108      	bne.n	8001bb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	e007      	b.n	8001bc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001be8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69d9      	ldr	r1, [r3, #28]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	461a      	mov	r2, r3
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	f040 80fd 	bne.w	8001e68 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2C_Master_Transmit+0x30>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0f6      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c84:	f7ff fc24 	bl	80014d0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2319      	movs	r3, #25
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f001 f871 	bl	8002d7e <I2C_WaitOnFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e1      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2221      	movs	r2, #33	@ 0x21
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	893a      	ldrh	r2, [r7, #8]
 8001cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2bff      	cmp	r3, #255	@ 0xff
 8001cd6:	d906      	bls.n	8001ce6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	22ff      	movs	r2, #255	@ 0xff
 8001cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001cde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e007      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cf4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d024      	beq.n	8001d48 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e74 <HAL_I2C_Master_Transmit+0x228>)
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f001 fa6b 	bl	800321c <I2C_TransferConfig>
 8001d46:	e066      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	8979      	ldrh	r1, [r7, #10]
 8001d50:	4b48      	ldr	r3, [pc, #288]	@ (8001e74 <HAL_I2C_Master_Transmit+0x228>)
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f001 fa60 	bl	800321c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d5c:	e05b      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f001 f864 	bl	8002e30 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07b      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d034      	beq.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d130      	bne.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2180      	movs	r1, #128	@ 0x80
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 ffdd 	bl	8002d7e <I2C_WaitOnFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e04d      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2bff      	cmp	r3, #255	@ 0xff
 8001dd6:	d90e      	bls.n	8001df6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	22ff      	movs	r2, #255	@ 0xff
 8001ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	8979      	ldrh	r1, [r7, #10]
 8001de6:	2300      	movs	r3, #0
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f001 fa14 	bl	800321c <I2C_TransferConfig>
 8001df4:	e00f      	b.n	8001e16 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	8979      	ldrh	r1, [r7, #10]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f001 fa03 	bl	800321c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d19e      	bne.n	8001d5e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	6a39      	ldr	r1, [r7, #32]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f001 f84a 	bl	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01a      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_I2C_Master_Transmit+0x22c>)
 8001e48:	400b      	ands	r3, r1
 8001e4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	80002000 	.word	0x80002000
 8001e78:	fe00e800 	.word	0xfe00e800

08001e7c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	461a      	mov	r2, r3
 8001e88:	460b      	mov	r3, r1
 8001e8a:	817b      	strh	r3, [r7, #10]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	f040 80db 	bne.w	8002054 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_I2C_Master_Receive+0x30>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e0d4      	b.n	8002056 <HAL_I2C_Master_Receive+0x1da>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb4:	f7ff fb0c 	bl	80014d0 <HAL_GetTick>
 8001eb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2319      	movs	r3, #25
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 ff59 	bl	8002d7e <I2C_WaitOnFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e0bf      	b.n	8002056 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2222      	movs	r2, #34	@ 0x22
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	893a      	ldrh	r2, [r7, #8]
 8001ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2bff      	cmp	r3, #255	@ 0xff
 8001f06:	d90e      	bls.n	8001f26 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	8979      	ldrh	r1, [r7, #10]
 8001f16:	4b52      	ldr	r3, [pc, #328]	@ (8002060 <HAL_I2C_Master_Receive+0x1e4>)
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f001 f97c 	bl	800321c <I2C_TransferConfig>
 8001f24:	e06d      	b.n	8002002 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	8979      	ldrh	r1, [r7, #10]
 8001f38:	4b49      	ldr	r3, [pc, #292]	@ (8002060 <HAL_I2C_Master_Receive+0x1e4>)
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f001 f96b 	bl	800321c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f46:	e05c      	b.n	8002002 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6a39      	ldr	r1, [r7, #32]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fff9 	bl	8002f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e07c      	b.n	8002056 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d034      	beq.n	8002002 <HAL_I2C_Master_Receive+0x186>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d130      	bne.n	8002002 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fee7 	bl	8002d7e <I2C_WaitOnFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e04d      	b.n	8002056 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2bff      	cmp	r3, #255	@ 0xff
 8001fc2:	d90e      	bls.n	8001fe2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	22ff      	movs	r2, #255	@ 0xff
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f001 f91e 	bl	800321c <I2C_TransferConfig>
 8001fe0:	e00f      	b.n	8002002 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f001 f90d 	bl	800321c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d19d      	bne.n	8001f48 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	6a39      	ldr	r1, [r7, #32]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 ff54 	bl	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e01a      	b.n	8002056 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2220      	movs	r2, #32
 8002026:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_I2C_Master_Receive+0x1e8>)
 8002034:	400b      	ands	r3, r1
 8002036:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	e000      	b.n	8002056 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002054:	2302      	movs	r3, #2
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	80002400 	.word	0x80002400
 8002064:	fe00e800 	.word	0xfe00e800

08002068 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	@ 0x28
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b20      	cmp	r3, #32
 8002086:	f040 80d6 	bne.w	8002236 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002098:	d101      	bne.n	800209e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800209a:	2302      	movs	r3, #2
 800209c:	e0cc      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_I2C_IsDeviceReady+0x44>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e0c5      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x1d0>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2224      	movs	r2, #36	@ 0x24
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_I2C_IsDeviceReady+0x72>
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020d8:	e006      	b.n	80020e8 <HAL_I2C_IsDeviceReady+0x80>
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020e4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80020ee:	f7ff f9ef 	bl	80014d0 <HAL_GetTick>
 80020f2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b20      	cmp	r3, #32
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002120:	e034      	b.n	800218c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002128:	d01a      	beq.n	8002160 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff f9d1 	bl	80014d0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d302      	bcc.n	8002140 <HAL_I2C_IsDeviceReady+0xd8>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10f      	bne.n	8002160 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e06b      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b20      	cmp	r3, #32
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	2b10      	cmp	r3, #16
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800218c:	7ffb      	ldrb	r3, [r7, #31]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_I2C_IsDeviceReady+0x130>
 8002192:	7fbb      	ldrb	r3, [r7, #30]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0c4      	beq.n	8002122 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d01a      	beq.n	80021dc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2120      	movs	r1, #32
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fde4 	bl	8002d7e <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e03b      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2220      	movs	r2, #32
 80021c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e02d      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	2120      	movs	r1, #32
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fdc9 	bl	8002d7e <I2C_WaitOnFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e020      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2210      	movs	r2, #16
 80021fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2220      	movs	r2, #32
 8002204:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	f63f af56 	bhi.w	80020c2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
  }
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	68f9      	ldr	r1, [r7, #12]
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
  }
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00f      	beq.n	80022b6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00f      	beq.n	80022e0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0208 	orr.w	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00f      	beq.n	800230a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f8:	f043 0202 	orr.w	r2, r3, #2
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002308:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 030b 	and.w	r3, r3, #11
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800231a:	68f9      	ldr	r1, [r7, #12]
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fbd5 	bl	8002acc <I2C_ITError>
  }
}
 8002322:	bf00      	nop
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	70fb      	strb	r3, [r7, #3]
 800235e:	4613      	mov	r3, r2
 8002360:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <I2C_Slave_ISR_IT+0x24>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0e2      	b.n	8002594 <I2C_Slave_ISR_IT+0x1ea>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80023ea:	6939      	ldr	r1, [r7, #16]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f9b5 	bl	800275c <I2C_ITSlaveCplt>
 80023f2:	e0ca      	b.n	800258a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d04b      	beq.n	8002496 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002404:	2b00      	cmp	r3, #0
 8002406:	d046      	beq.n	8002496 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d128      	bne.n	8002464 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b28      	cmp	r3, #40	@ 0x28
 800241c:	d108      	bne.n	8002430 <I2C_Slave_ISR_IT+0x86>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002424:	d104      	bne.n	8002430 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fafb 	bl	8002a24 <I2C_ITListenCplt>
 800242e:	e031      	b.n	8002494 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b29      	cmp	r3, #41	@ 0x29
 800243a:	d10e      	bne.n	800245a <I2C_Slave_ISR_IT+0xb0>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002442:	d00a      	beq.n	800245a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2210      	movs	r2, #16
 800244a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fc54 	bl	8002cfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f926 	bl	80026a4 <I2C_ITSlaveSeqCplt>
 8002458:	e01c      	b.n	8002494 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2210      	movs	r2, #16
 8002460:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002462:	e08f      	b.n	8002584 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2210      	movs	r2, #16
 800246a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <I2C_Slave_ISR_IT+0xdc>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002484:	d17e      	bne.n	8002584 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	4619      	mov	r1, r3
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fb1d 	bl	8002acc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002492:	e077      	b.n	8002584 <I2C_Slave_ISR_IT+0x1da>
 8002494:	e076      	b.n	8002584 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d02f      	beq.n	8002500 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d02a      	beq.n	8002500 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d018      	beq.n	80024e6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d14b      	bne.n	8002588 <I2C_Slave_ISR_IT+0x1de>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024f6:	d047      	beq.n	8002588 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f8d3 	bl	80026a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80024fe:	e043      	b.n	8002588 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002514:	6939      	ldr	r1, [r7, #16]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f840 	bl	800259c <I2C_ITAddrCplt>
 800251c:	e035      	b.n	800258a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d030      	beq.n	800258a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800252e:	2b00      	cmp	r3, #0
 8002530:	d02b      	beq.n	800258a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800256c:	e00d      	b.n	800258a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002574:	d002      	beq.n	800257c <I2C_Slave_ISR_IT+0x1d2>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 f891 	bl	80026a4 <I2C_ITSlaveSeqCplt>
 8002582:	e002      	b.n	800258a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002588:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025b2:	2b28      	cmp	r3, #40	@ 0x28
 80025b4:	d16a      	bne.n	800268c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	0c1b      	lsrs	r3, r3, #16
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80025d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80025f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d138      	bne.n	800266c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80025fa:	897b      	ldrh	r3, [r7, #10]
 80025fc:	09db      	lsrs	r3, r3, #7
 80025fe:	b29a      	uxth	r2, r3
 8002600:	89bb      	ldrh	r3, [r7, #12]
 8002602:	4053      	eors	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	f003 0306 	and.w	r3, r3, #6
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11c      	bne.n	8002648 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002620:	2b02      	cmp	r3, #2
 8002622:	d13b      	bne.n	800269c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2208      	movs	r2, #8
 8002630:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800263a:	89ba      	ldrh	r2, [r7, #12]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff fe86 	bl	8002352 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002646:	e029      	b.n	800269c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002648:	893b      	ldrh	r3, [r7, #8]
 800264a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800264c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 fe15 	bl	8003280 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800265e:	89ba      	ldrh	r2, [r7, #12]
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fe74 	bl	8002352 <HAL_I2C_AddrCallback>
}
 800266a:	e017      	b.n	800269c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800266c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fe05 	bl	8003280 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800267e:	89ba      	ldrh	r2, [r7, #12]
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fe64 	bl	8002352 <HAL_I2C_AddrCallback>
}
 800268a:	e007      	b.n	800269c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2208      	movs	r2, #8
 8002692:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	e00c      	b.n	80026f2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b29      	cmp	r3, #41	@ 0x29
 80026fc:	d112      	bne.n	8002724 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2228      	movs	r2, #40	@ 0x28
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2221      	movs	r2, #33	@ 0x21
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800270c:	2101      	movs	r1, #1
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fdb6 	bl	8003280 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff fe04 	bl	800232a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002722:	e017      	b.n	8002754 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b2a      	cmp	r3, #42	@ 0x2a
 800272e:	d111      	bne.n	8002754 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2228      	movs	r2, #40	@ 0x28
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2222      	movs	r2, #34	@ 0x22
 800273c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800273e:	2102      	movs	r1, #2
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fd9d 	bl	8003280 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fdf5 	bl	800233e <HAL_I2C_SlaveRxCpltCallback>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2220      	movs	r2, #32
 8002786:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	2b21      	cmp	r3, #33	@ 0x21
 800278c:	d002      	beq.n	8002794 <I2C_ITSlaveCplt+0x38>
 800278e:	7afb      	ldrb	r3, [r7, #11]
 8002790:	2b29      	cmp	r3, #41	@ 0x29
 8002792:	d108      	bne.n	80027a6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002794:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fd71 	bl	8003280 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2221      	movs	r2, #33	@ 0x21
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027a4:	e019      	b.n	80027da <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	2b22      	cmp	r3, #34	@ 0x22
 80027aa:	d002      	beq.n	80027b2 <I2C_ITSlaveCplt+0x56>
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80027b0:	d108      	bne.n	80027c4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80027b2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fd62 	bl	8003280 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2222      	movs	r2, #34	@ 0x22
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c2:	e00a      	b.n	80027da <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	2b28      	cmp	r3, #40	@ 0x28
 80027c8:	d107      	bne.n	80027da <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80027ca:	f248 0103 	movw	r1, #32771	@ 0x8003
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fd56 	bl	8003280 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027e8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6859      	ldr	r1, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b89      	ldr	r3, [pc, #548]	@ (8002a1c <I2C_ITSlaveCplt+0x2c0>)
 80027f6:	400b      	ands	r3, r1
 80027f8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa7d 	bl	8002cfa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002818:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	2b00      	cmp	r3, #0
 8002820:	d01f      	beq.n	8002862 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b29a      	uxth	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002830:	e017      	b.n	8002862 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d012      	beq.n	8002862 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800284a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	b29a      	uxth	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0304 	bic.w	r3, r3, #4
 8002872:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028bc:	f043 0204 	orr.w	r2, r3, #4
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d049      	beq.n	8002962 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d044      	beq.n	8002962 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d128      	bne.n	8002934 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b28      	cmp	r3, #40	@ 0x28
 80028ec:	d108      	bne.n	8002900 <I2C_ITSlaveCplt+0x1a4>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028f4:	d104      	bne.n	8002900 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028f6:	6979      	ldr	r1, [r7, #20]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f893 	bl	8002a24 <I2C_ITListenCplt>
 80028fe:	e030      	b.n	8002962 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b29      	cmp	r3, #41	@ 0x29
 800290a:	d10e      	bne.n	800292a <I2C_ITSlaveCplt+0x1ce>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002912:	d00a      	beq.n	800292a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f9ec 	bl	8002cfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff febe 	bl	80026a4 <I2C_ITSlaveSeqCplt>
 8002928:	e01b      	b.n	8002962 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2210      	movs	r2, #16
 8002930:	61da      	str	r2, [r3, #28]
 8002932:	e016      	b.n	8002962 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2210      	movs	r2, #16
 800293a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	f043 0204 	orr.w	r2, r3, #4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <I2C_ITSlaveCplt+0x1fa>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002954:	d105      	bne.n	8002962 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f8b5 	bl	8002acc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	2b00      	cmp	r3, #0
 8002976:	d010      	beq.n	800299a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8a4 	bl	8002acc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b28      	cmp	r3, #40	@ 0x28
 800298e:	d141      	bne.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f846 	bl	8002a24 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002998:	e03c      	b.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029a2:	d014      	beq.n	80029ce <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fe7d 	bl	80026a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <I2C_ITSlaveCplt+0x2c4>)
 80029ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fcd1 	bl	800236e <HAL_I2C_ListenCpltCallback>
}
 80029cc:	e022      	b.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b22      	cmp	r3, #34	@ 0x22
 80029d8:	d10e      	bne.n	80029f8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fca4 	bl	800233e <HAL_I2C_SlaveRxCpltCallback>
}
 80029f6:	e00d      	b.n	8002a14 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fc8b 	bl	800232a <HAL_I2C_SlaveTxCpltCallback>
}
 8002a14:	bf00      	nop
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	fe00e800 	.word	0xfe00e800
 8002a20:	ffff0000 	.word	0xffff0000

08002a24 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a25      	ldr	r2, [pc, #148]	@ (8002ac8 <I2C_ITListenCplt+0xa4>)
 8002a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d022      	beq.n	8002aa0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002aa0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fbeb 	bl	8003280 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fc57 	bl	800236e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	ffff0000 	.word	0xffff0000

08002acc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002adc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a6d      	ldr	r2, [pc, #436]	@ (8002ca0 <I2C_ITError+0x1d4>)
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b28      	cmp	r3, #40	@ 0x28
 8002b02:	d005      	beq.n	8002b10 <I2C_ITError+0x44>
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b29      	cmp	r3, #41	@ 0x29
 8002b08:	d002      	beq.n	8002b10 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b0e:	d10b      	bne.n	8002b28 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b10:	2103      	movs	r1, #3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fbb4 	bl	8003280 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2228      	movs	r2, #40	@ 0x28
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a60      	ldr	r2, [pc, #384]	@ (8002ca4 <I2C_ITError+0x1d8>)
 8002b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b26:	e030      	b.n	8002b8a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b28:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fba7 	bl	8003280 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8e1 	bl	8002cfa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b60      	cmp	r3, #96	@ 0x60
 8002b42:	d01f      	beq.n	8002b84 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d114      	bne.n	8002b84 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d109      	bne.n	8002b7c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2220      	movs	r2, #32
 8002b82:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d039      	beq.n	8002c0c <I2C_ITError+0x140>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b11      	cmp	r3, #17
 8002b9c:	d002      	beq.n	8002ba4 <I2C_ITError+0xd8>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b21      	cmp	r3, #33	@ 0x21
 8002ba2:	d133      	bne.n	8002c0c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bb2:	d107      	bne.n	8002bc4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe fe03 	bl	80017d4 <HAL_DMA_GetState>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d017      	beq.n	8002c04 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	4a33      	ldr	r2, [pc, #204]	@ (8002ca8 <I2C_ITError+0x1dc>)
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fdb2 	bl	8001752 <HAL_DMA_Abort_IT>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d04d      	beq.n	8002c90 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c02:	e045      	b.n	8002c90 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f851 	bl	8002cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c0a:	e041      	b.n	8002c90 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d039      	beq.n	8002c88 <I2C_ITError+0x1bc>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b12      	cmp	r3, #18
 8002c18:	d002      	beq.n	8002c20 <I2C_ITError+0x154>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b22      	cmp	r3, #34	@ 0x22
 8002c1e:	d133      	bne.n	8002c88 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2e:	d107      	bne.n	8002c40 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fdc5 	bl	80017d4 <HAL_DMA_GetState>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d017      	beq.n	8002c80 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c54:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <I2C_ITError+0x1dc>)
 8002c56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fd74 	bl	8001752 <HAL_DMA_Abort_IT>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d011      	beq.n	8002c94 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c7e:	e009      	b.n	8002c94 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f813 	bl	8002cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c86:	e005      	b.n	8002c94 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f80f 	bl	8002cac <I2C_TreatErrorCallback>
  }
}
 8002c8e:	e002      	b.n	8002c96 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c94:	bf00      	nop
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	ffff0000 	.word	0xffff0000
 8002ca4:	080023ab 	.word	0x080023ab
 8002ca8:	08002d43 	.word	0x08002d43

08002cac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b60      	cmp	r3, #96	@ 0x60
 8002cbe:	d10e      	bne.n	8002cde <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fb5d 	bl	8002396 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cdc:	e009      	b.n	8002cf2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fb48 	bl	8002382 <HAL_I2C_ErrorCallback>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d103      	bne.n	8002d18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d007      	beq.n	8002d36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	619a      	str	r2, [r3, #24]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff ff9b 	bl	8002cac <I2C_TreatErrorCallback>
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8e:	e03b      	b.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	6839      	ldr	r1, [r7, #0]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f961 	bl	800305c <I2C_IsErrorOccurred>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e041      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d02d      	beq.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe fb90 	bl	80014d0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d302      	bcc.n	8002dc2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d122      	bne.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d113      	bne.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e00f      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d0b4      	beq.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e3c:	e033      	b.n	8002ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f90a 	bl	800305c <I2C_IsErrorOccurred>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e031      	b.n	8002eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d025      	beq.n	8002ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fe fb39 	bl	80014d0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11a      	bne.n	8002ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d013      	beq.n	8002ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	f043 0220 	orr.w	r2, r3, #32
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d1c4      	bne.n	8002e3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eca:	e02f      	b.n	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f8c3 	bl	800305c <I2C_IsErrorOccurred>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e02d      	b.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fe faf6 	bl	80014d0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11a      	bne.n	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d013      	beq.n	8002f2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e007      	b.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d1c8      	bne.n	8002ecc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f54:	e071      	b.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f87e 	bl	800305c <I2C_IsErrorOccurred>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d13b      	bne.n	8002ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d138      	bne.n	8002ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d105      	bne.n	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d121      	bne.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2210      	movs	r2, #16
 8002fac:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b24      	ldr	r3, [pc, #144]	@ (8003058 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002fc8:	400b      	ands	r3, r1
 8002fca:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
 8002fe8:	e002      	b.n	8002ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ff0:	f7fe fa6e 	bl	80014d0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d119      	bne.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d00f      	beq.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d002      	beq.n	800304e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d083      	beq.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	fe00e800 	.word	0xfe00e800

0800305c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d068      	beq.n	800315a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003090:	e049      	b.n	8003126 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d045      	beq.n	8003126 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7fe fa19 	bl	80014d0 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_IsErrorOccurred+0x54>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13a      	bne.n	8003126 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030d2:	d121      	bne.n	8003118 <I2C_IsErrorOccurred+0xbc>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030da:	d01d      	beq.n	8003118 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d01a      	beq.n	8003118 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030f2:	f7fe f9ed 	bl	80014d0 <HAL_GetTick>
 80030f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f8:	e00e      	b.n	8003118 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030fa:	f7fe f9e9 	bl	80014d0 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b19      	cmp	r3, #25
 8003106:	d907      	bls.n	8003118 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003116:	e006      	b.n	8003126 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	d1e9      	bne.n	80030fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b20      	cmp	r3, #32
 8003132:	d003      	beq.n	800313c <I2C_IsErrorOccurred+0xe0>
 8003134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0aa      	beq.n	8003092 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800313c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2220      	movs	r2, #32
 800314a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800317c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800319e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fd92 	bl	8002cfa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <I2C_IsErrorOccurred+0x1bc>)
 80031e2:	400b      	ands	r3, r1
 80031e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800320a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800320e:	4618      	mov	r0, r3
 8003210:	3728      	adds	r7, #40	@ 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	4613      	mov	r3, r2
 800322c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003234:	7a7b      	ldrb	r3, [r7, #9]
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800323c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	4313      	orrs	r3, r2
 8003246:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	0d5b      	lsrs	r3, r3, #21
 8003256:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <I2C_TransferConfig+0x60>)
 800325c:	430b      	orrs	r3, r1
 800325e:	43db      	mvns	r3, r3
 8003260:	ea02 0103 	and.w	r1, r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	03ff63ff 	.word	0x03ff63ff

08003280 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00f      	beq.n	80032ba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80032a0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032ae:	2b28      	cmp	r3, #40	@ 0x28
 80032b0:	d003      	beq.n	80032ba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80032b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00f      	beq.n	80032e4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80032ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032d8:	2b28      	cmp	r3, #40	@ 0x28
 80032da:	d003      	beq.n	80032e4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80032e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da03      	bge.n	80032f4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d103      	bne.n	8003302 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003300:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	2b20      	cmp	r3, #32
 8003306:	d103      	bne.n	8003310 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f043 0320 	orr.w	r3, r3, #32
 800330e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d103      	bne.n	800331e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800331c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43da      	mvns	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b20      	cmp	r3, #32
 8003350:	d138      	bne.n	80033c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800335c:	2302      	movs	r3, #2
 800335e:	e032      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	@ 0x24
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800338e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d139      	bne.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e033      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2224      	movs	r2, #36	@ 0x24
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003424:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <HAL_PWREx_GetVoltageRange+0x18>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40007000 	.word	0x40007000

08003488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003496:	d130      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003498:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a4:	d038      	beq.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a6:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034b6:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2232      	movs	r2, #50	@ 0x32
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	4a1b      	ldr	r2, [pc, #108]	@ (8003530 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	3301      	adds	r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034cc:	e002      	b.n	80034d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d4:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e0:	d102      	bne.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f2      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f4:	d110      	bne.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e00f      	b.n	800351a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003506:	d007      	beq.n	8003518 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003510:	4a05      	ldr	r2, [pc, #20]	@ (8003528 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003512:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003516:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40007000 	.word	0x40007000
 800352c:	20000004 	.word	0x20000004
 8003530:	431bde83 	.word	0x431bde83

08003534 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f000 bc02 	b.w	8003d4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003548:	4b96      	ldr	r3, [pc, #600]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003552:	4b94      	ldr	r3, [pc, #592]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80e4 	beq.w	8003732 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_RCC_OscConfig+0x4c>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	f040 808b 	bne.w	800368e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b01      	cmp	r3, #1
 800357c:	f040 8087 	bne.w	800368e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003580:	4b88      	ldr	r3, [pc, #544]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x64>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e3d9      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	4b81      	ldr	r3, [pc, #516]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <HAL_RCC_OscConfig+0x7e>
 80035a8:	4b7e      	ldr	r3, [pc, #504]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b0:	e005      	b.n	80035be <HAL_RCC_OscConfig+0x8a>
 80035b2:	4b7c      	ldr	r3, [pc, #496]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035be:	4293      	cmp	r3, r2
 80035c0:	d223      	bcs.n	800360a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fd54 	bl	8004074 <RCC_SetFlashLatencyFromMSIRange>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e3ba      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035d6:	4b73      	ldr	r3, [pc, #460]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a72      	ldr	r2, [pc, #456]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035dc:	f043 0308 	orr.w	r3, r3, #8
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b70      	ldr	r3, [pc, #448]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	496d      	ldr	r1, [pc, #436]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035f4:	4b6b      	ldr	r3, [pc, #428]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	4968      	ldr	r1, [pc, #416]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
 8003608:	e025      	b.n	8003656 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360a:	4b66      	ldr	r3, [pc, #408]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a65      	ldr	r2, [pc, #404]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b63      	ldr	r3, [pc, #396]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4960      	ldr	r1, [pc, #384]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003628:	4b5e      	ldr	r3, [pc, #376]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	495b      	ldr	r1, [pc, #364]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fd14 	bl	8004074 <RCC_SetFlashLatencyFromMSIRange>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e37a      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003656:	f000 fc81 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b51      	ldr	r3, [pc, #324]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	4950      	ldr	r1, [pc, #320]	@ (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	4a4e      	ldr	r2, [pc, #312]	@ (80037ac <HAL_RCC_OscConfig+0x278>)
 8003674:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003676:	4b4e      	ldr	r3, [pc, #312]	@ (80037b0 <HAL_RCC_OscConfig+0x27c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fed8 	bl	8001430 <HAL_InitTick>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d052      	beq.n	8003730 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	e35e      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d032      	beq.n	80036fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003696:	4b43      	ldr	r3, [pc, #268]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a42      	ldr	r2, [pc, #264]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036a2:	f7fd ff15 	bl	80014d0 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036aa:	f7fd ff11 	bl	80014d0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e347      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036bc:	4b39      	ldr	r3, [pc, #228]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c8:	4b36      	ldr	r3, [pc, #216]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a35      	ldr	r2, [pc, #212]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036ce:	f043 0308 	orr.w	r3, r3, #8
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b33      	ldr	r3, [pc, #204]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4930      	ldr	r1, [pc, #192]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e6:	4b2f      	ldr	r3, [pc, #188]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	492b      	ldr	r1, [pc, #172]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
 80036fa:	e01a      	b.n	8003732 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036fc:	4b29      	ldr	r3, [pc, #164]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a28      	ldr	r2, [pc, #160]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003708:	f7fd fee2 	bl	80014d0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003710:	f7fd fede 	bl	80014d0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e314      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003722:	4b20      	ldr	r3, [pc, #128]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x1dc>
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d073      	beq.n	8003826 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d005      	beq.n	8003750 <HAL_RCC_OscConfig+0x21c>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d10e      	bne.n	8003768 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d10b      	bne.n	8003768 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d063      	beq.n	8003824 <HAL_RCC_OscConfig+0x2f0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d15f      	bne.n	8003824 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e2f1      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d106      	bne.n	8003780 <HAL_RCC_OscConfig+0x24c>
 8003772:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e025      	b.n	80037cc <HAL_RCC_OscConfig+0x298>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003788:	d114      	bne.n	80037b4 <HAL_RCC_OscConfig+0x280>
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a05      	ldr	r2, [pc, #20]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a02      	ldr	r2, [pc, #8]	@ (80037a4 <HAL_RCC_OscConfig+0x270>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e013      	b.n	80037cc <HAL_RCC_OscConfig+0x298>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08004838 	.word	0x08004838
 80037ac:	20000004 	.word	0x20000004
 80037b0:	20000008 	.word	0x20000008
 80037b4:	4ba0      	ldr	r3, [pc, #640]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a9f      	ldr	r2, [pc, #636]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b9d      	ldr	r3, [pc, #628]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a9c      	ldr	r2, [pc, #624]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d013      	beq.n	80037fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fd fe7c 	bl	80014d0 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd fe78 	bl	80014d0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e2ae      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ee:	4b92      	ldr	r3, [pc, #584]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x2a8>
 80037fa:	e014      	b.n	8003826 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd fe68 	bl	80014d0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003804:	f7fd fe64 	bl	80014d0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	@ 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e29a      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003816:	4b88      	ldr	r3, [pc, #544]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x2d0>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d060      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d005      	beq.n	8003844 <HAL_RCC_OscConfig+0x310>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d119      	bne.n	8003872 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d116      	bne.n	8003872 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	4b7c      	ldr	r3, [pc, #496]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_OscConfig+0x328>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e277      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b76      	ldr	r3, [pc, #472]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	4973      	ldr	r1, [pc, #460]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003870:	e040      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d023      	beq.n	80038c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387a:	4b6f      	ldr	r3, [pc, #444]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6e      	ldr	r2, [pc, #440]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd fe23 	bl	80014d0 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800388e:	f7fd fe1f 	bl	80014d0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e255      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a0:	4b65      	ldr	r3, [pc, #404]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b62      	ldr	r3, [pc, #392]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	495f      	ldr	r1, [pc, #380]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
 80038c0:	e018      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ce:	f7fd fdff 	bl	80014d0 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d6:	f7fd fdfb 	bl	80014d0 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e231      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038e8:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d03c      	beq.n	800397a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01c      	beq.n	8003942 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003908:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800390a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fdda 	bl	80014d0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003920:	f7fd fdd6 	bl	80014d0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e20c      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003932:	4b41      	ldr	r3, [pc, #260]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <HAL_RCC_OscConfig+0x3ec>
 8003940:	e01b      	b.n	800397a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003942:	4b3d      	ldr	r3, [pc, #244]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003948:	4a3b      	ldr	r2, [pc, #236]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fd fdbd 	bl	80014d0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800395a:	f7fd fdb9 	bl	80014d0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1ef      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800396c:	4b32      	ldr	r3, [pc, #200]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800396e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ef      	bne.n	800395a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80a6 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800398c:	4b2a      	ldr	r3, [pc, #168]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10d      	bne.n	80039b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003998:	4b27      	ldr	r3, [pc, #156]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399c:	4a26      	ldr	r2, [pc, #152]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039a4:	4b24      	ldr	r3, [pc, #144]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80039a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b0:	2301      	movs	r3, #1
 80039b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b4:	4b21      	ldr	r3, [pc, #132]	@ (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d118      	bne.n	80039f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039cc:	f7fd fd80 	bl	80014d0 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d4:	f7fd fd7c 	bl	80014d0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1b2      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e6:	4b15      	ldr	r3, [pc, #84]	@ (8003a3c <HAL_RCC_OscConfig+0x508>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d108      	bne.n	8003a0c <HAL_RCC_OscConfig+0x4d8>
 80039fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a0a:	e029      	b.n	8003a60 <HAL_RCC_OscConfig+0x52c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d115      	bne.n	8003a40 <HAL_RCC_OscConfig+0x50c>
 8003a14:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1a:	4a07      	ldr	r2, [pc, #28]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f043 0304 	orr.w	r3, r3, #4
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	4a03      	ldr	r2, [pc, #12]	@ (8003a38 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a34:	e014      	b.n	8003a60 <HAL_RCC_OscConfig+0x52c>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	4b9a      	ldr	r3, [pc, #616]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	4a99      	ldr	r2, [pc, #612]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a50:	4b96      	ldr	r3, [pc, #600]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	4a95      	ldr	r2, [pc, #596]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d016      	beq.n	8003a96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fd fd32 	bl	80014d0 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fd fd2e 	bl	80014d0 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e162      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a86:	4b89      	ldr	r3, [pc, #548]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ed      	beq.n	8003a70 <HAL_RCC_OscConfig+0x53c>
 8003a94:	e015      	b.n	8003ac2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a96:	f7fd fd1b 	bl	80014d0 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fd fd17 	bl	80014d0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e14b      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab4:	4b7d      	ldr	r3, [pc, #500]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ed      	bne.n	8003a9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d105      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac8:	4b78      	ldr	r3, [pc, #480]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	4a77      	ldr	r2, [pc, #476]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d03c      	beq.n	8003b5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ae8:	4b70      	ldr	r3, [pc, #448]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aee:	4a6f      	ldr	r2, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd fcea 	bl	80014d0 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b00:	f7fd fce6 	bl	80014d0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e11c      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b12:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <HAL_RCC_OscConfig+0x5cc>
 8003b20:	e01b      	b.n	8003b5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b22:	4b62      	ldr	r3, [pc, #392]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b28:	4a60      	ldr	r2, [pc, #384]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fd fccd 	bl	80014d0 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b3a:	f7fd fcc9 	bl	80014d0 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0ff      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b4c:	4b57      	ldr	r3, [pc, #348]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ef      	bne.n	8003b3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80f3 	beq.w	8003d4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	f040 80c9 	bne.w	8003d00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0203 	and.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d12c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d123      	bne.n	8003bdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d11b      	bne.n	8003bdc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d113      	bne.n	8003bdc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d109      	bne.n	8003bdc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d06b      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d062      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003be2:	4b32      	ldr	r3, [pc, #200]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0ac      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003bf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bfe:	f7fd fc67 	bl	80014d0 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd fc63 	bl	80014d0 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e099      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c18:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c24:	4b21      	ldr	r3, [pc, #132]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	4b21      	ldr	r3, [pc, #132]	@ (8003cb0 <HAL_RCC_OscConfig+0x77c>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c34:	3a01      	subs	r2, #1
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	4311      	orrs	r1, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c3e:	0212      	lsls	r2, r2, #8
 8003c40:	4311      	orrs	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0552      	lsls	r2, r2, #21
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c52:	0852      	lsrs	r2, r2, #1
 8003c54:	3a01      	subs	r2, #1
 8003c56:	0652      	lsls	r2, r2, #25
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c5e:	06d2      	lsls	r2, r2, #27
 8003c60:	430a      	orrs	r2, r1
 8003c62:	4912      	ldr	r1, [pc, #72]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c68:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c74:	4b0d      	ldr	r3, [pc, #52]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a0c      	ldr	r2, [pc, #48]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c80:	f7fd fc26 	bl	80014d0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fc22 	bl	80014d0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e058      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9a:	4b04      	ldr	r3, [pc, #16]	@ (8003cac <HAL_RCC_OscConfig+0x778>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ca6:	e050      	b.n	8003d4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e04f      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d144      	bne.n	8003d4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cc0:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ccc:	4b21      	ldr	r3, [pc, #132]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a20      	ldr	r2, [pc, #128]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cd8:	f7fd fbfa 	bl	80014d0 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd fbf6 	bl	80014d0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e02c      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	4b18      	ldr	r3, [pc, #96]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x7ac>
 8003cfe:	e024      	b.n	8003d4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d01f      	beq.n	8003d46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b13      	ldr	r3, [pc, #76]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a12      	ldr	r2, [pc, #72]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003d0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fd fbdd 	bl	80014d0 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fd fbd9 	bl	80014d0 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2c:	4b09      	ldr	r3, [pc, #36]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003d38:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	4905      	ldr	r1, [pc, #20]	@ (8003d54 <HAL_RCC_OscConfig+0x820>)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_RCC_OscConfig+0x824>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	60cb      	str	r3, [r1, #12]
 8003d44:	e001      	b.n	8003d4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3720      	adds	r7, #32
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	feeefffc 	.word	0xfeeefffc

08003d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0e7      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d70:	4b75      	ldr	r3, [pc, #468]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d910      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7e:	4b72      	ldr	r3, [pc, #456]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 0207 	bic.w	r2, r3, #7
 8003d86:	4970      	ldr	r1, [pc, #448]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0cf      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4b66      	ldr	r3, [pc, #408]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d908      	bls.n	8003dce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b63      	ldr	r3, [pc, #396]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4960      	ldr	r1, [pc, #384]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d04c      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d121      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0a6      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfa:	4b54      	ldr	r3, [pc, #336]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d115      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e09a      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e12:	4b4e      	ldr	r3, [pc, #312]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e08e      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e22:	4b4a      	ldr	r3, [pc, #296]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e086      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b46      	ldr	r3, [pc, #280]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4943      	ldr	r1, [pc, #268]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd fb44 	bl	80014d0 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fd fb40 	bl	80014d0 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e06e      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b3a      	ldr	r3, [pc, #232]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	4b31      	ldr	r3, [pc, #196]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d208      	bcs.n	8003ea2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b2e      	ldr	r3, [pc, #184]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	492b      	ldr	r1, [pc, #172]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea2:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d210      	bcs.n	8003ed2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb0:	4b25      	ldr	r3, [pc, #148]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 0207 	bic.w	r2, r3, #7
 8003eb8:	4923      	ldr	r1, [pc, #140]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec0:	4b21      	ldr	r3, [pc, #132]	@ (8003f48 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e036      	b.n	8003f40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ede:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4918      	ldr	r1, [pc, #96]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4910      	ldr	r1, [pc, #64]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f10:	f000 f824 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <HAL_RCC_ClockConfig+0x1f0>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	490b      	ldr	r1, [pc, #44]	@ (8003f50 <HAL_RCC_ClockConfig+0x1f4>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2c:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <HAL_RCC_ClockConfig+0x1f8>)
 8003f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f30:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <HAL_RCC_ClockConfig+0x1fc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd fa7b 	bl	8001430 <HAL_InitTick>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	08004838 	.word	0x08004838
 8003f54:	20000004 	.word	0x20000004
 8003f58:	20000008 	.word	0x20000008

08003f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	@ 0x24
 8003f60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f74:	4b3b      	ldr	r3, [pc, #236]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x34>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d121      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d11e      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f90:	4b34      	ldr	r3, [pc, #208]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f9c:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e005      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fac:	4b2d      	ldr	r3, [pc, #180]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10d      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d102      	bne.n	8003fda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d101      	bne.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe0:	4b23      	ldr	r3, [pc, #140]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fe2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d134      	bne.n	8004054 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fea:	4b1e      	ldr	r3, [pc, #120]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d003      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0xac>
 8004000:	e005      	b.n	800400e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004002:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <HAL_RCC_GetSysClockFreq+0x110>)
 8004004:	617b      	str	r3, [r7, #20]
      break;
 8004006:	e005      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x114>)
 800400a:	617b      	str	r3, [r7, #20]
      break;
 800400c:	e002      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	617b      	str	r3, [r7, #20]
      break;
 8004012:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004014:	4b13      	ldr	r3, [pc, #76]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	091b      	lsrs	r3, r3, #4
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	3301      	adds	r3, #1
 8004020:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004022:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	0a1b      	lsrs	r3, r3, #8
 8004028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	fb03 f202 	mul.w	r2, r3, r2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800403a:	4b0a      	ldr	r3, [pc, #40]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x108>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	0e5b      	lsrs	r3, r3, #25
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	3301      	adds	r3, #1
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004054:	69bb      	ldr	r3, [r7, #24]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	@ 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	08004848 	.word	0x08004848
 800406c:	00f42400 	.word	0x00f42400
 8004070:	007a1200 	.word	0x007a1200

08004074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004080:	4b2a      	ldr	r3, [pc, #168]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800408c:	f7ff f9ee 	bl	800346c <HAL_PWREx_GetVoltageRange>
 8004090:	6178      	str	r0, [r7, #20]
 8004092:	e014      	b.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b25      	ldr	r3, [pc, #148]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	4a24      	ldr	r2, [pc, #144]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409e:	6593      	str	r3, [r2, #88]	@ 0x58
 80040a0:	4b22      	ldr	r3, [pc, #136]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040ac:	f7ff f9de 	bl	800346c <HAL_PWREx_GetVoltageRange>
 80040b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b1e      	ldr	r3, [pc, #120]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b6:	4a1d      	ldr	r2, [pc, #116]	@ (800412c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c4:	d10b      	bne.n	80040de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b80      	cmp	r3, #128	@ 0x80
 80040ca:	d919      	bls.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80040d0:	d902      	bls.n	80040d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040d2:	2302      	movs	r3, #2
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	e013      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d8:	2301      	movs	r3, #1
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	e010      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b80      	cmp	r3, #128	@ 0x80
 80040e2:	d902      	bls.n	80040ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040e4:	2303      	movs	r3, #3
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	e00a      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b80      	cmp	r3, #128	@ 0x80
 80040ee:	d102      	bne.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040f0:	2302      	movs	r3, #2
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e004      	b.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b70      	cmp	r3, #112	@ 0x70
 80040fa:	d101      	bne.n	8004100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040fc:	2301      	movs	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f023 0207 	bic.w	r2, r3, #7
 8004108:	4909      	ldr	r1, [pc, #36]	@ (8004130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004110:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	429a      	cmp	r2, r3
 800411c:	d001      	beq.n	8004122 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e000      	b.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40021000 	.word	0x40021000
 8004130:	40022000 	.word	0x40022000

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800413c:	2300      	movs	r3, #0
 800413e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004140:	2300      	movs	r3, #0
 8004142:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800414c:	2b00      	cmp	r3, #0
 800414e:	d031      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004158:	d01a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800415a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800415e:	d814      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004168:	d10f      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800416a:	4b5d      	ldr	r3, [pc, #372]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4a5c      	ldr	r2, [pc, #368]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004174:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004176:	e00c      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fa22 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	74fb      	strb	r3, [r7, #19]
      break;
 800418e:	e000      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004198:	4b51      	ldr	r3, [pc, #324]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	494e      	ldr	r1, [pc, #312]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041ae:	e001      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 809e 	beq.w	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041c6:	4b46      	ldr	r3, [pc, #280]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00d      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041dc:	4b40      	ldr	r3, [pc, #256]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e0:	4a3f      	ldr	r2, [pc, #252]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e8:	4b3d      	ldr	r3, [pc, #244]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f4:	2301      	movs	r3, #1
 80041f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f8:	4b3a      	ldr	r3, [pc, #232]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a39      	ldr	r2, [pc, #228]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80041fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004202:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004204:	f7fd f964 	bl	80014d0 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800420a:	e009      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420c:	f7fd f960 	bl	80014d0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	74fb      	strb	r3, [r7, #19]
        break;
 800421e:	e005      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004220:	4b30      	ldr	r3, [pc, #192]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ef      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d15a      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004232:	4b2b      	ldr	r3, [pc, #172]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01e      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	429a      	cmp	r2, r3
 800424c:	d019      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800424e:	4b24      	ldr	r3, [pc, #144]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004258:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800425a:	4b21      	ldr	r3, [pc, #132]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004260:	4a1f      	ldr	r2, [pc, #124]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800426a:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	4a1b      	ldr	r2, [pc, #108]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004276:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800427a:	4a19      	ldr	r2, [pc, #100]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d016      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd f920 	bl	80014d0 <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	e00b      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fd f91c 	bl	80014d0 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d902      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	74fb      	strb	r3, [r7, #19]
            break;
 80042aa:	e006      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ac:	4b0c      	ldr	r3, [pc, #48]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ec      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10b      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c0:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	4904      	ldr	r1, [pc, #16]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042d6:	e009      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
 80042dc:	e006      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80042de:	bf00      	nop
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ec:	7c7b      	ldrb	r3, [r7, #17]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f6:	4a8c      	ldr	r2, [pc, #560]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800430a:	4b87      	ldr	r3, [pc, #540]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004310:	f023 0203 	bic.w	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	4983      	ldr	r1, [pc, #524]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800432c:	4b7e      	ldr	r3, [pc, #504]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004332:	f023 020c 	bic.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	497b      	ldr	r1, [pc, #492]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800434e:	4b76      	ldr	r3, [pc, #472]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004354:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	4972      	ldr	r1, [pc, #456]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004370:	4b6d      	ldr	r3, [pc, #436]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004376:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	496a      	ldr	r1, [pc, #424]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004392:	4b65      	ldr	r3, [pc, #404]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004398:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	4961      	ldr	r1, [pc, #388]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	4959      	ldr	r1, [pc, #356]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d6:	4b54      	ldr	r3, [pc, #336]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e4:	4950      	ldr	r1, [pc, #320]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	4948      	ldr	r1, [pc, #288]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441a:	4b43      	ldr	r3, [pc, #268]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004420:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	493f      	ldr	r1, [pc, #252]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d028      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800443c:	4b3a      	ldr	r3, [pc, #232]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444a:	4937      	ldr	r1, [pc, #220]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800445a:	d106      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800445c:	4b32      	ldr	r3, [pc, #200]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a31      	ldr	r2, [pc, #196]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004466:	60d3      	str	r3, [r2, #12]
 8004468:	e011      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004472:	d10c      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f8a4 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d028      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800449a:	4b23      	ldr	r3, [pc, #140]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a8:	491f      	ldr	r1, [pc, #124]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b8:	d106      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4a1a      	ldr	r2, [pc, #104]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044c4:	60d3      	str	r3, [r2, #12]
 80044c6:	e011      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f875 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02b      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004506:	4908      	ldr	r1, [pc, #32]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004516:	d109      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	4b03      	ldr	r3, [pc, #12]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a02      	ldr	r2, [pc, #8]	@ (8004528 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004522:	60d3      	str	r3, [r2, #12]
 8004524:	e014      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004534:	d10c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	2101      	movs	r1, #1
 800453c:	4618      	mov	r0, r3
 800453e:	f000 f843 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800454c:	7cfb      	ldrb	r3, [r7, #19]
 800454e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01c      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800455c:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004562:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456a:	4916      	ldr	r1, [pc, #88]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800457a:	d10c      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f820 	bl	80045c8 <RCCEx_PLLSAI1_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045a2:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b0:	4904      	ldr	r1, [pc, #16]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000

080045c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045d6:	4b74      	ldr	r3, [pc, #464]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d018      	beq.n	8004614 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045e2:	4b71      	ldr	r3, [pc, #452]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f003 0203 	and.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d10d      	bne.n	800460e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
       ||
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045fa:	4b6b      	ldr	r3, [pc, #428]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
       ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d047      	beq.n	800469e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	e044      	b.n	800469e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d018      	beq.n	800464e <RCCEx_PLLSAI1_Config+0x86>
 800461c:	2b03      	cmp	r3, #3
 800461e:	d825      	bhi.n	800466c <RCCEx_PLLSAI1_Config+0xa4>
 8004620:	2b01      	cmp	r3, #1
 8004622:	d002      	beq.n	800462a <RCCEx_PLLSAI1_Config+0x62>
 8004624:	2b02      	cmp	r3, #2
 8004626:	d009      	beq.n	800463c <RCCEx_PLLSAI1_Config+0x74>
 8004628:	e020      	b.n	800466c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800462a:	4b5f      	ldr	r3, [pc, #380]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d11d      	bne.n	8004672 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463a:	e01a      	b.n	8004672 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800463c:	4b5a      	ldr	r3, [pc, #360]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d116      	bne.n	8004676 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464c:	e013      	b.n	8004676 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800464e:	4b56      	ldr	r3, [pc, #344]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800465a:	4b53      	ldr	r3, [pc, #332]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800466a:	e006      	b.n	800467a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
      break;
 8004670:	e004      	b.n	800467c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004672:	bf00      	nop
 8004674:	e002      	b.n	800467c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004676:	bf00      	nop
 8004678:	e000      	b.n	800467c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800467a:	bf00      	nop
    }

    if(status == HAL_OK)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004682:	4b49      	ldr	r3, [pc, #292]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	430b      	orrs	r3, r1
 8004698:	4943      	ldr	r1, [pc, #268]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d17c      	bne.n	800479e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046a4:	4b40      	ldr	r3, [pc, #256]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3f      	ldr	r2, [pc, #252]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fc ff0e 	bl	80014d0 <HAL_GetTick>
 80046b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b6:	e009      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b8:	f7fc ff0a 	bl	80014d0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d902      	bls.n	80046cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	73fb      	strb	r3, [r7, #15]
        break;
 80046ca:	e005      	b.n	80046d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046cc:	4b36      	ldr	r3, [pc, #216]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ef      	bne.n	80046b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d15f      	bne.n	800479e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d110      	bne.n	8004706 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e4:	4b30      	ldr	r3, [pc, #192]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80046ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6892      	ldr	r2, [r2, #8]
 80046f4:	0211      	lsls	r1, r2, #8
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68d2      	ldr	r2, [r2, #12]
 80046fa:	06d2      	lsls	r2, r2, #27
 80046fc:	430a      	orrs	r2, r1
 80046fe:	492a      	ldr	r1, [pc, #168]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004700:	4313      	orrs	r3, r2
 8004702:	610b      	str	r3, [r1, #16]
 8004704:	e027      	b.n	8004756 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d112      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800470c:	4b26      	ldr	r3, [pc, #152]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004714:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6892      	ldr	r2, [r2, #8]
 800471c:	0211      	lsls	r1, r2, #8
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6912      	ldr	r2, [r2, #16]
 8004722:	0852      	lsrs	r2, r2, #1
 8004724:	3a01      	subs	r2, #1
 8004726:	0552      	lsls	r2, r2, #21
 8004728:	430a      	orrs	r2, r1
 800472a:	491f      	ldr	r1, [pc, #124]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	610b      	str	r3, [r1, #16]
 8004730:	e011      	b.n	8004756 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004732:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800473a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	0211      	lsls	r1, r2, #8
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6952      	ldr	r2, [r2, #20]
 8004748:	0852      	lsrs	r2, r2, #1
 800474a:	3a01      	subs	r2, #1
 800474c:	0652      	lsls	r2, r2, #25
 800474e:	430a      	orrs	r2, r1
 8004750:	4915      	ldr	r1, [pc, #84]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004756:	4b14      	ldr	r3, [pc, #80]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a13      	ldr	r2, [pc, #76]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004760:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004762:	f7fc feb5 	bl	80014d0 <HAL_GetTick>
 8004766:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004768:	e009      	b.n	800477e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800476a:	f7fc feb1 	bl	80014d0 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d902      	bls.n	800477e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	73fb      	strb	r3, [r7, #15]
          break;
 800477c:	e005      	b.n	800478a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800477e:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0ef      	beq.n	800476a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004790:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	4903      	ldr	r1, [pc, #12]	@ (80047a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000

080047ac <memset>:
 80047ac:	4402      	add	r2, r0
 80047ae:	4603      	mov	r3, r0
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d100      	bne.n	80047b6 <memset+0xa>
 80047b4:	4770      	bx	lr
 80047b6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ba:	e7f9      	b.n	80047b0 <memset+0x4>

080047bc <__libc_init_array>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	4d0d      	ldr	r5, [pc, #52]	@ (80047f4 <__libc_init_array+0x38>)
 80047c0:	4c0d      	ldr	r4, [pc, #52]	@ (80047f8 <__libc_init_array+0x3c>)
 80047c2:	1b64      	subs	r4, r4, r5
 80047c4:	10a4      	asrs	r4, r4, #2
 80047c6:	2600      	movs	r6, #0
 80047c8:	42a6      	cmp	r6, r4
 80047ca:	d109      	bne.n	80047e0 <__libc_init_array+0x24>
 80047cc:	4d0b      	ldr	r5, [pc, #44]	@ (80047fc <__libc_init_array+0x40>)
 80047ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004800 <__libc_init_array+0x44>)
 80047d0:	f000 f826 	bl	8004820 <_init>
 80047d4:	1b64      	subs	r4, r4, r5
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	2600      	movs	r6, #0
 80047da:	42a6      	cmp	r6, r4
 80047dc:	d105      	bne.n	80047ea <__libc_init_array+0x2e>
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e4:	4798      	blx	r3
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7ee      	b.n	80047c8 <__libc_init_array+0xc>
 80047ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ee:	4798      	blx	r3
 80047f0:	3601      	adds	r6, #1
 80047f2:	e7f2      	b.n	80047da <__libc_init_array+0x1e>
 80047f4:	08004878 	.word	0x08004878
 80047f8:	08004878 	.word	0x08004878
 80047fc:	08004878 	.word	0x08004878
 8004800:	0800487c 	.word	0x0800487c

08004804 <memcpy>:
 8004804:	440a      	add	r2, r1
 8004806:	4291      	cmp	r1, r2
 8004808:	f100 33ff 	add.w	r3, r0, #4294967295
 800480c:	d100      	bne.n	8004810 <memcpy+0xc>
 800480e:	4770      	bx	lr
 8004810:	b510      	push	{r4, lr}
 8004812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800481a:	4291      	cmp	r1, r2
 800481c:	d1f9      	bne.n	8004812 <memcpy+0xe>
 800481e:	bd10      	pop	{r4, pc}

08004820 <_init>:
 8004820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004822:	bf00      	nop
 8004824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004826:	bc08      	pop	{r3}
 8004828:	469e      	mov	lr, r3
 800482a:	4770      	bx	lr

0800482c <_fini>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr
