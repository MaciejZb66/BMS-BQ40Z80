
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800534c  0800534c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  0800538c  0800538c  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800538c  0800538c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800538c  0800538c  0000638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005390  08005390  00006390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005394  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000000c  080053a0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080053a0  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e44  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003213  00000000  00000000  0001be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab7  00000000  00000000  0001fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024669  00000000  00000000  00020987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148cd  00000000  00000000  00044ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf786  00000000  00000000  000598bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d4  00000000  00000000  00129088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012c85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005334 	.word	0x08005334

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005334 	.word	0x08005334

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
BQ_data* BMS;
#ifdef USED_I2C1
	if(i2c == &hi2c1){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a29      	ldr	r2, [pc, #164]	@ (800027c <BQ_Init+0xb0>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d101      	bne.n	80001e0 <BQ_Init+0x14>
		BMS = &BMS_1;
 80001dc:	4b28      	ldr	r3, [pc, #160]	@ (8000280 <BQ_Init+0xb4>)
 80001de:	60fb      	str	r3, [r7, #12]
	if(i2c == &hi2c2){
		BMS = &BMS_2;
	}
#endif
#ifdef USED_I2C3
	if(i2c == &hi2c3){
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a28      	ldr	r2, [pc, #160]	@ (8000284 <BQ_Init+0xb8>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d101      	bne.n	80001ec <BQ_Init+0x20>
		BMS = &BMS_3;
 80001e8:	4b27      	ldr	r3, [pc, #156]	@ (8000288 <BQ_Init+0xbc>)
 80001ea:	60fb      	str	r3, [r7, #12]
	}
#endif
    BMS->bq_i2c = i2c;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
    BMS->bq_deviceAddress = Address;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	2217      	movs	r2, #23
 80001f6:	711a      	strb	r2, [r3, #4]
#ifdef USE_SCANNER
	CONNECTION_STATUS connect = I2CHelper_CheckAddress(BMS);
 80001f8:	68f8      	ldr	r0, [r7, #12]
 80001fa:	f000 fe4c 	bl	8000e96 <I2CHelper_CheckAddress>
 80001fe:	4603      	mov	r3, r0
 8000200:	72fb      	strb	r3, [r7, #11]
	while (connect != CONNECTED)
 8000202:	e00b      	b.n	800021c <BQ_Init+0x50>
	{
		connect = I2CHelper_CheckAddress(BMS);
 8000204:	68f8      	ldr	r0, [r7, #12]
 8000206:	f000 fe46 	bl	8000e96 <I2CHelper_CheckAddress>
 800020a:	4603      	mov	r3, r0
 800020c:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(200);
 800020e:	20c8      	movs	r0, #200	@ 0xc8
 8000210:	f001 f904 	bl	800141c <HAL_Delay>
	#ifdef debug
		if(connect != CONNECTED){
 8000214:	7afb      	ldrb	r3, [r7, #11]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d000      	beq.n	800021c <BQ_Init+0x50>
			__asm("nop"); //insert breakpoint here
 800021a:	bf00      	nop
	while (connect != CONNECTED)
 800021c:	7afb      	ldrb	r3, [r7, #11]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1f0      	bne.n	8000204 <BQ_Init+0x38>
		}
	#endif
	}
#endif

    HAL_Delay(1500);
 8000222:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000226:	f001 f8f9 	bl	800141c <HAL_Delay>
    BQAction_UpdateData(BMS);
 800022a:	68f8      	ldr	r0, [r7, #12]
 800022c:	f000 f9d5 	bl	80005da <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS);
 8000230:	68f8      	ldr	r0, [r7, #12]
 8000232:	f000 f99e 	bl	8000572 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS, false);
 8000236:	2100      	movs	r1, #0
 8000238:	68f8      	ldr	r0, [r7, #12]
 800023a:	f000 f910 	bl	800045e <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS, false);
 800023e:	2100      	movs	r1, #0
 8000240:	68f8      	ldr	r0, [r7, #12]
 8000242:	f000 f923 	bl	800048c <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS, false);
 8000246:	2100      	movs	r1, #0
 8000248:	68f8      	ldr	r0, [r7, #12]
 800024a:	f000 f936 	bl	80004ba <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS, true);
 800024e:	2101      	movs	r1, #1
 8000250:	68f8      	ldr	r0, [r7, #12]
 8000252:	f000 f949 	bl	80004e8 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS, true);
 8000256:	2101      	movs	r1, #1
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f000 f95c 	bl	8000516 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS, true);
 800025e:	2101      	movs	r1, #1
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f000 f96f 	bl	8000544 <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS, false);
 8000266:	2100      	movs	r1, #0
 8000268:	68f8      	ldr	r0, [r7, #12]
 800026a:	f000 f8e2 	bl	8000432 <BQAction_SetLed>

    BQAction_UpdateData(BMS);
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f000 f9b3 	bl	80005da <BQAction_UpdateData>
}
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000094 	.word	0x20000094
 8000280:	20000190 	.word	0x20000190
 8000284:	2000013c 	.word	0x2000013c
 8000288:	2000021c 	.word	0x2000021c

0800028c <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af02      	add	r7, sp, #8
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000298:	2344      	movs	r3, #68	@ 0x44
 800029a:	733b      	strb	r3, [r7, #12]
 800029c:	2302      	movs	r3, #2
 800029e:	737b      	strb	r3, [r7, #13]
 80002a0:	887b      	ldrh	r3, [r7, #2]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	73bb      	strb	r3, [r7, #14]
 80002a6:	887b      	ldrh	r3, [r7, #2]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	4619      	mov	r1, r3
 80002ba:	f107 020c 	add.w	r2, r7, #12
 80002be:	2364      	movs	r3, #100	@ 0x64
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2304      	movs	r3, #4
 80002c4:	f002 f9bc 	bl	8002640 <HAL_I2C_Master_Transmit>
}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b092      	sub	sp, #72	@ 0x48
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	607a      	str	r2, [r7, #4]
 80002da:	461a      	mov	r2, r3
 80002dc:	460b      	mov	r3, r1
 80002de:	817b      	strh	r3, [r7, #10]
 80002e0:	4613      	mov	r3, r2
 80002e2:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002e4:	2344      	movs	r3, #68	@ 0x44
 80002e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002ea:	2302      	movs	r3, #2
 80002ec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002f0:	897b      	ldrh	r3, [r7, #10]
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002f8:	897b      	ldrh	r3, [r7, #10]
 80002fa:	0a1b      	lsrs	r3, r3, #8
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	4619      	mov	r1, r3
 800030e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000312:	2364      	movs	r3, #100	@ 0x64
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2304      	movs	r3, #4
 8000318:	f002 f992 	bl	8002640 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 800031c:	2344      	movs	r3, #68	@ 0x44
 800031e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000322:	7a7b      	ldrb	r3, [r7, #9]
 8000324:	3302      	adds	r3, #2
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, addr, 2, 100);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	4619      	mov	r1, r3
 8000336:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800033a:	2364      	movs	r3, #100	@ 0x64
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2302      	movs	r3, #2
 8000340:	f002 f97e 	bl	8002640 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	221f      	movs	r2, #31
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f004 ffb5 	bl	80052c0 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress, result, 35, 100);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6818      	ldr	r0, [r3, #0]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	791b      	ldrb	r3, [r3, #4]
 800035e:	4619      	mov	r1, r3
 8000360:	f107 0210 	add.w	r2, r7, #16
 8000364:	2364      	movs	r3, #100	@ 0x64
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2323      	movs	r3, #35	@ 0x23
 800036a:	f002 fa81 	bl	8002870 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 800036e:	2300      	movs	r3, #0
 8000370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000372:	e00c      	b.n	800038e <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000376:	1cda      	adds	r2, r3, #3
 8000378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	440b      	add	r3, r1
 800037e:	3240      	adds	r2, #64	@ 0x40
 8000380:	443a      	add	r2, r7
 8000382:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000386:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800038a:	3301      	adds	r3, #1
 800038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800038e:	7a7b      	ldrb	r3, [r7, #9]
 8000390:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000392:	429a      	cmp	r2, r3
 8000394:	dbee      	blt.n	8000374 <BQ_ReadMABlockCommand+0xa4>
    }
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3740      	adds	r7, #64	@ 0x40
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80003ac:	f107 020c 	add.w	r2, r7, #12
 80003b0:	8879      	ldrh	r1, [r7, #2]
 80003b2:	2302      	movs	r3, #2
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff8b 	bl	80002d0 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003be:	7b3b      	ldrb	r3, [r7, #12]
 80003c0:	461a      	mov	r2, r3
 80003c2:	89fb      	ldrh	r3, [r7, #14]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003c8:	7b7b      	ldrb	r3, [r7, #13]
 80003ca:	021b      	lsls	r3, r3, #8
 80003cc:	b21a      	sxth	r2, r3
 80003ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003d2:	4313      	orrs	r3, r2
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	81fb      	strh	r3, [r7, #14]

    return result;
 80003d8:	89fb      	ldrh	r3, [r7, #14]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b084      	sub	sp, #16
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	460b      	mov	r3, r1
 80003ec:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003ee:	f107 0208 	add.w	r2, r7, #8
 80003f2:	8879      	ldrh	r1, [r7, #2]
 80003f4:	2304      	movs	r3, #4
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f7ff ff6a 	bl	80002d0 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 8000400:	7a3b      	ldrb	r3, [r7, #8]
 8000402:	461a      	mov	r2, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4313      	orrs	r3, r2
 8000408:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 800040a:	7a7b      	ldrb	r3, [r7, #9]
 800040c:	021b      	lsls	r3, r3, #8
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000414:	7abb      	ldrb	r3, [r7, #10]
 8000416:	041b      	lsls	r3, r3, #16
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	4313      	orrs	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	061b      	lsls	r3, r3, #24
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	4313      	orrs	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]

    return result;
 8000428:	68fb      	ldr	r3, [r7, #12]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7d9b      	ldrb	r3, [r3, #22]
 8000442:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	78fa      	ldrb	r2, [r7, #3]
 800044a:	429a      	cmp	r2, r3
 800044c:	d003      	beq.n	8000456 <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 800044e:	212b      	movs	r1, #43	@ 0x2b
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff1b 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	460b      	mov	r3, r1
 8000468:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000470:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	78fa      	ldrb	r2, [r7, #3]
 8000478:	429a      	cmp	r2, r3
 800047a:	d003      	beq.n	8000484 <BQAction_SetManufacturingAllFet+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 800047c:	2122      	movs	r1, #34	@ 0x22
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ff04 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800049e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	78fa      	ldrb	r2, [r7, #3]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d003      	beq.n	80004b2 <BQAction_SetManufacturingFuse+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 80004aa:	2126      	movs	r1, #38	@ 0x26
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f7ff feed 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b082      	sub	sp, #8
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80004cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	78fa      	ldrb	r2, [r7, #3]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d003      	beq.n	80004e0 <BQAction_SetCalibration+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004d8:	212d      	movs	r1, #45	@ 0x2d
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff fed6 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80004fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	78fa      	ldrb	r2, [r7, #3]
 8000502:	429a      	cmp	r2, r3
 8000504:	d003      	beq.n	800050e <BQAction_SetManufacturingGauging+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 8000506:	2121      	movs	r1, #33	@ 0x21
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f7ff febf 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000528:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	429a      	cmp	r2, r3
 8000532:	d003      	beq.n	800053c <BQAction_SetManufacturingPF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000534:	2124      	movs	r1, #36	@ 0x24
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff fea8 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000556:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800055a:	b2db      	uxtb	r3, r3
 800055c:	78fa      	ldrb	r2, [r7, #3]
 800055e:	429a      	cmp	r2, r3
 8000560:	d003      	beq.n	800056a <BQAction_SetManufacturingLF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000562:	2123      	movs	r1, #35	@ 0x23
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff fe91 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f893 	bl	80006a6 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode =  BMS->BQ_opStatus.bits.sec;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7d5b      	ldrb	r3, [r3, #21]
 8000584:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000588:	b2db      	uxtb	r3, r3
 800058a:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 800058c:	e01a      	b.n	80005c4 <BQAction_TryUnsealedDevice+0x52>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 800058e:	f240 4114 	movw	r1, #1044	@ 0x414
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff fe7a 	bl	800028c <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000598:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800059c:	f000 ff3e 	bl	800141c <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 80005a0:	f243 6172 	movw	r1, #13938	@ 0x3672
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff fe71 	bl	800028c <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 80005aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005ae:	f000 ff35 	bl	800141c <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f877 	bl	80006a6 <BQAction_UpdateOpStatus>
        securityMode = BMS->BQ_opStatus.bits.sec;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	7d5b      	ldrb	r3, [r3, #21]
 80005bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d0e1      	beq.n	800058e <BQAction_TryUnsealedDevice+0x1c>
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0de      	beq.n	800058e <BQAction_TryUnsealedDevice+0x1c>
    }
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b088      	sub	sp, #32
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80005e2:	2157      	movs	r1, #87	@ 0x57
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fedb 	bl	80003a0 <BQ_ReadCommandAsShort>
 80005ea:	4603      	mov	r3, r0
 80005ec:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	8bfa      	ldrh	r2, [r7, #30]
 80005f2:	849a      	strh	r2, [r3, #36]	@ 0x24
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80005f4:	2155      	movs	r1, #85	@ 0x55
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fef3 	bl	80003e2 <BQ_ReadCommandAsInt>
 80005fc:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	619a      	str	r2, [r3, #24]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 8000604:	2154      	movs	r1, #84	@ 0x54
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff feeb 	bl	80003e2 <BQ_ReadCommandAsInt>
 800060c:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	615a      	str	r2, [r3, #20]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000614:	2156      	movs	r1, #86	@ 0x56
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff fee3 	bl	80003e2 <BQ_ReadCommandAsInt>
 800061c:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	693a      	ldr	r2, [r7, #16]
 8000622:	61da      	str	r2, [r3, #28]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000624:	2103      	movs	r1, #3
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 fbdc 	bl	8000de4 <I2CHelper_ReadRegisterAsShort>
 800062c:	4603      	mov	r3, r0
 800062e:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	89fa      	ldrh	r2, [r7, #14]
 8000634:	845a      	strh	r2, [r3, #34]	@ 0x22
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryStatus);
 8000636:	2116      	movs	r1, #22
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f000 fbd3 	bl	8000de4 <I2CHelper_ReadRegisterAsShort>
 800063e:	4603      	mov	r3, r0
 8000640:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	89ba      	ldrh	r2, [r7, #12]
 8000646:	841a      	strh	r2, [r3, #32]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_GPIORead);
 8000648:	2148      	movs	r1, #72	@ 0x48
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 fbeb 	bl	8000e26 <I2CHelper_ReadRegisterAsChar>
 8000650:	4603      	mov	r3, r0
 8000652:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7afa      	ldrb	r2, [r7, #11]
 8000658:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000662:	2320      	movs	r3, #32
 8000664:	2171      	movs	r1, #113	@ 0x71
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fe32 	bl	80002d0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS->BQ_daStatus2.all, 16);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8000672:	2310      	movs	r3, #16
 8000674:	2172      	movs	r1, #114	@ 0x72
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fe2a 	bl	80002d0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS->BQ_daStatus3.all, 18);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8000682:	2312      	movs	r3, #18
 8000684:	217b      	movs	r1, #123	@ 0x7b
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff fe22 	bl	80002d0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS->BQ_outCal.all, 32);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 026a 	add.w	r2, r3, #106	@ 0x6a
 8000692:	2320      	movs	r3, #32
 8000694:	f24f 0181 	movw	r1, #61569	@ 0xf081
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff fe19 	bl	80002d0 <BQ_ReadMABlockCommand>
}
 800069e:	bf00      	nop
 80006a0:	3720      	adds	r7, #32
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b084      	sub	sp, #16
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80006b4:	2320      	movs	r3, #32
 80006b6:	2171      	movs	r1, #113	@ 0x71
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff fe09 	bl	80002d0 <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80006be:	2154      	movs	r1, #84	@ 0x54
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fe8e 	bl	80003e2 <BQ_ReadCommandAsInt>
 80006c6:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	615a      	str	r2, [r3, #20]
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006ce:	2157      	movs	r1, #87	@ 0x57
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fe65 	bl	80003a0 <BQ_ReadCommandAsShort>
 80006d6:	4603      	mov	r3, r0
 80006d8:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	897a      	ldrh	r2, [r7, #10]
 80006de:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <BQ_GetBoundaryCellVoltage>:
        return RELAX;
    }
}

BQ_BoundaryCellVoltage BQ_GetBoundaryCellVoltage(BQ_data* BMS)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	@ 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    BQ_BoundaryCellVoltage result;
    result.Max = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	82fb      	strh	r3, [r7, #22]
    result.Min = 65535;
 80006f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006f8:	82bb      	strh	r3, [r7, #20]

    uint16_t cells[6] =
        {
			BMS->BQ_daStatus1.sep.cell_voltage_1, // 1
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    uint16_t cells[6] =
 80006fe:	813b      	strh	r3, [r7, #8]
			BMS->BQ_daStatus1.sep.cell_voltage_2, // 2
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
    uint16_t cells[6] =
 8000704:	817b      	strh	r3, [r7, #10]
            BMS->BQ_daStatus1.sep.cell_voltage_3, // 3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
    uint16_t cells[6] =
 800070a:	81bb      	strh	r3, [r7, #12]
            BMS->BQ_daStatus1.sep.cell_voltage_4, // 4
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    uint16_t cells[6] =
 8000710:	81fb      	strh	r3, [r7, #14]
            BMS->BQ_daStatus3.sep.cell_voltage_5, // 5
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
    uint16_t cells[6] =
 8000718:	823b      	strh	r3, [r7, #16]
            BMS->BQ_daStatus3.sep.cell_voltage_6  // 6
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
    uint16_t cells[6] =
 8000720:	827b      	strh	r3, [r7, #18]
        };

    for (int i = 0; i < 6; i++)
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
 8000726:	e022      	b.n	800076e <BQ_GetBoundaryCellVoltage+0x86>
    {
        if (cells[i] > result.Max)
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	3320      	adds	r3, #32
 800072e:	443b      	add	r3, r7
 8000730:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000734:	8afb      	ldrh	r3, [r7, #22]
 8000736:	429a      	cmp	r2, r3
 8000738:	d906      	bls.n	8000748 <BQ_GetBoundaryCellVoltage+0x60>
        {
            result.Max = cells[i];
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	3320      	adds	r3, #32
 8000740:	443b      	add	r3, r7
 8000742:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000746:	82fb      	strh	r3, [r7, #22]
        }
        if (cells[i] < result.Min)
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	3320      	adds	r3, #32
 800074e:	443b      	add	r3, r7
 8000750:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000754:	8abb      	ldrh	r3, [r7, #20]
 8000756:	429a      	cmp	r2, r3
 8000758:	d206      	bcs.n	8000768 <BQ_GetBoundaryCellVoltage+0x80>
        {
            result.Min = cells[i];
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	3320      	adds	r3, #32
 8000760:	443b      	add	r3, r7
 8000762:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000766:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	3301      	adds	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	2b05      	cmp	r3, #5
 8000772:	ddd9      	ble.n	8000728 <BQ_GetBoundaryCellVoltage+0x40>
        }
    }

    return result;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	2300      	movs	r3, #0
 800077a:	8b3a      	ldrh	r2, [r7, #24]
 800077c:	f362 030f 	bfi	r3, r2, #0, #16
 8000780:	8b7a      	ldrh	r2, [r7, #26]
 8000782:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <BQ_GetSendData>:

void BQ_GetSendData(BQ_data* BMS){
 8000792:	b590      	push	{r4, r7, lr}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
	BMS->data.voltage = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_Voltage);
 800079a:	2109      	movs	r1, #9
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 fb21 	bl	8000de4 <I2CHelper_ReadRegisterAsShort>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	815a      	strh	r2, [r3, #10]
	BMS->data.current = BMS->BQ_outCal.sep.current;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f9b3 206c 	ldrsh.w	r2, [r3, #108]	@ 0x6c
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	819a      	strh	r2, [r3, #12]
	BMS->data.balance = BQ_GetBoundaryCellVoltage(BMS);
 80007b4:	687c      	ldr	r4, [r7, #4]
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ff96 	bl	80006e8 <BQ_GetBoundaryCellVoltage>
 80007bc:	4603      	mov	r3, r0
 80007be:	461a      	mov	r2, r3
 80007c0:	80e2      	strh	r2, [r4, #6]
 80007c2:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80007c6:	8123      	strh	r3, [r4, #8]
	BMS->data.cell_temperature = BMS->BQ_daStatus2.sep.ts1_temperature - KelvinToCelsius;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80007ce:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	825a      	strh	r2, [r3, #18]
	BMS->data.fet_temperature = BMS->BQ_daStatus2.sep.ts2_temperature - KelvinToCelsius;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80007de:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	821a      	strh	r2, [r3, #16]
	BMS->data.percentage = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_RelativeStateOfCharge);
 80007e8:	210d      	movs	r1, #13
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 fb1b 	bl	8000e26 <I2CHelper_ReadRegisterAsChar>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	739a      	strb	r2, [r3, #14]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd90      	pop	{r4, r7, pc}

08000800 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000804:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000806:	4a31      	ldr	r2, [pc, #196]	@ (80008cc <MX_CAN1_Init+0xcc>)
 8000808:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 48;
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 800080c:	2230      	movs	r2, #48	@ 0x30
 800080e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000810:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000816:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800081c:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000822:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 800082a:	2200      	movs	r2, #0
 800082c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000830:	2200      	movs	r2, #0
 8000832:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000836:	2200      	movs	r2, #0
 8000838:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 800083c:	2200      	movs	r2, #0
 800083e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000840:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000842:	2200      	movs	r2, #0
 8000844:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 8000848:	2200      	movs	r2, #0
 800084a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800084c:	481e      	ldr	r0, [pc, #120]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 800084e:	f000 fe09 	bl	8001464 <HAL_CAN_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 fc74 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfil.FilterBank = 0;
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
    canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
    canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
//    canfil.FilterIdHigh = 0x05<<5;
//    canfil.FilterIdLow = 0x0;
//    canfil.FilterMaskIdHigh = 0x0F<<5;


    canfil.FilterMaskIdHigh = 0;
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    canfil.FilterMaskIdLow = 0;
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
    canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 800087c:	2201      	movs	r2, #1
 800087e:	61da      	str	r2, [r3, #28]
    canfil.FilterActivation = ENABLE;
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 8000882:	2201      	movs	r2, #1
 8000884:	621a      	str	r2, [r3, #32]
    canfil.SlaveStartFilterBank = 14;
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 8000888:	220e      	movs	r2, #14
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Transmit messages configuration */
    TxHeader.IDE = CAN_ID_EXT;
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_CAN1_Init+0xd4>)
 800088e:	2204      	movs	r2, #4
 8000890:	609a      	str	r2, [r3, #8]
    TxHeader.ExtId = 0x10000;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_CAN1_Init+0xd4>)
 8000894:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000898:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_CAN1_Init+0xd4>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_CAN1_Init+0xd4>)
 80008a2:	2208      	movs	r2, #8
 80008a4:	611a      	str	r2, [r3, #16]

    HAL_CAN_ConfigFilter(&hcan1,&canfil);
 80008a6:	490a      	ldr	r1, [pc, #40]	@ (80008d0 <MX_CAN1_Init+0xd0>)
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 80008aa:	f000 fed6 	bl	800165a <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 80008b0:	f000 ff9d 	bl	80017ee <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80008b4:	2102      	movs	r1, #2
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 80008b8:	f001 f8ad 	bl	8001a16 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80008bc:	2101      	movs	r1, #1
 80008be:	4802      	ldr	r0, [pc, #8]	@ (80008c8 <MX_CAN1_Init+0xc8>)
 80008c0:	f001 f8a9 	bl	8001a16 <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000006c 	.word	0x2000006c
 80008cc:	40006400 	.word	0x40006400
 80008d0:	20000044 	.word	0x20000044
 80008d4:	20000028 	.word	0x20000028

080008d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000968 <HAL_CAN_MspInit+0x90>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d131      	bne.n	800095e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008fa:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <HAL_CAN_MspInit+0x94>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <HAL_CAN_MspInit+0x94>)
 8000900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <HAL_CAN_MspInit+0x94>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <HAL_CAN_MspInit+0x94>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	4a15      	ldr	r2, [pc, #84]	@ (800096c <HAL_CAN_MspInit+0x94>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <HAL_CAN_MspInit+0x94>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800092a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800093c:	2309      	movs	r3, #9
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094a:	f001 fc19 	bl	8002180 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	2014      	movs	r0, #20
 8000954:	f001 fb8f 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000958:	2014      	movs	r0, #20
 800095a:	f001 fba8 	bl	80020ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	@ 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40006400 	.word	0x40006400
 800096c:	40021000 	.word	0x40021000

08000970 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	4b38      	ldr	r3, [pc, #224]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	4a37      	ldr	r2, [pc, #220]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000992:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a31      	ldr	r2, [pc, #196]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	4a25      	ldr	r2, [pc, #148]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009da:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	481f      	ldr	r0, [pc, #124]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009ee:	f001 fd41 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4819      	ldr	r0, [pc, #100]	@ (8000a70 <MX_GPIO_Init+0x100>)
 8000a0a:	f001 fbb9 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2c:	f001 fba8 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 8000a4a:	f001 fb99 	bl	8002180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210c      	movs	r1, #12
 8000a52:	2028      	movs	r0, #40	@ 0x28
 8000a54:	f001 fb0f 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a58:	2028      	movs	r0, #40	@ 0x28
 8000a5a:	f001 fb28 	bl	80020ae <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800

08000a74 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000aec <MX_I2C1_Init+0x78>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C18DCC;
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a80:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <MX_I2C1_Init+0x7c>)
 8000a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a90:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aae:	480e      	ldr	r0, [pc, #56]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000ab0:	f001 fd2a 	bl	8002508 <HAL_I2C_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aba:	f000 fb43 	bl	8001144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4809      	ldr	r0, [pc, #36]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000ac2:	f003 f935 	bl	8003d30 <HAL_I2CEx_ConfigAnalogFilter>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000acc:	f000 fb3a 	bl	8001144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_I2C1_Init+0x74>)
 8000ad4:	f003 f977 	bl	8003dc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ade:	f000 fb31 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000094 	.word	0x20000094
 8000aec:	40005400 	.word	0x40005400
 8000af0:	10c18dcc 	.word	0x10c18dcc

08000af4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000afa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <MX_I2C2_Init+0x78>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C18DCC;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b00:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <MX_I2C2_Init+0x7c>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b2e:	480e      	ldr	r0, [pc, #56]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b30:	f001 fcea 	bl	8002508 <HAL_I2C_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b3a:	f000 fb03 	bl	8001144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b42:	f003 f8f5 	bl	8003d30 <HAL_I2CEx_ConfigAnalogFilter>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b4c:	f000 fafa 	bl	8001144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b50:	2100      	movs	r1, #0
 8000b52:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_I2C2_Init+0x74>)
 8000b54:	f003 f937 	bl	8003dc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 faf1 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000e8 	.word	0x200000e8
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	10c18dcc 	.word	0x10c18dcc

08000b74 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bec <MX_I2C3_Init+0x78>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C18DCC;
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000b80:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <MX_I2C3_Init+0x7c>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b84:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000bb0:	f001 fcaa 	bl	8002508 <HAL_I2C_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fac3 	bl	8001144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4809      	ldr	r0, [pc, #36]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000bc2:	f003 f8b5 	bl	8003d30 <HAL_I2CEx_ConfigAnalogFilter>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bcc:	f000 faba 	bl	8001144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_I2C3_Init+0x74>)
 8000bd4:	f003 f8f7 	bl	8003dc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bde:	f000 fab1 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000013c 	.word	0x2000013c
 8000bec:	40005c00 	.word	0x40005c00
 8000bf0:	10c18dcc 	.word	0x10c18dcc

08000bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0a6      	sub	sp, #152	@ 0x98
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	2260      	movs	r2, #96	@ 0x60
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 fb53 	bl	80052c0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a6b      	ldr	r2, [pc, #428]	@ (8000dcc <HAL_I2C_MspInit+0x1d8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d14c      	bne.n	8000cbe <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c24:	2340      	movs	r3, #64	@ 0x40
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 ff79 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c3c:	f000 fa82 	bl	8001144 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b63      	ldr	r3, [pc, #396]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	4a62      	ldr	r2, [pc, #392]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4c:	4b60      	ldr	r3, [pc, #384]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c58:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c72:	2304      	movs	r3, #4
 8000c74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4855      	ldr	r0, [pc, #340]	@ (8000dd4 <HAL_I2C_MspInit+0x1e0>)
 8000c80:	f001 fa7e 	bl	8002180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c84:	4b52      	ldr	r3, [pc, #328]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c88:	4a51      	ldr	r2, [pc, #324]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c90:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	210a      	movs	r1, #10
 8000ca0:	201f      	movs	r0, #31
 8000ca2:	f001 f9e8 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ca6:	201f      	movs	r0, #31
 8000ca8:	f001 fa01 	bl	80020ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2109      	movs	r1, #9
 8000cb0:	2020      	movs	r0, #32
 8000cb2:	f001 f9e0 	bl	8002076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cb6:	2020      	movs	r0, #32
 8000cb8:	f001 f9f9 	bl	80020ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000cbc:	e082      	b.n	8000dc4 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C2)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a45      	ldr	r2, [pc, #276]	@ (8000dd8 <HAL_I2C_MspInit+0x1e4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d13c      	bne.n	8000d42 <HAL_I2C_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 ff27 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000ce0:	f000 fa30 	bl	8001144 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	4a39      	ldr	r2, [pc, #228]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf0:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cfc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d04:	2312      	movs	r3, #18
 8000d06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d16:	2304      	movs	r3, #4
 8000d18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d20:	4619      	mov	r1, r3
 8000d22:	482c      	ldr	r0, [pc, #176]	@ (8000dd4 <HAL_I2C_MspInit+0x1e0>)
 8000d24:	f001 fa2c 	bl	8002180 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d28:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2c:	4a28      	ldr	r2, [pc, #160]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000d2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d34:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
}
 8000d40:	e040      	b.n	8000dc4 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C3)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a25      	ldr	r2, [pc, #148]	@ (8000ddc <HAL_I2C_MspInit+0x1e8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d13b      	bne.n	8000dc4 <HAL_I2C_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fee4 	bl	8004b28 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_I2C_MspInit+0x176>
      Error_Handler();
 8000d66:	f000 f9ed 	bl	8001144 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000da4:	4619      	mov	r1, r3
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <HAL_I2C_MspInit+0x1ec>)
 8000da8:	f001 f9ea 	bl	8002180 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db0:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000db2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_I2C_MspInit+0x1dc>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3798      	adds	r7, #152	@ 0x98
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	40005800 	.word	0x40005800
 8000ddc:	40005c00 	.word	0x40005c00
 8000de0:	48000800 	.word	0x48000800

08000de4 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(BQ_data* BMS, uint8_t address)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2];
	I2CHelper_ReadRegister(BMS, address, buf, 2);
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	78f9      	ldrb	r1, [r7, #3]
 8000df6:	2302      	movs	r3, #2
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 f826 	bl	8000e4a <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000e02:	7b3b      	ldrb	r3, [r7, #12]
 8000e04:	461a      	mov	r2, r3
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	81fb      	strh	r3, [r7, #14]

	return result;
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(BQ_data* BMS, uint8_t address)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[1];
	I2CHelper_ReadRegister(BMS, address, buf, 1);
 8000e32:	f107 020c 	add.w	r2, r7, #12
 8000e36:	78f9      	ldrb	r1, [r7, #3]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f805 	bl	8000e4a <I2CHelper_ReadRegister>

	return buf[0];
 8000e40:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(BQ_data* BMS, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af02      	add	r7, sp, #8
 8000e50:	60f8      	str	r0, [r7, #12]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	461a      	mov	r2, r3
 8000e56:	460b      	mov	r3, r1
 8000e58:	72fb      	strb	r3, [r7, #11]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, &address, 1, 100);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	f107 020b 	add.w	r2, r7, #11
 8000e6c:	2364      	movs	r3, #100	@ 0x64
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2301      	movs	r3, #1
 8000e72:	f001 fbe5 	bl	8002640 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress,  receive_buffer, size, 100);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	7abb      	ldrb	r3, [r7, #10]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	2264      	movs	r2, #100	@ 0x64
 8000e86:	9200      	str	r2, [sp, #0]
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	f001 fcf1 	bl	8002870 <HAL_I2C_Master_Receive>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <I2CHelper_CheckAddress>:
 * @brief scanning i2c devices and return first
 * @param i2c I2C_HandleTypeDef pointer
 * @return first i2c device
 */
CONNECTION_STATUS I2CHelper_CheckAddress(BQ_data* BMS)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, BMS->bq_deviceAddress, 3, 5);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	2203      	movs	r2, #3
 8000eac:	f001 fdd6 	bl	8002a5c <HAL_I2C_IsDeviceReady>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73bb      	strb	r3, [r7, #14]
	if (ret == HAL_BUSY){
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d101      	bne.n	8000ebe <I2CHelper_CheckAddress+0x28>
		return NEED_RESET;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e023      	b.n	8000f06 <I2CHelper_CheckAddress+0x70>
	}
	if (ret == HAL_OK)
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <I2CHelper_CheckAddress+0x32>
	{
		return CONNECTED;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e01e      	b.n	8000f06 <I2CHelper_CheckAddress+0x70>
	}
	for (uint8_t i = 1; i < 255; i++)
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e017      	b.n	8000efe <I2CHelper_CheckAddress+0x68>
	{
		ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, i, 3, 5);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	2203      	movs	r2, #3
 8000eda:	f001 fdbf 	bl	8002a5c <HAL_I2C_IsDeviceReady>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73bb      	strb	r3, [r7, #14]
		if (ret == HAL_OK)
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d104      	bne.n	8000ef2 <I2CHelper_CheckAddress+0x5c>
		{
			BMS->bq_deviceAddress = i;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	711a      	strb	r2, [r3, #4]
			return CHANGED_ADDRESS;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e009      	b.n	8000f06 <I2CHelper_CheckAddress+0x70>
		}
		HAL_Delay(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 fa92 	bl	800141c <HAL_Delay>
	for (uint8_t i = 1; i < 255; i++)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	3301      	adds	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2bff      	cmp	r3, #255	@ 0xff
 8000f02:	d1e4      	bne.n	8000ece <I2CHelper_CheckAddress+0x38>
	}
	return INVALID_DEVICE;
 8000f04:	2302      	movs	r3, #2
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_EXTI_Callback>:
#endif


bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f20:	d113      	bne.n	8000f4a <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bf14      	ite	ne
 8000f2a:	2301      	movne	r3, #1
 8000f2c:	2300      	moveq	r3, #0
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f083 0301 	eor.w	r3, r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f44:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f46:	f001 faad 	bl	80024a4 <HAL_GPIO_TogglePin>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200002a8 	.word	0x200002a8
 8000f58:	48000400 	.word	0x48000400

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 f9e0 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f828 	bl	8000fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f7ff fd02 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f6c:	f7ff fd82 	bl	8000a74 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000f70:	f7ff fc46 	bl	8000800 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000f74:	f7ff fdbe 	bl	8000af4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000f78:	f7ff fdfc 	bl	8000b74 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */


//  BQ_BoundaryCellVoltage balance;
  status = false;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <main+0x48>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
//  uint16_t cells[6] = {0};
//  bool fun[5] = {0};
//  uint8_t test[11] = {0};
//  uint16_t temperature[2] = {0};
#ifdef USED_I2C1
  BQ_Init(&hi2c1);
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <main+0x4c>)
 8000f84:	f7ff f922 	bl	80001cc <BQ_Init>
#endif
#ifdef USED_I2C2
  BQ_Init(&hi2c2);
#endif
#ifdef USED_I2C3
  BQ_Init(&hi2c3);
 8000f88:	4808      	ldr	r0, [pc, #32]	@ (8000fac <main+0x50>)
 8000f8a:	f7ff f91f 	bl	80001cc <BQ_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 8000f8e:	20c8      	movs	r0, #200	@ 0xc8
 8000f90:	f000 fa44 	bl	800141c <HAL_Delay>
#ifdef USED_I2C1
	  BQ_and_can(&BMS_1);
 8000f94:	4806      	ldr	r0, [pc, #24]	@ (8000fb0 <main+0x54>)
 8000f96:	f000 f861 	bl	800105c <BQ_and_can>
#endif
#ifdef USED_I2C2
	  BQ_and_can(&BMS_2);
#endif
#ifdef USED_I2C3
	  BQ_and_can(&BMS_3);
 8000f9a:	4806      	ldr	r0, [pc, #24]	@ (8000fb4 <main+0x58>)
 8000f9c:	f000 f85e 	bl	800105c <BQ_and_can>
	  HAL_Delay(200);
 8000fa0:	bf00      	nop
 8000fa2:	e7f4      	b.n	8000f8e <main+0x32>
 8000fa4:	200002a8 	.word	0x200002a8
 8000fa8:	20000094 	.word	0x20000094
 8000fac:	2000013c 	.word	0x2000013c
 8000fb0:	20000190 	.word	0x20000190
 8000fb4:	2000021c 	.word	0x2000021c

08000fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	@ 0x58
 8000fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2244      	movs	r2, #68	@ 0x44
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 f97a 	bl	80052c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fde:	f002 ff4d 	bl	8003e7c <HAL_PWREx_ControlVoltageScaling>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe8:	f000 f8ac 	bl	8001144 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001006:	2309      	movs	r3, #9
 8001008:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800100a:	2307      	movs	r3, #7
 800100c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100e:	2302      	movs	r3, #2
 8001010:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4618      	mov	r0, r3
 800101c:	f002 ff84 	bl	8003f28 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001026:	f000 f88d 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	230f      	movs	r3, #15
 800102c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2303      	movs	r3, #3
 8001030:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800103e:	463b      	mov	r3, r7
 8001040:	2104      	movs	r1, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fb84 	bl	8004750 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800104e:	f000 f879 	bl	8001144 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3758      	adds	r7, #88	@ 0x58
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <BQ_and_can>:

/* USER CODE BEGIN 4 */
void BQ_and_can(BQ_data* BMS){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	  BQAction_UpdateData(BMS);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fab8 	bl	80005da <BQAction_UpdateData>
	  BQ_GetSendData(BMS);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fb91 	bl	8000792 <BQ_GetSendData>
#ifdef USED_I2C1
	  if(BMS == &BMS_1){
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a25      	ldr	r2, [pc, #148]	@ (8001108 <BQ_and_can+0xac>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d103      	bne.n	8001080 <BQ_and_can+0x24>
		  stat4.pidPos = 1.0f;
 8001078:	4b24      	ldr	r3, [pc, #144]	@ (800110c <BQ_and_can+0xb0>)
 800107a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800107e:	611a      	str	r2, [r3, #16]
	  if(BMS == &BMS_2){
		  stat4.pidPos = 2.0f;
	  }
#endif
#ifdef USED_I2C3
	  if(BMS == &BMS_3){
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a23      	ldr	r2, [pc, #140]	@ (8001110 <BQ_and_can+0xb4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d102      	bne.n	800108e <BQ_and_can+0x32>
		  stat4.pidPos = 3.0f;
 8001088:	4b20      	ldr	r3, [pc, #128]	@ (800110c <BQ_and_can+0xb0>)
 800108a:	4a22      	ldr	r2, [pc, #136]	@ (8001114 <BQ_and_can+0xb8>)
 800108c:	611a      	str	r2, [r3, #16]
	  }
#endif
	  stat4.currentIn = (float)(BMS->data.current) / 1000;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001118 <BQ_and_can+0xbc>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <BQ_and_can+0xb0>)
 80010a6:	edc3 7a03 	vstr	s15, [r3, #12]
	  stat4.tempFet = (float)(BMS->data.fet_temperature) / 10;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8a1b      	ldrh	r3, [r3, #16]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80010ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <BQ_and_can+0xb0>)
 80010c0:	edc3 7a01 	vstr	s15, [r3, #4]
	  stat4.tempMotor = (float)(BMS->data.cell_temperature) / 10;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8a5b      	ldrh	r3, [r3, #18]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	4b0c      	ldr	r3, [pc, #48]	@ (800110c <BQ_and_can+0xb0>)
 80010da:	edc3 7a02 	vstr	s15, [r3, #8]
	  VESC_convertStatus4ToRaw(&rawFrame, &stat4);
 80010de:	490b      	ldr	r1, [pc, #44]	@ (800110c <BQ_and_can+0xb0>)
 80010e0:	480e      	ldr	r0, [pc, #56]	@ (800111c <BQ_and_can+0xc0>)
 80010e2:	f004 f85d 	bl	80051a0 <VESC_convertStatus4ToRaw>
	  vesc2halcan(&TxHeader, txData, 8, &rawFrame);
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <BQ_and_can+0xc0>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	490d      	ldr	r1, [pc, #52]	@ (8001120 <BQ_and_can+0xc4>)
 80010ec:	480d      	ldr	r0, [pc, #52]	@ (8001124 <BQ_and_can+0xc8>)
 80010ee:	f000 f8bb 	bl	8001268 <vesc2halcan>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <BQ_and_can+0xcc>)
 80010f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <BQ_and_can+0xc4>)
 80010f6:	490b      	ldr	r1, [pc, #44]	@ (8001124 <BQ_and_can+0xc8>)
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <BQ_and_can+0xd0>)
 80010fa:	f000 fbbc 	bl	8001876 <HAL_CAN_AddTxMessage>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000190 	.word	0x20000190
 800110c:	200002ac 	.word	0x200002ac
 8001110:	2000021c 	.word	0x2000021c
 8001114:	40400000 	.word	0x40400000
 8001118:	447a0000 	.word	0x447a0000
 800111c:	200002c0 	.word	0x200002c0
 8001120:	200002d0 	.word	0x200002d0
 8001124:	20000028 	.word	0x20000028
 8001128:	20000040 	.word	0x20000040
 800112c:	2000006c 	.word	0x2000006c

08001130 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <HAL_MspInit+0x44>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6613      	str	r3, [r2, #96]	@ 0x60
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_MspInit+0x44>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_MspInit+0x44>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6593      	str	r3, [r2, #88]	@ 0x58
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_MspInit+0x44>)
 800117c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <NMI_Handler+0x4>

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <MemManage_Handler+0x4>

080011b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <UsageFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ee:	f000 f8f5 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <CAN1_RX0_IRQHandler+0x10>)
 80011fe:	f000 fc30 	bl	8001a62 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000006c 	.word	0x2000006c

0800120c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <I2C1_EV_IRQHandler+0x10>)
 8001212:	f001 fd0f 	bl	8002c34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000094 	.word	0x20000094

08001220 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <I2C1_ER_IRQHandler+0x10>)
 8001226:	f001 fd1f 	bl	8002c68 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000094 	.word	0x20000094

08001234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001238:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800123c:	f001 f94c 	bl	80024d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <vesc2halcan>:
#include "vesc2halcan.h"

uint8_t vesc2halcan(CAN_TxHeaderTypeDef* txHeader, uint8_t* txData, size_t txDataSize, const VESC_RawFrame* vescRawFrame)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	603b      	str	r3, [r7, #0]
	if (txDataSize < vescRawFrame->can_dlc){
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4293      	cmp	r3, r2
 8001280:	d201      	bcs.n	8001286 <vesc2halcan+0x1e>
		return VESC2HALCAN_ERR_TXDATA;
 8001282:	2301      	movs	r3, #1
 8001284:	e020      	b.n	80012c8 <vesc2halcan+0x60>
	}
	txHeader->ExtId = *(uint32_t*)vescRawFrame & 0x1FFFFFFF; //Identifier
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	605a      	str	r2, [r3, #4]
	txHeader->IDE = CAN_ID_EXT;//IdType
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2204      	movs	r2, #4
 8001296:	609a      	str	r2, [r3, #8]
	txHeader->RTR = CAN_RTR_DATA; //TxFrameType
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]

	// see FDCAN_data_length_code
	if (vescRawFrame->can_dlc >= 0u && vescRawFrame->can_dlc <= 8u){
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d80f      	bhi.n	80012c6 <vesc2halcan+0x5e>
		txHeader->DLC = vescRawFrame->can_dlc;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	791b      	ldrb	r3, [r3, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	611a      	str	r2, [r3, #16]
//	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
//	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
//	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	txHeader->MessageMarker = 0x0;

	memcpy(txData, vescRawFrame->rawData, vescRawFrame->can_dlc);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f103 0108 	add.w	r1, r3, #8
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	791b      	ldrb	r3, [r3, #4]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f004 f82b 	bl	8005318 <memcpy>

	return VESC2HALCAN_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <vesc2halcan+0x60>
		return VESC2HALCAN_ERR_DLC;
 80012c6:	2303      	movs	r3, #3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001308 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d4:	f7ff ffb6 	bl	8001244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <LoopForever+0x6>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	@ (8001310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001314 <LoopForever+0xe>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	@ (800131c <LoopForever+0x16>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fe:	f003 ffe7 	bl	80052d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001302:	f7ff fe2b 	bl	8000f5c <main>

08001306 <LoopForever>:

LoopForever:
    b LoopForever
 8001306:	e7fe      	b.n	8001306 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001308:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001314:	08005394 	.word	0x08005394
  ldr r2, =_sbss
 8001318:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800131c:	200002dc 	.word	0x200002dc

08001320 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC1_IRQHandler>
	...

08001324 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_Init+0x3c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <HAL_Init+0x3c>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001338:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 fe90 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001340:	2000      	movs	r0, #0
 8001342:	f000 f80f 	bl	8001364 <HAL_InitTick>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	71fb      	strb	r3, [r7, #7]
 8001350:	e001      	b.n	8001356 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001352:	f7ff fefd 	bl	8001150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001356:	79fb      	ldrb	r3, [r7, #7]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40022000 	.word	0x40022000

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_InitTick+0x6c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d023      	beq.n	80013c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <HAL_InitTick+0x70>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <HAL_InitTick+0x6c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fe9b 	bl	80020ca <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10f      	bne.n	80013ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d809      	bhi.n	80013b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f000 fe65 	bl	8002076 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ac:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <HAL_InitTick+0x74>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e007      	b.n	80013c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e004      	b.n	80013c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e001      	b.n	80013c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008
 8001400:	200002d8 	.word	0x200002d8

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200002d8 	.word	0x200002d8

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008

08001464 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0ed      	b.n	8001652 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fa28 	bl	80008d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001498:	f7ff ffb4 	bl	8001404 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800149e:	e012      	b.n	80014c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014a0:	f7ff ffb0 	bl	8001404 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b0a      	cmp	r3, #10
 80014ac:	d90b      	bls.n	80014c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2205      	movs	r2, #5
 80014be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0c5      	b.n	8001652 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0e5      	beq.n	80014a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0202 	bic.w	r2, r2, #2
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e4:	f7ff ff8e 	bl	8001404 <HAL_GetTick>
 80014e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ea:	e012      	b.n	8001512 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ec:	f7ff ff8a 	bl	8001404 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d90b      	bls.n	8001512 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2205      	movs	r2, #5
 800150a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e09f      	b.n	8001652 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e5      	bne.n	80014ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7e1b      	ldrb	r3, [r3, #24]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d108      	bne.n	800153a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e007      	b.n	800154a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7e5b      	ldrb	r3, [r3, #25]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d108      	bne.n	8001564 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e007      	b.n	8001574 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e9b      	ldrb	r3, [r3, #26]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0220 	orr.w	r2, r2, #32
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e007      	b.n	800159e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0220 	bic.w	r2, r2, #32
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7edb      	ldrb	r3, [r3, #27]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0210 	bic.w	r2, r2, #16
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0210 	orr.w	r2, r2, #16
 80015c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7f1b      	ldrb	r3, [r3, #28]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0208 	orr.w	r2, r2, #8
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e007      	b.n	80015f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0208 	bic.w	r2, r2, #8
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7f5b      	ldrb	r3, [r3, #29]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0204 	orr.w	r2, r2, #4
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e007      	b.n	800161c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0204 	bic.w	r2, r2, #4
 800161a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	ea42 0103 	orr.w	r1, r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800165a:	b480      	push	{r7}
 800165c:	b087      	sub	sp, #28
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001670:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d003      	beq.n	8001680 <HAL_CAN_ConfigFilter+0x26>
 8001678:	7cfb      	ldrb	r3, [r7, #19]
 800167a:	2b02      	cmp	r3, #2
 800167c:	f040 80aa 	bne.w	80017d4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	2201      	movs	r2, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	401a      	ands	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d123      	bne.n	8001702 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	401a      	ands	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3248      	adds	r2, #72	@ 0x48
 80016e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016f8:	6979      	ldr	r1, [r7, #20]
 80016fa:	3348      	adds	r3, #72	@ 0x48
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d122      	bne.n	8001750 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	431a      	orrs	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800172a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3248      	adds	r2, #72	@ 0x48
 8001730:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001744:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001746:	6979      	ldr	r1, [r7, #20]
 8001748:	3348      	adds	r3, #72	@ 0x48
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800176a:	e007      	b.n	800177c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001796:	e007      	b.n	80017a8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d107      	bne.n	80017c0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017c6:	f023 0201 	bic.w	r2, r3, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	e006      	b.n	80017e2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
  }
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	371c      	adds	r7, #28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d12e      	bne.n	8001860 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800181a:	f7ff fdf3 	bl	8001404 <HAL_GetTick>
 800181e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001820:	e012      	b.n	8001848 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001822:	f7ff fdef 	bl	8001404 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b0a      	cmp	r3, #10
 800182e:	d90b      	bls.n	8001848 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2205      	movs	r2, #5
 8001840:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e012      	b.n	800186e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1e5      	bne.n	8001822 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	e006      	b.n	800186e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
  }
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001876:	b480      	push	{r7}
 8001878:	b089      	sub	sp, #36	@ 0x24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800188a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d003      	beq.n	80018a2 <HAL_CAN_AddTxMessage+0x2c>
 800189a:	7ffb      	ldrb	r3, [r7, #31]
 800189c:	2b02      	cmp	r3, #2
 800189e:	f040 80ad 	bne.w	80019fc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8095 	beq.w	80019ec <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	0e1b      	lsrs	r3, r3, #24
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018cc:	2201      	movs	r2, #1
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	409a      	lsls	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10d      	bne.n	80018fa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	6809      	ldr	r1, [r1, #0]
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3318      	adds	r3, #24
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	440b      	add	r3, r1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e00f      	b.n	800191a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001904:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800190a:	68f9      	ldr	r1, [r7, #12]
 800190c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800190e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3318      	adds	r3, #24
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	440b      	add	r3, r1
 8001918:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6819      	ldr	r1, [r3, #0]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3318      	adds	r3, #24
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	440b      	add	r3, r1
 800192a:	3304      	adds	r3, #4
 800192c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	7d1b      	ldrb	r3, [r3, #20]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d111      	bne.n	800195a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3318      	adds	r3, #24
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	3304      	adds	r3, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	6811      	ldr	r1, [r2, #0]
 800194a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3318      	adds	r3, #24
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	440b      	add	r3, r1
 8001956:	3304      	adds	r3, #4
 8001958:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3307      	adds	r3, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	061a      	lsls	r2, r3, #24
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3306      	adds	r3, #6
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3305      	adds	r3, #5
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	4313      	orrs	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	3204      	adds	r2, #4
 800197a:	7812      	ldrb	r2, [r2, #0]
 800197c:	4610      	mov	r0, r2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	6811      	ldr	r1, [r2, #0]
 8001982:	ea43 0200 	orr.w	r2, r3, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	440b      	add	r3, r1
 800198c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001990:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3303      	adds	r3, #3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	061a      	lsls	r2, r3, #24
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3302      	adds	r3, #2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3301      	adds	r3, #1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	4313      	orrs	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	4610      	mov	r0, r2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	6811      	ldr	r1, [r2, #0]
 80019b8:	ea43 0200 	orr.w	r2, r3, r0
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3318      	adds	r3, #24
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	6811      	ldr	r1, [r2, #0]
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3318      	adds	r3, #24
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	440b      	add	r3, r1
 80019e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e00e      	b.n	8001a0a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e006      	b.n	8001a0a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a26:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d002      	beq.n	8001a34 <HAL_CAN_ActivateNotification+0x1e>
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d109      	bne.n	8001a48 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6959      	ldr	r1, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e006      	b.n	8001a56 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b08a      	sub	sp, #40	@ 0x28
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d07c      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d023      	beq.n	8001afa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f983 	bl	8001dd0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001aca:	e016      	b.n	8001afa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	e00c      	b.n	8001afa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af2:	e002      	b.n	8001afa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f989 	bl	8001e0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d024      	beq.n	8001b4e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f963 	bl	8001de4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b1e:	e016      	b.n	8001b4e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b32:	e00c      	b.n	8001b4e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	e002      	b.n	8001b4e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f969 	bl	8001e20 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d024      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f943 	bl	8001df8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b72:	e016      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b86:	e00c      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9a:	e002      	b.n	8001ba2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f949 	bl	8001e34 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00c      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00b      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2208      	movs	r2, #8
 8001be0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f930 	bl	8001e48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fa95 	bl	8001130 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00c      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2210      	movs	r2, #16
 8001c28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00b      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2208      	movs	r2, #8
 8001c44:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f912 	bl	8001e70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8f9 	bl	8001e5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00b      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2210      	movs	r2, #16
 8001c84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8fc 	bl	8001e84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8f5 	bl	8001e98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d07b      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d072      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d043      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d03e      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d30:	2b60      	cmp	r3, #96	@ 0x60
 8001d32:	d02b      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x32a>
 8001d34:	2b60      	cmp	r3, #96	@ 0x60
 8001d36:	d82e      	bhi.n	8001d96 <HAL_CAN_IRQHandler+0x334>
 8001d38:	2b50      	cmp	r3, #80	@ 0x50
 8001d3a:	d022      	beq.n	8001d82 <HAL_CAN_IRQHandler+0x320>
 8001d3c:	2b50      	cmp	r3, #80	@ 0x50
 8001d3e:	d82a      	bhi.n	8001d96 <HAL_CAN_IRQHandler+0x334>
 8001d40:	2b40      	cmp	r3, #64	@ 0x40
 8001d42:	d019      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x316>
 8001d44:	2b40      	cmp	r3, #64	@ 0x40
 8001d46:	d826      	bhi.n	8001d96 <HAL_CAN_IRQHandler+0x334>
 8001d48:	2b30      	cmp	r3, #48	@ 0x30
 8001d4a:	d010      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x30c>
 8001d4c:	2b30      	cmp	r3, #48	@ 0x30
 8001d4e:	d822      	bhi.n	8001d96 <HAL_CAN_IRQHandler+0x334>
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d002      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x2f8>
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d005      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d58:	e01d      	b.n	8001d96 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d62:	e019      	b.n	8001d98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d6c:	e014      	b.n	8001d98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	f043 0320 	orr.w	r3, r3, #32
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d76:	e00f      	b.n	8001d98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d80:	e00a      	b.n	8001d98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d8a:	e005      	b.n	8001d98 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d94:	e000      	b.n	8001d98 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d96:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001da6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2204      	movs	r2, #4
 8001dae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d008      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f872 	bl	8001eac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	@ 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	@ (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	@ (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	@ 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	@ 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	@ (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff29 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff3e 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff31 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa2 	bl	800201c <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d005      	beq.n	8002106 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2204      	movs	r2, #4
 80020fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e029      	b.n	800215a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 020e 	bic.w	r2, r2, #14
 8002114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f003 021c 	and.w	r2, r3, #28
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
    }
  }
  return status;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002172:	b2db      	uxtb	r3, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	e154      	b.n	800243a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8146 	beq.w	8002434 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d005      	beq.n	80021c0 <HAL_GPIO_Init+0x40>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d130      	bne.n	8002222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021f6:	2201      	movs	r2, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0201 	and.w	r2, r3, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b03      	cmp	r3, #3
 800222c:	d017      	beq.n	800225e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d123      	bne.n	80022b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	6939      	ldr	r1, [r7, #16]
 80022ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0203 	and.w	r2, r3, #3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80a0 	beq.w	8002434 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f4:	4b58      	ldr	r3, [pc, #352]	@ (8002458 <HAL_GPIO_Init+0x2d8>)
 80022f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f8:	4a57      	ldr	r2, [pc, #348]	@ (8002458 <HAL_GPIO_Init+0x2d8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002300:	4b55      	ldr	r3, [pc, #340]	@ (8002458 <HAL_GPIO_Init+0x2d8>)
 8002302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800230c:	4a53      	ldr	r2, [pc, #332]	@ (800245c <HAL_GPIO_Init+0x2dc>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002336:	d019      	beq.n	800236c <HAL_GPIO_Init+0x1ec>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_GPIO_Init+0x2e0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x1e8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a48      	ldr	r2, [pc, #288]	@ (8002464 <HAL_GPIO_Init+0x2e4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1e4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a47      	ldr	r2, [pc, #284]	@ (8002468 <HAL_GPIO_Init+0x2e8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1e0>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a46      	ldr	r2, [pc, #280]	@ (800246c <HAL_GPIO_Init+0x2ec>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1dc>
 8002358:	2304      	movs	r3, #4
 800235a:	e008      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 800235c:	2307      	movs	r3, #7
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002360:	2303      	movs	r3, #3
 8002362:	e004      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002364:	2302      	movs	r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 800236c:	2300      	movs	r3, #0
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800237e:	4937      	ldr	r1, [pc, #220]	@ (800245c <HAL_GPIO_Init+0x2dc>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800238c:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023da:	4a25      	ldr	r2, [pc, #148]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023e0:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002404:	4a1a      	ldr	r2, [pc, #104]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800240a:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800242e:	4a10      	ldr	r2, [pc, #64]	@ (8002470 <HAL_GPIO_Init+0x2f0>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f aea3 	bne.w	8002190 <HAL_GPIO_Init+0x10>
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40021000 	.word	0x40021000
 800245c:	40010000 	.word	0x40010000
 8002460:	48000400 	.word	0x48000400
 8002464:	48000800 	.word	0x48000800
 8002468:	48000c00 	.word	0x48000c00
 800246c:	48001000 	.word	0x48001000
 8002470:	40010400 	.word	0x40010400

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002490:	e002      	b.n	8002498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	041a      	lsls	r2, r3, #16
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	43d9      	mvns	r1, r3
 80024c2:	887b      	ldrh	r3, [r7, #2]
 80024c4:	400b      	ands	r3, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	619a      	str	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024e2:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fd0a 	bl	8000f10 <HAL_GPIO_EXTI_Callback>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40010400 	.word	0x40010400

08002508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e08d      	b.n	8002636 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fb60 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	@ 0x24
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002558:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002568:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	e006      	b.n	8002590 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800258e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d108      	bne.n	80025aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	e007      	b.n	80025ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69d9      	ldr	r1, [r3, #28]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1a      	ldr	r2, [r3, #32]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
 8002650:	4613      	mov	r3, r2
 8002652:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	f040 80fd 	bne.w	800285c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_I2C_Master_Transmit+0x30>
 800266c:	2302      	movs	r3, #2
 800266e:	e0f6      	b.n	800285e <HAL_I2C_Master_Transmit+0x21e>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002678:	f7fe fec4 	bl	8001404 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2319      	movs	r3, #25
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f001 f871 	bl	8003772 <I2C_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0e1      	b.n	800285e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2221      	movs	r2, #33	@ 0x21
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2210      	movs	r2, #16
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	893a      	ldrh	r2, [r7, #8]
 80026ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2bff      	cmp	r3, #255	@ 0xff
 80026ca:	d906      	bls.n	80026da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	22ff      	movs	r2, #255	@ 0xff
 80026d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80026d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e007      	b.n	80026ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80026e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d024      	beq.n	800273c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	781a      	ldrb	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002726:	b2db      	uxtb	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	4b4e      	ldr	r3, [pc, #312]	@ (8002868 <HAL_I2C_Master_Transmit+0x228>)
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f001 fa6b 	bl	8003c10 <I2C_TransferConfig>
 800273a:	e066      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002740:	b2da      	uxtb	r2, r3
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	4b48      	ldr	r3, [pc, #288]	@ (8002868 <HAL_I2C_Master_Transmit+0x228>)
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 fa60 	bl	8003c10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002750:	e05b      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	6a39      	ldr	r1, [r7, #32]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f001 f864 	bl	8003824 <I2C_WaitOnTXISFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e07b      	b.n	800285e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d034      	beq.n	800280a <HAL_I2C_Master_Transmit+0x1ca>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d130      	bne.n	800280a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2180      	movs	r1, #128	@ 0x80
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 ffdd 	bl	8003772 <I2C_WaitOnFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e04d      	b.n	800285e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2bff      	cmp	r3, #255	@ 0xff
 80027ca:	d90e      	bls.n	80027ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	22ff      	movs	r2, #255	@ 0xff
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f001 fa14 	bl	8003c10 <I2C_TransferConfig>
 80027e8:	e00f      	b.n	800280a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	8979      	ldrh	r1, [r7, #10]
 80027fc:	2300      	movs	r3, #0
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f001 fa03 	bl	8003c10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d19e      	bne.n	8002752 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	6a39      	ldr	r1, [r7, #32]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f001 f84a 	bl	80038b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e01a      	b.n	800285e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2220      	movs	r2, #32
 800282e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <HAL_I2C_Master_Transmit+0x22c>)
 800283c:	400b      	ands	r3, r1
 800283e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	80002000 	.word	0x80002000
 800286c:	fe00e800 	.word	0xfe00e800

08002870 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	461a      	mov	r2, r3
 800287c:	460b      	mov	r3, r1
 800287e:	817b      	strh	r3, [r7, #10]
 8002880:	4613      	mov	r3, r2
 8002882:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	f040 80db 	bne.w	8002a48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_I2C_Master_Receive+0x30>
 800289c:	2302      	movs	r3, #2
 800289e:	e0d4      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a8:	f7fe fdac 	bl	8001404 <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2319      	movs	r3, #25
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 ff59 	bl	8003772 <I2C_WaitOnFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0bf      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2222      	movs	r2, #34	@ 0x22
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2210      	movs	r2, #16
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	893a      	ldrh	r2, [r7, #8]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2bff      	cmp	r3, #255	@ 0xff
 80028fa:	d90e      	bls.n	800291a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002906:	b2da      	uxtb	r2, r3
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	4b52      	ldr	r3, [pc, #328]	@ (8002a54 <HAL_I2C_Master_Receive+0x1e4>)
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f001 f97c 	bl	8003c10 <I2C_TransferConfig>
 8002918:	e06d      	b.n	80029f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <HAL_I2C_Master_Receive+0x1e4>)
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f001 f96b 	bl	8003c10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800293a:	e05c      	b.n	80029f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	6a39      	ldr	r1, [r7, #32]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fff9 	bl	8003938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e07c      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d034      	beq.n	80029f6 <HAL_I2C_Master_Receive+0x186>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d130      	bne.n	80029f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2200      	movs	r2, #0
 800299c:	2180      	movs	r1, #128	@ 0x80
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fee7 	bl	8003772 <I2C_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e04d      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	2bff      	cmp	r3, #255	@ 0xff
 80029b6:	d90e      	bls.n	80029d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	22ff      	movs	r2, #255	@ 0xff
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	8979      	ldrh	r1, [r7, #10]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f001 f91e 	bl	8003c10 <I2C_TransferConfig>
 80029d4:	e00f      	b.n	80029f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f001 f90d 	bl	8003c10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d19d      	bne.n	800293c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	6a39      	ldr	r1, [r7, #32]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 ff54 	bl	80038b2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e01a      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <HAL_I2C_Master_Receive+0x1e8>)
 8002a28:	400b      	ands	r3, r1
 8002a2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	80002400 	.word	0x80002400
 8002a58:	fe00e800 	.word	0xfe00e800

08002a5c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	f040 80d6 	bne.w	8002c2a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e0cc      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2C_IsDeviceReady+0x44>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e0c5      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x1d0>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_I2C_IsDeviceReady+0x72>
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ac8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002acc:	e006      	b.n	8002adc <HAL_I2C_IsDeviceReady+0x80>
 8002ace:	897b      	ldrh	r3, [r7, #10]
 8002ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fc8f 	bl	8001404 <HAL_GetTick>
 8002ae6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b14:	e034      	b.n	8002b80 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d01a      	beq.n	8002b54 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7fe fc71 	bl	8001404 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <HAL_I2C_IsDeviceReady+0xd8>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10f      	bne.n	8002b54 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e06b      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b10      	cmp	r3, #16
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_I2C_IsDeviceReady+0x130>
 8002b86:	7fbb      	ldrb	r3, [r7, #30]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0c4      	beq.n	8002b16 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d01a      	beq.n	8002bd0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fde4 	bl	8003772 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e03b      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e02d      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2120      	movs	r1, #32
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fdc9 	bl	8003772 <I2C_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e020      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2210      	movs	r2, #16
 8002bf0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	f63f af56 	bhi.w	8002ab6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	68f9      	ldr	r1, [r7, #12]
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
  }
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00f      	beq.n	8002caa <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ca8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc2:	f043 0208 	orr.w	r2, r3, #8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cd2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00f      	beq.n	8002cfe <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cec:	f043 0202 	orr.w	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cfc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 030b 	and.w	r3, r3, #11
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fbd5 	bl	80034c0 <I2C_ITError>
  }
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	70fb      	strb	r3, [r7, #3]
 8002d52:	4613      	mov	r3, r2
 8002d54:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <I2C_Slave_ISR_IT+0x24>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0e2      	b.n	8002f88 <I2C_Slave_ISR_IT+0x1ea>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d009      	beq.n	8002de8 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002dde:	6939      	ldr	r1, [r7, #16]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f9b5 	bl	8003150 <I2C_ITSlaveCplt>
 8002de6:	e0ca      	b.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d04b      	beq.n	8002e8a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d046      	beq.n	8002e8a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d128      	bne.n	8002e58 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b28      	cmp	r3, #40	@ 0x28
 8002e10:	d108      	bne.n	8002e24 <I2C_Slave_ISR_IT+0x86>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e18:	d104      	bne.n	8002e24 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e1a:	6939      	ldr	r1, [r7, #16]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fafb 	bl	8003418 <I2C_ITListenCplt>
 8002e22:	e031      	b.n	8002e88 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b29      	cmp	r3, #41	@ 0x29
 8002e2e:	d10e      	bne.n	8002e4e <I2C_Slave_ISR_IT+0xb0>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e36:	d00a      	beq.n	8002e4e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fc54 	bl	80036ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f926 	bl	8003098 <I2C_ITSlaveSeqCplt>
 8002e4c:	e01c      	b.n	8002e88 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2210      	movs	r2, #16
 8002e54:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e56:	e08f      	b.n	8002f78 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <I2C_Slave_ISR_IT+0xdc>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e78:	d17e      	bne.n	8002f78 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	4619      	mov	r1, r3
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fb1d 	bl	80034c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e86:	e077      	b.n	8002f78 <I2C_Slave_ISR_IT+0x1da>
 8002e88:	e076      	b.n	8002f78 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d02f      	beq.n	8002ef4 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d02a      	beq.n	8002ef4 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d018      	beq.n	8002eda <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d14b      	bne.n	8002f7c <I2C_Slave_ISR_IT+0x1de>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002eea:	d047      	beq.n	8002f7c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f8d3 	bl	8003098 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ef2:	e043      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f08:	6939      	ldr	r1, [r7, #16]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f840 	bl	8002f90 <I2C_ITAddrCplt>
 8002f10:	e035      	b.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d030      	beq.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02b      	beq.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d018      	beq.n	8002f62 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f60:	e00d      	b.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f68:	d002      	beq.n	8002f70 <I2C_Slave_ISR_IT+0x1d2>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f891 	bl	8003098 <I2C_ITSlaveSeqCplt>
 8002f76:	e002      	b.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002f7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fa6:	2b28      	cmp	r3, #40	@ 0x28
 8002fa8:	d16a      	bne.n	8003080 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002fc8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002fe4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d138      	bne.n	8003060 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	09db      	lsrs	r3, r3, #7
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	89bb      	ldrh	r3, [r7, #12]
 8002ff6:	4053      	eors	r3, r2
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f003 0306 	and.w	r3, r3, #6
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d11c      	bne.n	800303c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003014:	2b02      	cmp	r3, #2
 8003016:	d13b      	bne.n	8003090 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2208      	movs	r2, #8
 8003024:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800302e:	89ba      	ldrh	r2, [r7, #12]
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fe86 	bl	8002d46 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800303a:	e029      	b.n	8003090 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003040:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fe15 	bl	8003c74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003052:	89ba      	ldrh	r2, [r7, #12]
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	4619      	mov	r1, r3
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fe74 	bl	8002d46 <HAL_I2C_AddrCallback>
}
 800305e:	e017      	b.n	8003090 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003060:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fe05 	bl	8003c74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003072:	89ba      	ldrh	r2, [r7, #12]
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fe64 	bl	8002d46 <HAL_I2C_AddrCallback>
}
 800307e:	e007      	b.n	8003090 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2208      	movs	r2, #8
 8003086:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e00c      	b.n	80030e6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b29      	cmp	r3, #41	@ 0x29
 80030f0:	d112      	bne.n	8003118 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2228      	movs	r2, #40	@ 0x28
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2221      	movs	r2, #33	@ 0x21
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003100:	2101      	movs	r1, #1
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fdb6 	bl	8003c74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff fe04 	bl	8002d1e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003116:	e017      	b.n	8003148 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b2a      	cmp	r3, #42	@ 0x2a
 8003122:	d111      	bne.n	8003148 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2228      	movs	r2, #40	@ 0x28
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2222      	movs	r2, #34	@ 0x22
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003132:	2102      	movs	r1, #2
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fd9d 	bl	8003c74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fdf5 	bl	8002d32 <HAL_I2C_SlaveRxCpltCallback>
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2220      	movs	r2, #32
 800317a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	2b21      	cmp	r3, #33	@ 0x21
 8003180:	d002      	beq.n	8003188 <I2C_ITSlaveCplt+0x38>
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	2b29      	cmp	r3, #41	@ 0x29
 8003186:	d108      	bne.n	800319a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003188:	f248 0101 	movw	r1, #32769	@ 0x8001
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fd71 	bl	8003c74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2221      	movs	r2, #33	@ 0x21
 8003196:	631a      	str	r2, [r3, #48]	@ 0x30
 8003198:	e019      	b.n	80031ce <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	2b22      	cmp	r3, #34	@ 0x22
 800319e:	d002      	beq.n	80031a6 <I2C_ITSlaveCplt+0x56>
 80031a0:	7afb      	ldrb	r3, [r7, #11]
 80031a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80031a4:	d108      	bne.n	80031b8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80031a6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fd62 	bl	8003c74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2222      	movs	r2, #34	@ 0x22
 80031b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80031b6:	e00a      	b.n	80031ce <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80031b8:	7afb      	ldrb	r3, [r7, #11]
 80031ba:	2b28      	cmp	r3, #40	@ 0x28
 80031bc:	d107      	bne.n	80031ce <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80031be:	f248 0103 	movw	r1, #32771	@ 0x8003
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fd56 	bl	8003c74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031dc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b89      	ldr	r3, [pc, #548]	@ (8003410 <I2C_ITSlaveCplt+0x2c0>)
 80031ea:	400b      	ands	r3, r1
 80031ec:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa7d 	bl	80036ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d013      	beq.n	8003226 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800320c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01f      	beq.n	8003256 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003224:	e017      	b.n	8003256 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800323e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	b29a      	uxth	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f023 0304 	bic.w	r3, r3, #4
 8003266:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00c      	beq.n	80032a2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d049      	beq.n	8003356 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d044      	beq.n	8003356 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d128      	bne.n	8003328 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b28      	cmp	r3, #40	@ 0x28
 80032e0:	d108      	bne.n	80032f4 <I2C_ITSlaveCplt+0x1a4>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032e8:	d104      	bne.n	80032f4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f893 	bl	8003418 <I2C_ITListenCplt>
 80032f2:	e030      	b.n	8003356 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b29      	cmp	r3, #41	@ 0x29
 80032fe:	d10e      	bne.n	800331e <I2C_ITSlaveCplt+0x1ce>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003306:	d00a      	beq.n	800331e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2210      	movs	r2, #16
 800330e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f9ec 	bl	80036ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff febe 	bl	8003098 <I2C_ITSlaveSeqCplt>
 800331c:	e01b      	b.n	8003356 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2210      	movs	r2, #16
 8003324:	61da      	str	r2, [r3, #28]
 8003326:	e016      	b.n	8003356 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2210      	movs	r2, #16
 800332e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003334:	f043 0204 	orr.w	r2, r3, #4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <I2C_ITSlaveCplt+0x1fa>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003348:	d105      	bne.n	8003356 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8b5 	bl	80034c0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	2b00      	cmp	r3, #0
 800336a:	d010      	beq.n	800338e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8a4 	bl	80034c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b28      	cmp	r3, #40	@ 0x28
 8003382:	d141      	bne.n	8003408 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003384:	6979      	ldr	r1, [r7, #20]
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f846 	bl	8003418 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800338c:	e03c      	b.n	8003408 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003396:	d014      	beq.n	80033c2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fe7d 	bl	8003098 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <I2C_ITSlaveCplt+0x2c4>)
 80033a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fcd1 	bl	8002d62 <HAL_I2C_ListenCpltCallback>
}
 80033c0:	e022      	b.n	8003408 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b22      	cmp	r3, #34	@ 0x22
 80033cc:	d10e      	bne.n	80033ec <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fca4 	bl	8002d32 <HAL_I2C_SlaveRxCpltCallback>
}
 80033ea:	e00d      	b.n	8003408 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fc8b 	bl	8002d1e <HAL_I2C_SlaveTxCpltCallback>
}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	fe00e800 	.word	0xfe00e800
 8003414:	ffff0000 	.word	0xffff0000

08003418 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a25      	ldr	r2, [pc, #148]	@ (80034bc <I2C_ITListenCplt+0xa4>)
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d022      	beq.n	8003494 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003494:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fbeb 	bl	8003c74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2210      	movs	r2, #16
 80034a4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fc57 	bl	8002d62 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	ffff0000 	.word	0xffff0000

080034c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a6d      	ldr	r2, [pc, #436]	@ (8003694 <I2C_ITError+0x1d4>)
 80034de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b28      	cmp	r3, #40	@ 0x28
 80034f6:	d005      	beq.n	8003504 <I2C_ITError+0x44>
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b29      	cmp	r3, #41	@ 0x29
 80034fc:	d002      	beq.n	8003504 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b2a      	cmp	r3, #42	@ 0x2a
 8003502:	d10b      	bne.n	800351c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003504:	2103      	movs	r1, #3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fbb4 	bl	8003c74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2228      	movs	r2, #40	@ 0x28
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a60      	ldr	r2, [pc, #384]	@ (8003698 <I2C_ITError+0x1d8>)
 8003518:	635a      	str	r2, [r3, #52]	@ 0x34
 800351a:	e030      	b.n	800357e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800351c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fba7 	bl	8003c74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8e1 	bl	80036ee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b60      	cmp	r3, #96	@ 0x60
 8003536:	d01f      	beq.n	8003578 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b20      	cmp	r3, #32
 800354c:	d114      	bne.n	8003578 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	2b10      	cmp	r3, #16
 800355a:	d109      	bne.n	8003570 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2210      	movs	r2, #16
 8003562:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2220      	movs	r2, #32
 8003576:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003588:	2b00      	cmp	r3, #0
 800358a:	d039      	beq.n	8003600 <I2C_ITError+0x140>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b11      	cmp	r3, #17
 8003590:	d002      	beq.n	8003598 <I2C_ITError+0xd8>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b21      	cmp	r3, #33	@ 0x21
 8003596:	d133      	bne.n	8003600 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035a6:	d107      	bne.n	80035b8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fdd1 	bl	8002164 <HAL_DMA_GetState>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d017      	beq.n	80035f8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	4a33      	ldr	r2, [pc, #204]	@ (800369c <I2C_ITError+0x1dc>)
 80035ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fd80 	bl	80020e2 <HAL_DMA_Abort_IT>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d04d      	beq.n	8003684 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035f2:	4610      	mov	r0, r2
 80035f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035f6:	e045      	b.n	8003684 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f851 	bl	80036a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035fe:	e041      	b.n	8003684 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003604:	2b00      	cmp	r3, #0
 8003606:	d039      	beq.n	800367c <I2C_ITError+0x1bc>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b12      	cmp	r3, #18
 800360c:	d002      	beq.n	8003614 <I2C_ITError+0x154>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b22      	cmp	r3, #34	@ 0x22
 8003612:	d133      	bne.n	800367c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003622:	d107      	bne.n	8003634 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003632:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fd93 	bl	8002164 <HAL_DMA_GetState>
 800363e:	4603      	mov	r3, r0
 8003640:	2b01      	cmp	r3, #1
 8003642:	d017      	beq.n	8003674 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003648:	4a14      	ldr	r2, [pc, #80]	@ (800369c <I2C_ITError+0x1dc>)
 800364a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fd42 	bl	80020e2 <HAL_DMA_Abort_IT>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d011      	beq.n	8003688 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800366e:	4610      	mov	r0, r2
 8003670:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003672:	e009      	b.n	8003688 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f813 	bl	80036a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800367a:	e005      	b.n	8003688 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f80f 	bl	80036a0 <I2C_TreatErrorCallback>
  }
}
 8003682:	e002      	b.n	800368a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003688:	bf00      	nop
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	ffff0000 	.word	0xffff0000
 8003698:	08002d9f 	.word	0x08002d9f
 800369c:	08003737 	.word	0x08003737

080036a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b60      	cmp	r3, #96	@ 0x60
 80036b2:	d10e      	bne.n	80036d2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fb5d 	bl	8002d8a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036d0:	e009      	b.n	80036e6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fb48 	bl	8002d76 <HAL_I2C_ErrorCallback>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b02      	cmp	r3, #2
 8003702:	d103      	bne.n	800370c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2200      	movs	r2, #0
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d007      	beq.n	800372a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	619a      	str	r2, [r3, #24]
  }
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	2200      	movs	r2, #0
 8003752:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003760:	2200      	movs	r2, #0
 8003762:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f7ff ff9b 	bl	80036a0 <I2C_TreatErrorCallback>
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003782:	e03b      	b.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	6839      	ldr	r1, [r7, #0]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f961 	bl	8003a50 <I2C_IsErrorOccurred>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e041      	b.n	800381c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d02d      	beq.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a0:	f7fd fe30 	bl	8001404 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d122      	bne.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4013      	ands	r3, r2
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	bf0c      	ite	eq
 80037c6:	2301      	moveq	r3, #1
 80037c8:	2300      	movne	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d113      	bne.n	80037fc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e00f      	b.n	800381c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4013      	ands	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	429a      	cmp	r2, r3
 8003818:	d0b4      	beq.n	8003784 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003830:	e033      	b.n	800389a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f90a 	bl	8003a50 <I2C_IsErrorOccurred>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e031      	b.n	80038aa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d025      	beq.n	800389a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fd fdd9 	bl	8001404 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d11a      	bne.n	800389a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b02      	cmp	r3, #2
 8003870:	d013      	beq.n	800389a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e007      	b.n	80038aa <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d1c4      	bne.n	8003832 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038be:	e02f      	b.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f8c3 	bl	8003a50 <I2C_IsErrorOccurred>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e02d      	b.n	8003930 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fd fd96 	bl	8001404 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11a      	bne.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d013      	beq.n	8003920 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b20      	cmp	r3, #32
 800392c:	d1c8      	bne.n	80038c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003948:	e071      	b.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f87e 	bl	8003a50 <I2C_IsErrorOccurred>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b20      	cmp	r3, #32
 800396a:	d13b      	bne.n	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d138      	bne.n	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b04      	cmp	r3, #4
 800397e:	d105      	bne.n	800398c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b10      	cmp	r3, #16
 8003998:	d121      	bne.n	80039de <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2210      	movs	r2, #16
 80039a0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2204      	movs	r2, #4
 80039a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2220      	movs	r2, #32
 80039ae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80039bc:	400b      	ands	r3, r1
 80039be:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
 80039dc:	e002      	b.n	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80039e4:	f7fd fd0e 	bl	8001404 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d119      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00f      	beq.n	8003a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d002      	beq.n	8003a42 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d083      	beq.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	fe00e800 	.word	0xfe00e800

08003a50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d068      	beq.n	8003b4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2210      	movs	r2, #16
 8003a82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a84:	e049      	b.n	8003b1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d045      	beq.n	8003b1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fd fcb9 	bl	8001404 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <I2C_IsErrorOccurred+0x54>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d13a      	bne.n	8003b1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ab6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ac2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ac6:	d121      	bne.n	8003b0c <I2C_IsErrorOccurred+0xbc>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ace:	d01d      	beq.n	8003b0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d01a      	beq.n	8003b0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ae4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ae6:	f7fd fc8d 	bl	8001404 <HAL_GetTick>
 8003aea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aec:	e00e      	b.n	8003b0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003aee:	f7fd fc89 	bl	8001404 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b19      	cmp	r3, #25
 8003afa:	d907      	bls.n	8003b0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f043 0320 	orr.w	r3, r3, #32
 8003b02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b0a:	e006      	b.n	8003b1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d1e9      	bne.n	8003aee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d003      	beq.n	8003b30 <I2C_IsErrorOccurred+0xe0>
 8003b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0aa      	beq.n	8003a86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00b      	beq.n	8003b78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	f043 0302 	orr.w	r3, r3, #2
 8003baa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01c      	beq.n	8003bfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fd92 	bl	80036ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <I2C_IsErrorOccurred+0x1bc>)
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3728      	adds	r7, #40	@ 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c28:	7a7b      	ldrb	r3, [r7, #9]
 8003c2a:	041b      	lsls	r3, r3, #16
 8003c2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	0d5b      	lsrs	r3, r3, #21
 8003c4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c4e:	4b08      	ldr	r3, [pc, #32]	@ (8003c70 <I2C_TransferConfig+0x60>)
 8003c50:	430b      	orrs	r3, r1
 8003c52:	43db      	mvns	r3, r3
 8003c54:	ea02 0103 	and.w	r1, r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	03ff63ff 	.word	0x03ff63ff

08003c74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c84:	887b      	ldrh	r3, [r7, #2]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00f      	beq.n	8003cae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003c94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ca2:	2b28      	cmp	r3, #40	@ 0x28
 8003ca4:	d003      	beq.n	8003cae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003cac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00f      	beq.n	8003cd8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003cbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ccc:	2b28      	cmp	r3, #40	@ 0x28
 8003cce:	d003      	beq.n	8003cd8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003cd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da03      	bge.n	8003ce8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d103      	bne.n	8003cf6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d103      	bne.n	8003d04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f043 0320 	orr.w	r3, r3, #32
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	2b40      	cmp	r3, #64	@ 0x40
 8003d08:	d103      	bne.n	8003d12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	43da      	mvns	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	400a      	ands	r2, r1
 8003d22:	601a      	str	r2, [r3, #0]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d138      	bne.n	8003db8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e032      	b.n	8003dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	@ 0x24
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d139      	bne.n	8003e50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e033      	b.n	8003e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2224      	movs	r2, #36	@ 0x24
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40007000 	.word	0x40007000

08003e7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8a:	d130      	bne.n	8003eee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e8c:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e98:	d038      	beq.n	8003f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2232      	movs	r2, #50	@ 0x32
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	0c9b      	lsrs	r3, r3, #18
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ec0:	e002      	b.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ec8:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed4:	d102      	bne.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f2      	bne.n	8003ec2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003edc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee8:	d110      	bne.n	8003f0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e00f      	b.n	8003f0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efa:	d007      	beq.n	8003f0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003efc:	4b07      	ldr	r3, [pc, #28]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f04:	4a05      	ldr	r2, [pc, #20]	@ (8003f1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	20000000 	.word	0x20000000
 8003f24:	431bde83 	.word	0x431bde83

08003f28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	f000 bc02 	b.w	8004740 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3c:	4b96      	ldr	r3, [pc, #600]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f46:	4b94      	ldr	r3, [pc, #592]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80e4 	beq.w	8004126 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4c>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	f040 808b 	bne.w	8004082 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	f040 8087 	bne.w	8004082 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f74:	4b88      	ldr	r3, [pc, #544]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_OscConfig+0x64>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e3d9      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	4b81      	ldr	r3, [pc, #516]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x7e>
 8003f9c:	4b7e      	ldr	r3, [pc, #504]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCC_OscConfig+0x8a>
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d223      	bcs.n	8003ffe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fd54 	bl	8004a68 <RCC_SetFlashLatencyFromMSIRange>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e3ba      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fca:	4b73      	ldr	r3, [pc, #460]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a72      	ldr	r2, [pc, #456]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b70      	ldr	r3, [pc, #448]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	496d      	ldr	r1, [pc, #436]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe8:	4b6b      	ldr	r3, [pc, #428]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	4968      	ldr	r1, [pc, #416]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
 8003ffc:	e025      	b.n	800404a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffe:	4b66      	ldr	r3, [pc, #408]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a65      	ldr	r2, [pc, #404]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b63      	ldr	r3, [pc, #396]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	4960      	ldr	r1, [pc, #384]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800401c:	4b5e      	ldr	r3, [pc, #376]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	495b      	ldr	r1, [pc, #364]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fd14 	bl	8004a68 <RCC_SetFlashLatencyFromMSIRange>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e37a      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800404a:	f000 fc81 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b51      	ldr	r3, [pc, #324]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	4950      	ldr	r1, [pc, #320]	@ (800419c <HAL_RCC_OscConfig+0x274>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	4a4e      	ldr	r2, [pc, #312]	@ (80041a0 <HAL_RCC_OscConfig+0x278>)
 8004068:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800406a:	4b4e      	ldr	r3, [pc, #312]	@ (80041a4 <HAL_RCC_OscConfig+0x27c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd f978 	bl	8001364 <HAL_InitTick>
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d052      	beq.n	8004124 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	e35e      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d032      	beq.n	80040f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800408a:	4b43      	ldr	r3, [pc, #268]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a42      	ldr	r2, [pc, #264]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004096:	f7fd f9b5 	bl	8001404 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800409e:	f7fd f9b1 	bl	8001404 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e347      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040b0:	4b39      	ldr	r3, [pc, #228]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040bc:	4b36      	ldr	r3, [pc, #216]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a35      	ldr	r2, [pc, #212]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040c2:	f043 0308 	orr.w	r3, r3, #8
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b33      	ldr	r3, [pc, #204]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4930      	ldr	r1, [pc, #192]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040da:	4b2f      	ldr	r3, [pc, #188]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	492b      	ldr	r1, [pc, #172]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	604b      	str	r3, [r1, #4]
 80040ee:	e01a      	b.n	8004126 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040f0:	4b29      	ldr	r3, [pc, #164]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a28      	ldr	r2, [pc, #160]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 80040f6:	f023 0301 	bic.w	r3, r3, #1
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040fc:	f7fd f982 	bl	8001404 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004104:	f7fd f97e 	bl	8001404 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e314      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004116:	4b20      	ldr	r3, [pc, #128]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x1dc>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d073      	beq.n	800421a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d005      	beq.n	8004144 <HAL_RCC_OscConfig+0x21c>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d10e      	bne.n	800415c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d10b      	bne.n	800415c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	4b14      	ldr	r3, [pc, #80]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d063      	beq.n	8004218 <HAL_RCC_OscConfig+0x2f0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d15f      	bne.n	8004218 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e2f1      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x24c>
 8004166:	4b0c      	ldr	r3, [pc, #48]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a0b      	ldr	r2, [pc, #44]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e025      	b.n	80041c0 <HAL_RCC_OscConfig+0x298>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800417c:	d114      	bne.n	80041a8 <HAL_RCC_OscConfig+0x280>
 800417e:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a05      	ldr	r2, [pc, #20]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b03      	ldr	r3, [pc, #12]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a02      	ldr	r2, [pc, #8]	@ (8004198 <HAL_RCC_OscConfig+0x270>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e013      	b.n	80041c0 <HAL_RCC_OscConfig+0x298>
 8004198:	40021000 	.word	0x40021000
 800419c:	0800534c 	.word	0x0800534c
 80041a0:	20000000 	.word	0x20000000
 80041a4:	20000004 	.word	0x20000004
 80041a8:	4ba0      	ldr	r3, [pc, #640]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a9f      	ldr	r2, [pc, #636]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b9d      	ldr	r3, [pc, #628]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a9c      	ldr	r2, [pc, #624]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80041ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d013      	beq.n	80041f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fd f91c 	bl	8001404 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d0:	f7fd f918 	bl	8001404 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	@ 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e2ae      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e2:	4b92      	ldr	r3, [pc, #584]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x2a8>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f0:	f7fd f908 	bl	8001404 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f8:	f7fd f904 	bl	8001404 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b64      	cmp	r3, #100	@ 0x64
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e29a      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420a:	4b88      	ldr	r3, [pc, #544]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x2d0>
 8004216:	e000      	b.n	800421a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d060      	beq.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b04      	cmp	r3, #4
 800422a:	d005      	beq.n	8004238 <HAL_RCC_OscConfig+0x310>
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d119      	bne.n	8004266 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d116      	bne.n	8004266 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004238:	4b7c      	ldr	r3, [pc, #496]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_OscConfig+0x328>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e277      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b76      	ldr	r3, [pc, #472]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	4973      	ldr	r1, [pc, #460]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004264:	e040      	b.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d023      	beq.n	80042b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800426e:	4b6f      	ldr	r3, [pc, #444]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6e      	ldr	r2, [pc, #440]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fd f8c3 	bl	8001404 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004282:	f7fd f8bf 	bl	8001404 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e255      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004294:	4b65      	ldr	r3, [pc, #404]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a0:	4b62      	ldr	r3, [pc, #392]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	495f      	ldr	r1, [pc, #380]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]
 80042b4:	e018      	b.n	80042e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b6:	4b5d      	ldr	r3, [pc, #372]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a5c      	ldr	r2, [pc, #368]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80042bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fd f89f 	bl	8001404 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ca:	f7fd f89b 	bl	8001404 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e231      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042dc:	4b53      	ldr	r3, [pc, #332]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d03c      	beq.n	800436e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d01c      	beq.n	8004336 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fc:	4b4b      	ldr	r3, [pc, #300]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004302:	4a4a      	ldr	r2, [pc, #296]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fd f87a 	bl	8001404 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004314:	f7fd f876 	bl	8001404 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e20c      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004326:	4b41      	ldr	r3, [pc, #260]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ef      	beq.n	8004314 <HAL_RCC_OscConfig+0x3ec>
 8004334:	e01b      	b.n	800436e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004336:	4b3d      	ldr	r3, [pc, #244]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800433c:	4a3b      	ldr	r2, [pc, #236]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004346:	f7fd f85d 	bl	8001404 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434e:	f7fd f859 	bl	8001404 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e1ef      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004360:	4b32      	ldr	r3, [pc, #200]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1ef      	bne.n	800434e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 80a6 	beq.w	80044c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437c:	2300      	movs	r3, #0
 800437e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004380:	4b2a      	ldr	r3, [pc, #168]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438c:	4b27      	ldr	r3, [pc, #156]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	4a26      	ldr	r2, [pc, #152]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004396:	6593      	str	r3, [r2, #88]	@ 0x58
 8004398:	4b24      	ldr	r3, [pc, #144]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	60bb      	str	r3, [r7, #8]
 80043a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043a4:	2301      	movs	r3, #1
 80043a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a8:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <HAL_RCC_OscConfig+0x508>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d118      	bne.n	80043e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <HAL_RCC_OscConfig+0x508>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004430 <HAL_RCC_OscConfig+0x508>)
 80043ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c0:	f7fd f820 	bl	8001404 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c8:	f7fd f81c 	bl	8001404 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1b2      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_RCC_OscConfig+0x508>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d108      	bne.n	8004400 <HAL_RCC_OscConfig+0x4d8>
 80043ee:	4b0f      	ldr	r3, [pc, #60]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f4:	4a0d      	ldr	r2, [pc, #52]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043fe:	e029      	b.n	8004454 <HAL_RCC_OscConfig+0x52c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b05      	cmp	r3, #5
 8004406:	d115      	bne.n	8004434 <HAL_RCC_OscConfig+0x50c>
 8004408:	4b08      	ldr	r3, [pc, #32]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440e:	4a07      	ldr	r2, [pc, #28]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004418:	4b04      	ldr	r3, [pc, #16]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441e:	4a03      	ldr	r2, [pc, #12]	@ (800442c <HAL_RCC_OscConfig+0x504>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004428:	e014      	b.n	8004454 <HAL_RCC_OscConfig+0x52c>
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	40007000 	.word	0x40007000
 8004434:	4b9a      	ldr	r3, [pc, #616]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	4a99      	ldr	r2, [pc, #612]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004444:	4b96      	ldr	r3, [pc, #600]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444a:	4a95      	ldr	r2, [pc, #596]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d016      	beq.n	800448a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fc ffd2 	bl	8001404 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004462:	e00a      	b.n	800447a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004464:	f7fc ffce 	bl	8001404 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e162      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447a:	4b89      	ldr	r3, [pc, #548]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800447c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ed      	beq.n	8004464 <HAL_RCC_OscConfig+0x53c>
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448a:	f7fc ffbb 	bl	8001404 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004492:	f7fc ffb7 	bl	8001404 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e14b      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044a8:	4b7d      	ldr	r3, [pc, #500]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1ed      	bne.n	8004492 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b6:	7ffb      	ldrb	r3, [r7, #31]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044bc:	4b78      	ldr	r3, [pc, #480]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c0:	4a77      	ldr	r2, [pc, #476]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d03c      	beq.n	800454e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01c      	beq.n	8004516 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044dc:	4b70      	ldr	r3, [pc, #448]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80044de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044e2:	4a6f      	ldr	r2, [pc, #444]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fc ff8a 	bl	8001404 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044f4:	f7fc ff86 	bl	8001404 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e11c      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004506:	4b66      	ldr	r3, [pc, #408]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004508:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ef      	beq.n	80044f4 <HAL_RCC_OscConfig+0x5cc>
 8004514:	e01b      	b.n	800454e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004516:	4b62      	ldr	r3, [pc, #392]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004518:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800451c:	4a60      	ldr	r2, [pc, #384]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fc ff6d 	bl	8001404 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800452e:	f7fc ff69 	bl	8001404 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0ff      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004540:	4b57      	ldr	r3, [pc, #348]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ef      	bne.n	800452e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80f3 	beq.w	800473e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	2b02      	cmp	r3, #2
 800455e:	f040 80c9 	bne.w	80046f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004562:	4b4f      	ldr	r3, [pc, #316]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f003 0203 	and.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	429a      	cmp	r2, r3
 8004574:	d12c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	3b01      	subs	r3, #1
 8004582:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d123      	bne.n	80045d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d11b      	bne.n	80045d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d113      	bne.n	80045d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d109      	bne.n	80045d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	085b      	lsrs	r3, r3, #1
 80045c8:	3b01      	subs	r3, #1
 80045ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d06b      	beq.n	80046a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d062      	beq.n	800469c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045d6:	4b32      	ldr	r3, [pc, #200]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0ac      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045e6:	4b2e      	ldr	r3, [pc, #184]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2d      	ldr	r2, [pc, #180]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 80045ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045f2:	f7fc ff07 	bl	8001404 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fa:	f7fc ff03 	bl	8001404 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e099      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800460c:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004618:	4b21      	ldr	r3, [pc, #132]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	4b21      	ldr	r3, [pc, #132]	@ (80046a4 <HAL_RCC_OscConfig+0x77c>)
 800461e:	4013      	ands	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004628:	3a01      	subs	r2, #1
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	4311      	orrs	r1, r2
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004632:	0212      	lsls	r2, r2, #8
 8004634:	4311      	orrs	r1, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800463a:	0852      	lsrs	r2, r2, #1
 800463c:	3a01      	subs	r2, #1
 800463e:	0552      	lsls	r2, r2, #21
 8004640:	4311      	orrs	r1, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004646:	0852      	lsrs	r2, r2, #1
 8004648:	3a01      	subs	r2, #1
 800464a:	0652      	lsls	r2, r2, #25
 800464c:	4311      	orrs	r1, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004652:	06d2      	lsls	r2, r2, #27
 8004654:	430a      	orrs	r2, r1
 8004656:	4912      	ldr	r1, [pc, #72]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004658:	4313      	orrs	r3, r2
 800465a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800465c:	4b10      	ldr	r3, [pc, #64]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0f      	ldr	r2, [pc, #60]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004662:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004666:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004668:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a0c      	ldr	r2, [pc, #48]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 800466e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004674:	f7fc fec6 	bl	8001404 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fc fec2 	bl	8001404 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e058      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468e:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <HAL_RCC_OscConfig+0x778>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800469a:	e050      	b.n	800473e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e04f      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
 80046a0:	40021000 	.word	0x40021000
 80046a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a8:	4b27      	ldr	r3, [pc, #156]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d144      	bne.n	800473e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80046b4:	4b24      	ldr	r3, [pc, #144]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a23      	ldr	r2, [pc, #140]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 80046ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046c0:	4b21      	ldr	r3, [pc, #132]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a20      	ldr	r2, [pc, #128]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 80046c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046cc:	f7fc fe9a 	bl	8001404 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fc fe96 	bl	8001404 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e02c      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	4b18      	ldr	r3, [pc, #96]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x7ac>
 80046f2:	e024      	b.n	800473e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d01f      	beq.n	800473a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a12      	ldr	r2, [pc, #72]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 8004700:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fc fe7d 	bl	8001404 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7fc fe79 	bl	8001404 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e00f      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800472c:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	4905      	ldr	r1, [pc, #20]	@ (8004748 <HAL_RCC_OscConfig+0x820>)
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_RCC_OscConfig+0x824>)
 8004734:	4013      	ands	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
 8004738:	e001      	b.n	800473e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40021000 	.word	0x40021000
 800474c:	feeefffc 	.word	0xfeeefffc

08004750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0e7      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b75      	ldr	r3, [pc, #468]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d910      	bls.n	8004794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b72      	ldr	r3, [pc, #456]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 0207 	bic.w	r2, r3, #7
 800477a:	4970      	ldr	r1, [pc, #448]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b6e      	ldr	r3, [pc, #440]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0cf      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d010      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	4b66      	ldr	r3, [pc, #408]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d908      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b63      	ldr	r3, [pc, #396]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4960      	ldr	r1, [pc, #384]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d04c      	beq.n	8004868 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	4b5a      	ldr	r3, [pc, #360]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d121      	bne.n	8004826 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0a6      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047ee:	4b54      	ldr	r3, [pc, #336]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d115      	bne.n	8004826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e09a      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d107      	bne.n	8004816 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004806:	4b4e      	ldr	r3, [pc, #312]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e08e      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004816:	4b4a      	ldr	r3, [pc, #296]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e086      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004826:	4b46      	ldr	r3, [pc, #280]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0203 	bic.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4943      	ldr	r1, [pc, #268]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fc fde4 	bl	8001404 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	e00a      	b.n	8004856 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004840:	f7fc fde0 	bl	8001404 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e06e      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	4b3a      	ldr	r3, [pc, #232]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 020c 	and.w	r2, r3, #12
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	429a      	cmp	r2, r3
 8004866:	d1eb      	bne.n	8004840 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	4b31      	ldr	r3, [pc, #196]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004880:	429a      	cmp	r2, r3
 8004882:	d208      	bcs.n	8004896 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b2e      	ldr	r3, [pc, #184]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	492b      	ldr	r1, [pc, #172]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004896:	4b29      	ldr	r3, [pc, #164]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d210      	bcs.n	80048c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a4:	4b25      	ldr	r3, [pc, #148]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 0207 	bic.w	r2, r3, #7
 80048ac:	4923      	ldr	r1, [pc, #140]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b4:	4b21      	ldr	r3, [pc, #132]	@ (800493c <HAL_RCC_ClockConfig+0x1ec>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e036      	b.n	8004934 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	4918      	ldr	r1, [pc, #96]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048f0:	4b13      	ldr	r3, [pc, #76]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4910      	ldr	r1, [pc, #64]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004904:	f000 f824 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <HAL_RCC_ClockConfig+0x1f0>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	091b      	lsrs	r3, r3, #4
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	490b      	ldr	r1, [pc, #44]	@ (8004944 <HAL_RCC_ClockConfig+0x1f4>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	4a09      	ldr	r2, [pc, #36]	@ (8004948 <HAL_RCC_ClockConfig+0x1f8>)
 8004922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004924:	4b09      	ldr	r3, [pc, #36]	@ (800494c <HAL_RCC_ClockConfig+0x1fc>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fc fd1b 	bl	8001364 <HAL_InitTick>
 800492e:	4603      	mov	r3, r0
 8004930:	72fb      	strb	r3, [r7, #11]

  return status;
 8004932:	7afb      	ldrb	r3, [r7, #11]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40022000 	.word	0x40022000
 8004940:	40021000 	.word	0x40021000
 8004944:	0800534c 	.word	0x0800534c
 8004948:	20000000 	.word	0x20000000
 800494c:	20000004 	.word	0x20000004

08004950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	@ 0x24
 8004954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	2300      	movs	r3, #0
 800495c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004968:	4b3b      	ldr	r3, [pc, #236]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x34>
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d121      	bne.n	80049c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d11e      	bne.n	80049c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004984:	4b34      	ldr	r3, [pc, #208]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004990:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	e005      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049ac:	4a2b      	ldr	r2, [pc, #172]	@ (8004a5c <HAL_RCC_GetSysClockFreq+0x10c>)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10d      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d102      	bne.n	80049ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049c8:	4b25      	ldr	r3, [pc, #148]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	e004      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d4:	4b23      	ldr	r3, [pc, #140]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x114>)
 80049d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d134      	bne.n	8004a48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049de:	4b1e      	ldr	r3, [pc, #120]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d003      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0xac>
 80049f4:	e005      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a60 <HAL_RCC_GetSysClockFreq+0x110>)
 80049f8:	617b      	str	r3, [r7, #20]
      break;
 80049fa:	e005      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049fc:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x114>)
 80049fe:	617b      	str	r3, [r7, #20]
      break;
 8004a00:	e002      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	617b      	str	r3, [r7, #20]
      break;
 8004a06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a08:	4b13      	ldr	r3, [pc, #76]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	3301      	adds	r3, #1
 8004a14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a16:	4b10      	ldr	r3, [pc, #64]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	fb03 f202 	mul.w	r2, r3, r2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	0e5b      	lsrs	r3, r3, #25
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a48:	69bb      	ldr	r3, [r7, #24]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	@ 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	0800535c 	.word	0x0800535c
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	007a1200 	.word	0x007a1200

08004a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a74:	4b2a      	ldr	r3, [pc, #168]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a80:	f7ff f9ee 	bl	8003e60 <HAL_PWREx_GetVoltageRange>
 8004a84:	6178      	str	r0, [r7, #20]
 8004a86:	e014      	b.n	8004ab2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a88:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a8c:	4a24      	ldr	r2, [pc, #144]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a94:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004aa0:	f7ff f9de 	bl	8003e60 <HAL_PWREx_GetVoltageRange>
 8004aa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab8:	d10b      	bne.n	8004ad2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b80      	cmp	r3, #128	@ 0x80
 8004abe:	d919      	bls.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ac4:	d902      	bls.n	8004acc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	e013      	b.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004acc:	2301      	movs	r3, #1
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	e010      	b.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b80      	cmp	r3, #128	@ 0x80
 8004ad6:	d902      	bls.n	8004ade <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ad8:	2303      	movs	r3, #3
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e00a      	b.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b80      	cmp	r3, #128	@ 0x80
 8004ae2:	d102      	bne.n	8004aea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	e004      	b.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b70      	cmp	r3, #112	@ 0x70
 8004aee:	d101      	bne.n	8004af4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004af0:	2301      	movs	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 0207 	bic.w	r2, r3, #7
 8004afc:	4909      	ldr	r1, [pc, #36]	@ (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b04:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d001      	beq.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40022000 	.word	0x40022000

08004b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b34:	2300      	movs	r3, #0
 8004b36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d031      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b4c:	d01a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004b52:	d814      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b5c:	d10f      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b6a:	e00c      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa22 	bl	8004fbc <RCCEx_PLLSAI1_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b7c:	e003      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	74fb      	strb	r3, [r7, #19]
      break;
 8004b82:	e000      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b8c:	4b51      	ldr	r3, [pc, #324]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9a:	494e      	ldr	r1, [pc, #312]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ba2:	e001      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 809e 	beq.w	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bba:	4b46      	ldr	r3, [pc, #280]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd0:	4b40      	ldr	r3, [pc, #256]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd4:	4a3f      	ldr	r2, [pc, #252]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be8:	2301      	movs	r3, #1
 8004bea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bec:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a39      	ldr	r2, [pc, #228]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf8:	f7fc fc04 	bl	8001404 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bfe:	e009      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c00:	f7fc fc00 	bl	8001404 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d902      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	74fb      	strb	r3, [r7, #19]
        break;
 8004c12:	e005      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c14:	4b30      	ldr	r3, [pc, #192]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ef      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d15a      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c26:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01e      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d019      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c42:	4b24      	ldr	r3, [pc, #144]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c4e:	4b21      	ldr	r3, [pc, #132]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c54:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c64:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c6e:	4a19      	ldr	r2, [pc, #100]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d016      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fc fbc0 	bl	8001404 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c86:	e00b      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c88:	f7fc fbbc 	bl	8001404 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d902      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c9e:	e006      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0ec      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc2:	4904      	ldr	r1, [pc, #16]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004cca:	e009      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	74bb      	strb	r3, [r7, #18]
 8004cd0:	e006      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004cd2:	bf00      	nop
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce0:	7c7b      	ldrb	r3, [r7, #17]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d105      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cea:	4a8c      	ldr	r2, [pc, #560]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cfe:	4b87      	ldr	r3, [pc, #540]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f023 0203 	bic.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	4983      	ldr	r1, [pc, #524]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d20:	4b7e      	ldr	r3, [pc, #504]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d26:	f023 020c 	bic.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	497b      	ldr	r1, [pc, #492]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d42:	4b76      	ldr	r3, [pc, #472]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	4972      	ldr	r1, [pc, #456]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d64:	4b6d      	ldr	r3, [pc, #436]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	496a      	ldr	r1, [pc, #424]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d86:	4b65      	ldr	r3, [pc, #404]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d94:	4961      	ldr	r1, [pc, #388]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004da8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	4959      	ldr	r1, [pc, #356]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dca:	4b54      	ldr	r3, [pc, #336]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd8:	4950      	ldr	r1, [pc, #320]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dec:	4b4b      	ldr	r3, [pc, #300]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfa:	4948      	ldr	r1, [pc, #288]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0e:	4b43      	ldr	r3, [pc, #268]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	493f      	ldr	r1, [pc, #252]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d028      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e30:	4b3a      	ldr	r3, [pc, #232]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3e:	4937      	ldr	r1, [pc, #220]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e4e:	d106      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e50:	4b32      	ldr	r3, [pc, #200]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a31      	ldr	r2, [pc, #196]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5a:	60d3      	str	r3, [r2, #12]
 8004e5c:	e011      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e66:	d10c      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f8a4 	bl	8004fbc <RCCEx_PLLSAI1_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d028      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e8e:	4b23      	ldr	r3, [pc, #140]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9c:	491f      	ldr	r1, [pc, #124]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eac:	d106      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eae:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb8:	60d3      	str	r3, [r2, #12]
 8004eba:	e011      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	2101      	movs	r1, #1
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f875 	bl	8004fbc <RCCEx_PLLSAI1_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed6:	7cfb      	ldrb	r3, [r7, #19]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02b      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eec:	4b0b      	ldr	r3, [pc, #44]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efa:	4908      	ldr	r1, [pc, #32]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f0a:	d109      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f0c:	4b03      	ldr	r3, [pc, #12]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a02      	ldr	r2, [pc, #8]	@ (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f16:	60d3      	str	r3, [r2, #12]
 8004f18:	e014      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f843 	bl	8004fbc <RCCEx_PLLSAI1_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01c      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f50:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5e:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	2102      	movs	r1, #2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f820 	bl	8004fbc <RCCEx_PLLSAI1_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f96:	4b08      	ldr	r3, [pc, #32]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa4:	4904      	ldr	r1, [pc, #16]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fac:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000

08004fbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fca:	4b74      	ldr	r3, [pc, #464]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d018      	beq.n	8005008 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004fd6:	4b71      	ldr	r3, [pc, #452]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0203 	and.w	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d10d      	bne.n	8005002 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fee:	4b6b      	ldr	r3, [pc, #428]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d047      	beq.n	8005092 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	e044      	b.n	8005092 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d018      	beq.n	8005042 <RCCEx_PLLSAI1_Config+0x86>
 8005010:	2b03      	cmp	r3, #3
 8005012:	d825      	bhi.n	8005060 <RCCEx_PLLSAI1_Config+0xa4>
 8005014:	2b01      	cmp	r3, #1
 8005016:	d002      	beq.n	800501e <RCCEx_PLLSAI1_Config+0x62>
 8005018:	2b02      	cmp	r3, #2
 800501a:	d009      	beq.n	8005030 <RCCEx_PLLSAI1_Config+0x74>
 800501c:	e020      	b.n	8005060 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800501e:	4b5f      	ldr	r3, [pc, #380]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11d      	bne.n	8005066 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502e:	e01a      	b.n	8005066 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005030:	4b5a      	ldr	r3, [pc, #360]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d116      	bne.n	800506a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005040:	e013      	b.n	800506a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005042:	4b56      	ldr	r3, [pc, #344]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800504e:	4b53      	ldr	r3, [pc, #332]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800505e:	e006      	b.n	800506e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e004      	b.n	8005070 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005066:	bf00      	nop
 8005068:	e002      	b.n	8005070 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800506a:	bf00      	nop
 800506c:	e000      	b.n	8005070 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800506e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10d      	bne.n	8005092 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005076:	4b49      	ldr	r3, [pc, #292]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	3b01      	subs	r3, #1
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	430b      	orrs	r3, r1
 800508c:	4943      	ldr	r1, [pc, #268]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 800508e:	4313      	orrs	r3, r2
 8005090:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d17c      	bne.n	8005192 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005098:	4b40      	ldr	r3, [pc, #256]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3f      	ldr	r2, [pc, #252]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 800509e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a4:	f7fc f9ae 	bl	8001404 <HAL_GetTick>
 80050a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050aa:	e009      	b.n	80050c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050ac:	f7fc f9aa 	bl	8001404 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	73fb      	strb	r3, [r7, #15]
        break;
 80050be:	e005      	b.n	80050cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050c0:	4b36      	ldr	r3, [pc, #216]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1ef      	bne.n	80050ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d15f      	bne.n	8005192 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d110      	bne.n	80050fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050d8:	4b30      	ldr	r3, [pc, #192]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80050e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	0211      	lsls	r1, r2, #8
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68d2      	ldr	r2, [r2, #12]
 80050ee:	06d2      	lsls	r2, r2, #27
 80050f0:	430a      	orrs	r2, r1
 80050f2:	492a      	ldr	r1, [pc, #168]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	610b      	str	r3, [r1, #16]
 80050f8:	e027      	b.n	800514a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d112      	bne.n	8005126 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005100:	4b26      	ldr	r3, [pc, #152]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005108:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6892      	ldr	r2, [r2, #8]
 8005110:	0211      	lsls	r1, r2, #8
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6912      	ldr	r2, [r2, #16]
 8005116:	0852      	lsrs	r2, r2, #1
 8005118:	3a01      	subs	r2, #1
 800511a:	0552      	lsls	r2, r2, #21
 800511c:	430a      	orrs	r2, r1
 800511e:	491f      	ldr	r1, [pc, #124]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005120:	4313      	orrs	r3, r2
 8005122:	610b      	str	r3, [r1, #16]
 8005124:	e011      	b.n	800514a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005126:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800512e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6892      	ldr	r2, [r2, #8]
 8005136:	0211      	lsls	r1, r2, #8
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6952      	ldr	r2, [r2, #20]
 800513c:	0852      	lsrs	r2, r2, #1
 800513e:	3a01      	subs	r2, #1
 8005140:	0652      	lsls	r2, r2, #25
 8005142:	430a      	orrs	r2, r1
 8005144:	4915      	ldr	r1, [pc, #84]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800514a:	4b14      	ldr	r3, [pc, #80]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a13      	ldr	r2, [pc, #76]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005150:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005154:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005156:	f7fc f955 	bl	8001404 <HAL_GetTick>
 800515a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800515c:	e009      	b.n	8005172 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800515e:	f7fc f951 	bl	8001404 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d902      	bls.n	8005172 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	73fb      	strb	r3, [r7, #15]
          break;
 8005170:	e005      	b.n	800517e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0ef      	beq.n	800515e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	4903      	ldr	r1, [pc, #12]	@ (800519c <RCCEx_PLLSAI1_Config+0x1e0>)
 800518e:	4313      	orrs	r3, r2
 8005190:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40021000 	.word	0x40021000

080051a0 <VESC_convertStatus4ToRaw>:

	return true;
}

bool VESC_convertStatus4ToRaw(VESC_RawFrame* out, const VESC_Status_4* in)
{
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_4;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2210      	movs	r2, #16
 80051b6:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	709a      	strb	r2, [r3, #2]
 80051be:	2200      	movs	r2, #0
 80051c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c4:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_4_DLEN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2208      	movs	r2, #8
 80051ca:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPFET], in->tempFet, VESC_SCALE_STATUS_4_TEMPFET);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80051d2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80051d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051de:	ee17 3a90 	vmov	r3, s15
 80051e2:	b219      	sxth	r1, r3
 80051e4:	2300      	movs	r3, #0
 80051e6:	3308      	adds	r3, #8
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	18d4      	adds	r4, r2, r3
 80051ec:	4608      	mov	r0, r1
 80051ee:	f000 f849 	bl	8005284 <_VESC_b16_swap>
 80051f2:	4603      	mov	r3, r0
 80051f4:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPMOTOR], in->tempMotor, VESC_SCALE_STATUS_4_TEMPMOTOR);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80051fc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005208:	ee17 3a90 	vmov	r3, s15
 800520c:	b219      	sxth	r1, r3
 800520e:	2302      	movs	r3, #2
 8005210:	3308      	adds	r3, #8
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	18d4      	adds	r4, r2, r3
 8005216:	4608      	mov	r0, r1
 8005218:	f000 f834 	bl	8005284 <_VESC_b16_swap>
 800521c:	4603      	mov	r3, r0
 800521e:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_CURRENTIN], in->currentIn, VESC_SCALE_STATUS_4_CURRENTIN);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	edd3 7a03 	vldr	s15, [r3, #12]
 8005226:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800522a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800522e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005232:	ee17 3a90 	vmov	r3, s15
 8005236:	b219      	sxth	r1, r3
 8005238:	2304      	movs	r3, #4
 800523a:	3308      	adds	r3, #8
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	18d4      	adds	r4, r2, r3
 8005240:	4608      	mov	r0, r1
 8005242:	f000 f81f 	bl	8005284 <_VESC_b16_swap>
 8005246:	4603      	mov	r3, r0
 8005248:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_PIDPOS], in->pidPos, VESC_SCALE_STATUS_4_PIDPOS);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005250:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005280 <VESC_convertStatus4ToRaw+0xe0>
 8005254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800525c:	ee17 3a90 	vmov	r3, s15
 8005260:	b219      	sxth	r1, r3
 8005262:	2306      	movs	r3, #6
 8005264:	3308      	adds	r3, #8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	18d4      	adds	r4, r2, r3
 800526a:	4608      	mov	r0, r1
 800526c:	f000 f80a 	bl	8005284 <_VESC_b16_swap>
 8005270:	4603      	mov	r3, r0
 8005272:	8023      	strh	r3, [r4, #0]

	return true;
 8005274:	2301      	movs	r3, #1
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop
 8005280:	42480000 	.word	0x42480000

08005284 <_VESC_b16_swap>:
#include <libVescCan/VESC_Endian.h>

int16_t _VESC_b16_swap(int16_t val)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	80fb      	strh	r3, [r7, #6]
	int16_t ret = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0x00FF) << 8;
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	b21a      	sxth	r2, r3
 8005298:	89fb      	ldrh	r3, [r7, #14]
 800529a:	4313      	orrs	r3, r2
 800529c:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0xFF00) >> 8;
 800529e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a2:	121b      	asrs	r3, r3, #8
 80052a4:	b21b      	sxth	r3, r3
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	b21a      	sxth	r2, r3
 80052aa:	89fb      	ldrh	r3, [r7, #14]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	81fb      	strh	r3, [r7, #14]
	return ret;
 80052b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <memset>:
 80052c0:	4402      	add	r2, r0
 80052c2:	4603      	mov	r3, r0
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d100      	bne.n	80052ca <memset+0xa>
 80052c8:	4770      	bx	lr
 80052ca:	f803 1b01 	strb.w	r1, [r3], #1
 80052ce:	e7f9      	b.n	80052c4 <memset+0x4>

080052d0 <__libc_init_array>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005308 <__libc_init_array+0x38>)
 80052d4:	4c0d      	ldr	r4, [pc, #52]	@ (800530c <__libc_init_array+0x3c>)
 80052d6:	1b64      	subs	r4, r4, r5
 80052d8:	10a4      	asrs	r4, r4, #2
 80052da:	2600      	movs	r6, #0
 80052dc:	42a6      	cmp	r6, r4
 80052de:	d109      	bne.n	80052f4 <__libc_init_array+0x24>
 80052e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005310 <__libc_init_array+0x40>)
 80052e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005314 <__libc_init_array+0x44>)
 80052e4:	f000 f826 	bl	8005334 <_init>
 80052e8:	1b64      	subs	r4, r4, r5
 80052ea:	10a4      	asrs	r4, r4, #2
 80052ec:	2600      	movs	r6, #0
 80052ee:	42a6      	cmp	r6, r4
 80052f0:	d105      	bne.n	80052fe <__libc_init_array+0x2e>
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f8:	4798      	blx	r3
 80052fa:	3601      	adds	r6, #1
 80052fc:	e7ee      	b.n	80052dc <__libc_init_array+0xc>
 80052fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005302:	4798      	blx	r3
 8005304:	3601      	adds	r6, #1
 8005306:	e7f2      	b.n	80052ee <__libc_init_array+0x1e>
 8005308:	0800538c 	.word	0x0800538c
 800530c:	0800538c 	.word	0x0800538c
 8005310:	0800538c 	.word	0x0800538c
 8005314:	08005390 	.word	0x08005390

08005318 <memcpy>:
 8005318:	440a      	add	r2, r1
 800531a:	4291      	cmp	r1, r2
 800531c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005320:	d100      	bne.n	8005324 <memcpy+0xc>
 8005322:	4770      	bx	lr
 8005324:	b510      	push	{r4, lr}
 8005326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800532a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800532e:	4291      	cmp	r1, r2
 8005330:	d1f9      	bne.n	8005326 <memcpy+0xe>
 8005332:	bd10      	pop	{r4, pc}

08005334 <_init>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr

08005340 <_fini>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr
