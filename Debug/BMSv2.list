
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004318  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080044e4  080044e4  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e4  080044e4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080044ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000010  080044fc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080044fc  00006104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c9c  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002928  00000000  00000000  00016cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00019608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b1  00000000  00000000  0001a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230bb  00000000  00000000  0001aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001103c  00000000  00000000  0003db1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca82a  00000000  00000000  0004eb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  001193c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800448c 	.word	0x0800448c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	0800448c 	.word	0x0800448c

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    BMS_1.bq_i2c = i2c;
 80001d4:	4a25      	ldr	r2, [pc, #148]	@ (800026c <BQ_Init+0xa0>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]

#ifdef USE_SCANNER
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_address, 3, 100);
 80001da:	2364      	movs	r3, #100	@ 0x64
 80001dc:	2203      	movs	r2, #3
 80001de:	2117      	movs	r1, #23
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f001 fd85 	bl	8001cf0 <HAL_I2C_IsDeviceReady>
 80001e6:	4603      	mov	r3, r0
 80001e8:	73fb      	strb	r3, [r7, #15]
	while (ret != HAL_OK)
 80001ea:	e00f      	b.n	800020c <BQ_Init+0x40>
	{
		ret = HAL_I2C_IsDeviceReady(i2c, bq_address, 3, 100);
 80001ec:	2364      	movs	r3, #100	@ 0x64
 80001ee:	2203      	movs	r2, #3
 80001f0:	2117      	movs	r1, #23
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f001 fd7c 	bl	8001cf0 <HAL_I2C_IsDeviceReady>
 80001f8:	4603      	mov	r3, r0
 80001fa:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1000);
 80001fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000200:	f000 ff84 	bl	800110c <HAL_Delay>
	#ifdef debug
		if(ret != HAL_OK){
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d000      	beq.n	800020c <BQ_Init+0x40>
			__asm("nop"); //insert breakpoint here
 800020a:	bf00      	nop
	while (ret != HAL_OK)
 800020c:	7bfb      	ldrb	r3, [r7, #15]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d1ec      	bne.n	80001ec <BQ_Init+0x20>
		}
	#endif
	}
#endif

    HAL_Delay(1500);
 8000212:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000216:	f000 ff79 	bl	800110c <HAL_Delay>
    BQAction_UpdateData(&BMS_1);
 800021a:	4814      	ldr	r0, [pc, #80]	@ (800026c <BQ_Init+0xa0>)
 800021c:	f000 fa4c 	bl	80006b8 <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(&BMS_1);
 8000220:	4812      	ldr	r0, [pc, #72]	@ (800026c <BQ_Init+0xa0>)
 8000222:	f000 fa16 	bl	8000652 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(&BMS_1, false);
 8000226:	2100      	movs	r1, #0
 8000228:	4810      	ldr	r0, [pc, #64]	@ (800026c <BQ_Init+0xa0>)
 800022a:	f000 f902 	bl	8000432 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(&BMS_1, false);
 800022e:	2100      	movs	r1, #0
 8000230:	480e      	ldr	r0, [pc, #56]	@ (800026c <BQ_Init+0xa0>)
 8000232:	f000 f914 	bl	800045e <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(&BMS_1, false);
 8000236:	2100      	movs	r1, #0
 8000238:	480c      	ldr	r0, [pc, #48]	@ (800026c <BQ_Init+0xa0>)
 800023a:	f000 f926 	bl	800048a <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(&BMS_1, true);
 800023e:	2101      	movs	r1, #1
 8000240:	480a      	ldr	r0, [pc, #40]	@ (800026c <BQ_Init+0xa0>)
 8000242:	f000 f938 	bl	80004b6 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(&BMS_1, true);
 8000246:	2101      	movs	r1, #1
 8000248:	4808      	ldr	r0, [pc, #32]	@ (800026c <BQ_Init+0xa0>)
 800024a:	f000 f94a 	bl	80004e2 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(&BMS_1, true);
 800024e:	2101      	movs	r1, #1
 8000250:	4806      	ldr	r0, [pc, #24]	@ (800026c <BQ_Init+0xa0>)
 8000252:	f000 f95c 	bl	800050e <BQAction_SetManufacturingLF>
    BQAction_SetLed(&BMS_1, false);
 8000256:	2100      	movs	r1, #0
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <BQ_Init+0xa0>)
 800025a:	f000 f8d4 	bl	8000406 <BQAction_SetLed>

    BQAction_UpdateData(&BMS_1);
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <BQ_Init+0xa0>)
 8000260:	f000 fa2a 	bl	80006b8 <BQAction_UpdateData>
}
 8000264:	bf00      	nop
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	2000002c 	.word	0x2000002c

08000270 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 800027c:	2344      	movs	r3, #68	@ 0x44
 800027e:	733b      	strb	r3, [r7, #12]
 8000280:	2302      	movs	r3, #2
 8000282:	737b      	strb	r3, [r7, #13]
 8000284:	887b      	ldrh	r3, [r7, #2]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	73bb      	strb	r3, [r7, #14]
 800028a:	887b      	ldrh	r3, [r7, #2]
 800028c:	0a1b      	lsrs	r3, r3, #8
 800028e:	b29b      	uxth	r3, r3
 8000290:	b2db      	uxtb	r3, r3
 8000292:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_address, buf, 4, 100);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6818      	ldr	r0, [r3, #0]
 8000298:	f107 020c 	add.w	r2, r7, #12
 800029c:	2364      	movs	r3, #100	@ 0x64
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	2304      	movs	r3, #4
 80002a2:	2117      	movs	r1, #23
 80002a4:	f001 fb16 	bl	80018d4 <HAL_I2C_Master_Transmit>
}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b092      	sub	sp, #72	@ 0x48
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	607a      	str	r2, [r7, #4]
 80002ba:	461a      	mov	r2, r3
 80002bc:	460b      	mov	r3, r1
 80002be:	817b      	strh	r3, [r7, #10]
 80002c0:	4613      	mov	r3, r2
 80002c2:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002c4:	2344      	movs	r3, #68	@ 0x44
 80002c6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002ca:	2302      	movs	r3, #2
 80002cc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002d0:	897b      	ldrh	r3, [r7, #10]
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002d8:	897b      	ldrh	r3, [r7, #10]
 80002da:	0a1b      	lsrs	r3, r3, #8
 80002dc:	b29b      	uxth	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_address, buf, 4, 100);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	6818      	ldr	r0, [r3, #0]
 80002e8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80002ec:	2364      	movs	r3, #100	@ 0x64
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2304      	movs	r3, #4
 80002f2:	2117      	movs	r1, #23
 80002f4:	f001 faee 	bl	80018d4 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 80002f8:	2344      	movs	r3, #68	@ 0x44
 80002fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80002fe:	7a7b      	ldrb	r3, [r7, #9]
 8000300:	3302      	adds	r3, #2
 8000302:	b2db      	uxtb	r3, r3
 8000304:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_address, addr, 2, 100);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000310:	2364      	movs	r3, #100	@ 0x64
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2302      	movs	r3, #2
 8000316:	2117      	movs	r1, #23
 8000318:	f001 fadc 	bl	80018d4 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 800031c:	2300      	movs	r3, #0
 800031e:	613b      	str	r3, [r7, #16]
 8000320:	f107 0314 	add.w	r3, r7, #20
 8000324:	221f      	movs	r2, #31
 8000326:	2100      	movs	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f004 f883 	bl	8004434 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, bq_address, result, 35, 100);
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	6818      	ldr	r0, [r3, #0]
 8000332:	f107 0210 	add.w	r2, r7, #16
 8000336:	2364      	movs	r3, #100	@ 0x64
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2323      	movs	r3, #35	@ 0x23
 800033c:	2117      	movs	r1, #23
 800033e:	f001 fbe1 	bl	8001b04 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000342:	2300      	movs	r3, #0
 8000344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000346:	e00c      	b.n	8000362 <BQ_ReadMABlockCommand+0xb2>
    {
        receive[i] = result[i + 3];
 8000348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800034a:	1cda      	adds	r2, r3, #3
 800034c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800034e:	6879      	ldr	r1, [r7, #4]
 8000350:	440b      	add	r3, r1
 8000352:	3240      	adds	r2, #64	@ 0x40
 8000354:	443a      	add	r2, r7
 8000356:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800035a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800035c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800035e:	3301      	adds	r3, #1
 8000360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000362:	7a7b      	ldrb	r3, [r7, #9]
 8000364:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000366:	429a      	cmp	r2, r3
 8000368:	dbee      	blt.n	8000348 <BQ_ReadMABlockCommand+0x98>
    }
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	3740      	adds	r7, #64	@ 0x40
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 8000380:	f107 020c 	add.w	r2, r7, #12
 8000384:	8879      	ldrh	r1, [r7, #2]
 8000386:	2302      	movs	r3, #2
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ff91 	bl	80002b0 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 8000392:	7b3b      	ldrb	r3, [r7, #12]
 8000394:	461a      	mov	r2, r3
 8000396:	89fb      	ldrh	r3, [r7, #14]
 8000398:	4313      	orrs	r3, r2
 800039a:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 800039c:	7b7b      	ldrb	r3, [r7, #13]
 800039e:	021b      	lsls	r3, r3, #8
 80003a0:	b21a      	sxth	r2, r3
 80003a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	b21b      	sxth	r3, r3
 80003aa:	81fb      	strh	r3, [r7, #14]

    return result;
 80003ac:	89fb      	ldrh	r3, [r7, #14]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b084      	sub	sp, #16
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	6078      	str	r0, [r7, #4]
 80003be:	460b      	mov	r3, r1
 80003c0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003c2:	f107 0208 	add.w	r2, r7, #8
 80003c6:	8879      	ldrh	r1, [r7, #2]
 80003c8:	2304      	movs	r3, #4
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f7ff ff70 	bl	80002b0 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 80003d4:	7a3b      	ldrb	r3, [r7, #8]
 80003d6:	461a      	mov	r2, r3
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	4313      	orrs	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 80003de:	7a7b      	ldrb	r3, [r7, #9]
 80003e0:	021b      	lsls	r3, r3, #8
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 80003e8:	7abb      	ldrb	r3, [r7, #10]
 80003ea:	041b      	lsls	r3, r3, #16
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	061b      	lsls	r3, r3, #24
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60fb      	str	r3, [r7, #12]

    return result;
 80003fc:	68fb      	ldr	r3, [r7, #12]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	460b      	mov	r3, r1
 8000410:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	799b      	ldrb	r3, [r3, #6]
 8000416:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800041a:	b2db      	uxtb	r3, r3
 800041c:	78fa      	ldrb	r2, [r7, #3]
 800041e:	429a      	cmp	r2, r3
 8000420:	d003      	beq.n	800042a <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 8000422:	212b      	movs	r1, #43	@ 0x2b
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff23 	bl	8000270 <BQ_WriteMABlockCommand>
    }
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7d1b      	ldrb	r3, [r3, #20]
 8000442:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	78fa      	ldrb	r2, [r7, #3]
 800044a:	429a      	cmp	r2, r3
 800044c:	d003      	beq.n	8000456 <BQAction_SetManufacturingAllFet+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 800044e:	2122      	movs	r1, #34	@ 0x22
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff0d 	bl	8000270 <BQ_WriteMABlockCommand>
    }
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	460b      	mov	r3, r1
 8000468:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7d5b      	ldrb	r3, [r3, #21]
 800046e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	429a      	cmp	r2, r3
 8000478:	d003      	beq.n	8000482 <BQAction_SetManufacturingFuse+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 800047a:	2126      	movs	r1, #38	@ 0x26
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f7ff fef7 	bl	8000270 <BQ_WriteMABlockCommand>
    }
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	7d5b      	ldrb	r3, [r3, #21]
 800049a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	78fa      	ldrb	r2, [r7, #3]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d003      	beq.n	80004ae <BQAction_SetCalibration+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004a6:	212d      	movs	r1, #45	@ 0x2d
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff fee1 	bl	8000270 <BQ_WriteMABlockCommand>
    }
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	460b      	mov	r3, r1
 80004c0:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	7d1b      	ldrb	r3, [r3, #20]
 80004c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	78fa      	ldrb	r2, [r7, #3]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d003      	beq.n	80004da <BQAction_SetManufacturingGauging+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 80004d2:	2121      	movs	r1, #33	@ 0x21
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff fecb 	bl	8000270 <BQ_WriteMABlockCommand>
    }
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	460b      	mov	r3, r1
 80004ec:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7d1b      	ldrb	r3, [r3, #20]
 80004f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	78fa      	ldrb	r2, [r7, #3]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d003      	beq.n	8000506 <BQAction_SetManufacturingPF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 80004fe:	2124      	movs	r1, #36	@ 0x24
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f7ff feb5 	bl	8000270 <BQ_WriteMABlockCommand>
    }
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7d1b      	ldrb	r3, [r3, #20]
 800051e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	78fa      	ldrb	r2, [r7, #3]
 8000526:	429a      	cmp	r2, r3
 8000528:	d003      	beq.n	8000532 <BQAction_SetManufacturingLF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 800052a:	2123      	movs	r1, #35	@ 0x23
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff fe9f 	bl	8000270 <BQ_WriteMABlockCommand>
    }
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <BQAction_EnableDischarging>:
/**
 * @brief enable discharge fet and disable the rest
 * @param none
 */
bool BQAction_EnableDischarging(BQ_data* BMS)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
    if (BQ_GetChargeMode(BMS) == DISCHARGE){
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f98a 	bl	800085c <BQ_GetChargeMode>
 8000548:	4603      	mov	r3, r0
 800054a:	2b02      	cmp	r3, #2
 800054c:	d101      	bne.n	8000552 <BQAction_EnableDischarging+0x18>
        return false;
 800054e:	2300      	movs	r3, #0
 8000550:	e043      	b.n	80005da <BQAction_EnableDischarging+0xa0>
    }

    // turn off unused fets
    if (BMS->BQ_manufacturingStatus.bits.chg){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7d1b      	ldrb	r3, [r3, #20]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d003      	beq.n	8000568 <BQAction_EnableDischarging+0x2e>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000560:	211f      	movs	r1, #31
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f7ff fe84 	bl	8000270 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pdsg){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7d5b      	ldrb	r3, [r3, #21]
 800056c:	f003 0320 	and.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d003      	beq.n	800057e <BQAction_EnableDischarging+0x44>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000576:	211c      	movs	r1, #28
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe79 	bl	8000270 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pchg){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	7d1b      	ldrb	r3, [r3, #20]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b00      	cmp	r3, #0
 800058a:	d003      	beq.n	8000594 <BQAction_EnableDischarging+0x5a>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 800058c:	211e      	movs	r1, #30
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fe6e 	bl	8000270 <BQ_WriteMABlockCommand>
    }

    // turn on discharge
    if (!BMS->BQ_manufacturingStatus.bits.dsg){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7d1b      	ldrb	r3, [r3, #20]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d103      	bne.n	80005aa <BQAction_EnableDischarging+0x70>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80005a2:	2120      	movs	r1, #32
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff fe63 	bl	8000270 <BQ_WriteMABlockCommand>
    }

    HAL_Delay(1500);
 80005aa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005ae:	f000 fdad 	bl	800110c <HAL_Delay>

    if (BQ_GetChargeMode(BMS) != CHARGE){
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f952 	bl	800085c <BQ_GetChargeMode>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d001      	beq.n	80005c2 <BQAction_EnableDischarging+0x88>
        return true;
 80005be:	2301      	movs	r3, #1
 80005c0:	e00b      	b.n	80005da <BQAction_EnableDischarging+0xa0>
    }else{
        // turn off discharge
        if (BMS->BQ_manufacturingStatus.bits.dsg){
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7d1b      	ldrb	r3, [r3, #20]
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <BQAction_EnableDischarging+0x9e>
            BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80005d0:	2120      	movs	r1, #32
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff fe4c 	bl	8000270 <BQ_WriteMABlockCommand>
        }
        return false;
 80005d8:	2300      	movs	r3, #0
    }
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <BQAction_DisableFets>:
/**
 * @brief disable all fets
 * @param none
 */
bool BQAction_DisableFets(BQ_data* BMS)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f8d8 	bl	80007a0 <BQAction_UpdateOpStatus>
    if (BMS->BQ_manufacturingStatus.bits.chg){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7d1b      	ldrb	r3, [r3, #20]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <BQAction_DisableFets+0x24>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 80005fe:	211f      	movs	r1, #31
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fe35 	bl	8000270 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.dsg){
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7d1b      	ldrb	r3, [r3, #20]
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <BQAction_DisableFets+0x3a>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000614:	2120      	movs	r1, #32
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff fe2a 	bl	8000270 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pchg){
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7d1b      	ldrb	r3, [r3, #20]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d003      	beq.n	8000632 <BQAction_DisableFets+0x50>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 800062a:	211e      	movs	r1, #30
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fe1f 	bl	8000270 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pdsg){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	7d5b      	ldrb	r3, [r3, #21]
 8000636:	f003 0320 	and.w	r3, r3, #32
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <BQAction_DisableFets+0x66>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000640:	211c      	movs	r1, #28
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff fe14 	bl	8000270 <BQ_WriteMABlockCommand>
    }

    return true;
 8000648:	2301      	movs	r3, #1
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b084      	sub	sp, #16
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f8a0 	bl	80007a0 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode(BMS);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f8bf 	bl	80007e4 <BQ_GetSecurityMode>
 8000666:	4603      	mov	r3, r0
 8000668:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 800066a:	e019      	b.n	80006a0 <BQAction_TryUnsealedDevice+0x4e>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 800066c:	f240 4114 	movw	r1, #1044	@ 0x414
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff fdfd 	bl	8000270 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067a:	f000 fd47 	bl	800110c <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 800067e:	f243 6172 	movw	r1, #13938	@ 0x3672
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff fdf4 	bl	8000270 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 8000688:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800068c:	f000 fd3e 	bl	800110c <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f885 	bl	80007a0 <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode(BMS);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f8a4 	bl	80007e4 <BQ_GetSecurityMode>
 800069c:	4603      	mov	r3, r0
 800069e:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0e2      	beq.n	800066c <BQAction_TryUnsealedDevice+0x1a>
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b03      	cmp	r3, #3
 80006aa:	d0df      	beq.n	800066c <BQAction_TryUnsealedDevice+0x1a>
    }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006c0:	2157      	movs	r1, #87	@ 0x57
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff fe56 	bl	8000374 <BQ_ReadCommandAsShort>
 80006c8:	4603      	mov	r3, r0
 80006ca:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	8bfa      	ldrh	r2, [r7, #30]
 80006d0:	829a      	strh	r2, [r3, #20]
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80006d2:	2155      	movs	r1, #85	@ 0x55
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe6e 	bl	80003b6 <BQ_ReadCommandAsInt>
 80006da:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	609a      	str	r2, [r3, #8]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80006e2:	2154      	movs	r1, #84	@ 0x54
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff fe66 	bl	80003b6 <BQ_ReadCommandAsInt>
 80006ea:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	605a      	str	r2, [r3, #4]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 80006f2:	2156      	movs	r1, #86	@ 0x56
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff fe5e 	bl	80003b6 <BQ_ReadCommandAsInt>
 80006fa:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	60da      	str	r2, [r3, #12]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a21      	ldr	r2, [pc, #132]	@ (800078c <BQAction_UpdateData+0xd4>)
 8000708:	7811      	ldrb	r1, [r2, #0]
 800070a:	2203      	movs	r2, #3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fa59 	bl	8000bc4 <I2CHelper_ReadRegisterAsShort>
 8000712:	4603      	mov	r3, r0
 8000714:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	89fa      	ldrh	r2, [r7, #14]
 800071a:	825a      	strh	r2, [r3, #18]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a1a      	ldr	r2, [pc, #104]	@ (800078c <BQAction_UpdateData+0xd4>)
 8000722:	7811      	ldrb	r1, [r2, #0]
 8000724:	2216      	movs	r2, #22
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fa4c 	bl	8000bc4 <I2CHelper_ReadRegisterAsShort>
 800072c:	4603      	mov	r3, r0
 800072e:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	89ba      	ldrh	r2, [r7, #12]
 8000734:	821a      	strh	r2, [r3, #16]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a14      	ldr	r2, [pc, #80]	@ (800078c <BQAction_UpdateData+0xd4>)
 800073c:	7811      	ldrb	r1, [r2, #0]
 800073e:	2248      	movs	r2, #72	@ 0x48
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fa64 	bl	8000c0e <I2CHelper_ReadRegisterAsChar>
 8000746:	4603      	mov	r3, r0
 8000748:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7afa      	ldrb	r2, [r7, #11]
 800074e:	759a      	strb	r2, [r3, #22]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1.all, 32);
 8000750:	2320      	movs	r3, #32
 8000752:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <BQAction_UpdateData+0xd8>)
 8000754:	2171      	movs	r1, #113	@ 0x71
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fdaa 	bl	80002b0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2.all, 16);
 800075c:	2310      	movs	r3, #16
 800075e:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <BQAction_UpdateData+0xdc>)
 8000760:	2172      	movs	r1, #114	@ 0x72
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fda4 	bl	80002b0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3.all, 18);
 8000768:	2312      	movs	r3, #18
 800076a:	4a0b      	ldr	r2, [pc, #44]	@ (8000798 <BQAction_UpdateData+0xe0>)
 800076c:	217b      	movs	r1, #123	@ 0x7b
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fd9e 	bl	80002b0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal.all, 32);
 8000774:	2320      	movs	r3, #32
 8000776:	4a09      	ldr	r2, [pc, #36]	@ (800079c <BQAction_UpdateData+0xe4>)
 8000778:	f24f 0181 	movw	r1, #61569	@ 0xf081
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fd97 	bl	80002b0 <BQ_ReadMABlockCommand>
//    BQ_ParseAllFlags(BMS, operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000000 	.word	0x20000000
 8000790:	20000044 	.word	0x20000044
 8000794:	20000064 	.word	0x20000064
 8000798:	20000074 	.word	0x20000074
 800079c:	20000086 	.word	0x20000086

080007a0 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1.all, 32);
 80007a8:	2320      	movs	r3, #32
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <BQAction_UpdateOpStatus+0x40>)
 80007ac:	2171      	movs	r1, #113	@ 0x71
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fd7e 	bl	80002b0 <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80007b4:	2154      	movs	r1, #84	@ 0x54
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fdfd 	bl	80003b6 <BQ_ReadCommandAsInt>
 80007bc:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	605a      	str	r2, [r3, #4]
//    BQ_ParseOperationStatus(BMS, op_status);
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80007c4:	2157      	movs	r1, #87	@ 0x57
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fdd4 	bl	8000374 <BQ_ReadCommandAsShort>
 80007cc:	4603      	mov	r3, r0
 80007ce:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	897a      	ldrh	r2, [r7, #10]
 80007d4:	829a      	strh	r2, [r3, #20]
//    BQ_ParseManufacturingStatus(BMS, man_status);
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000044 	.word	0x20000044

080007e4 <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(BQ_data* BMS)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    if (BMS->BQ_opStatus.bits.sec1 && BMS->BQ_opStatus.bits.sec0){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	795b      	ldrb	r3, [r3, #5]
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d008      	beq.n	800080c <BQ_GetSecurityMode+0x28>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	795b      	ldrb	r3, [r3, #5]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <BQ_GetSecurityMode+0x28>
        return SEALED;//11
 8000808:	2300      	movs	r3, #0
 800080a:	e020      	b.n	800084e <BQ_GetSecurityMode+0x6a>
    }else if (BMS->BQ_opStatus.bits.sec1 && !BMS->BQ_opStatus.bits.sec0){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	f003 0302 	and.w	r3, r3, #2
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d008      	beq.n	800082c <BQ_GetSecurityMode+0x48>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <BQ_GetSecurityMode+0x48>
        return UNSEALED;//10
 8000828:	2301      	movs	r3, #1
 800082a:	e010      	b.n	800084e <BQ_GetSecurityMode+0x6a>
    }else if (!BMS->BQ_opStatus.bits.sec1 && BMS->BQ_opStatus.bits.sec0){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	795b      	ldrb	r3, [r3, #5]
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d108      	bne.n	800084c <BQ_GetSecurityMode+0x68>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	795b      	ldrb	r3, [r3, #5]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <BQ_GetSecurityMode+0x68>
        return FULL_ACCESS;//01
 8000848:	2302      	movs	r3, #2
 800084a:	e000      	b.n	800084e <BQ_GetSecurityMode+0x6a>
    }else{
        return RESERVED;//00
 800084c:	2303      	movs	r3, #3
    }
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <BQ_GetChargeMode>:
/**
 * @brief get charge from BQ_opStatus
 * @return CHARGE, DISCHARGE or RELAX
 */
CHARGE_MODE BQ_GetChargeMode(BQ_data* BMS)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ff9b 	bl	80007a0 <BQAction_UpdateOpStatus>
    uint16_t packVoltage = BMS->BQ_daStatus1.sep.pack_voltage;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800086e:	81fb      	strh	r3, [r7, #14]
    uint16_t current = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <BQ_GetChargeMode+0xc4>)
 8000876:	7811      	ldrb	r1, [r2, #0]
 8000878:	220a      	movs	r2, #10
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f9a2 	bl	8000bc4 <I2CHelper_ReadRegisterAsShort>
 8000880:	4603      	mov	r3, r0
 8000882:	81bb      	strh	r3, [r7, #12]

    if (packVoltage > 1000 && BMS->BQ_opStatus.bits.chg && BMS->BQ_opStatus.bits.pchg && BMS->BQ_manufacturingStatus.bits.chg && current > 0 && current < 30000){
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800088a:	d91e      	bls.n	80008ca <BQ_GetChargeMode+0x6e>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d017      	beq.n	80008ca <BQ_GetChargeMode+0x6e>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d010      	beq.n	80008ca <BQ_GetChargeMode+0x6e>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7d1b      	ldrb	r3, [r3, #20]
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d009      	beq.n	80008ca <BQ_GetChargeMode+0x6e>
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d006      	beq.n	80008ca <BQ_GetChargeMode+0x6e>
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	f247 522f 	movw	r2, #29999	@ 0x752f
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d801      	bhi.n	80008ca <BQ_GetChargeMode+0x6e>
        return CHARGE;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e026      	b.n	8000918 <BQ_GetChargeMode+0xbc>
    }else if (packVoltage > 1000 && BMS->BQ_opStatus.bits.xdsg && BMS->BQ_opStatus.bits.dsg && BMS->BQ_manufacturingStatus.bits.dsg && 65535 - current > 0 && current > 30000){
 80008ca:	89fb      	ldrh	r3, [r7, #14]
 80008cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008d0:	d921      	bls.n	8000916 <BQ_GetChargeMode+0xba>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	795b      	ldrb	r3, [r3, #5]
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d01a      	beq.n	8000916 <BQ_GetChargeMode+0xba>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d013      	beq.n	8000916 <BQ_GetChargeMode+0xba>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7d1b      	ldrb	r3, [r3, #20]
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00c      	beq.n	8000916 <BQ_GetChargeMode+0xba>
 80008fc:	89bb      	ldrh	r3, [r7, #12]
 80008fe:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000902:	33ff      	adds	r3, #255	@ 0xff
 8000904:	2b00      	cmp	r3, #0
 8000906:	dd06      	ble.n	8000916 <BQ_GetChargeMode+0xba>
 8000908:	89bb      	ldrh	r3, [r7, #12]
 800090a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800090e:	4293      	cmp	r3, r2
 8000910:	d901      	bls.n	8000916 <BQ_GetChargeMode+0xba>
        return DISCHARGE;
 8000912:	2302      	movs	r3, #2
 8000914:	e000      	b.n	8000918 <BQ_GetChargeMode+0xbc>
    }else{
        return RELAX;
 8000916:	2300      	movs	r3, #0
    }
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000000 	.word	0x20000000

08000924 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b49      	ldr	r3, [pc, #292]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	4a48      	ldr	r2, [pc, #288]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000946:	4b46      	ldr	r3, [pc, #280]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	4b43      	ldr	r3, [pc, #268]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	4a42      	ldr	r2, [pc, #264]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800095c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095e:	4b40      	ldr	r3, [pc, #256]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000976:	4b3a      	ldr	r3, [pc, #232]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	4a36      	ldr	r2, [pc, #216]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098e:	4b34      	ldr	r3, [pc, #208]	@ (8000a60 <MX_GPIO_Init+0x13c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	21b0      	movs	r1, #176	@ 0xb0
 800099e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a2:	f000 feb1 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ac:	482d      	ldr	r0, [pc, #180]	@ (8000a64 <MX_GPIO_Init+0x140>)
 80009ae:	f000 feab 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4827      	ldr	r0, [pc, #156]	@ (8000a68 <MX_GPIO_Init+0x144>)
 80009ca:	f000 fd23 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f000 fd12 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80009f0:	23b0      	movs	r3, #176	@ 0xb0
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f000 fd03 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a0e:	2340      	movs	r3, #64	@ 0x40
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a24:	f000 fcf6 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <MX_GPIO_Init+0x140>)
 8000a42:	f000 fce7 	bl	8001414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	210c      	movs	r1, #12
 8000a4a:	2028      	movs	r0, #40	@ 0x28
 8000a4c:	f000 fc5d 	bl	800130a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a50:	2028      	movs	r0, #40	@ 0x28
 8000a52:	f000 fc76 	bl	8001342 <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	@ 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800

08000a6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae4 <MX_I2C1_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae8 <MX_I2C1_Init+0x7c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa6:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000aa8:	f000 fe78 	bl	800179c <HAL_I2C_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab2:	f000 f9fc 	bl	8000eae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000aba:	f002 fa83 	bl	8002fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac4:	f000 f9f3 	bl	8000eae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_I2C1_Init+0x74>)
 8000acc:	f002 fac5 	bl	800305a <HAL_I2CEx_ConfigDigitalFilter>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f000 f9ea 	bl	8000eae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000a8 	.word	0x200000a8
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	10909cec 	.word	0x10909cec

08000aec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0a2      	sub	sp, #136	@ 0x88
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2260      	movs	r2, #96	@ 0x60
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 fc91 	bl	8004434 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a28      	ldr	r2, [pc, #160]	@ (8000bb8 <HAL_I2C_MspInit+0xcc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d148      	bne.n	8000bae <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b1c:	2340      	movs	r3, #64	@ 0x40
 8000b1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f947 	bl	8003dbc <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b34:	f000 f9bb 	bl	8000eae <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b20      	ldr	r3, [pc, #128]	@ (8000bbc <HAL_I2C_MspInit+0xd0>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bbc <HAL_I2C_MspInit+0xd0>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <HAL_I2C_MspInit+0xd0>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b50:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b54:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b56:	2312      	movs	r3, #18
 8000b58:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b64:	2304      	movs	r3, #4
 8000b66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <HAL_I2C_MspInit+0xd4>)
 8000b72:	f000 fc4f 	bl	8001414 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_I2C_MspInit+0xd0>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7a:	4a10      	ldr	r2, [pc, #64]	@ (8000bbc <HAL_I2C_MspInit+0xd0>)
 8000b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <HAL_I2C_MspInit+0xd0>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	210a      	movs	r1, #10
 8000b92:	201f      	movs	r0, #31
 8000b94:	f000 fbb9 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b98:	201f      	movs	r0, #31
 8000b9a:	f000 fbd2 	bl	8001342 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2109      	movs	r1, #9
 8000ba2:	2020      	movs	r0, #32
 8000ba4:	f000 fbb1 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ba8:	2020      	movs	r0, #32
 8000baa:	f000 fbca 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bae:	bf00      	nop
 8000bb0:	3788      	adds	r7, #136	@ 0x88
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40005400 	.word	0x40005400
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48000400 	.word	0x48000400

08000bc4 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	78ba      	ldrb	r2, [r7, #2]
 8000bda:	78f9      	ldrb	r1, [r7, #3]
 8000bdc:	2002      	movs	r0, #2
 8000bde:	9000      	str	r0, [sp, #0]
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f82a 	bl	8000c3a <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000bea:	7b3b      	ldrb	r3, [r7, #12]
 8000bec:	461a      	mov	r2, r3
 8000bee:	89fb      	ldrh	r3, [r7, #14]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000bf4:	7b7b      	ldrb	r3, [r7, #13]
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	81fb      	strh	r3, [r7, #14]

	return result;
 8000c04:	89fb      	ldrh	r3, [r7, #14]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af02      	add	r7, sp, #8
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	460b      	mov	r3, r1
 8000c18:	70fb      	strb	r3, [r7, #3]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	78ba      	ldrb	r2, [r7, #2]
 8000c24:	78f9      	ldrb	r1, [r7, #3]
 8000c26:	2001      	movs	r0, #1
 8000c28:	9000      	str	r0, [sp, #0]
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f805 	bl	8000c3a <I2CHelper_ReadRegister>

	return buf[0];
 8000c30:	7b3b      	ldrb	r3, [r7, #12]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af02      	add	r7, sp, #8
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	72fb      	strb	r3, [r7, #11]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8000c4c:	7afb      	ldrb	r3, [r7, #11]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	b299      	uxth	r1, r3
 8000c54:	f107 020a 	add.w	r2, r7, #10
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 fe38 	bl	80018d4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	b299      	uxth	r1, r3
 8000c6c:	7e3b      	ldrb	r3, [r7, #24]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	2264      	movs	r2, #100	@ 0x64
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f000 ff44 	bl	8001b04 <HAL_I2C_Master_Receive>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c94:	d113      	bne.n	8000cbe <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	f083 0301 	eor.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000cb2:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000cb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x48>)
 8000cba:	f000 fd3d 	bl	8001738 <HAL_GPIO_TogglePin>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000fc 	.word	0x200000fc
 8000ccc:	48000400 	.word	0x48000400

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd6:	f000 f99d 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cda:	f000 f897 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cde:	f7ff fe21 	bl	8000924 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce2:	f7ff fec3 	bl	8000a6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_I2C_Init(&hi2c1);
//  HAL_I2C_MspInit(&hi2c1);
  status = false;
 8000ce6:	4b45      	ldr	r3, [pc, #276]	@ (8000dfc <main+0x12c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t current = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t percentage[2] = {0};
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	843b      	strh	r3, [r7, #32]
  uint16_t cells[6] = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	f8c3 2003 	str.w	r2, [r3, #3]
//  percentage[0] = I2CHelper_GetFirstAddress(&hi2c1);
  BQ_Init(&hi2c1);
 8000d1c:	4838      	ldr	r0, [pc, #224]	@ (8000e00 <main+0x130>)
 8000d1e:	f7ff fa55 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(&BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 8000d22:	463a      	mov	r2, r7
 8000d24:	2306      	movs	r3, #6
 8000d26:	2102      	movs	r1, #2
 8000d28:	4836      	ldr	r0, [pc, #216]	@ (8000e04 <main+0x134>)
 8000d2a:	f7ff fac1 	bl	80002b0 <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 8000d2e:	20c8      	movs	r0, #200	@ 0xc8
 8000d30:	f000 f9ec 	bl	800110c <HAL_Delay>
	  BQAction_UpdateData(&BMS_1);
 8000d34:	4833      	ldr	r0, [pc, #204]	@ (8000e04 <main+0x134>)
 8000d36:	f7ff fcbf 	bl	80006b8 <BQAction_UpdateData>
	  voltage = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 8000d3a:	4b32      	ldr	r3, [pc, #200]	@ (8000e04 <main+0x134>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a32      	ldr	r2, [pc, #200]	@ (8000e08 <main+0x138>)
 8000d40:	7811      	ldrb	r1, [r2, #0]
 8000d42:	2209      	movs	r2, #9
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff3d 	bl	8000bc4 <I2CHelper_ReadRegisterAsShort>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  current = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);//TODO fix 1A = -400
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e04 <main+0x134>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a2d      	ldr	r2, [pc, #180]	@ (8000e08 <main+0x138>)
 8000d54:	7811      	ldrb	r1, [r2, #0]
 8000d56:	220a      	movs	r2, #10
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff33 	bl	8000bc4 <I2CHelper_ReadRegisterAsShort>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  percentage[0] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 8000d62:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <main+0x134>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a28      	ldr	r2, [pc, #160]	@ (8000e08 <main+0x138>)
 8000d68:	7811      	ldrb	r1, [r2, #0]
 8000d6a:	220d      	movs	r2, #13
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff4e 	bl	8000c0e <I2CHelper_ReadRegisterAsChar>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 3020 	strb.w	r3, [r7, #32]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 8000d78:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <main+0x134>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a22      	ldr	r2, [pc, #136]	@ (8000e08 <main+0x138>)
 8000d7e:	7811      	ldrb	r1, [r2, #0]
 8000d80:	220e      	movs	r2, #14
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff43 	bl	8000c0e <I2CHelper_ReadRegisterAsChar>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1.sep.cell_voltage_1;
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e04 <main+0x134>)
 8000d90:	8b1b      	ldrh	r3, [r3, #24]
 8000d92:	82bb      	strh	r3, [r7, #20]
	  cells[1] = BMS_1.BQ_daStatus1.sep.cell_voltage_2;
 8000d94:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <main+0x134>)
 8000d96:	8b5b      	ldrh	r3, [r3, #26]
 8000d98:	82fb      	strh	r3, [r7, #22]
	  cells[2] = BMS_1.BQ_daStatus1.sep.cell_voltage_3;
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e04 <main+0x134>)
 8000d9c:	8b9b      	ldrh	r3, [r3, #28]
 8000d9e:	833b      	strh	r3, [r7, #24]
	  cells[3] = BMS_1.BQ_daStatus1.sep.cell_voltage_4;
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <main+0x134>)
 8000da2:	8bdb      	ldrh	r3, [r3, #30]
 8000da4:	837b      	strh	r3, [r7, #26]
	  cells[4] = BMS_1.BQ_daStatus3.sep.cell_voltage_5;
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <main+0x134>)
 8000da8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000dac:	83bb      	strh	r3, [r7, #28]
	  cells[5] = BMS_1.BQ_daStatus3.sep.cell_voltage_6;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <main+0x134>)
 8000db0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8000db4:	83fb      	strh	r3, [r7, #30]

	  // -----toggle fets--------
	  if(status){
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <main+0x12c>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <main+0xf6>
		  BQAction_EnableDischarging(&BMS_1);
 8000dbe:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <main+0x134>)
 8000dc0:	f7ff fbbb 	bl	800053a <BQAction_EnableDischarging>
 8000dc4:	e002      	b.n	8000dcc <main+0xfc>
	  }else{
		  BQAction_DisableFets(&BMS_1);
 8000dc6:	480f      	ldr	r0, [pc, #60]	@ (8000e04 <main+0x134>)
 8000dc8:	f7ff fc0b 	bl	80005e2 <BQAction_DisableFets>
	  }
	  fun[0] = BMS_1.BQ_opStatus.bits.pdsg;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <main+0x134>)
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	bf14      	ite	ne
 8000dda:	2301      	movne	r3, #1
 8000ddc:	2300      	moveq	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	733b      	strb	r3, [r7, #12]
	  fun[1] = BMS_1.BQ_opStatus.bits.xdsg;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <main+0x134>)
 8000de4:	795b      	ldrb	r3, [r3, #5]
 8000de6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bf14      	ite	ne
 8000df0:	2301      	movne	r3, #1
 8000df2:	2300      	moveq	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	737b      	strb	r3, [r7, #13]
	  HAL_Delay(200);
 8000df8:	e799      	b.n	8000d2e <main+0x5e>
 8000dfa:	bf00      	nop
 8000dfc:	200000fc 	.word	0x200000fc
 8000e00:	200000a8 	.word	0x200000a8
 8000e04:	2000002c 	.word	0x2000002c
 8000e08:	20000000 	.word	0x20000000

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b096      	sub	sp, #88	@ 0x58
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2244      	movs	r2, #68	@ 0x44
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fb0a 	bl	8004434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e32:	f002 f96d 	bl	8003110 <HAL_PWREx_ControlVoltageScaling>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e3c:	f000 f837 	bl	8000eae <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e52:	2302      	movs	r3, #2
 8000e54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 f9a4 	bl	80031bc <HAL_RCC_OscConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e7a:	f000 f818 	bl	8000eae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e82:	2303      	movs	r3, #3
 8000e84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2104      	movs	r1, #4
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fda4 	bl	80039e4 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ea2:	f000 f804 	bl	8000eae <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3758      	adds	r7, #88	@ 0x58
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb2:	b672      	cpsid	i
}
 8000eb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb6:	bf00      	nop
 8000eb8:	e7fd      	b.n	8000eb6 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f8b7 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <I2C1_EV_IRQHandler+0x10>)
 8000f6a:	f000 ffad 	bl	8001ec8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000a8 	.word	0x200000a8

08000f78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <I2C1_ER_IRQHandler+0x10>)
 8000f7e:	f000 ffbd 	bl	8001efc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000a8 	.word	0x200000a8

08000f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f94:	f000 fbea 	bl	800176c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	@ (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ff8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc4:	f7ff ffea 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <LoopForever+0xe>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800100c <LoopForever+0x16>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f003 fa29 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff2:	f7ff fe6d 	bl	8000cd0 <main>

08000ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff6:	e7fe      	b.n	8000ff6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001004:	080044ec 	.word	0x080044ec
  ldr r2, =_sbss
 8001008:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800100c:	20000104 	.word	0x20000104

08001010 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC1_IRQHandler>
	...

08001014 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <HAL_Init+0x3c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <HAL_Init+0x3c>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001028:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
 800102c:	f000 f962 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001030:	2000      	movs	r0, #0
 8001032:	f000 f80f 	bl	8001054 <HAL_InitTick>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	e001      	b.n	8001046 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001042:	f7ff ff3b 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40022000 	.word	0x40022000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <HAL_InitTick+0x6c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d023      	beq.n	80010b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_InitTick+0x70>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_InitTick+0x6c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f96d 	bl	800135e <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10f      	bne.n	80010aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d809      	bhi.n	80010a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f000 f937 	bl	800130a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109c:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <HAL_InitTick+0x74>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e004      	b.n	80010b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	e001      	b.n	80010b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000000c 	.word	0x2000000c
 80010c4:	20000004 	.word	0x20000004
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	20000100 	.word	0x20000100

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000100 	.word	0x20000100

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000000c 	.word	0x2000000c

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff3e 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff31 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d005      	beq.n	800139a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2204      	movs	r2, #4
 8001392:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e029      	b.n	80013ee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 020e 	bic.w	r2, r2, #14
 80013a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0201 	bic.w	r2, r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f003 021c 	and.w	r2, r3, #28
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f202 	lsl.w	r2, r1, r2
 80013cc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
    }
  }
  return status;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001406:	b2db      	uxtb	r3, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e154      	b.n	80016ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8146 	beq.w	80016c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x40>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 0201 	and.w	r2, r3, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d017      	beq.n	80014f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d123      	bne.n	8001546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0203 	and.w	r2, r3, #3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80a0 	beq.w	80016c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001588:	4b58      	ldr	r3, [pc, #352]	@ (80016ec <HAL_GPIO_Init+0x2d8>)
 800158a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158c:	4a57      	ldr	r2, [pc, #348]	@ (80016ec <HAL_GPIO_Init+0x2d8>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6613      	str	r3, [r2, #96]	@ 0x60
 8001594:	4b55      	ldr	r3, [pc, #340]	@ (80016ec <HAL_GPIO_Init+0x2d8>)
 8001596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a0:	4a53      	ldr	r2, [pc, #332]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ca:	d019      	beq.n	8001600 <HAL_GPIO_Init+0x1ec>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a49      	ldr	r2, [pc, #292]	@ (80016f4 <HAL_GPIO_Init+0x2e0>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d013      	beq.n	80015fc <HAL_GPIO_Init+0x1e8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a48      	ldr	r2, [pc, #288]	@ (80016f8 <HAL_GPIO_Init+0x2e4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00d      	beq.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a47      	ldr	r2, [pc, #284]	@ (80016fc <HAL_GPIO_Init+0x2e8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d007      	beq.n	80015f4 <HAL_GPIO_Init+0x1e0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a46      	ldr	r2, [pc, #280]	@ (8001700 <HAL_GPIO_Init+0x2ec>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_GPIO_Init+0x1dc>
 80015ec:	2304      	movs	r3, #4
 80015ee:	e008      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015f0:	2307      	movs	r3, #7
 80015f2:	e006      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015f4:	2303      	movs	r3, #3
 80015f6:	e004      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_GPIO_Init+0x1ee>
 8001600:	2300      	movs	r3, #0
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	f002 0203 	and.w	r2, r2, #3
 8001608:	0092      	lsls	r2, r2, #2
 800160a:	4093      	lsls	r3, r2
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001612:	4937      	ldr	r1, [pc, #220]	@ (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001620:	4b38      	ldr	r3, [pc, #224]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001644:	4a2f      	ldr	r2, [pc, #188]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800164a:	4b2e      	ldr	r3, [pc, #184]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800166e:	4a25      	ldr	r2, [pc, #148]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001698:	4a1a      	ldr	r2, [pc, #104]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c2:	4a10      	ldr	r2, [pc, #64]	@ (8001704 <HAL_GPIO_Init+0x2f0>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3301      	adds	r3, #1
 80016cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa22 f303 	lsr.w	r3, r2, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f47f aea3 	bne.w	8001424 <HAL_GPIO_Init+0x10>
  }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	48001000 	.word	0x48001000
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001724:	e002      	b.n	800172c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43d9      	mvns	r1, r3
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	400b      	ands	r3, r1
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	619a      	str	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fa7a 	bl	8000c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40010400 	.word	0x40010400

0800179c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e08d      	b.n	80018ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff f992 	bl	8000aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2224      	movs	r2, #36	@ 0x24
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0201 	bic.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e006      	b.n	8001824 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001822:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d108      	bne.n	800183e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	e007      	b.n	800184e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800184c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800185c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69d9      	ldr	r1, [r3, #28]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1a      	ldr	r2, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2220      	movs	r2, #32
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af02      	add	r7, sp, #8
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	461a      	mov	r2, r3
 80018e0:	460b      	mov	r3, r1
 80018e2:	817b      	strh	r3, [r7, #10]
 80018e4:	4613      	mov	r3, r2
 80018e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	f040 80fd 	bne.w	8001af0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_I2C_Master_Transmit+0x30>
 8001900:	2302      	movs	r3, #2
 8001902:	e0f6      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x21e>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800190c:	f7ff fbf2 	bl	80010f4 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2319      	movs	r3, #25
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f001 f871 	bl	8002a06 <I2C_WaitOnFlagUntilTimeout>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0e1      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2221      	movs	r2, #33	@ 0x21
 8001932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2210      	movs	r2, #16
 800193a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	893a      	ldrh	r2, [r7, #8]
 800194e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2200      	movs	r2, #0
 8001954:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	2bff      	cmp	r3, #255	@ 0xff
 800195e:	d906      	bls.n	800196e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	22ff      	movs	r2, #255	@ 0xff
 8001964:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001966:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e007      	b.n	800197e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001978:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800197c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	d024      	beq.n	80019d0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	8979      	ldrh	r1, [r7, #10]
 80019c2:	4b4e      	ldr	r3, [pc, #312]	@ (8001afc <HAL_I2C_Master_Transmit+0x228>)
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f001 fa6b 	bl	8002ea4 <I2C_TransferConfig>
 80019ce:	e066      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	8979      	ldrh	r1, [r7, #10]
 80019d8:	4b48      	ldr	r3, [pc, #288]	@ (8001afc <HAL_I2C_Master_Transmit+0x228>)
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f001 fa60 	bl	8002ea4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019e4:	e05b      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	6a39      	ldr	r1, [r7, #32]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f001 f864 	bl	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07b      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d034      	beq.n	8001a9e <HAL_I2C_Master_Transmit+0x1ca>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d130      	bne.n	8001a9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	2200      	movs	r2, #0
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 ffdd 	bl	8002a06 <I2C_WaitOnFlagUntilTimeout>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e04d      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2bff      	cmp	r3, #255	@ 0xff
 8001a5e:	d90e      	bls.n	8001a7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	22ff      	movs	r2, #255	@ 0xff
 8001a64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	8979      	ldrh	r1, [r7, #10]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f001 fa14 	bl	8002ea4 <I2C_TransferConfig>
 8001a7c:	e00f      	b.n	8001a9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	8979      	ldrh	r1, [r7, #10]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f001 fa03 	bl	8002ea4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d19e      	bne.n	80019e6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	6a39      	ldr	r1, [r7, #32]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f001 f84a 	bl	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e01a      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6859      	ldr	r1, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <HAL_I2C_Master_Transmit+0x22c>)
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	80002000 	.word	0x80002000
 8001b00:	fe00e800 	.word	0xfe00e800

08001b04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	817b      	strh	r3, [r7, #10]
 8001b14:	4613      	mov	r3, r2
 8001b16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	f040 80db 	bne.w	8001cdc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_I2C_Master_Receive+0x30>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e0d4      	b.n	8001cde <HAL_I2C_Master_Receive+0x1da>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b3c:	f7ff fada 	bl	80010f4 <HAL_GetTick>
 8001b40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2319      	movs	r3, #25
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 ff59 	bl	8002a06 <I2C_WaitOnFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0bf      	b.n	8001cde <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2222      	movs	r2, #34	@ 0x22
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	893a      	ldrh	r2, [r7, #8]
 8001b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2bff      	cmp	r3, #255	@ 0xff
 8001b8e:	d90e      	bls.n	8001bae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	8979      	ldrh	r1, [r7, #10]
 8001b9e:	4b52      	ldr	r3, [pc, #328]	@ (8001ce8 <HAL_I2C_Master_Receive+0x1e4>)
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f001 f97c 	bl	8002ea4 <I2C_TransferConfig>
 8001bac:	e06d      	b.n	8001c8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	8979      	ldrh	r1, [r7, #10]
 8001bc0:	4b49      	ldr	r3, [pc, #292]	@ (8001ce8 <HAL_I2C_Master_Receive+0x1e4>)
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f001 f96b 	bl	8002ea4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001bce:	e05c      	b.n	8001c8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	6a39      	ldr	r1, [r7, #32]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fff9 	bl	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e07c      	b.n	8001cde <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d034      	beq.n	8001c8a <HAL_I2C_Master_Receive+0x186>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d130      	bne.n	8001c8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2180      	movs	r1, #128	@ 0x80
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fee7 	bl	8002a06 <I2C_WaitOnFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e04d      	b.n	8001cde <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2bff      	cmp	r3, #255	@ 0xff
 8001c4a:	d90e      	bls.n	8001c6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	22ff      	movs	r2, #255	@ 0xff
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f001 f91e 	bl	8002ea4 <I2C_TransferConfig>
 8001c68:	e00f      	b.n	8001c8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	8979      	ldrh	r1, [r7, #10]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f001 f90d 	bl	8002ea4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d19d      	bne.n	8001bd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	6a39      	ldr	r1, [r7, #32]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 ff54 	bl	8002b46 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e01a      	b.n	8001cde <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2220      	movs	r2, #32
 8001cae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_I2C_Master_Receive+0x1e8>)
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	80002400 	.word	0x80002400
 8001cec:	fe00e800 	.word	0xfe00e800

08001cf0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	f040 80d6 	bne.w	8001ebe <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	e0cc      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2C_IsDeviceReady+0x44>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e0c5      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x1d0>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2224      	movs	r2, #36	@ 0x24
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_I2C_IsDeviceReady+0x72>
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d60:	e006      	b.n	8001d70 <HAL_I2C_IsDeviceReady+0x80>
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d6c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f9bd 	bl	80010f4 <HAL_GetTick>
 8001d7a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	bf0c      	ite	eq
 8001d8a:	2301      	moveq	r3, #1
 8001d8c:	2300      	movne	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b10      	cmp	r3, #16
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001da8:	e034      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d01a      	beq.n	8001de8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db2:	f7ff f99f 	bl	80010f4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d302      	bcc.n	8001dc8 <HAL_I2C_IsDeviceReady+0xd8>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10f      	bne.n	8001de8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e06b      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	bf0c      	ite	eq
 8001df6:	2301      	moveq	r3, #1
 8001df8:	2300      	movne	r3, #0
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_I2C_IsDeviceReady+0x130>
 8001e1a:	7fbb      	ldrb	r3, [r7, #30]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0c4      	beq.n	8001daa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d01a      	beq.n	8001e64 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2200      	movs	r2, #0
 8001e36:	2120      	movs	r1, #32
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fde4 	bl	8002a06 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e03b      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e02d      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 fdc9 	bl	8002a06 <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e020      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2210      	movs	r2, #16
 8001e84:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f63f af56 	bhi.w	8001d4a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f043 0220 	orr.w	r2, r3, #32
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	68f9      	ldr	r1, [r7, #12]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00f      	beq.n	8001f3e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f3c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00f      	beq.n	8001f68 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f043 0208 	orr.w	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f66:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00f      	beq.n	8001f92 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	f043 0202 	orr.w	r2, r3, #2
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f90:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 030b 	and.w	r3, r3, #11
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001fa2:	68f9      	ldr	r1, [r7, #12]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fbd5 	bl	8002754 <I2C_ITError>
  }
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70fb      	strb	r3, [r7, #3]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <I2C_Slave_ISR_IT+0x24>
 8002052:	2302      	movs	r3, #2
 8002054:	e0e2      	b.n	800221c <I2C_Slave_ISR_IT+0x1ea>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f9b5 	bl	80023e4 <I2C_ITSlaveCplt>
 800207a:	e0ca      	b.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d04b      	beq.n	800211e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800208c:	2b00      	cmp	r3, #0
 800208e:	d046      	beq.n	800211e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d128      	bne.n	80020ec <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b28      	cmp	r3, #40	@ 0x28
 80020a4:	d108      	bne.n	80020b8 <I2C_Slave_ISR_IT+0x86>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020ac:	d104      	bne.n	80020b8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fafb 	bl	80026ac <I2C_ITListenCplt>
 80020b6:	e031      	b.n	800211c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b29      	cmp	r3, #41	@ 0x29
 80020c2:	d10e      	bne.n	80020e2 <I2C_Slave_ISR_IT+0xb0>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020ca:	d00a      	beq.n	80020e2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2210      	movs	r2, #16
 80020d2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fc54 	bl	8002982 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f926 	bl	800232c <I2C_ITSlaveSeqCplt>
 80020e0:	e01c      	b.n	800211c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2210      	movs	r2, #16
 80020e8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80020ea:	e08f      	b.n	800220c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2210      	movs	r2, #16
 80020f2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	f043 0204 	orr.w	r2, r3, #4
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <I2C_Slave_ISR_IT+0xdc>
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800210c:	d17e      	bne.n	800220c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4619      	mov	r1, r3
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fb1d 	bl	8002754 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800211a:	e077      	b.n	800220c <I2C_Slave_ISR_IT+0x1da>
 800211c:	e076      	b.n	800220c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02f      	beq.n	8002188 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02a      	beq.n	8002188 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d018      	beq.n	800216e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d14b      	bne.n	8002210 <I2C_Slave_ISR_IT+0x1de>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800217e:	d047      	beq.n	8002210 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f8d3 	bl	800232c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002186:	e043      	b.n	8002210 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800219c:	6939      	ldr	r1, [r7, #16]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f840 	bl	8002224 <I2C_ITAddrCplt>
 80021a4:	e035      	b.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d030      	beq.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d02b      	beq.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021de:	b29b      	uxth	r3, r3
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80021f4:	e00d      	b.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021fc:	d002      	beq.n	8002204 <I2C_Slave_ISR_IT+0x1d2>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f891 	bl	800232c <I2C_ITSlaveSeqCplt>
 800220a:	e002      	b.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800220c:	bf00      	nop
 800220e:	e000      	b.n	8002212 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002210:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800223a:	2b28      	cmp	r3, #40	@ 0x28
 800223c:	d16a      	bne.n	8002314 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	b29b      	uxth	r3, r3
 8002258:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800225c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	b29b      	uxth	r3, r3
 8002266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	b29b      	uxth	r3, r3
 8002274:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002278:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d138      	bne.n	80022f4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002282:	897b      	ldrh	r3, [r7, #10]
 8002284:	09db      	lsrs	r3, r3, #7
 8002286:	b29a      	uxth	r2, r3
 8002288:	89bb      	ldrh	r3, [r7, #12]
 800228a:	4053      	eors	r3, r2
 800228c:	b29b      	uxth	r3, r3
 800228e:	f003 0306 	and.w	r3, r3, #6
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11c      	bne.n	80022d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002296:	897b      	ldrh	r3, [r7, #10]
 8002298:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d13b      	bne.n	8002324 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2208      	movs	r2, #8
 80022b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022c2:	89ba      	ldrh	r2, [r7, #12]
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fe86 	bl	8001fda <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80022ce:	e029      	b.n	8002324 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80022d0:	893b      	ldrh	r3, [r7, #8]
 80022d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fe15 	bl	8002f08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022e6:	89ba      	ldrh	r2, [r7, #12]
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fe74 	bl	8001fda <HAL_I2C_AddrCallback>
}
 80022f2:	e017      	b.n	8002324 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fe05 	bl	8002f08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002306:	89ba      	ldrh	r2, [r7, #12]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fe64 	bl	8001fda <HAL_I2C_AddrCallback>
}
 8002312:	e007      	b.n	8002324 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2208      	movs	r2, #8
 800231a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e00c      	b.n	800237a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002378:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b29      	cmp	r3, #41	@ 0x29
 8002384:	d112      	bne.n	80023ac <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2228      	movs	r2, #40	@ 0x28
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2221      	movs	r2, #33	@ 0x21
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002394:	2101      	movs	r1, #1
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fdb6 	bl	8002f08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fe04 	bl	8001fb2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80023aa:	e017      	b.n	80023dc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80023b6:	d111      	bne.n	80023dc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2228      	movs	r2, #40	@ 0x28
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2222      	movs	r2, #34	@ 0x22
 80023c4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023c6:	2102      	movs	r1, #2
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fd9d 	bl	8002f08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fdf5 	bl	8001fc6 <HAL_I2C_SlaveRxCpltCallback>
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002406:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2220      	movs	r2, #32
 800240e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002410:	7afb      	ldrb	r3, [r7, #11]
 8002412:	2b21      	cmp	r3, #33	@ 0x21
 8002414:	d002      	beq.n	800241c <I2C_ITSlaveCplt+0x38>
 8002416:	7afb      	ldrb	r3, [r7, #11]
 8002418:	2b29      	cmp	r3, #41	@ 0x29
 800241a:	d108      	bne.n	800242e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800241c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fd71 	bl	8002f08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2221      	movs	r2, #33	@ 0x21
 800242a:	631a      	str	r2, [r3, #48]	@ 0x30
 800242c:	e019      	b.n	8002462 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	2b22      	cmp	r3, #34	@ 0x22
 8002432:	d002      	beq.n	800243a <I2C_ITSlaveCplt+0x56>
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	2b2a      	cmp	r3, #42	@ 0x2a
 8002438:	d108      	bne.n	800244c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800243a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fd62 	bl	8002f08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2222      	movs	r2, #34	@ 0x22
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30
 800244a:	e00a      	b.n	8002462 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800244c:	7afb      	ldrb	r3, [r7, #11]
 800244e:	2b28      	cmp	r3, #40	@ 0x28
 8002450:	d107      	bne.n	8002462 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002452:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fd56 	bl	8002f08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002470:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b89      	ldr	r3, [pc, #548]	@ (80026a4 <I2C_ITSlaveCplt+0x2c0>)
 800247e:	400b      	ands	r3, r1
 8002480:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa7d 	bl	8002982 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d013      	beq.n	80024ba <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024a0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01f      	beq.n	80024ea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024b8:	e017      	b.n	80024ea <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d012      	beq.n	80024ea <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024d2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0304 	bic.w	r3, r3, #4
 80024fa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00c      	beq.n	8002536 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002544:	f043 0204 	orr.w	r2, r3, #4
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d049      	beq.n	80025ea <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800255c:	2b00      	cmp	r3, #0
 800255e:	d044      	beq.n	80025ea <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d128      	bne.n	80025bc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b28      	cmp	r3, #40	@ 0x28
 8002574:	d108      	bne.n	8002588 <I2C_ITSlaveCplt+0x1a4>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800257c:	d104      	bne.n	8002588 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800257e:	6979      	ldr	r1, [r7, #20]
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f893 	bl	80026ac <I2C_ITListenCplt>
 8002586:	e030      	b.n	80025ea <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b29      	cmp	r3, #41	@ 0x29
 8002592:	d10e      	bne.n	80025b2 <I2C_ITSlaveCplt+0x1ce>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800259a:	d00a      	beq.n	80025b2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f9ec 	bl	8002982 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff febe 	bl	800232c <I2C_ITSlaveSeqCplt>
 80025b0:	e01b      	b.n	80025ea <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2210      	movs	r2, #16
 80025b8:	61da      	str	r2, [r3, #28]
 80025ba:	e016      	b.n	80025ea <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2210      	movs	r2, #16
 80025c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <I2C_ITSlaveCplt+0x1fa>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025dc:	d105      	bne.n	80025ea <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8b5 	bl	8002754 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8a4 	bl	8002754 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b28      	cmp	r3, #40	@ 0x28
 8002616:	d141      	bne.n	800269c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f846 	bl	80026ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002620:	e03c      	b.n	800269c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800262a:	d014      	beq.n	8002656 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fe7d 	bl	800232c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1c      	ldr	r2, [pc, #112]	@ (80026a8 <I2C_ITSlaveCplt+0x2c4>)
 8002636:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fcd1 	bl	8001ff6 <HAL_I2C_ListenCpltCallback>
}
 8002654:	e022      	b.n	800269c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b22      	cmp	r3, #34	@ 0x22
 8002660:	d10e      	bne.n	8002680 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fca4 	bl	8001fc6 <HAL_I2C_SlaveRxCpltCallback>
}
 800267e:	e00d      	b.n	800269c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fc8b 	bl	8001fb2 <HAL_I2C_SlaveTxCpltCallback>
}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	fe00e800 	.word	0xfe00e800
 80026a8:	ffff0000 	.word	0xffff0000

080026ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a25      	ldr	r2, [pc, #148]	@ (8002750 <I2C_ITListenCplt+0xa4>)
 80026ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d022      	beq.n	8002728 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d012      	beq.n	8002728 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002720:	f043 0204 	orr.w	r2, r3, #4
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002728:	f248 0103 	movw	r1, #32771	@ 0x8003
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fbeb 	bl	8002f08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2210      	movs	r2, #16
 8002738:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fc57 	bl	8001ff6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	ffff0000 	.word	0xffff0000

08002754 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002764:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a6d      	ldr	r2, [pc, #436]	@ (8002928 <I2C_ITError+0x1d4>)
 8002772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b28      	cmp	r3, #40	@ 0x28
 800278a:	d005      	beq.n	8002798 <I2C_ITError+0x44>
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b29      	cmp	r3, #41	@ 0x29
 8002790:	d002      	beq.n	8002798 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b2a      	cmp	r3, #42	@ 0x2a
 8002796:	d10b      	bne.n	80027b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002798:	2103      	movs	r1, #3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fbb4 	bl	8002f08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2228      	movs	r2, #40	@ 0x28
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a60      	ldr	r2, [pc, #384]	@ (800292c <I2C_ITError+0x1d8>)
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ae:	e030      	b.n	8002812 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027b0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fba7 	bl	8002f08 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8e1 	bl	8002982 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b60      	cmp	r3, #96	@ 0x60
 80027ca:	d01f      	beq.n	800280c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d114      	bne.n	800280c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b10      	cmp	r3, #16
 80027ee:	d109      	bne.n	8002804 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2210      	movs	r2, #16
 80027f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	f043 0204 	orr.w	r2, r3, #4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2220      	movs	r2, #32
 800280a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281c:	2b00      	cmp	r3, #0
 800281e:	d039      	beq.n	8002894 <I2C_ITError+0x140>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b11      	cmp	r3, #17
 8002824:	d002      	beq.n	800282c <I2C_ITError+0xd8>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b21      	cmp	r3, #33	@ 0x21
 800282a:	d133      	bne.n	8002894 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002836:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800283a:	d107      	bne.n	800284c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800284a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fdd1 	bl	80013f8 <HAL_DMA_GetState>
 8002856:	4603      	mov	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d017      	beq.n	800288c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	4a33      	ldr	r2, [pc, #204]	@ (8002930 <I2C_ITError+0x1dc>)
 8002862:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fd80 	bl	8001376 <HAL_DMA_Abort_IT>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d04d      	beq.n	8002918 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002886:	4610      	mov	r0, r2
 8002888:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800288a:	e045      	b.n	8002918 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f851 	bl	8002934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002892:	e041      	b.n	8002918 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d039      	beq.n	8002910 <I2C_ITError+0x1bc>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b12      	cmp	r3, #18
 80028a0:	d002      	beq.n	80028a8 <I2C_ITError+0x154>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b22      	cmp	r3, #34	@ 0x22
 80028a6:	d133      	bne.n	8002910 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028b6:	d107      	bne.n	80028c8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe fd93 	bl	80013f8 <HAL_DMA_GetState>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d017      	beq.n	8002908 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028dc:	4a14      	ldr	r2, [pc, #80]	@ (8002930 <I2C_ITError+0x1dc>)
 80028de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fd42 	bl	8001376 <HAL_DMA_Abort_IT>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d011      	beq.n	800291c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002902:	4610      	mov	r0, r2
 8002904:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002906:	e009      	b.n	800291c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f813 	bl	8002934 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800290e:	e005      	b.n	800291c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f80f 	bl	8002934 <I2C_TreatErrorCallback>
  }
}
 8002916:	e002      	b.n	800291e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800291c:	bf00      	nop
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	ffff0000 	.word	0xffff0000
 800292c:	08002033 	.word	0x08002033
 8002930:	080029cb 	.word	0x080029cb

08002934 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b60      	cmp	r3, #96	@ 0x60
 8002946:	d10e      	bne.n	8002966 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fb5d 	bl	800201e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002964:	e009      	b.n	800297a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff fb48 	bl	800200a <HAL_I2C_ErrorCallback>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	d103      	bne.n	80029a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d007      	beq.n	80029be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	619a      	str	r2, [r3, #24]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e4:	2200      	movs	r2, #0
 80029e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f4:	2200      	movs	r2, #0
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff ff9b 	bl	8002934 <I2C_TreatErrorCallback>
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	603b      	str	r3, [r7, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a16:	e03b      	b.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	6839      	ldr	r1, [r7, #0]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f961 	bl	8002ce4 <I2C_IsErrorOccurred>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e041      	b.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d02d      	beq.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a34:	f7fe fb5e 	bl	80010f4 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d302      	bcc.n	8002a4a <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d122      	bne.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d113      	bne.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e00f      	b.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d0b4      	beq.n	8002a18 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac4:	e033      	b.n	8002b2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f90a 	bl	8002ce4 <I2C_IsErrorOccurred>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e031      	b.n	8002b3e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d025      	beq.n	8002b2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae2:	f7fe fb07 	bl	80010f4 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11a      	bne.n	8002b2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d013      	beq.n	8002b2e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e007      	b.n	8002b3e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d1c4      	bne.n	8002ac6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b52:	e02f      	b.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f8c3 	bl	8002ce4 <I2C_IsErrorOccurred>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e02d      	b.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b68:	f7fe fac4 	bl	80010f4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d302      	bcc.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11a      	bne.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d013      	beq.n	8002bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e007      	b.n	8002bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d1c8      	bne.n	8002b54 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002bdc:	e071      	b.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f87e 	bl	8002ce4 <I2C_IsErrorOccurred>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d13b      	bne.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002c00:	7dfb      	ldrb	r3, [r7, #23]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d138      	bne.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d105      	bne.n	8002c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d121      	bne.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2210      	movs	r2, #16
 8002c34:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2220      	movs	r2, #32
 8002c42:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ce0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002c50:	400b      	ands	r3, r1
 8002c52:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
 8002c70:	e002      	b.n	8002c78 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c78:	f7fe fa3c 	bl	80010f4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d119      	bne.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d00f      	beq.n	8002cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d002      	beq.n	8002cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d083      	beq.n	8002bde <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	fe00e800 	.word	0xfe00e800

08002ce4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	@ 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d068      	beq.n	8002de2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2210      	movs	r2, #16
 8002d16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d18:	e049      	b.n	8002dae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d045      	beq.n	8002dae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d22:	f7fe f9e7 	bl	80010f4 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d302      	bcc.n	8002d38 <I2C_IsErrorOccurred+0x54>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d13a      	bne.n	8002dae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d5a:	d121      	bne.n	8002da0 <I2C_IsErrorOccurred+0xbc>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d62:	d01d      	beq.n	8002da0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d01a      	beq.n	8002da0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d78:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d7a:	f7fe f9bb 	bl	80010f4 <HAL_GetTick>
 8002d7e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d80:	e00e      	b.n	8002da0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d82:	f7fe f9b7 	bl	80010f4 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b19      	cmp	r3, #25
 8002d8e:	d907      	bls.n	8002da0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d9e:	e006      	b.n	8002dae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d1e9      	bne.n	8002d82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d003      	beq.n	8002dc4 <I2C_IsErrorOccurred+0xe0>
 8002dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0aa      	beq.n	8002d1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01c      	beq.n	8002e92 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff fd92 	bl	8002982 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <I2C_IsErrorOccurred+0x1bc>)
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3728      	adds	r7, #40	@ 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	fe00e800 	.word	0xfe00e800

08002ea4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	817b      	strh	r3, [r7, #10]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ebc:	7a7b      	ldrb	r3, [r7, #9]
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ec4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ed2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	0d5b      	lsrs	r3, r3, #21
 8002ede:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <I2C_TransferConfig+0x60>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	ea02 0103 	and.w	r1, r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	03ff63ff 	.word	0x03ff63ff

08002f08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002f18:	887b      	ldrh	r3, [r7, #2]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00f      	beq.n	8002f42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002f28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f36:	2b28      	cmp	r3, #40	@ 0x28
 8002f38:	d003      	beq.n	8002f42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002f40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00f      	beq.n	8002f6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002f52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f60:	2b28      	cmp	r3, #40	@ 0x28
 8002f62:	d003      	beq.n	8002f6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002f6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da03      	bge.n	8002f7c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d103      	bne.n	8002f8a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d103      	bne.n	8002f98 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f98:	887b      	ldrh	r3, [r7, #2]
 8002f9a:	2b40      	cmp	r3, #64	@ 0x40
 8002f9c:	d103      	bne.n	8002fa6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d138      	bne.n	800304c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e032      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	@ 0x24
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003016:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b20      	cmp	r3, #32
 800306e:	d139      	bne.n	80030e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800307a:	2302      	movs	r3, #2
 800307c:	e033      	b.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2224      	movs	r2, #36	@ 0x24
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <HAL_PWREx_GetVoltageRange+0x18>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000

08003110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800311e:	d130      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003120:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800312c:	d038      	beq.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800312e:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003136:	4a1e      	ldr	r2, [pc, #120]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003138:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800313c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800313e:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2232      	movs	r2, #50	@ 0x32
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	0c9b      	lsrs	r3, r3, #18
 8003150:	3301      	adds	r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003154:	e002      	b.n	800315c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b01      	subs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800315c:	4b14      	ldr	r3, [pc, #80]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003168:	d102      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f2      	bne.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003170:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317c:	d110      	bne.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003182:	4b0b      	ldr	r3, [pc, #44]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800318e:	d007      	beq.n	80031a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003198:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800319e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40007000 	.word	0x40007000
 80031b4:	20000004 	.word	0x20000004
 80031b8:	431bde83 	.word	0x431bde83

080031bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f000 bc02 	b.w	80039d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d0:	4b96      	ldr	r3, [pc, #600]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 030c 	and.w	r3, r3, #12
 80031d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031da:	4b94      	ldr	r3, [pc, #592]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80e4 	beq.w	80033ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_RCC_OscConfig+0x4c>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	f040 808b 	bne.w	8003316 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b01      	cmp	r3, #1
 8003204:	f040 8087 	bne.w	8003316 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003208:	4b88      	ldr	r3, [pc, #544]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_OscConfig+0x64>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e3d9      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	4b81      	ldr	r3, [pc, #516]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d004      	beq.n	800323a <HAL_RCC_OscConfig+0x7e>
 8003230:	4b7e      	ldr	r3, [pc, #504]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003238:	e005      	b.n	8003246 <HAL_RCC_OscConfig+0x8a>
 800323a:	4b7c      	ldr	r3, [pc, #496]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003246:	4293      	cmp	r3, r2
 8003248:	d223      	bcs.n	8003292 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd54 	bl	8003cfc <RCC_SetFlashLatencyFromMSIRange>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e3ba      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800325e:	4b73      	ldr	r3, [pc, #460]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a72      	ldr	r2, [pc, #456]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b70      	ldr	r3, [pc, #448]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	496d      	ldr	r1, [pc, #436]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800327c:	4b6b      	ldr	r3, [pc, #428]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	4968      	ldr	r1, [pc, #416]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
 8003290:	e025      	b.n	80032de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003292:	4b66      	ldr	r3, [pc, #408]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a65      	ldr	r2, [pc, #404]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003298:	f043 0308 	orr.w	r3, r3, #8
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4b63      	ldr	r3, [pc, #396]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4960      	ldr	r1, [pc, #384]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b0:	4b5e      	ldr	r3, [pc, #376]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	495b      	ldr	r1, [pc, #364]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fd14 	bl	8003cfc <RCC_SetFlashLatencyFromMSIRange>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e37a      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032de:	f000 fc81 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b51      	ldr	r3, [pc, #324]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	4950      	ldr	r1, [pc, #320]	@ (8003430 <HAL_RCC_OscConfig+0x274>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a4e      	ldr	r2, [pc, #312]	@ (8003434 <HAL_RCC_OscConfig+0x278>)
 80032fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003438 <HAL_RCC_OscConfig+0x27c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fea6 	bl	8001054 <HAL_InitTick>
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d052      	beq.n	80033b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	e35e      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d032      	beq.n	8003384 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800331e:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a42      	ldr	r2, [pc, #264]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800332a:	f7fd fee3 	bl	80010f4 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003332:	f7fd fedf 	bl	80010f4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e347      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003344:	4b39      	ldr	r3, [pc, #228]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a35      	ldr	r2, [pc, #212]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003356:	f043 0308 	orr.w	r3, r3, #8
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b33      	ldr	r3, [pc, #204]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4930      	ldr	r1, [pc, #192]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800336e:	4b2f      	ldr	r3, [pc, #188]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	492b      	ldr	r1, [pc, #172]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
 8003382:	e01a      	b.n	80033ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003384:	4b29      	ldr	r3, [pc, #164]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a28      	ldr	r2, [pc, #160]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003390:	f7fd feb0 	bl	80010f4 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003398:	f7fd feac 	bl	80010f4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e314      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x1dc>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d073      	beq.n	80034ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x21c>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d10e      	bne.n	80033f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	4b14      	ldr	r3, [pc, #80]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d063      	beq.n	80034ac <HAL_RCC_OscConfig+0x2f0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d15f      	bne.n	80034ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e2f1      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x24c>
 80033fa:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0b      	ldr	r2, [pc, #44]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e025      	b.n	8003454 <HAL_RCC_OscConfig+0x298>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003410:	d114      	bne.n	800343c <HAL_RCC_OscConfig+0x280>
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a05      	ldr	r2, [pc, #20]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a02      	ldr	r2, [pc, #8]	@ (800342c <HAL_RCC_OscConfig+0x270>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e013      	b.n	8003454 <HAL_RCC_OscConfig+0x298>
 800342c:	40021000 	.word	0x40021000
 8003430:	080044a4 	.word	0x080044a4
 8003434:	20000004 	.word	0x20000004
 8003438:	20000008 	.word	0x20000008
 800343c:	4ba0      	ldr	r3, [pc, #640]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a9f      	ldr	r2, [pc, #636]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b9d      	ldr	r3, [pc, #628]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a9c      	ldr	r2, [pc, #624]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800344e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd fe4a 	bl	80010f4 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7fd fe46 	bl	80010f4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	@ 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e2ae      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4b92      	ldr	r3, [pc, #584]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x2a8>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd fe36 	bl	80010f4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348c:	f7fd fe32 	bl	80010f4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	@ 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e29a      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800349e:	4b88      	ldr	r3, [pc, #544]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x2d0>
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d060      	beq.n	800357c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d005      	beq.n	80034cc <HAL_RCC_OscConfig+0x310>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d119      	bne.n	80034fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d116      	bne.n	80034fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034cc:	4b7c      	ldr	r3, [pc, #496]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_OscConfig+0x328>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e277      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b76      	ldr	r3, [pc, #472]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	4973      	ldr	r1, [pc, #460]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f8:	e040      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d023      	beq.n	800354a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003502:	4b6f      	ldr	r3, [pc, #444]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6e      	ldr	r2, [pc, #440]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fdf1 	bl	80010f4 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fded 	bl	80010f4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e255      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003528:	4b65      	ldr	r3, [pc, #404]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b62      	ldr	r3, [pc, #392]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	495f      	ldr	r1, [pc, #380]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	e018      	b.n	800357c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b5d      	ldr	r3, [pc, #372]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a5c      	ldr	r2, [pc, #368]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd fdcd 	bl	80010f4 <HAL_GetTick>
 800355a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355e:	f7fd fdc9 	bl	80010f4 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e231      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003570:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d03c      	beq.n	8003602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01c      	beq.n	80035ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003590:	4b4b      	ldr	r3, [pc, #300]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003596:	4a4a      	ldr	r2, [pc, #296]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd fda8 	bl	80010f4 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd fda4 	bl	80010f4 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e20c      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ef      	beq.n	80035a8 <HAL_RCC_OscConfig+0x3ec>
 80035c8:	e01b      	b.n	8003602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ca:	4b3d      	ldr	r3, [pc, #244]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d0:	4a3b      	ldr	r2, [pc, #236]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035da:	f7fd fd8b 	bl	80010f4 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fd fd87 	bl	80010f4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e1ef      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f4:	4b32      	ldr	r3, [pc, #200]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80035f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1ef      	bne.n	80035e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a6 	beq.w	800375c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003610:	2300      	movs	r3, #0
 8003612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003614:	4b2a      	ldr	r3, [pc, #168]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003620:	4b27      	ldr	r3, [pc, #156]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	4a26      	ldr	r2, [pc, #152]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362a:	6593      	str	r3, [r2, #88]	@ 0x58
 800362c:	4b24      	ldr	r3, [pc, #144]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003638:	2301      	movs	r3, #1
 800363a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363c:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d118      	bne.n	800367a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003648:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1d      	ldr	r2, [pc, #116]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003654:	f7fd fd4e 	bl	80010f4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365c:	f7fd fd4a 	bl	80010f4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e1b2      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366e:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <HAL_RCC_OscConfig+0x508>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <HAL_RCC_OscConfig+0x4d8>
 8003682:	4b0f      	ldr	r3, [pc, #60]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003688:	4a0d      	ldr	r2, [pc, #52]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003692:	e029      	b.n	80036e8 <HAL_RCC_OscConfig+0x52c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b05      	cmp	r3, #5
 800369a:	d115      	bne.n	80036c8 <HAL_RCC_OscConfig+0x50c>
 800369c:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	4a07      	ldr	r2, [pc, #28]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ac:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	4a03      	ldr	r2, [pc, #12]	@ (80036c0 <HAL_RCC_OscConfig+0x504>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x52c>
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
 80036c8:	4b9a      	ldr	r3, [pc, #616]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	4a99      	ldr	r2, [pc, #612]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036d8:	4b96      	ldr	r3, [pc, #600]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	4a95      	ldr	r2, [pc, #596]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d016      	beq.n	800371e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd fd00 	bl	80010f4 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd fcfc 	bl	80010f4 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e162      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370e:	4b89      	ldr	r3, [pc, #548]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ed      	beq.n	80036f8 <HAL_RCC_OscConfig+0x53c>
 800371c:	e015      	b.n	800374a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fd fce9 	bl	80010f4 <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003724:	e00a      	b.n	800373c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003726:	f7fd fce5 	bl	80010f4 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003734:	4293      	cmp	r3, r2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e14b      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800373c:	4b7d      	ldr	r3, [pc, #500]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1ed      	bne.n	8003726 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003750:	4b78      	ldr	r3, [pc, #480]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003754:	4a77      	ldr	r2, [pc, #476]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d03c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01c      	beq.n	80037aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003770:	4b70      	ldr	r3, [pc, #448]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003776:	4a6f      	ldr	r2, [pc, #444]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fd fcb8 	bl	80010f4 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003788:	f7fd fcb4 	bl	80010f4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e11c      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379a:	4b66      	ldr	r3, [pc, #408]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 800379c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCC_OscConfig+0x5cc>
 80037a8:	e01b      	b.n	80037e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037aa:	4b62      	ldr	r3, [pc, #392]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b0:	4a60      	ldr	r2, [pc, #384]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ba:	f7fd fc9b 	bl	80010f4 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c2:	f7fd fc97 	bl	80010f4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0ff      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d4:	4b57      	ldr	r3, [pc, #348]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80037d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ef      	bne.n	80037c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80f3 	beq.w	80039d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	f040 80c9 	bne.w	8003988 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0203 	and.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003806:	429a      	cmp	r2, r3
 8003808:	d12c      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003814:	3b01      	subs	r3, #1
 8003816:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d123      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003826:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d11b      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003836:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003838:	429a      	cmp	r2, r3
 800383a:	d113      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	3b01      	subs	r3, #1
 800384a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d109      	bne.n	8003864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	3b01      	subs	r3, #1
 800385e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d06b      	beq.n	800393c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d062      	beq.n	8003930 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800386a:	4b32      	ldr	r3, [pc, #200]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0ac      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800387a:	4b2e      	ldr	r3, [pc, #184]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2d      	ldr	r2, [pc, #180]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003884:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003886:	f7fd fc35 	bl	80010f4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fd fc31 	bl	80010f4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e099      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f0      	bne.n	800388e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ac:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <HAL_RCC_OscConfig+0x77c>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038bc:	3a01      	subs	r2, #1
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	4311      	orrs	r1, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038c6:	0212      	lsls	r2, r2, #8
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	0552      	lsls	r2, r2, #21
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038da:	0852      	lsrs	r2, r2, #1
 80038dc:	3a01      	subs	r2, #1
 80038de:	0652      	lsls	r2, r2, #25
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038e6:	06d2      	lsls	r2, r2, #27
 80038e8:	430a      	orrs	r2, r1
 80038ea:	4912      	ldr	r1, [pc, #72]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038f0:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80038f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a0c      	ldr	r2, [pc, #48]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003906:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003908:	f7fd fbf4 	bl	80010f4 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fbf0 	bl	80010f4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e058      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003922:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <HAL_RCC_OscConfig+0x778>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800392e:	e050      	b.n	80039d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e04f      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
 8003934:	40021000 	.word	0x40021000
 8003938:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d144      	bne.n	80039d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003948:	4b24      	ldr	r3, [pc, #144]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a23      	ldr	r2, [pc, #140]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003954:	4b21      	ldr	r3, [pc, #132]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a20      	ldr	r2, [pc, #128]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800395e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003960:	f7fd fbc8 	bl	80010f4 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fbc4 	bl	80010f4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e02c      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b18      	ldr	r3, [pc, #96]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x7ac>
 8003986:	e024      	b.n	80039d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d01f      	beq.n	80039ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398e:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a12      	ldr	r2, [pc, #72]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 8003994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fd fbab 	bl	80010f4 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fd fba7 	bl	80010f4 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e00f      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b4:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f0      	bne.n	80039a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80039c0:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	4905      	ldr	r1, [pc, #20]	@ (80039dc <HAL_RCC_OscConfig+0x820>)
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_OscConfig+0x824>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	60cb      	str	r3, [r1, #12]
 80039cc:	e001      	b.n	80039d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	feeefffc 	.word	0xfeeefffc

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0e7      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b75      	ldr	r3, [pc, #468]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d910      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b72      	ldr	r3, [pc, #456]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0207 	bic.w	r2, r3, #7
 8003a0e:	4970      	ldr	r1, [pc, #448]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b6e      	ldr	r3, [pc, #440]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0cf      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	4b66      	ldr	r3, [pc, #408]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d908      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a44:	4b63      	ldr	r3, [pc, #396]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4960      	ldr	r1, [pc, #384]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d04c      	beq.n	8003afc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d107      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d121      	bne.n	8003aba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e0a6      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a82:	4b54      	ldr	r3, [pc, #336]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d115      	bne.n	8003aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e09a      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e08e      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e086      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b46      	ldr	r3, [pc, #280]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4943      	ldr	r1, [pc, #268]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003acc:	f7fd fb12 	bl	80010f4 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fd fb0e 	bl	80010f4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e06e      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d208      	bcs.n	8003b2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	492b      	ldr	r1, [pc, #172]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2a:	4b29      	ldr	r3, [pc, #164]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d210      	bcs.n	8003b5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b38:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 0207 	bic.w	r2, r3, #7
 8003b40:	4923      	ldr	r1, [pc, #140]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b48:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e036      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	4918      	ldr	r1, [pc, #96]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b84:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4910      	ldr	r1, [pc, #64]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b98:	f000 f824 	bl	8003be4 <HAL_RCC_GetSysClockFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	490b      	ldr	r1, [pc, #44]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1f4>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb4:	4a09      	ldr	r2, [pc, #36]	@ (8003bdc <HAL_RCC_ClockConfig+0x1f8>)
 8003bb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bb8:	4b09      	ldr	r3, [pc, #36]	@ (8003be0 <HAL_RCC_ClockConfig+0x1fc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd fa49 	bl	8001054 <HAL_InitTick>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40022000 	.word	0x40022000
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	080044a4 	.word	0x080044a4
 8003bdc:	20000004 	.word	0x20000004
 8003be0:	20000008 	.word	0x20000008

08003be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	@ 0x24
 8003be8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x34>
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d121      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d11e      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c18:	4b34      	ldr	r3, [pc, #208]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c24:	4b31      	ldr	r3, [pc, #196]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e005      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c34:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c40:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10d      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c5c:	4b25      	ldr	r3, [pc, #148]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	e004      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c68:	4b23      	ldr	r3, [pc, #140]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d134      	bne.n	8003cdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c72:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d003      	beq.n	8003c8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d003      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0xac>
 8003c88:	e005      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c8c:	617b      	str	r3, [r7, #20]
      break;
 8003c8e:	e005      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c90:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c92:	617b      	str	r3, [r7, #20]
      break;
 8003c94:	e002      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	617b      	str	r3, [r7, #20]
      break;
 8003c9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c9c:	4b13      	ldr	r3, [pc, #76]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003caa:	4b10      	ldr	r3, [pc, #64]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	fb03 f202 	mul.w	r2, r3, r2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	0e5b      	lsrs	r3, r3, #25
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3724      	adds	r7, #36	@ 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	080044b4 	.word	0x080044b4
 8003cf4:	00f42400 	.word	0x00f42400
 8003cf8:	007a1200 	.word	0x007a1200

08003cfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d08:	4b2a      	ldr	r3, [pc, #168]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d14:	f7ff f9ee 	bl	80030f4 <HAL_PWREx_GetVoltageRange>
 8003d18:	6178      	str	r0, [r7, #20]
 8003d1a:	e014      	b.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d1c:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d20:	4a24      	ldr	r2, [pc, #144]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d28:	4b22      	ldr	r3, [pc, #136]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d34:	f7ff f9de 	bl	80030f4 <HAL_PWREx_GetVoltageRange>
 8003d38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4c:	d10b      	bne.n	8003d66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b80      	cmp	r3, #128	@ 0x80
 8003d52:	d919      	bls.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d58:	d902      	bls.n	8003d60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	e013      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d60:	2301      	movs	r3, #1
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	e010      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b80      	cmp	r3, #128	@ 0x80
 8003d6a:	d902      	bls.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	e00a      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b80      	cmp	r3, #128	@ 0x80
 8003d76:	d102      	bne.n	8003d7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d78:	2302      	movs	r3, #2
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	e004      	b.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b70      	cmp	r3, #112	@ 0x70
 8003d82:	d101      	bne.n	8003d88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d84:	2301      	movs	r3, #1
 8003d86:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d88:	4b0b      	ldr	r3, [pc, #44]	@ (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 0207 	bic.w	r2, r3, #7
 8003d90:	4909      	ldr	r1, [pc, #36]	@ (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d98:	4b07      	ldr	r3, [pc, #28]	@ (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d001      	beq.n	8003daa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40022000 	.word	0x40022000

08003dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dc8:	2300      	movs	r3, #0
 8003dca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d031      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ddc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003de0:	d01a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003de2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003de6:	d814      	bhi.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003df2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4a5c      	ldr	r2, [pc, #368]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dfc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dfe:	e00c      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 fa22 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e10:	e003      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	74fb      	strb	r3, [r7, #19]
      break;
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e20:	4b51      	ldr	r3, [pc, #324]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	494e      	ldr	r1, [pc, #312]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e36:	e001      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 809e 	beq.w	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e4e:	4b46      	ldr	r3, [pc, #280]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b40      	ldr	r3, [pc, #256]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e68:	4a3f      	ldr	r2, [pc, #252]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e70:	4b3d      	ldr	r3, [pc, #244]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e80:	4b3a      	ldr	r3, [pc, #232]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a39      	ldr	r2, [pc, #228]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e8c:	f7fd f932 	bl	80010f4 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e92:	e009      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fd f92e 	bl	80010f4 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d902      	bls.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ea6:	e005      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ea8:	4b30      	ldr	r3, [pc, #192]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ef      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d15a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eba:	4b2b      	ldr	r3, [pc, #172]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d019      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ed6:	4b24      	ldr	r3, [pc, #144]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ee2:	4b21      	ldr	r3, [pc, #132]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003efe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f02:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d016      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd f8ee 	bl	80010f4 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fd f8ea 	bl	80010f4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d902      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	74fb      	strb	r3, [r7, #19]
            break;
 8003f32:	e006      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f34:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ec      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f48:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f56:	4904      	ldr	r1, [pc, #16]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f5e:	e009      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	74bb      	strb	r3, [r7, #18]
 8003f64:	e006      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f74:	7c7b      	ldrb	r3, [r7, #17]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d105      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	4a8c      	ldr	r2, [pc, #560]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f92:	4b87      	ldr	r3, [pc, #540]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f98:	f023 0203 	bic.w	r2, r3, #3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	4983      	ldr	r1, [pc, #524]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fb4:	4b7e      	ldr	r3, [pc, #504]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fba:	f023 020c 	bic.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	497b      	ldr	r1, [pc, #492]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd6:	4b76      	ldr	r3, [pc, #472]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	4972      	ldr	r1, [pc, #456]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff8:	4b6d      	ldr	r3, [pc, #436]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	496a      	ldr	r1, [pc, #424]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401a:	4b65      	ldr	r3, [pc, #404]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004028:	4961      	ldr	r1, [pc, #388]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800403c:	4b5c      	ldr	r3, [pc, #368]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	4959      	ldr	r1, [pc, #356]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800405e:	4b54      	ldr	r3, [pc, #336]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004064:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	4950      	ldr	r1, [pc, #320]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004080:	4b4b      	ldr	r3, [pc, #300]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408e:	4948      	ldr	r1, [pc, #288]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a2:	4b43      	ldr	r3, [pc, #268]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	493f      	ldr	r1, [pc, #252]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d028      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c4:	4b3a      	ldr	r3, [pc, #232]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d2:	4937      	ldr	r1, [pc, #220]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040e2:	d106      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e4:	4b32      	ldr	r3, [pc, #200]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a31      	ldr	r2, [pc, #196]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040ee:	60d3      	str	r3, [r2, #12]
 80040f0:	e011      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040fa:	d10c      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f8a4 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d028      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004122:	4b23      	ldr	r3, [pc, #140]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004128:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004130:	491f      	ldr	r1, [pc, #124]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004140:	d106      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	4a1a      	ldr	r2, [pc, #104]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004148:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414c:	60d3      	str	r3, [r2, #12]
 800414e:	e011      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004154:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004158:	d10c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f875 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02b      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418e:	4908      	ldr	r1, [pc, #32]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800419e:	d109      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a02      	ldr	r2, [pc, #8]	@ (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041aa:	60d3      	str	r3, [r2, #12]
 80041ac:	e014      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f843 	bl	8004250 <RCCEx_PLLSAI1_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01c      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e4:	4b19      	ldr	r3, [pc, #100]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	4916      	ldr	r1, [pc, #88]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004202:	d10c      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f820 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800422a:	4b08      	ldr	r3, [pc, #32]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004230:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004238:	4904      	ldr	r1, [pc, #16]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004240:	7cbb      	ldrb	r3, [r7, #18]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000

08004250 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800425e:	4b74      	ldr	r3, [pc, #464]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d018      	beq.n	800429c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800426a:	4b71      	ldr	r3, [pc, #452]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0203 	and.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d10d      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
       ||
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004282:	4b6b      	ldr	r3, [pc, #428]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
       ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d047      	beq.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e044      	b.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d018      	beq.n	80042d6 <RCCEx_PLLSAI1_Config+0x86>
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d825      	bhi.n	80042f4 <RCCEx_PLLSAI1_Config+0xa4>
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d002      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0x62>
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d009      	beq.n	80042c4 <RCCEx_PLLSAI1_Config+0x74>
 80042b0:	e020      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11d      	bne.n	80042fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c2:	e01a      	b.n	80042fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d116      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d4:	e013      	b.n	80042fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042d6:	4b56      	ldr	r3, [pc, #344]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042e2:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042f2:	e006      	b.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e004      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004302:	bf00      	nop
    }

    if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10d      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800430a:	4b49      	ldr	r3, [pc, #292]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6819      	ldr	r1, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	430b      	orrs	r3, r1
 8004320:	4943      	ldr	r1, [pc, #268]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d17c      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800432c:	4b40      	ldr	r3, [pc, #256]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3f      	ldr	r2, [pc, #252]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004332:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fc fedc 	bl	80010f4 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004340:	f7fc fed8 	bl	80010f4 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
        break;
 8004352:	e005      	b.n	8004360 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004354:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ef      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d15f      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d110      	bne.n	800438e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436c:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004374:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6892      	ldr	r2, [r2, #8]
 800437c:	0211      	lsls	r1, r2, #8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68d2      	ldr	r2, [r2, #12]
 8004382:	06d2      	lsls	r2, r2, #27
 8004384:	430a      	orrs	r2, r1
 8004386:	492a      	ldr	r1, [pc, #168]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	610b      	str	r3, [r1, #16]
 800438c:	e027      	b.n	80043de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d112      	bne.n	80043ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004394:	4b26      	ldr	r3, [pc, #152]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800439c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6892      	ldr	r2, [r2, #8]
 80043a4:	0211      	lsls	r1, r2, #8
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6912      	ldr	r2, [r2, #16]
 80043aa:	0852      	lsrs	r2, r2, #1
 80043ac:	3a01      	subs	r2, #1
 80043ae:	0552      	lsls	r2, r2, #21
 80043b0:	430a      	orrs	r2, r1
 80043b2:	491f      	ldr	r1, [pc, #124]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	610b      	str	r3, [r1, #16]
 80043b8:	e011      	b.n	80043de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80043c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6892      	ldr	r2, [r2, #8]
 80043ca:	0211      	lsls	r1, r2, #8
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6952      	ldr	r2, [r2, #20]
 80043d0:	0852      	lsrs	r2, r2, #1
 80043d2:	3a01      	subs	r2, #1
 80043d4:	0652      	lsls	r2, r2, #25
 80043d6:	430a      	orrs	r2, r1
 80043d8:	4915      	ldr	r1, [pc, #84]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043de:	4b14      	ldr	r3, [pc, #80]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a13      	ldr	r2, [pc, #76]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fc fe83 	bl	80010f4 <HAL_GetTick>
 80043ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043f0:	e009      	b.n	8004406 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f2:	f7fc fe7f 	bl	80010f4 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d902      	bls.n	8004406 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	73fb      	strb	r3, [r7, #15]
          break;
 8004404:	e005      	b.n	8004412 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004406:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0ef      	beq.n	80043f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004418:	4b05      	ldr	r3, [pc, #20]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	4903      	ldr	r1, [pc, #12]	@ (8004430 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000

08004434 <memset>:
 8004434:	4402      	add	r2, r0
 8004436:	4603      	mov	r3, r0
 8004438:	4293      	cmp	r3, r2
 800443a:	d100      	bne.n	800443e <memset+0xa>
 800443c:	4770      	bx	lr
 800443e:	f803 1b01 	strb.w	r1, [r3], #1
 8004442:	e7f9      	b.n	8004438 <memset+0x4>

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	4d0d      	ldr	r5, [pc, #52]	@ (800447c <__libc_init_array+0x38>)
 8004448:	4c0d      	ldr	r4, [pc, #52]	@ (8004480 <__libc_init_array+0x3c>)
 800444a:	1b64      	subs	r4, r4, r5
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	2600      	movs	r6, #0
 8004450:	42a6      	cmp	r6, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	4d0b      	ldr	r5, [pc, #44]	@ (8004484 <__libc_init_array+0x40>)
 8004456:	4c0c      	ldr	r4, [pc, #48]	@ (8004488 <__libc_init_array+0x44>)
 8004458:	f000 f818 	bl	800448c <_init>
 800445c:	1b64      	subs	r4, r4, r5
 800445e:	10a4      	asrs	r4, r4, #2
 8004460:	2600      	movs	r6, #0
 8004462:	42a6      	cmp	r6, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	f855 3b04 	ldr.w	r3, [r5], #4
 800446c:	4798      	blx	r3
 800446e:	3601      	adds	r6, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	f855 3b04 	ldr.w	r3, [r5], #4
 8004476:	4798      	blx	r3
 8004478:	3601      	adds	r6, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	080044e4 	.word	0x080044e4
 8004480:	080044e4 	.word	0x080044e4
 8004484:	080044e4 	.word	0x080044e4
 8004488:	080044e8 	.word	0x080044e8

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
