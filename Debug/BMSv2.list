
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005580  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800570c  0800570c  0000670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800574c  0800574c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800574c  0800574c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800574c  0800574c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005754  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000010  08005764  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005764  0000730c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015070  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003200  00000000  00000000  0001c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab8  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024663  00000000  00000000  00020ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001497b  00000000  00000000  00045203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf7d2  00000000  00000000  00059b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  00129394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012cb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080056f4 	.word	0x080056f4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080056f4 	.word	0x080056f4

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
BQ_data* BMS;
uint8_t control = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	72fb      	strb	r3, [r7, #11]
#ifdef USED_I2C1
	if(i2c == &hi2c1){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4a29      	ldr	r2, [pc, #164]	@ (8000280 <BQ_Init+0xb4>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d101      	bne.n	80001e4 <BQ_Init+0x18>
		BMS = &BMS_1;
 80001e0:	4b28      	ldr	r3, [pc, #160]	@ (8000284 <BQ_Init+0xb8>)
 80001e2:	60fb      	str	r3, [r7, #12]
	if(i2c == &hi2c2){
		BMS = &BMS_2;
	}
#endif
#ifdef USED_I2C3
	if(i2c == &hi2c3){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	4a28      	ldr	r2, [pc, #160]	@ (8000288 <BQ_Init+0xbc>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d101      	bne.n	80001f0 <BQ_Init+0x24>
		BMS = &BMS_3;
 80001ec:	4b27      	ldr	r3, [pc, #156]	@ (800028c <BQ_Init+0xc0>)
 80001ee:	60fb      	str	r3, [r7, #12]
	}
#endif
    BMS->bq_i2c = i2c;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	687a      	ldr	r2, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
    BMS->bq_deviceAddress = Address;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2217      	movs	r2, #23
 80001fa:	711a      	strb	r2, [r3, #4]
#ifdef USE_SCANNER
	I2CHelper_CheckAddress(BMS);
 80001fc:	68f8      	ldr	r0, [r7, #12]
 80001fe:	f000 fe72 	bl	8000ee6 <I2CHelper_CheckAddress>
	while (BMS->connection != CONNECTED)
 8000202:	e00b      	b.n	800021c <BQ_Init+0x50>
	{
		I2CHelper_CheckAddress(BMS);
 8000204:	68f8      	ldr	r0, [r7, #12]
 8000206:	f000 fe6e 	bl	8000ee6 <I2CHelper_CheckAddress>
		HAL_Delay(20);
 800020a:	2014      	movs	r0, #20
 800020c:	f001 f9ee 	bl	80015ec <HAL_Delay>
		control ++;
 8000210:	7afb      	ldrb	r3, [r7, #11]
 8000212:	3301      	adds	r3, #1
 8000214:	72fb      	strb	r3, [r7, #11]
		if(control >= 5){
 8000216:	7afb      	ldrb	r3, [r7, #11]
 8000218:	2b04      	cmp	r3, #4
 800021a:	d82d      	bhi.n	8000278 <BQ_Init+0xac>
	while (BMS->connection != CONNECTED)
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	7d1b      	ldrb	r3, [r3, #20]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d1ef      	bne.n	8000204 <BQ_Init+0x38>
			return;
		}
	}
#endif

    HAL_Delay(1500);
 8000224:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000228:	f001 f9e0 	bl	80015ec <HAL_Delay>
    BQAction_UpdateData(BMS);
 800022c:	68f8      	ldr	r0, [r7, #12]
 800022e:	f000 f9d6 	bl	80005de <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS);
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f000 f99f 	bl	8000576 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS, false);
 8000238:	2100      	movs	r1, #0
 800023a:	68f8      	ldr	r0, [r7, #12]
 800023c:	f000 f911 	bl	8000462 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS, false);
 8000240:	2100      	movs	r1, #0
 8000242:	68f8      	ldr	r0, [r7, #12]
 8000244:	f000 f924 	bl	8000490 <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS, false);
 8000248:	2100      	movs	r1, #0
 800024a:	68f8      	ldr	r0, [r7, #12]
 800024c:	f000 f937 	bl	80004be <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS, true);
 8000250:	2101      	movs	r1, #1
 8000252:	68f8      	ldr	r0, [r7, #12]
 8000254:	f000 f94a 	bl	80004ec <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS, true);
 8000258:	2101      	movs	r1, #1
 800025a:	68f8      	ldr	r0, [r7, #12]
 800025c:	f000 f95d 	bl	800051a <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS, true);
 8000260:	2101      	movs	r1, #1
 8000262:	68f8      	ldr	r0, [r7, #12]
 8000264:	f000 f970 	bl	8000548 <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS, false);
 8000268:	2100      	movs	r1, #0
 800026a:	68f8      	ldr	r0, [r7, #12]
 800026c:	f000 f8e3 	bl	8000436 <BQAction_SetLed>

    BQAction_UpdateData(BMS);
 8000270:	68f8      	ldr	r0, [r7, #12]
 8000272:	f000 f9b4 	bl	80005de <BQAction_UpdateData>
 8000276:	e000      	b.n	800027a <BQ_Init+0xae>
			return;
 8000278:	bf00      	nop
}
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000098 	.word	0x20000098
 8000284:	20000194 	.word	0x20000194
 8000288:	20000140 	.word	0x20000140
 800028c:	20000224 	.word	0x20000224

08000290 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af02      	add	r7, sp, #8
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 800029c:	2344      	movs	r3, #68	@ 0x44
 800029e:	733b      	strb	r3, [r7, #12]
 80002a0:	2302      	movs	r3, #2
 80002a2:	737b      	strb	r3, [r7, #13]
 80002a4:	887b      	ldrh	r3, [r7, #2]
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	73bb      	strb	r3, [r7, #14]
 80002aa:	887b      	ldrh	r3, [r7, #2]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	6818      	ldr	r0, [r3, #0]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	791b      	ldrb	r3, [r3, #4]
 80002bc:	4619      	mov	r1, r3
 80002be:	f107 020c 	add.w	r2, r7, #12
 80002c2:	2364      	movs	r3, #100	@ 0x64
 80002c4:	9300      	str	r3, [sp, #0]
 80002c6:	2304      	movs	r3, #4
 80002c8:	f002 faac 	bl	8002824 <HAL_I2C_Master_Transmit>
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b092      	sub	sp, #72	@ 0x48
 80002d8:	af02      	add	r7, sp, #8
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	607a      	str	r2, [r7, #4]
 80002de:	461a      	mov	r2, r3
 80002e0:	460b      	mov	r3, r1
 80002e2:	817b      	strh	r3, [r7, #10]
 80002e4:	4613      	mov	r3, r2
 80002e6:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002e8:	2344      	movs	r3, #68	@ 0x44
 80002ea:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002ee:	2302      	movs	r3, #2
 80002f0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002f4:	897b      	ldrh	r3, [r7, #10]
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002fc:	897b      	ldrh	r3, [r7, #10]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	b29b      	uxth	r3, r3
 8000302:	b2db      	uxtb	r3, r3
 8000304:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	4619      	mov	r1, r3
 8000312:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000316:	2364      	movs	r3, #100	@ 0x64
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2304      	movs	r3, #4
 800031c:	f002 fa82 	bl	8002824 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 8000320:	2344      	movs	r3, #68	@ 0x44
 8000322:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000326:	7a7b      	ldrb	r3, [r7, #9]
 8000328:	3302      	adds	r3, #2
 800032a:	b2db      	uxtb	r3, r3
 800032c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, addr, 2, 100);
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	6818      	ldr	r0, [r3, #0]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	4619      	mov	r1, r3
 800033a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800033e:	2364      	movs	r3, #100	@ 0x64
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2302      	movs	r3, #2
 8000344:	f002 fa6e 	bl	8002824 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000348:	2300      	movs	r3, #0
 800034a:	613b      	str	r3, [r7, #16]
 800034c:	f107 0314 	add.w	r3, r7, #20
 8000350:	221f      	movs	r2, #31
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f005 f992 	bl	800567e <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress, result, 35, 100);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	6818      	ldr	r0, [r3, #0]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	4619      	mov	r1, r3
 8000364:	f107 0210 	add.w	r2, r7, #16
 8000368:	2364      	movs	r3, #100	@ 0x64
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2323      	movs	r3, #35	@ 0x23
 800036e:	f002 fb71 	bl	8002a54 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000372:	2300      	movs	r3, #0
 8000374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000376:	e00c      	b.n	8000392 <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037a:	1cda      	adds	r2, r3, #3
 800037c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	440b      	add	r3, r1
 8000382:	3240      	adds	r2, #64	@ 0x40
 8000384:	443a      	add	r2, r7
 8000386:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800038a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800038c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800038e:	3301      	adds	r3, #1
 8000390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000392:	7a7b      	ldrb	r3, [r7, #9]
 8000394:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000396:	429a      	cmp	r2, r3
 8000398:	dbee      	blt.n	8000378 <BQ_ReadMABlockCommand+0xa4>
    }
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	3740      	adds	r7, #64	@ 0x40
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80003b0:	f107 020c 	add.w	r2, r7, #12
 80003b4:	8879      	ldrh	r1, [r7, #2]
 80003b6:	2302      	movs	r3, #2
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f7ff ff8b 	bl	80002d4 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003be:	2300      	movs	r3, #0
 80003c0:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003c2:	7b3b      	ldrb	r3, [r7, #12]
 80003c4:	461a      	mov	r2, r3
 80003c6:	89fb      	ldrh	r3, [r7, #14]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003cc:	7b7b      	ldrb	r3, [r7, #13]
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	b21a      	sxth	r2, r3
 80003d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	b21b      	sxth	r3, r3
 80003da:	81fb      	strh	r3, [r7, #14]

    return result;
 80003dc:	89fb      	ldrh	r3, [r7, #14]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b084      	sub	sp, #16
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	460b      	mov	r3, r1
 80003f0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003f2:	f107 0208 	add.w	r2, r7, #8
 80003f6:	8879      	ldrh	r1, [r7, #2]
 80003f8:	2304      	movs	r3, #4
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f7ff ff6a 	bl	80002d4 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 8000404:	7a3b      	ldrb	r3, [r7, #8]
 8000406:	461a      	mov	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4313      	orrs	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 800040e:	7a7b      	ldrb	r3, [r7, #9]
 8000410:	021b      	lsls	r3, r3, #8
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	4313      	orrs	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000418:	7abb      	ldrb	r3, [r7, #10]
 800041a:	041b      	lsls	r3, r3, #16
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	4313      	orrs	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	061b      	lsls	r3, r3, #24
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	4313      	orrs	r3, r2
 800042a:	60fb      	str	r3, [r7, #12]

    return result;
 800042c:	68fb      	ldr	r3, [r7, #12]
}
 800042e:	4618      	mov	r0, r3
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7e9b      	ldrb	r3, [r3, #26]
 8000446:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800044a:	b2db      	uxtb	r3, r3
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	429a      	cmp	r2, r3
 8000450:	d003      	beq.n	800045a <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 8000452:	212b      	movs	r1, #43	@ 0x2b
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	f7ff ff1b 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000474:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000478:	b2db      	uxtb	r3, r3
 800047a:	78fa      	ldrb	r2, [r7, #3]
 800047c:	429a      	cmp	r2, r3
 800047e:	d003      	beq.n	8000488 <BQAction_SetManufacturingAllFet+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 8000480:	2122      	movs	r1, #34	@ 0x22
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ff04 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	460b      	mov	r3, r1
 800049a:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80004a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	78fa      	ldrb	r2, [r7, #3]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d003      	beq.n	80004b6 <BQAction_SetManufacturingFuse+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 80004ae:	2126      	movs	r1, #38	@ 0x26
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff feed 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80004d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	78fa      	ldrb	r2, [r7, #3]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d003      	beq.n	80004e4 <BQAction_SetCalibration+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004dc:	212d      	movs	r1, #45	@ 0x2d
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff fed6 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80004fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	78fa      	ldrb	r2, [r7, #3]
 8000506:	429a      	cmp	r2, r3
 8000508:	d003      	beq.n	8000512 <BQAction_SetManufacturingGauging+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 800050a:	2121      	movs	r1, #33	@ 0x21
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff febf 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	460b      	mov	r3, r1
 8000524:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800052c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	78fa      	ldrb	r2, [r7, #3]
 8000534:	429a      	cmp	r2, r3
 8000536:	d003      	beq.n	8000540 <BQAction_SetManufacturingPF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000538:	2124      	movs	r1, #36	@ 0x24
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fea8 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800055a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	78fa      	ldrb	r2, [r7, #3]
 8000562:	429a      	cmp	r2, r3
 8000564:	d003      	beq.n	800056e <BQAction_SetManufacturingLF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000566:	2123      	movs	r1, #35	@ 0x23
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f7ff fe91 	bl	8000290 <BQ_WriteMABlockCommand>
    }
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000576:	b580      	push	{r7, lr}
 8000578:	b084      	sub	sp, #16
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f893 	bl	80006aa <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode =  BMS->BQ_opStatus.bits.sec;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	7e5b      	ldrb	r3, [r3, #25]
 8000588:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000590:	e01a      	b.n	80005c8 <BQAction_TryUnsealedDevice+0x52>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 8000592:	f240 4114 	movw	r1, #1044	@ 0x414
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fe7a 	bl	8000290 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 800059c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a0:	f001 f824 	bl	80015ec <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 80005a4:	f243 6172 	movw	r1, #13938	@ 0x3672
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe71 	bl	8000290 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 80005ae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005b2:	f001 f81b 	bl	80015ec <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f877 	bl	80006aa <BQAction_UpdateOpStatus>
        securityMode = BMS->BQ_opStatus.bits.sec;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7e5b      	ldrb	r3, [r3, #25]
 80005c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d0e1      	beq.n	8000592 <BQAction_TryUnsealedDevice+0x1c>
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0de      	beq.n	8000592 <BQAction_TryUnsealedDevice+0x1c>
    }
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b088      	sub	sp, #32
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80005e6:	2157      	movs	r1, #87	@ 0x57
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fedb 	bl	80003a4 <BQ_ReadCommandAsShort>
 80005ee:	4603      	mov	r3, r0
 80005f0:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	8bfa      	ldrh	r2, [r7, #30]
 80005f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80005f8:	2155      	movs	r1, #85	@ 0x55
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fef3 	bl	80003e6 <BQ_ReadCommandAsInt>
 8000600:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	61da      	str	r2, [r3, #28]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 8000608:	2154      	movs	r1, #84	@ 0x54
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff feeb 	bl	80003e6 <BQ_ReadCommandAsInt>
 8000610:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	619a      	str	r2, [r3, #24]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000618:	2156      	movs	r1, #86	@ 0x56
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fee3 	bl	80003e6 <BQ_ReadCommandAsInt>
 8000620:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	621a      	str	r2, [r3, #32]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000628:	2103      	movs	r1, #3
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 fc02 	bl	8000e34 <I2CHelper_ReadRegisterAsShort>
 8000630:	4603      	mov	r3, r0
 8000632:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	89fa      	ldrh	r2, [r7, #14]
 8000638:	84da      	strh	r2, [r3, #38]	@ 0x26
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryStatus);
 800063a:	2116      	movs	r1, #22
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 fbf9 	bl	8000e34 <I2CHelper_ReadRegisterAsShort>
 8000642:	4603      	mov	r3, r0
 8000644:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	89ba      	ldrh	r2, [r7, #12]
 800064a:	849a      	strh	r2, [r3, #36]	@ 0x24
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_GPIORead);
 800064c:	2148      	movs	r1, #72	@ 0x48
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fc11 	bl	8000e76 <I2CHelper_ReadRegisterAsChar>
 8000654:	4603      	mov	r3, r0
 8000656:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7afa      	ldrb	r2, [r7, #11]
 800065c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000666:	2320      	movs	r3, #32
 8000668:	2171      	movs	r1, #113	@ 0x71
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff fe32 	bl	80002d4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS->BQ_daStatus2.all, 16);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8000676:	2310      	movs	r3, #16
 8000678:	2172      	movs	r1, #114	@ 0x72
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fe2a 	bl	80002d4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS->BQ_daStatus3.all, 18);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8000686:	2312      	movs	r3, #18
 8000688:	217b      	movs	r1, #123	@ 0x7b
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff fe22 	bl	80002d4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS->BQ_outCal.all, 32);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8000696:	2320      	movs	r3, #32
 8000698:	f24f 0181 	movw	r1, #61569	@ 0xf081
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff fe19 	bl	80002d4 <BQ_ReadMABlockCommand>
}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b084      	sub	sp, #16
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80006b8:	2320      	movs	r3, #32
 80006ba:	2171      	movs	r1, #113	@ 0x71
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fe09 	bl	80002d4 <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80006c2:	2154      	movs	r1, #84	@ 0x54
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff fe8e 	bl	80003e6 <BQ_ReadCommandAsInt>
 80006ca:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	619a      	str	r2, [r3, #24]
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006d2:	2157      	movs	r1, #87	@ 0x57
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe65 	bl	80003a4 <BQ_ReadCommandAsShort>
 80006da:	4603      	mov	r3, r0
 80006dc:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	897a      	ldrh	r2, [r7, #10]
 80006e2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <BQ_GetBoundaryCellVoltage>:
        return RELAX;
    }
}

BQ_BoundaryCellVoltage BQ_GetBoundaryCellVoltage(BQ_data* BMS)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	@ 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    BQ_BoundaryCellVoltage result;
    result.Max = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	82fb      	strh	r3, [r7, #22]
    result.Min = 65535;
 80006f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fc:	82bb      	strh	r3, [r7, #20]

    uint16_t cells[6] =
        {
			BMS->BQ_daStatus1.sep.cell_voltage_1, // 1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
    uint16_t cells[6] =
 8000702:	813b      	strh	r3, [r7, #8]
			BMS->BQ_daStatus1.sep.cell_voltage_2, // 2
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    uint16_t cells[6] =
 8000708:	817b      	strh	r3, [r7, #10]
            BMS->BQ_daStatus1.sep.cell_voltage_3, // 3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
    uint16_t cells[6] =
 800070e:	81bb      	strh	r3, [r7, #12]
            BMS->BQ_daStatus1.sep.cell_voltage_4, // 4
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
    uint16_t cells[6] =
 8000714:	81fb      	strh	r3, [r7, #14]
            BMS->BQ_daStatus3.sep.cell_voltage_5, // 5
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
    uint16_t cells[6] =
 800071c:	823b      	strh	r3, [r7, #16]
            BMS->BQ_daStatus3.sep.cell_voltage_6  // 6
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
    uint16_t cells[6] =
 8000724:	827b      	strh	r3, [r7, #18]
        };

    for (int i = 0; i < 6; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
 800072a:	e022      	b.n	8000772 <BQ_GetBoundaryCellVoltage+0x86>
    {
        if (cells[i] > result.Max)
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	3320      	adds	r3, #32
 8000732:	443b      	add	r3, r7
 8000734:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000738:	8afb      	ldrh	r3, [r7, #22]
 800073a:	429a      	cmp	r2, r3
 800073c:	d906      	bls.n	800074c <BQ_GetBoundaryCellVoltage+0x60>
        {
            result.Max = cells[i];
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	3320      	adds	r3, #32
 8000744:	443b      	add	r3, r7
 8000746:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800074a:	82fb      	strh	r3, [r7, #22]
        }
        if (cells[i] < result.Min)
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	3320      	adds	r3, #32
 8000752:	443b      	add	r3, r7
 8000754:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000758:	8abb      	ldrh	r3, [r7, #20]
 800075a:	429a      	cmp	r2, r3
 800075c:	d206      	bcs.n	800076c <BQ_GetBoundaryCellVoltage+0x80>
        {
            result.Min = cells[i];
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	3320      	adds	r3, #32
 8000764:	443b      	add	r3, r7
 8000766:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800076a:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	3301      	adds	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	2b05      	cmp	r3, #5
 8000776:	ddd9      	ble.n	800072c <BQ_GetBoundaryCellVoltage+0x40>
        }
    }

    return result;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	2300      	movs	r3, #0
 800077e:	8b3a      	ldrh	r2, [r7, #24]
 8000780:	f362 030f 	bfi	r3, r2, #0, #16
 8000784:	8b7a      	ldrh	r2, [r7, #26]
 8000786:	f362 431f 	bfi	r3, r2, #16, #16
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	@ 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <BQ_GetSendData>:

void BQ_GetSendData(BQ_data* BMS){
 8000796:	b590      	push	{r4, r7, lr}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	BMS->data.voltage = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_Voltage);
 800079e:	2109      	movs	r1, #9
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 fb47 	bl	8000e34 <I2CHelper_ReadRegisterAsShort>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	815a      	strh	r2, [r3, #10]
	BMS->data.current = BMS->BQ_outCal.sep.current;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	@ 0x70
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	819a      	strh	r2, [r3, #12]
	BMS->data.balance = BQ_GetBoundaryCellVoltage(BMS);
 80007b8:	687c      	ldr	r4, [r7, #4]
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff96 	bl	80006ec <BQ_GetBoundaryCellVoltage>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	80e2      	strh	r2, [r4, #6]
 80007c6:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80007ca:	8123      	strh	r3, [r4, #8]
	BMS->data.cell_temperature = BMS->BQ_daStatus2.sep.ts1_temperature - KelvinToCelsius;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80007d2:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b21a      	sxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	825a      	strh	r2, [r3, #18]
	BMS->data.fet_temperature = BMS->BQ_daStatus2.sep.ts2_temperature - KelvinToCelsius;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80007e4:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	b21a      	sxth	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	821a      	strh	r2, [r3, #16]
	BMS->data.percentage = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_RelativeStateOfCharge);
 80007f0:	210d      	movs	r1, #13
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f000 fb3f 	bl	8000e76 <I2CHelper_ReadRegisterAsChar>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	739a      	strb	r2, [r3, #14]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bd90      	pop	{r4, r7, pc}

08000808 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080c:	4b2f      	ldr	r3, [pc, #188]	@ (80008cc <MX_CAN1_Init+0xc4>)
 800080e:	4a30      	ldr	r2, [pc, #192]	@ (80008d0 <MX_CAN1_Init+0xc8>)
 8000810:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <MX_CAN1_Init+0xc4>)
 8000814:	220a      	movs	r2, #10
 8000816:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000818:	4b2c      	ldr	r3, [pc, #176]	@ (80008cc <MX_CAN1_Init+0xc4>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <MX_CAN1_Init+0xc4>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000824:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <MX_CAN1_Init+0xc4>)
 8000826:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800082a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800082c:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <MX_CAN1_Init+0xc4>)
 800082e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000832:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000834:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <MX_CAN1_Init+0xc4>)
 8000836:	2200      	movs	r2, #0
 8000838:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800083a:	4b24      	ldr	r3, [pc, #144]	@ (80008cc <MX_CAN1_Init+0xc4>)
 800083c:	2200      	movs	r2, #0
 800083e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <MX_CAN1_Init+0xc4>)
 8000842:	2200      	movs	r2, #0
 8000844:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <MX_CAN1_Init+0xc4>)
 8000848:	2201      	movs	r2, #1
 800084a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_CAN1_Init+0xc4>)
 800084e:	2200      	movs	r2, #0
 8000850:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_CAN1_Init+0xc4>)
 8000854:	2200      	movs	r2, #0
 8000856:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000858:	481c      	ldr	r0, [pc, #112]	@ (80008cc <MX_CAN1_Init+0xc4>)
 800085a:	f000 feeb 	bl	8001634 <HAL_CAN_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 fd4c 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	canfil.FilterBank = 0;
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
    canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
    canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
    canfil.FilterMaskIdHigh = 0 << 5;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    canfil.FilterMaskIdLow = 0 << 5;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
    canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 8000888:	2201      	movs	r2, #1
 800088a:	61da      	str	r2, [r3, #28]
    canfil.FilterActivation = ENABLE;
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 800088e:	2201      	movs	r2, #1
 8000890:	621a      	str	r2, [r3, #32]
    canfil.SlaveStartFilterBank = 14;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 8000894:	220e      	movs	r2, #14
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24

    TxHeader.IDE = CAN_ID_EXT;
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_CAN1_Init+0xd0>)
 800089a:	2204      	movs	r2, #4
 800089c:	609a      	str	r2, [r3, #8]
    TxHeader.ExtId = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <MX_CAN1_Init+0xd0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX_CAN1_Init+0xd0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <MX_CAN1_Init+0xd0>)
 80008ac:	2208      	movs	r2, #8
 80008ae:	611a      	str	r2, [r3, #16]

    HAL_CAN_ConfigFilter(&hcan1,&canfil);
 80008b0:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <MX_CAN1_Init+0xcc>)
 80008b2:	4806      	ldr	r0, [pc, #24]	@ (80008cc <MX_CAN1_Init+0xc4>)
 80008b4:	f000 ffb9 	bl	800182a <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_CAN1_Init+0xc4>)
 80008ba:	f001 f880 	bl	80019be <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 80008be:	2103      	movs	r1, #3
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <MX_CAN1_Init+0xc4>)
 80008c2:	f001 f990 	bl	8001be6 <HAL_CAN_ActivateNotification>

  /* USER CODE END CAN1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000070 	.word	0x20000070
 80008d0:	40006400 	.word	0x40006400
 80008d4:	20000048 	.word	0x20000048
 80008d8:	2000002c 	.word	0x2000002c

080008dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a2e      	ldr	r2, [pc, #184]	@ (80009b4 <HAL_CAN_MspInit+0xd8>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d156      	bne.n	80009ac <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008fe:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a2d      	ldr	r2, [pc, #180]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 8000904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	4a27      	ldr	r2, [pc, #156]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000922:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800093a:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <HAL_CAN_MspInit+0xdc>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000946:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000958:	2309      	movs	r3, #9
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f001 fcfd 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800096a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800097c:	2309      	movs	r3, #9
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <HAL_CAN_MspInit+0xe0>)
 8000988:	f001 fcec 	bl	8002364 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 7, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2107      	movs	r1, #7
 8000990:	2013      	movs	r0, #19
 8000992:	f001 fc62 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000996:	2013      	movs	r0, #19
 8000998:	f001 fc7b 	bl	8002292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2108      	movs	r1, #8
 80009a0:	2014      	movs	r0, #20
 80009a2:	f001 fc5a 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009a6:	2014      	movs	r0, #20
 80009a8:	f001 fc73 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40006400 	.word	0x40006400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000400 	.word	0x48000400

080009c0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b38      	ldr	r3, [pc, #224]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a37      	ldr	r2, [pc, #220]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b35      	ldr	r3, [pc, #212]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b32      	ldr	r3, [pc, #200]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a31      	ldr	r2, [pc, #196]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	4a25      	ldr	r2, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2a:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <MX_GPIO_Init+0xf8>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3c:	481f      	ldr	r0, [pc, #124]	@ (8000abc <MX_GPIO_Init+0xfc>)
 8000a3e:	f001 fe0b 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a48:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4819      	ldr	r0, [pc, #100]	@ (8000ac0 <MX_GPIO_Init+0x100>)
 8000a5a:	f001 fc83 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5e:	230c      	movs	r3, #12
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6e:	2307      	movs	r3, #7
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f001 fc72 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4808      	ldr	r0, [pc, #32]	@ (8000abc <MX_GPIO_Init+0xfc>)
 8000a9a:	f001 fc63 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210c      	movs	r1, #12
 8000aa2:	2028      	movs	r0, #40	@ 0x28
 8000aa4:	f001 fbd9 	bl	800225a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa8:	2028      	movs	r0, #40	@ 0x28
 8000aaa:	f001 fbf2 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	@ 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000400 	.word	0x48000400
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	@ (8000b3c <MX_I2C1_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b40 <MX_I2C1_Init+0x7c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afe:	480e      	ldr	r0, [pc, #56]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000b00:	f001 fdf4 	bl	80026ec <HAL_I2C_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b0a:	f000 fbf9 	bl	8001300 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000b12:	f003 f9ff 	bl	8003f14 <HAL_I2CEx_ConfigAnalogFilter>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b1c:	f000 fbf0 	bl	8001300 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000b24:	f003 fa41 	bl	8003faa <HAL_I2CEx_ConfigDigitalFilter>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 fbe7 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	10d19ce4 	.word	0x10d19ce4

08000b44 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bbc <MX_I2C2_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b50:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc0 <MX_I2C2_Init+0x7c>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b7e:	480e      	ldr	r0, [pc, #56]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b80:	f001 fdb4 	bl	80026ec <HAL_I2C_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b8a:	f000 fbb9 	bl	8001300 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000b92:	f003 f9bf 	bl	8003f14 <HAL_I2CEx_ConfigAnalogFilter>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 fbb0 	bl	8001300 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_I2C2_Init+0x74>)
 8000ba4:	f003 fa01 	bl	8003faa <HAL_I2CEx_ConfigDigitalFilter>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 fba7 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000ec 	.word	0x200000ec
 8000bbc:	40005800 	.word	0x40005800
 8000bc0:	10d19ce4 	.word	0x10d19ce4

08000bc4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	@ (8000c3c <MX_I2C3_Init+0x78>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <MX_I2C3_Init+0x7c>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000c00:	f001 fd74 	bl	80026ec <HAL_I2C_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c0a:	f000 fb79 	bl	8001300 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4809      	ldr	r0, [pc, #36]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000c12:	f003 f97f 	bl	8003f14 <HAL_I2CEx_ConfigAnalogFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c1c:	f000 fb70 	bl	8001300 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_I2C3_Init+0x74>)
 8000c24:	f003 f9c1 	bl	8003faa <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 fb67 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000140 	.word	0x20000140
 8000c3c:	40005c00 	.word	0x40005c00
 8000c40:	10d19ce4 	.word	0x10d19ce4

08000c44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0a6      	sub	sp, #152	@ 0x98
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	2260      	movs	r2, #96	@ 0x60
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 fd0a 	bl	800567e <memset>
  if(i2cHandle->Instance==I2C1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6b      	ldr	r2, [pc, #428]	@ (8000e1c <HAL_I2C_MspInit+0x1d8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d14c      	bne.n	8000d0e <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c74:	2340      	movs	r3, #64	@ 0x40
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 f843 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f000 fb38 	bl	8001300 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b63      	ldr	r3, [pc, #396]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c94:	4a62      	ldr	r2, [pc, #392]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9c:	4b60      	ldr	r3, [pc, #384]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ca8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb0:	2312      	movs	r3, #18
 8000cb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4855      	ldr	r0, [pc, #340]	@ (8000e24 <HAL_I2C_MspInit+0x1e0>)
 8000cd0:	f001 fb48 	bl	8002364 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd4:	4b52      	ldr	r3, [pc, #328]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd8:	4a51      	ldr	r2, [pc, #324]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000cda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	210a      	movs	r1, #10
 8000cf0:	201f      	movs	r0, #31
 8000cf2:	f001 fab2 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cf6:	201f      	movs	r0, #31
 8000cf8:	f001 facb 	bl	8002292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2109      	movs	r1, #9
 8000d00:	2020      	movs	r0, #32
 8000d02:	f001 faaa 	bl	800225a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d06:	2020      	movs	r0, #32
 8000d08:	f001 fac3 	bl	8002292 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d0c:	e082      	b.n	8000e14 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C2)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a45      	ldr	r2, [pc, #276]	@ (8000e28 <HAL_I2C_MspInit+0x1e4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d13c      	bne.n	8000d92 <HAL_I2C_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fff1 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000d30:	f000 fae6 	bl	8001300 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b3a      	ldr	r3, [pc, #232]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a39      	ldr	r2, [pc, #228]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d40:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d4c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d66:	2304      	movs	r3, #4
 8000d68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d70:	4619      	mov	r1, r3
 8000d72:	482c      	ldr	r0, [pc, #176]	@ (8000e24 <HAL_I2C_MspInit+0x1e0>)
 8000d74:	f001 faf6 	bl	8002364 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d78:	4b29      	ldr	r3, [pc, #164]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7c:	4a28      	ldr	r2, [pc, #160]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000d7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d84:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697b      	ldr	r3, [r7, #20]
}
 8000d90:	e040      	b.n	8000e14 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C3)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a25      	ldr	r2, [pc, #148]	@ (8000e2c <HAL_I2C_MspInit+0x1e8>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d13b      	bne.n	8000e14 <HAL_I2C_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000daa:	4618      	mov	r0, r3
 8000dac:	f003 ffae 	bl	8004d0c <HAL_RCCEx_PeriphCLKConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_I2C_MspInit+0x176>
      Error_Handler();
 8000db6:	f000 faa3 	bl	8001300 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a18      	ldr	r2, [pc, #96]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd8:	2312      	movs	r3, #18
 8000dda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dea:	2304      	movs	r3, #4
 8000dec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000df4:	4619      	mov	r1, r3
 8000df6:	480e      	ldr	r0, [pc, #56]	@ (8000e30 <HAL_I2C_MspInit+0x1ec>)
 8000df8:	f001 fab4 	bl	8002364 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_I2C_MspInit+0x1dc>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3798      	adds	r7, #152	@ 0x98
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48000400 	.word	0x48000400
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	40005c00 	.word	0x40005c00
 8000e30:	48000800 	.word	0x48000800

08000e34 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(BQ_data* BMS, uint8_t address)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2];
	I2CHelper_ReadRegister(BMS, address, buf, 2);
 8000e40:	f107 020c 	add.w	r2, r7, #12
 8000e44:	78f9      	ldrb	r1, [r7, #3]
 8000e46:	2302      	movs	r3, #2
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 f826 	bl	8000e9a <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000e52:	7b3b      	ldrb	r3, [r7, #12]
 8000e54:	461a      	mov	r2, r3
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000e5c:	7b7b      	ldrb	r3, [r7, #13]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	81fb      	strh	r3, [r7, #14]

	return result;
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(BQ_data* BMS, uint8_t address)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[1];
	I2CHelper_ReadRegister(BMS, address, buf, 1);
 8000e82:	f107 020c 	add.w	r2, r7, #12
 8000e86:	78f9      	ldrb	r1, [r7, #3]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f805 	bl	8000e9a <I2CHelper_ReadRegister>

	return buf[0];
 8000e90:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(BQ_data* BMS, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af02      	add	r7, sp, #8
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	72fb      	strb	r3, [r7, #11]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, &address, 1, 100);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6818      	ldr	r0, [r3, #0]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f107 020b 	add.w	r2, r7, #11
 8000ebc:	2364      	movs	r3, #100	@ 0x64
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f001 fcaf 	bl	8002824 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress,  receive_buffer, size, 100);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	7abb      	ldrb	r3, [r7, #10]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	2264      	movs	r2, #100	@ 0x64
 8000ed6:	9200      	str	r2, [sp, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	f001 fdbb 	bl	8002a54 <HAL_I2C_Master_Receive>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <I2CHelper_CheckAddress>:
 * @brief scanning i2c devices and return first
 * @param i2c I2C_HandleTypeDef pointer
 * @return first i2c device
 */
void I2CHelper_CheckAddress(BQ_data* BMS)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, BMS->bq_deviceAddress, 3, 5);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2305      	movs	r3, #5
 8000efa:	2203      	movs	r2, #3
 8000efc:	f001 fea0 	bl	8002c40 <HAL_I2C_IsDeviceReady>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73bb      	strb	r3, [r7, #14]
	if (ret == HAL_BUSY){
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d103      	bne.n	8000f12 <I2CHelper_CheckAddress+0x2c>
		BMS->connection = NEED_RESET;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	751a      	strb	r2, [r3, #20]
		return;
 8000f10:	e029      	b.n	8000f66 <I2CHelper_CheckAddress+0x80>
	}
	if (ret == HAL_OK)
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d103      	bne.n	8000f20 <I2CHelper_CheckAddress+0x3a>
	{
		BMS->connection = CONNECTED;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	751a      	strb	r2, [r3, #20]
		return;
 8000f1e:	e022      	b.n	8000f66 <I2CHelper_CheckAddress+0x80>
	}
	for (uint8_t i = 1; i < 255; i++)
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e019      	b.n	8000f5a <I2CHelper_CheckAddress+0x74>
	{
		ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, i, 3, 5);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	2305      	movs	r3, #5
 8000f30:	2203      	movs	r2, #3
 8000f32:	f001 fe85 	bl	8002c40 <HAL_I2C_IsDeviceReady>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73bb      	strb	r3, [r7, #14]
		if (ret == HAL_OK)
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <I2CHelper_CheckAddress+0x68>
		{
			BMS->bq_deviceAddress = i;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7bfa      	ldrb	r2, [r7, #15]
 8000f44:	711a      	strb	r2, [r3, #4]
			BMS->connection = CHANGED_ADDRESS;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	751a      	strb	r2, [r3, #20]
			return;
 8000f4c:	e00b      	b.n	8000f66 <I2CHelper_CheckAddress+0x80>
		}
		HAL_Delay(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 fb4c 	bl	80015ec <HAL_Delay>
	for (uint8_t i = 1; i < 255; i++)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	3301      	adds	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2bff      	cmp	r3, #255	@ 0xff
 8000f5e:	d1e2      	bne.n	8000f26 <I2CHelper_CheckAddress+0x40>
	}
	BMS->connection = INVALID_DEVICE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2202      	movs	r2, #2
 8000f64:	751a      	strb	r2, [r3, #20]
}
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_GPIO_EXTI_Callback>:
bool first_transmit_3 = true;
#endif

bool status;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f7c:	d113      	bne.n	8000fa6 <HAL_GPIO_EXTI_Callback+0x3a>
		status = !status;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f083 0301 	eor.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f9a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa0:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <HAL_GPIO_EXTI_Callback+0x48>)
 8000fa2:	f001 fb71 	bl	8002688 <HAL_GPIO_TogglePin>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200002b4 	.word	0x200002b4
 8000fb4:	48000400 	.word	0x48000400

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fa9a 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f82c 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fcfc 	bl	80009c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fc8:	f7ff fd7c 	bl	8000ac4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000fcc:	f7ff fc1c 	bl	8000808 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000fd0:	f7ff fdb8 	bl	8000b44 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000fd4:	f7ff fdf6 	bl	8000bc4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	status = false;
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <main+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
#ifdef USED_I2C1
	BQ_Init(&hi2c1);
 8000fde:	480b      	ldr	r0, [pc, #44]	@ (800100c <main+0x54>)
 8000fe0:	f7ff f8f4 	bl	80001cc <BQ_Init>
#endif
#ifdef USED_I2C2
  BQ_Init(&hi2c2);
#endif
#ifdef USED_I2C3
  BQ_Init(&hi2c3);
 8000fe4:	480a      	ldr	r0, [pc, #40]	@ (8001010 <main+0x58>)
 8000fe6:	f7ff f8f1 	bl	80001cc <BQ_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
#ifdef USED_I2C1
		BQ_and_can(&BMS_1);
 8000fea:	480a      	ldr	r0, [pc, #40]	@ (8001014 <main+0x5c>)
 8000fec:	f000 f868 	bl	80010c0 <BQ_and_can>
		HAL_Delay(100);
 8000ff0:	2064      	movs	r0, #100	@ 0x64
 8000ff2:	f000 fafb 	bl	80015ec <HAL_Delay>
#ifdef USED_I2C2
		BQ_and_can(&BMS_2);
		HAL_Delay(100);
#endif
#ifdef USED_I2C3
		BQ_and_can(&BMS_3);
 8000ff6:	4808      	ldr	r0, [pc, #32]	@ (8001018 <main+0x60>)
 8000ff8:	f000 f862 	bl	80010c0 <BQ_and_can>
		HAL_Delay(100);
 8000ffc:	2064      	movs	r0, #100	@ 0x64
 8000ffe:	f000 faf5 	bl	80015ec <HAL_Delay>
		BQ_and_can(&BMS_1);
 8001002:	bf00      	nop
 8001004:	e7f1      	b.n	8000fea <main+0x32>
 8001006:	bf00      	nop
 8001008:	200002b4 	.word	0x200002b4
 800100c:	20000098 	.word	0x20000098
 8001010:	20000140 	.word	0x20000140
 8001014:	20000194 	.word	0x20000194
 8001018:	20000224 	.word	0x20000224

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b096      	sub	sp, #88	@ 0x58
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2244      	movs	r2, #68	@ 0x44
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fb27 	bl	800567e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800103e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001042:	f003 f80d 	bl	8004060 <HAL_PWREx_ControlVoltageScaling>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800104c:	f000 f958 	bl	8001300 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001058:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105a:	2310      	movs	r3, #16
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001062:	2302      	movs	r3, #2
 8001064:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800106a:	230a      	movs	r3, #10
 800106c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800106e:	2307      	movs	r3, #7
 8001070:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001076:	2302      	movs	r3, #2
 8001078:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4618      	mov	r0, r3
 8001080:	f003 f844 	bl	800410c <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800108a:	f000 f939 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2303      	movs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2104      	movs	r1, #4
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fc44 	bl	8004934 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010b2:	f000 f925 	bl	8001300 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3758      	adds	r7, #88	@ 0x58
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <BQ_and_can>:

/* USER CODE BEGIN 4 */
void BQ_and_can(BQ_data *BMS) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	I2CHelper_CheckAddress(BMS);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff0c 	bl	8000ee6 <I2CHelper_CheckAddress>
	if (BMS->connection == CONNECTED) {
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7d1b      	ldrb	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 80aa 	bne.w	800122c <BQ_and_can+0x16c>
		BQAction_UpdateData(BMS);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fa80 	bl	80005de <BQAction_UpdateData>
		BQ_GetSendData(BMS);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fb59 	bl	8000796 <BQ_GetSendData>
#ifdef USED_I2C1
		if (BMS == &BMS_1) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a77      	ldr	r2, [pc, #476]	@ (80012c4 <BQ_and_can+0x204>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d105      	bne.n	80010f8 <BQ_and_can+0x38>
			stat4.vescID = 0x90;
 80010ec:	4b76      	ldr	r3, [pc, #472]	@ (80012c8 <BQ_and_can+0x208>)
 80010ee:	2290      	movs	r2, #144	@ 0x90
 80010f0:	701a      	strb	r2, [r3, #0]
			stat6.vescID = 0x90;
 80010f2:	4b76      	ldr	r3, [pc, #472]	@ (80012cc <BQ_and_can+0x20c>)
 80010f4:	2290      	movs	r2, #144	@ 0x90
 80010f6:	701a      	strb	r2, [r3, #0]
			stat4.vescID = 0x91;
		  	stat6.vescID = 0x91;
		}
#endif
#ifdef USED_I2C3
		if(BMS == &BMS_3){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a75      	ldr	r2, [pc, #468]	@ (80012d0 <BQ_and_can+0x210>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d105      	bne.n	800110c <BQ_and_can+0x4c>
			stat4.vescID = 0x92;
 8001100:	4b71      	ldr	r3, [pc, #452]	@ (80012c8 <BQ_and_can+0x208>)
 8001102:	2292      	movs	r2, #146	@ 0x92
 8001104:	701a      	strb	r2, [r3, #0]
			stat6.vescID = 0x92;
 8001106:	4b71      	ldr	r3, [pc, #452]	@ (80012cc <BQ_and_can+0x20c>)
 8001108:	2292      	movs	r2, #146	@ 0x92
 800110a:	701a      	strb	r2, [r3, #0]
		}
#endif
		stat4.pidPos = 0;
 800110c:	4b6e      	ldr	r3, [pc, #440]	@ (80012c8 <BQ_and_can+0x208>)
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
		stat4.currentIn = (float) (BMS->data.current) / 1000;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001122:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 80012d4 <BQ_and_can+0x214>
 8001126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112a:	4b67      	ldr	r3, [pc, #412]	@ (80012c8 <BQ_and_can+0x208>)
 800112c:	edc3 7a03 	vstr	s15, [r3, #12]
		stat4.tempFet = (float) (BMS->data.fet_temperature) / 10;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <BQ_and_can+0x208>)
 8001148:	edc3 7a01 	vstr	s15, [r3, #4]
		stat4.tempMotor = (float) (BMS->data.cell_temperature) / 10;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800115a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800115e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001162:	4b59      	ldr	r3, [pc, #356]	@ (80012c8 <BQ_and_can+0x208>)
 8001164:	edc3 7a02 	vstr	s15, [r3, #8]
		VESC_convertStatus4ToRaw(&rawFrame, &stat4);
 8001168:	4957      	ldr	r1, [pc, #348]	@ (80012c8 <BQ_and_can+0x208>)
 800116a:	485b      	ldr	r0, [pc, #364]	@ (80012d8 <BQ_and_can+0x218>)
 800116c:	f004 f960 	bl	8005430 <VESC_convertStatus4ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 8001170:	4b59      	ldr	r3, [pc, #356]	@ (80012d8 <BQ_and_can+0x218>)
 8001172:	2208      	movs	r2, #8
 8001174:	4959      	ldr	r1, [pc, #356]	@ (80012dc <BQ_and_can+0x21c>)
 8001176:	485a      	ldr	r0, [pc, #360]	@ (80012e0 <BQ_and_can+0x220>)
 8001178:	f000 f95e 	bl	8001438 <vesc2halcan>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800117c:	4b59      	ldr	r3, [pc, #356]	@ (80012e4 <BQ_and_can+0x224>)
 800117e:	4a57      	ldr	r2, [pc, #348]	@ (80012dc <BQ_and_can+0x21c>)
 8001180:	4957      	ldr	r1, [pc, #348]	@ (80012e0 <BQ_and_can+0x220>)
 8001182:	4859      	ldr	r0, [pc, #356]	@ (80012e8 <BQ_and_can+0x228>)
 8001184:	f000 fc5f 	bl	8001a46 <HAL_CAN_AddTxMessage>
		HAL_Delay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fa2f 	bl	80015ec <HAL_Delay>
		stat6.adc1 = (float) (BMS->data.voltage)/1000;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	895b      	ldrh	r3, [r3, #10]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800119a:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80012d4 <BQ_and_can+0x214>
 800119e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a2:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <BQ_and_can+0x20c>)
 80011a4:	edc3 7a01 	vstr	s15, [r3, #4]
		stat6.adc2 = (float) (BMS->data.balance.Min)/1000;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	88db      	ldrh	r3, [r3, #6]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b4:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80012d4 <BQ_and_can+0x214>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	4b43      	ldr	r3, [pc, #268]	@ (80012cc <BQ_and_can+0x20c>)
 80011be:	edc3 7a02 	vstr	s15, [r3, #8]
		stat6.adc3 = (float) (BMS->data.balance.Max)/1000;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	891b      	ldrh	r3, [r3, #8]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80012d4 <BQ_and_can+0x214>
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <BQ_and_can+0x20c>)
 80011d8:	edc3 7a03 	vstr	s15, [r3, #12]
		stat6.ppm = (float) (BMS->data.percentage)/100;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b9b      	ldrb	r3, [r3, #14]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e8:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80012ec <BQ_and_can+0x22c>
 80011ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f0:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <BQ_and_can+0x20c>)
 80011f2:	edc3 7a04 	vstr	s15, [r3, #16]
		VESC_convertStatus6ToRaw(&rawFrame, &stat6);
 80011f6:	4935      	ldr	r1, [pc, #212]	@ (80012cc <BQ_and_can+0x20c>)
 80011f8:	4837      	ldr	r0, [pc, #220]	@ (80012d8 <BQ_and_can+0x218>)
 80011fa:	f004 f98b 	bl	8005514 <VESC_convertStatus6ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 80011fe:	4b36      	ldr	r3, [pc, #216]	@ (80012d8 <BQ_and_can+0x218>)
 8001200:	2208      	movs	r2, #8
 8001202:	4936      	ldr	r1, [pc, #216]	@ (80012dc <BQ_and_can+0x21c>)
 8001204:	4836      	ldr	r0, [pc, #216]	@ (80012e0 <BQ_and_can+0x220>)
 8001206:	f000 f917 	bl	8001438 <vesc2halcan>
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK){
 800120a:	4b36      	ldr	r3, [pc, #216]	@ (80012e4 <BQ_and_can+0x224>)
 800120c:	4a33      	ldr	r2, [pc, #204]	@ (80012dc <BQ_and_can+0x21c>)
 800120e:	4934      	ldr	r1, [pc, #208]	@ (80012e0 <BQ_and_can+0x220>)
 8001210:	4835      	ldr	r0, [pc, #212]	@ (80012e8 <BQ_and_can+0x228>)
 8001212:	f000 fc18 	bl	8001a46 <HAL_CAN_AddTxMessage>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d104      	bne.n	8001226 <BQ_and_can+0x166>
			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800121c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001220:	4833      	ldr	r0, [pc, #204]	@ (80012f0 <BQ_and_can+0x230>)
 8001222:	f001 fa31 	bl	8002688 <HAL_GPIO_TogglePin>
		}
		HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 f9e0 	bl	80015ec <HAL_Delay>
	}
	stat1.erpm = 0;
 800122c:	4b31      	ldr	r3, [pc, #196]	@ (80012f4 <BQ_and_can+0x234>)
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
	stat1.dutyCycle = 0;
 8001234:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <BQ_and_can+0x234>)
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
	stat1.current = 1;
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <BQ_and_can+0x234>)
 800123e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001242:	609a      	str	r2, [r3, #8]
#ifdef USED_I2C1
	if(BMS == &BMS_1 && first_transmit_1){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <BQ_and_can+0x204>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d119      	bne.n	8001280 <BQ_and_can+0x1c0>
 800124c:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <BQ_and_can+0x238>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d015      	beq.n	8001280 <BQ_and_can+0x1c0>
		first_transmit_1 = false;
 8001254:	4b28      	ldr	r3, [pc, #160]	@ (80012f8 <BQ_and_can+0x238>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
		stat1.vescID = 0x90;
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <BQ_and_can+0x234>)
 800125c:	2290      	movs	r2, #144	@ 0x90
 800125e:	701a      	strb	r2, [r3, #0]
		VESC_convertStatus1ToRaw(&rawFrame, &stat1);
 8001260:	4924      	ldr	r1, [pc, #144]	@ (80012f4 <BQ_and_can+0x234>)
 8001262:	481d      	ldr	r0, [pc, #116]	@ (80012d8 <BQ_and_can+0x218>)
 8001264:	f004 f88e 	bl	8005384 <VESC_convertStatus1ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 8001268:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <BQ_and_can+0x218>)
 800126a:	2208      	movs	r2, #8
 800126c:	491b      	ldr	r1, [pc, #108]	@ (80012dc <BQ_and_can+0x21c>)
 800126e:	481c      	ldr	r0, [pc, #112]	@ (80012e0 <BQ_and_can+0x220>)
 8001270:	f000 f8e2 	bl	8001438 <vesc2halcan>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <BQ_and_can+0x224>)
 8001276:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <BQ_and_can+0x21c>)
 8001278:	4919      	ldr	r1, [pc, #100]	@ (80012e0 <BQ_and_can+0x220>)
 800127a:	481b      	ldr	r0, [pc, #108]	@ (80012e8 <BQ_and_can+0x228>)
 800127c:	f000 fbe3 	bl	8001a46 <HAL_CAN_AddTxMessage>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	}
#endif
#ifdef USED_I2C3
	if(BMS == &BMS_3 && first_transmit_3){
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a13      	ldr	r2, [pc, #76]	@ (80012d0 <BQ_and_can+0x210>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d119      	bne.n	80012bc <BQ_and_can+0x1fc>
 8001288:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <BQ_and_can+0x23c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d015      	beq.n	80012bc <BQ_and_can+0x1fc>
		first_transmit_3 = false;
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <BQ_and_can+0x23c>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
		stat1.vescID = 0x92;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <BQ_and_can+0x234>)
 8001298:	2292      	movs	r2, #146	@ 0x92
 800129a:	701a      	strb	r2, [r3, #0]
		VESC_convertStatus1ToRaw(&rawFrame, &stat1);
 800129c:	4915      	ldr	r1, [pc, #84]	@ (80012f4 <BQ_and_can+0x234>)
 800129e:	480e      	ldr	r0, [pc, #56]	@ (80012d8 <BQ_and_can+0x218>)
 80012a0:	f004 f870 	bl	8005384 <VESC_convertStatus1ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <BQ_and_can+0x218>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	490c      	ldr	r1, [pc, #48]	@ (80012dc <BQ_and_can+0x21c>)
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <BQ_and_can+0x220>)
 80012ac:	f000 f8c4 	bl	8001438 <vesc2halcan>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <BQ_and_can+0x224>)
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <BQ_and_can+0x21c>)
 80012b4:	490a      	ldr	r1, [pc, #40]	@ (80012e0 <BQ_and_can+0x220>)
 80012b6:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <BQ_and_can+0x228>)
 80012b8:	f000 fbc5 	bl	8001a46 <HAL_CAN_AddTxMessage>
	}
#endif
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000194 	.word	0x20000194
 80012c8:	200002c8 	.word	0x200002c8
 80012cc:	200002dc 	.word	0x200002dc
 80012d0:	20000224 	.word	0x20000224
 80012d4:	447a0000 	.word	0x447a0000
 80012d8:	200002f0 	.word	0x200002f0
 80012dc:	20000300 	.word	0x20000300
 80012e0:	2000002c 	.word	0x2000002c
 80012e4:	20000044 	.word	0x20000044
 80012e8:	20000070 	.word	0x20000070
 80012ec:	42c80000 	.word	0x42c80000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	200002b8 	.word	0x200002b8
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000001 	.word	0x20000001

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <Error_Handler+0x8>

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001316:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <HAL_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6613      	str	r3, [r2, #96]	@ 0x60
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_MspInit+0x44>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_MspInit+0x44>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6593      	str	r3, [r2, #88]	@ 0x58
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_MspInit+0x44>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <NMI_Handler+0x4>

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <MemManage_Handler+0x4>

0800136c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <UsageFault_Handler+0x4>

0800137c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013aa:	f000 f8ff 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <CAN1_TX_IRQHandler+0x10>)
 80013ba:	f000 fc3a 	bl	8001c32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000070 	.word	0x20000070

080013c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <CAN1_RX0_IRQHandler+0x10>)
 80013ce:	f000 fc30 	bl	8001c32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000070 	.word	0x20000070

080013dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <I2C1_EV_IRQHandler+0x10>)
 80013e2:	f001 fd19 	bl	8002e18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000098 	.word	0x20000098

080013f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <I2C1_ER_IRQHandler+0x10>)
 80013f6:	f001 fd29 	bl	8002e4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000098 	.word	0x20000098

08001404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001408:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800140c:	f001 f956 	bl	80026bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <SystemInit+0x20>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141e:	4a05      	ldr	r2, [pc, #20]	@ (8001434 <SystemInit+0x20>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <vesc2halcan>:
#include "vesc2halcan.h"

uint8_t vesc2halcan(CAN_TxHeaderTypeDef* txHeader, uint8_t* txData, size_t txDataSize, const VESC_RawFrame* vescRawFrame)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
	if (txDataSize < vescRawFrame->can_dlc){
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	791b      	ldrb	r3, [r3, #4]
 800144a:	461a      	mov	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4293      	cmp	r3, r2
 8001450:	d201      	bcs.n	8001456 <vesc2halcan+0x1e>
		return VESC2HALCAN_ERR_TXDATA;
 8001452:	2301      	movs	r3, #1
 8001454:	e020      	b.n	8001498 <vesc2halcan+0x60>
	}
	txHeader->ExtId = *(uint32_t*)vescRawFrame & 0x1FFFFFFF; //Identifier
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	605a      	str	r2, [r3, #4]
	txHeader->IDE = CAN_ID_EXT;//IdType
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2204      	movs	r2, #4
 8001466:	609a      	str	r2, [r3, #8]
	txHeader->RTR = CAN_RTR_DATA; //TxFrameType
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]

	// see FDCAN_data_length_code
	if (vescRawFrame->can_dlc >= 0u && vescRawFrame->can_dlc <= 8u){
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	2b08      	cmp	r3, #8
 8001474:	d80f      	bhi.n	8001496 <vesc2halcan+0x5e>
		txHeader->DLC = vescRawFrame->can_dlc;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	791b      	ldrb	r3, [r3, #4]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	611a      	str	r2, [r3, #16]
//	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
//	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
//	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	txHeader->MessageMarker = 0x0;

	memcpy(txData, vescRawFrame->rawData, vescRawFrame->can_dlc);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f103 0108 	add.w	r1, r3, #8
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	461a      	mov	r2, r3
 800148c:	68b8      	ldr	r0, [r7, #8]
 800148e:	f004 f923 	bl	80056d8 <memcpy>

	return VESC2HALCAN_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <vesc2halcan+0x60>
		return VESC2HALCAN_ERR_DLC;
 8001496:	2303      	movs	r3, #3
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff ffb6 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	@ (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	@ (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f004 f8df 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff fd71 	bl	8000fb8 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014e4:	08005754 	.word	0x08005754
  ldr r2, =_sbss
 80014e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014ec:	2000030c 	.word	0x2000030c

080014f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <HAL_Init+0x3c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_Init+0x3c>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001508:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	2003      	movs	r0, #3
 800150c:	f000 fe9a 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f80f 	bl	8001534 <HAL_InitTick>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	e001      	b.n	8001526 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001522:	f7ff fef3 	bl	800130c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001540:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <HAL_InitTick+0x6c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_InitTick+0x70>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b14      	ldr	r3, [pc, #80]	@ (80015a0 <HAL_InitTick+0x6c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fea5 	bl	80022ae <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d809      	bhi.n	8001584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 fe6f 	bl	800225a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157c:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <HAL_InitTick+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e007      	b.n	8001594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e004      	b.n	8001594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e001      	b.n	8001594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	20000004 	.word	0x20000004
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	20000308 	.word	0x20000308

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000308 	.word	0x20000308

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000000c 	.word	0x2000000c

08001634 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e0ed      	b.n	8001822 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff f942 	bl	80008dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff ffb4 	bl	80015d4 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800166e:	e012      	b.n	8001696 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001670:	f7ff ffb0 	bl	80015d4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d90b      	bls.n	8001696 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2205      	movs	r2, #5
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0c5      	b.n	8001822 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0e5      	beq.n	8001670 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0202 	bic.w	r2, r2, #2
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff ff8e 	bl	80015d4 <HAL_GetTick>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ba:	e012      	b.n	80016e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016bc:	f7ff ff8a 	bl	80015d4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b0a      	cmp	r3, #10
 80016c8:	d90b      	bls.n	80016e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2205      	movs	r2, #5
 80016da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e09f      	b.n	8001822 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1e5      	bne.n	80016bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d108      	bne.n	800170a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e007      	b.n	800171a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001718:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7e5b      	ldrb	r3, [r3, #25]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d108      	bne.n	8001734 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e007      	b.n	8001744 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001742:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e9b      	ldrb	r3, [r3, #26]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d108      	bne.n	800175e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0220 	orr.w	r2, r2, #32
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e007      	b.n	800176e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0220 	bic.w	r2, r2, #32
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7edb      	ldrb	r3, [r3, #27]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d108      	bne.n	8001788 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0210 	bic.w	r2, r2, #16
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e007      	b.n	8001798 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0210 	orr.w	r2, r2, #16
 8001796:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7f1b      	ldrb	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d108      	bne.n	80017b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0208 	orr.w	r2, r2, #8
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e007      	b.n	80017c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0208 	bic.w	r2, r2, #8
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7f5b      	ldrb	r3, [r3, #29]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d108      	bne.n	80017dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0204 	orr.w	r2, r2, #4
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e007      	b.n	80017ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0204 	bic.w	r2, r2, #4
 80017ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	ea42 0103 	orr.w	r1, r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	1e5a      	subs	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800182a:	b480      	push	{r7}
 800182c:	b087      	sub	sp, #28
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001840:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001842:	7cfb      	ldrb	r3, [r7, #19]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d003      	beq.n	8001850 <HAL_CAN_ConfigFilter+0x26>
 8001848:	7cfb      	ldrb	r3, [r7, #19]
 800184a:	2b02      	cmp	r3, #2
 800184c:	f040 80aa 	bne.w	80019a4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	2201      	movs	r2, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d123      	bne.n	80018d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	401a      	ands	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3248      	adds	r2, #72	@ 0x48
 80018b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c8:	6979      	ldr	r1, [r7, #20]
 80018ca:	3348      	adds	r3, #72	@ 0x48
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d122      	bne.n	8001920 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3248      	adds	r2, #72	@ 0x48
 8001900:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001914:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001916:	6979      	ldr	r1, [r7, #20]
 8001918:	3348      	adds	r3, #72	@ 0x48
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	43db      	mvns	r3, r3
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800193a:	e007      	b.n	800194c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	431a      	orrs	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001966:	e007      	b.n	8001978 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001996:	f023 0201 	bic.w	r2, r3, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e006      	b.n	80019b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
  }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d12e      	bne.n	8001a30 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0201 	bic.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019ea:	f7ff fdf3 	bl	80015d4 <HAL_GetTick>
 80019ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019f0:	e012      	b.n	8001a18 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019f2:	f7ff fdef 	bl	80015d4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b0a      	cmp	r3, #10
 80019fe:	d90b      	bls.n	8001a18 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2205      	movs	r2, #5
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e012      	b.n	8001a3e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1e5      	bne.n	80019f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e006      	b.n	8001a3e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b089      	sub	sp, #36	@ 0x24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_AddTxMessage+0x2c>
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	f040 80ad 	bne.w	8001bcc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10a      	bne.n	8001a92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8095 	beq.w	8001bbc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	0e1b      	lsrs	r3, r3, #24
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	6809      	ldr	r1, [r1, #0]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	440b      	add	r3, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e00f      	b.n	8001aea <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ade:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3318      	adds	r3, #24
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	440b      	add	r3, r1
 8001ae8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3318      	adds	r3, #24
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	3304      	adds	r3, #4
 8001afc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	7d1b      	ldrb	r3, [r3, #20]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d111      	bne.n	8001b2a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	4413      	add	r3, r2
 8001b12:	3304      	adds	r3, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6811      	ldr	r1, [r2, #0]
 8001b1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3318      	adds	r3, #24
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	3304      	adds	r3, #4
 8001b28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3307      	adds	r3, #7
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3306      	adds	r3, #6
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3305      	adds	r3, #5
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	3204      	adds	r2, #4
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6811      	ldr	r1, [r2, #0]
 8001b52:	ea43 0200 	orr.w	r2, r3, r0
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3303      	adds	r3, #3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	4610      	mov	r0, r2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6811      	ldr	r1, [r2, #0]
 8001b88:	ea43 0200 	orr.w	r2, r3, r0
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	6811      	ldr	r1, [r2, #0]
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3318      	adds	r3, #24
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	440b      	add	r3, r1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e00e      	b.n	8001bda <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e006      	b.n	8001bda <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d002      	beq.n	8001c04 <HAL_CAN_ActivateNotification+0x1e>
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d109      	bne.n	8001c18 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6959      	ldr	r1, [r3, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e006      	b.n	8001c26 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b08a      	sub	sp, #40	@ 0x28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d07c      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d023      	beq.n	8001cca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f983 	bl	8001fa0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c9a:	e016      	b.n	8001cca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e00c      	b.n	8001cca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc2:	e002      	b.n	8001cca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f989 	bl	8001fdc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d024      	beq.n	8001d1e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f963 	bl	8001fb4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cee:	e016      	b.n	8001d1e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d02:	e00c      	b.n	8001d1e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d16:	e002      	b.n	8001d1e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f969 	bl	8001ff0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d024      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f943 	bl	8001fc8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d42:	e016      	b.n	8001d72 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d56:	e00c      	b.n	8001d72 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d004      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6a:	e002      	b.n	8001d72 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f949 	bl	8002004 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00c      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2210      	movs	r2, #16
 8001d94:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2208      	movs	r2, #8
 8001db0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f93a 	bl	800202c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f921 	bl	8002018 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00c      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2210      	movs	r2, #16
 8001df8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00b      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2208      	movs	r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f91c 	bl	8002054 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f903 	bl	8002040 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0310 	and.w	r3, r3, #16
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2210      	movs	r2, #16
 8001e54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f906 	bl	8002068 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2208      	movs	r2, #8
 8001e76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8ff 	bl	800207c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d07b      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d072      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d043      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03e      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f00:	2b60      	cmp	r3, #96	@ 0x60
 8001f02:	d02b      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x32a>
 8001f04:	2b60      	cmp	r3, #96	@ 0x60
 8001f06:	d82e      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f08:	2b50      	cmp	r3, #80	@ 0x50
 8001f0a:	d022      	beq.n	8001f52 <HAL_CAN_IRQHandler+0x320>
 8001f0c:	2b50      	cmp	r3, #80	@ 0x50
 8001f0e:	d82a      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f10:	2b40      	cmp	r3, #64	@ 0x40
 8001f12:	d019      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x316>
 8001f14:	2b40      	cmp	r3, #64	@ 0x40
 8001f16:	d826      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f18:	2b30      	cmp	r3, #48	@ 0x30
 8001f1a:	d010      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x30c>
 8001f1c:	2b30      	cmp	r3, #48	@ 0x30
 8001f1e:	d822      	bhi.n	8001f66 <HAL_CAN_IRQHandler+0x334>
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d002      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x2f8>
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d005      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f28:	e01d      	b.n	8001f66 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f043 0308 	orr.w	r3, r3, #8
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f32:	e019      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	f043 0310 	orr.w	r3, r3, #16
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f3c:	e014      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f043 0320 	orr.w	r3, r3, #32
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f46:	e00f      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f50:	e00a      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f5a:	e005      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f64:	e000      	b.n	8001f68 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f66:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f76:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f87c 	bl	8002090 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	@ 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b4:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <__NVIC_SetPriorityGrouping+0x44>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f0:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <__NVIC_GetPriorityGrouping+0x18>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	f003 0307 	and.w	r3, r3, #7
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	@ (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	@ (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	@ (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	@ 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	@ 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff29 	bl	80020a4 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff3e 	bl	80020ec <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff8e 	bl	8002198 <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5d 	bl	8002144 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa2 	bl	8002200 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d005      	beq.n	80022ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2204      	movs	r2, #4
 80022e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
 80022e8:	e029      	b.n	800233e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 020e 	bic.w	r2, r2, #14
 80022f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f003 021c 	and.w	r2, r3, #28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f202 	lsl.w	r2, r1, r2
 800231c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
    }
  }
  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002356:	b2db      	uxtb	r3, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e154      	b.n	800261e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8146 	beq.w	8002618 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d017      	beq.n	8002442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d123      	bne.n	8002496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	220f      	movs	r2, #15
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4013      	ands	r3, r2
 8002470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	08da      	lsrs	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3208      	adds	r2, #8
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0203 	and.w	r2, r3, #3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80a0 	beq.w	8002618 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d8:	4b58      	ldr	r3, [pc, #352]	@ (800263c <HAL_GPIO_Init+0x2d8>)
 80024da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024dc:	4a57      	ldr	r2, [pc, #348]	@ (800263c <HAL_GPIO_Init+0x2d8>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80024e4:	4b55      	ldr	r3, [pc, #340]	@ (800263c <HAL_GPIO_Init+0x2d8>)
 80024e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024f0:	4a53      	ldr	r2, [pc, #332]	@ (8002640 <HAL_GPIO_Init+0x2dc>)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800251a:	d019      	beq.n	8002550 <HAL_GPIO_Init+0x1ec>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a49      	ldr	r2, [pc, #292]	@ (8002644 <HAL_GPIO_Init+0x2e0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_GPIO_Init+0x1e8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a48      	ldr	r2, [pc, #288]	@ (8002648 <HAL_GPIO_Init+0x2e4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00d      	beq.n	8002548 <HAL_GPIO_Init+0x1e4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a47      	ldr	r2, [pc, #284]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d007      	beq.n	8002544 <HAL_GPIO_Init+0x1e0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a46      	ldr	r2, [pc, #280]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_GPIO_Init+0x1dc>
 800253c:	2304      	movs	r3, #4
 800253e:	e008      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002540:	2307      	movs	r3, #7
 8002542:	e006      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002544:	2303      	movs	r3, #3
 8002546:	e004      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002548:	2302      	movs	r3, #2
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002550:	2300      	movs	r3, #0
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	4093      	lsls	r3, r2
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002562:	4937      	ldr	r1, [pc, #220]	@ (8002640 <HAL_GPIO_Init+0x2dc>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002594:	4a2f      	ldr	r2, [pc, #188]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800259a:	4b2e      	ldr	r3, [pc, #184]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4013      	ands	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025be:	4a25      	ldr	r2, [pc, #148]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025ee:	4b19      	ldr	r3, [pc, #100]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002612:	4a10      	ldr	r2, [pc, #64]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	f47f aea3 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	371c      	adds	r7, #28
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40021000 	.word	0x40021000
 8002640:	40010000 	.word	0x40010000
 8002644:	48000400 	.word	0x48000400
 8002648:	48000800 	.word	0x48000800
 800264c:	48000c00 	.word	0x48000c00
 8002650:	48001000 	.word	0x48001000
 8002654:	40010400 	.word	0x40010400

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002674:	e002      	b.n	800267c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	43d9      	mvns	r1, r3
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	400b      	ands	r3, r1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026c6:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026d2:	4a05      	ldr	r2, [pc, #20]	@ (80026e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fc46 	bl	8000f6c <HAL_GPIO_EXTI_Callback>
  }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40010400 	.word	0x40010400

080026ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e08d      	b.n	800281a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fa96 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2224      	movs	r2, #36	@ 0x24
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800273c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800274c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d107      	bne.n	8002766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	e006      	b.n	8002774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d108      	bne.n	800278e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e007      	b.n	800279e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800279c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69d9      	ldr	r1, [r3, #28]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1a      	ldr	r2, [r3, #32]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
 8002834:	4613      	mov	r3, r2
 8002836:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 80fd 	bne.w	8002a40 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x30>
 8002850:	2302      	movs	r3, #2
 8002852:	e0f6      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800285c:	f7fe feba 	bl	80015d4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f001 f871 	bl	8003956 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0e1      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	@ 0x21
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2210      	movs	r2, #16
 800288a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2bff      	cmp	r3, #255	@ 0xff
 80028ae:	d906      	bls.n	80028be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	22ff      	movs	r2, #255	@ 0xff
 80028b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80028b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e007      	b.n	80028ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d024      	beq.n	8002920 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290a:	b2db      	uxtb	r3, r3
 800290c:	3301      	adds	r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	8979      	ldrh	r1, [r7, #10]
 8002912:	4b4e      	ldr	r3, [pc, #312]	@ (8002a4c <HAL_I2C_Master_Transmit+0x228>)
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f001 fa6b 	bl	8003df4 <I2C_TransferConfig>
 800291e:	e066      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	4b48      	ldr	r3, [pc, #288]	@ (8002a4c <HAL_I2C_Master_Transmit+0x228>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f001 fa60 	bl	8003df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002934:	e05b      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 f864 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e07b      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d034      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d130      	bne.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	2200      	movs	r2, #0
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 ffdd 	bl	8003956 <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e04d      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2bff      	cmp	r3, #255	@ 0xff
 80029ae:	d90e      	bls.n	80029ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	22ff      	movs	r2, #255	@ 0xff
 80029b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	8979      	ldrh	r1, [r7, #10]
 80029be:	2300      	movs	r3, #0
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f001 fa14 	bl	8003df4 <I2C_TransferConfig>
 80029cc:	e00f      	b.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	2300      	movs	r3, #0
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f001 fa03 	bl	8003df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d19e      	bne.n	8002936 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	6a39      	ldr	r1, [r7, #32]
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f001 f84a 	bl	8003a96 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e01a      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2220      	movs	r2, #32
 8002a12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <HAL_I2C_Master_Transmit+0x22c>)
 8002a20:	400b      	ands	r3, r1
 8002a22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	80002000 	.word	0x80002000
 8002a50:	fe00e800 	.word	0xfe00e800

08002a54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	460b      	mov	r3, r1
 8002a62:	817b      	strh	r3, [r7, #10]
 8002a64:	4613      	mov	r3, r2
 8002a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	f040 80db 	bne.w	8002c2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2C_Master_Receive+0x30>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0d4      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a8c:	f7fe fda2 	bl	80015d4 <HAL_GetTick>
 8002a90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2319      	movs	r3, #25
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 ff59 	bl	8003956 <I2C_WaitOnFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e0bf      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2222      	movs	r2, #34	@ 0x22
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2210      	movs	r2, #16
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	893a      	ldrh	r2, [r7, #8]
 8002ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2bff      	cmp	r3, #255	@ 0xff
 8002ade:	d90e      	bls.n	8002afe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	4b52      	ldr	r3, [pc, #328]	@ (8002c38 <HAL_I2C_Master_Receive+0x1e4>)
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f001 f97c 	bl	8003df4 <I2C_TransferConfig>
 8002afc:	e06d      	b.n	8002bda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	8979      	ldrh	r1, [r7, #10]
 8002b10:	4b49      	ldr	r3, [pc, #292]	@ (8002c38 <HAL_I2C_Master_Receive+0x1e4>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f001 f96b 	bl	8003df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b1e:	e05c      	b.n	8002bda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	6a39      	ldr	r1, [r7, #32]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fff9 	bl	8003b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e07c      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d034      	beq.n	8002bda <HAL_I2C_Master_Receive+0x186>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d130      	bne.n	8002bda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2180      	movs	r1, #128	@ 0x80
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fee7 	bl	8003956 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e04d      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2bff      	cmp	r3, #255	@ 0xff
 8002b9a:	d90e      	bls.n	8002bba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	22ff      	movs	r2, #255	@ 0xff
 8002ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f001 f91e 	bl	8003df4 <I2C_TransferConfig>
 8002bb8:	e00f      	b.n	8002bda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	8979      	ldrh	r1, [r7, #10]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f001 f90d 	bl	8003df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d19d      	bne.n	8002b20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	6a39      	ldr	r1, [r7, #32]
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 ff54 	bl	8003a96 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e01a      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <HAL_I2C_Master_Receive+0x1e8>)
 8002c0c:	400b      	ands	r3, r1
 8002c0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	80002400 	.word	0x80002400
 8002c3c:	fe00e800 	.word	0xfe00e800

08002c40 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	@ 0x28
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	f040 80d6 	bne.w	8002e0e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c70:	d101      	bne.n	8002c76 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0cc      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_I2C_IsDeviceReady+0x44>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e0c5      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x1d0>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2224      	movs	r2, #36	@ 0x24
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_I2C_IsDeviceReady+0x72>
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cb0:	e006      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x80>
 8002cb2:	897b      	ldrh	r3, [r7, #10]
 8002cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cbc:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fc85 	bl	80015d4 <HAL_GetTick>
 8002cca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cf8:	e034      	b.n	8002d64 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d01a      	beq.n	8002d38 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d02:	f7fe fc67 	bl	80015d4 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d302      	bcc.n	8002d18 <HAL_I2C_IsDeviceReady+0xd8>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10f      	bne.n	8002d38 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e06b      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d64:	7ffb      	ldrb	r3, [r7, #31]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_I2C_IsDeviceReady+0x130>
 8002d6a:	7fbb      	ldrb	r3, [r7, #30]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0c4      	beq.n	8002cfa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d01a      	beq.n	8002db4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2120      	movs	r1, #32
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fde4 	bl	8003956 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e03b      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e02d      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2120      	movs	r1, #32
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fdc9 	bl	8003956 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e020      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3301      	adds	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f63f af56 	bhi.w	8002c9a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
  }
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	68f9      	ldr	r1, [r7, #12]
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
  }
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e8c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00f      	beq.n	8002eb8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0208 	orr.w	r2, r3, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eb6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00f      	beq.n	8002ee2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed0:	f043 0202 	orr.w	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 030b 	and.w	r3, r3, #11
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002ef2:	68f9      	ldr	r1, [r7, #12]
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fbd5 	bl	80036a4 <I2C_ITError>
  }
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	70fb      	strb	r3, [r7, #3]
 8002f36:	4613      	mov	r3, r2
 8002f38:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <I2C_Slave_ISR_IT+0x24>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e0e2      	b.n	800316c <I2C_Slave_ISR_IT+0x1ea>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002fc2:	6939      	ldr	r1, [r7, #16]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f9b5 	bl	8003334 <I2C_ITSlaveCplt>
 8002fca:	e0ca      	b.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d04b      	beq.n	800306e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d046      	beq.n	800306e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d128      	bne.n	800303c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b28      	cmp	r3, #40	@ 0x28
 8002ff4:	d108      	bne.n	8003008 <I2C_Slave_ISR_IT+0x86>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ffc:	d104      	bne.n	8003008 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ffe:	6939      	ldr	r1, [r7, #16]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fafb 	bl	80035fc <I2C_ITListenCplt>
 8003006:	e031      	b.n	800306c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b29      	cmp	r3, #41	@ 0x29
 8003012:	d10e      	bne.n	8003032 <I2C_Slave_ISR_IT+0xb0>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800301a:	d00a      	beq.n	8003032 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2210      	movs	r2, #16
 8003022:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fc54 	bl	80038d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f926 	bl	800327c <I2C_ITSlaveSeqCplt>
 8003030:	e01c      	b.n	800306c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2210      	movs	r2, #16
 8003038:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800303a:	e08f      	b.n	800315c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	f043 0204 	orr.w	r2, r3, #4
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <I2C_Slave_ISR_IT+0xdc>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800305c:	d17e      	bne.n	800315c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	4619      	mov	r1, r3
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fb1d 	bl	80036a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800306a:	e077      	b.n	800315c <I2C_Slave_ISR_IT+0x1da>
 800306c:	e076      	b.n	800315c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02f      	beq.n	80030d8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800307e:	2b00      	cmp	r3, #0
 8003080:	d02a      	beq.n	80030d8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d018      	beq.n	80030be <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d14b      	bne.n	8003160 <I2C_Slave_ISR_IT+0x1de>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030ce:	d047      	beq.n	8003160 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f8d3 	bl	800327c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80030d6:	e043      	b.n	8003160 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80030ec:	6939      	ldr	r1, [r7, #16]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f840 	bl	8003174 <I2C_ITAddrCplt>
 80030f4:	e035      	b.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d030      	beq.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003106:	2b00      	cmp	r3, #0
 8003108:	d02b      	beq.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d018      	beq.n	8003146 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003144:	e00d      	b.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800314c:	d002      	beq.n	8003154 <I2C_Slave_ISR_IT+0x1d2>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f891 	bl	800327c <I2C_ITSlaveSeqCplt>
 800315a:	e002      	b.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003160:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003184:	b2db      	uxtb	r3, r3
 8003186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800318a:	2b28      	cmp	r3, #40	@ 0x28
 800318c:	d16a      	bne.n	8003264 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80031ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80031c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d138      	bne.n	8003244 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80031d2:	897b      	ldrh	r3, [r7, #10]
 80031d4:	09db      	lsrs	r3, r3, #7
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	89bb      	ldrh	r3, [r7, #12]
 80031da:	4053      	eors	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f003 0306 	and.w	r3, r3, #6
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11c      	bne.n	8003220 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d13b      	bne.n	8003274 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2208      	movs	r2, #8
 8003208:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003212:	89ba      	ldrh	r2, [r7, #12]
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fe86 	bl	8002f2a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800321e:	e029      	b.n	8003274 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fe15 	bl	8003e58 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003236:	89ba      	ldrh	r2, [r7, #12]
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fe74 	bl	8002f2a <HAL_I2C_AddrCallback>
}
 8003242:	e017      	b.n	8003274 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003244:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fe05 	bl	8003e58 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003256:	89ba      	ldrh	r2, [r7, #12]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fe64 	bl	8002f2a <HAL_I2C_AddrCallback>
}
 8003262:	e007      	b.n	8003274 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	e00c      	b.n	80032ca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b29      	cmp	r3, #41	@ 0x29
 80032d4:	d112      	bne.n	80032fc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2228      	movs	r2, #40	@ 0x28
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2221      	movs	r2, #33	@ 0x21
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032e4:	2101      	movs	r1, #1
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fdb6 	bl	8003e58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fe04 	bl	8002f02 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032fa:	e017      	b.n	800332c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b2a      	cmp	r3, #42	@ 0x2a
 8003306:	d111      	bne.n	800332c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2228      	movs	r2, #40	@ 0x28
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2222      	movs	r2, #34	@ 0x22
 8003314:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003316:	2102      	movs	r1, #2
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fd9d 	bl	8003e58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fdf5 	bl	8002f16 <HAL_I2C_SlaveRxCpltCallback>
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003356:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2220      	movs	r2, #32
 800335e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	2b21      	cmp	r3, #33	@ 0x21
 8003364:	d002      	beq.n	800336c <I2C_ITSlaveCplt+0x38>
 8003366:	7afb      	ldrb	r3, [r7, #11]
 8003368:	2b29      	cmp	r3, #41	@ 0x29
 800336a:	d108      	bne.n	800337e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800336c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fd71 	bl	8003e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2221      	movs	r2, #33	@ 0x21
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
 800337c:	e019      	b.n	80033b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800337e:	7afb      	ldrb	r3, [r7, #11]
 8003380:	2b22      	cmp	r3, #34	@ 0x22
 8003382:	d002      	beq.n	800338a <I2C_ITSlaveCplt+0x56>
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	2b2a      	cmp	r3, #42	@ 0x2a
 8003388:	d108      	bne.n	800339c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800338a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fd62 	bl	8003e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2222      	movs	r2, #34	@ 0x22
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
 800339a:	e00a      	b.n	80033b2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800339c:	7afb      	ldrb	r3, [r7, #11]
 800339e:	2b28      	cmp	r3, #40	@ 0x28
 80033a0:	d107      	bne.n	80033b2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80033a2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fd56 	bl	8003e58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033c0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b89      	ldr	r3, [pc, #548]	@ (80035f4 <I2C_ITSlaveCplt+0x2c0>)
 80033ce:	400b      	ands	r3, r1
 80033d0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fa7d 	bl	80038d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d013      	beq.n	800340a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01f      	beq.n	800343a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003408:	e017      	b.n	800343a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d012      	beq.n	800343a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003422:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d006      	beq.n	800343a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0304 	bic.w	r3, r3, #4
 800344a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00c      	beq.n	8003486 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003494:	f043 0204 	orr.w	r2, r3, #4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d049      	beq.n	800353a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d044      	beq.n	800353a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d128      	bne.n	800350c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b28      	cmp	r3, #40	@ 0x28
 80034c4:	d108      	bne.n	80034d8 <I2C_ITSlaveCplt+0x1a4>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034cc:	d104      	bne.n	80034d8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f893 	bl	80035fc <I2C_ITListenCplt>
 80034d6:	e030      	b.n	800353a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b29      	cmp	r3, #41	@ 0x29
 80034e2:	d10e      	bne.n	8003502 <I2C_ITSlaveCplt+0x1ce>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034ea:	d00a      	beq.n	8003502 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2210      	movs	r2, #16
 80034f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9ec 	bl	80038d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff febe 	bl	800327c <I2C_ITSlaveSeqCplt>
 8003500:	e01b      	b.n	800353a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	61da      	str	r2, [r3, #28]
 800350a:	e016      	b.n	800353a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2210      	movs	r2, #16
 8003512:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	f043 0204 	orr.w	r2, r3, #4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <I2C_ITSlaveCplt+0x1fa>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800352c:	d105      	bne.n	800353a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8b5 	bl	80036a4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354c:	2b00      	cmp	r3, #0
 800354e:	d010      	beq.n	8003572 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	4619      	mov	r1, r3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8a4 	bl	80036a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b28      	cmp	r3, #40	@ 0x28
 8003566:	d141      	bne.n	80035ec <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003568:	6979      	ldr	r1, [r7, #20]
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f846 	bl	80035fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003570:	e03c      	b.n	80035ec <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800357a:	d014      	beq.n	80035a6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fe7d 	bl	800327c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1c      	ldr	r2, [pc, #112]	@ (80035f8 <I2C_ITSlaveCplt+0x2c4>)
 8003586:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fcd1 	bl	8002f46 <HAL_I2C_ListenCpltCallback>
}
 80035a4:	e022      	b.n	80035ec <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b22      	cmp	r3, #34	@ 0x22
 80035b0:	d10e      	bne.n	80035d0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fca4 	bl	8002f16 <HAL_I2C_SlaveRxCpltCallback>
}
 80035ce:	e00d      	b.n	80035ec <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fc8b 	bl	8002f02 <HAL_I2C_SlaveTxCpltCallback>
}
 80035ec:	bf00      	nop
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	fe00e800 	.word	0xfe00e800
 80035f8:	ffff0000 	.word	0xffff0000

080035fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a25      	ldr	r2, [pc, #148]	@ (80036a0 <I2C_ITListenCplt+0xa4>)
 800360a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d022      	beq.n	8003678 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	f043 0204 	orr.w	r2, r3, #4
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003678:	f248 0103 	movw	r1, #32771	@ 0x8003
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fbeb 	bl	8003e58 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2210      	movs	r2, #16
 8003688:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fc57 	bl	8002f46 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	ffff0000 	.word	0xffff0000

080036a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a6d      	ldr	r2, [pc, #436]	@ (8003878 <I2C_ITError+0x1d4>)
 80036c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	2b28      	cmp	r3, #40	@ 0x28
 80036da:	d005      	beq.n	80036e8 <I2C_ITError+0x44>
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b29      	cmp	r3, #41	@ 0x29
 80036e0:	d002      	beq.n	80036e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80036e6:	d10b      	bne.n	8003700 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036e8:	2103      	movs	r1, #3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fbb4 	bl	8003e58 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2228      	movs	r2, #40	@ 0x28
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a60      	ldr	r2, [pc, #384]	@ (800387c <I2C_ITError+0x1d8>)
 80036fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80036fe:	e030      	b.n	8003762 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003700:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fba7 	bl	8003e58 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8e1 	bl	80038d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b60      	cmp	r3, #96	@ 0x60
 800371a:	d01f      	beq.n	800375c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	d114      	bne.n	800375c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d109      	bne.n	8003754 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2210      	movs	r2, #16
 8003746:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374c:	f043 0204 	orr.w	r2, r3, #4
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2220      	movs	r2, #32
 800375a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d039      	beq.n	80037e4 <I2C_ITError+0x140>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b11      	cmp	r3, #17
 8003774:	d002      	beq.n	800377c <I2C_ITError+0xd8>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b21      	cmp	r3, #33	@ 0x21
 800377a:	d133      	bne.n	80037e4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378a:	d107      	bne.n	800379c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800379a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe fdd1 	bl	8002348 <HAL_DMA_GetState>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d017      	beq.n	80037dc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	4a33      	ldr	r2, [pc, #204]	@ (8003880 <I2C_ITError+0x1dc>)
 80037b2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fd80 	bl	80022c6 <HAL_DMA_Abort_IT>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d04d      	beq.n	8003868 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037d6:	4610      	mov	r0, r2
 80037d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037da:	e045      	b.n	8003868 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f851 	bl	8003884 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037e2:	e041      	b.n	8003868 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d039      	beq.n	8003860 <I2C_ITError+0x1bc>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b12      	cmp	r3, #18
 80037f0:	d002      	beq.n	80037f8 <I2C_ITError+0x154>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b22      	cmp	r3, #34	@ 0x22
 80037f6:	d133      	bne.n	8003860 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003806:	d107      	bne.n	8003818 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003816:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe fd93 	bl	8002348 <HAL_DMA_GetState>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d017      	beq.n	8003858 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382c:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <I2C_ITError+0x1dc>)
 800382e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fd42 	bl	80022c6 <HAL_DMA_Abort_IT>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d011      	beq.n	800386c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003852:	4610      	mov	r0, r2
 8003854:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003856:	e009      	b.n	800386c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f813 	bl	8003884 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800385e:	e005      	b.n	800386c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f80f 	bl	8003884 <I2C_TreatErrorCallback>
  }
}
 8003866:	e002      	b.n	800386e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800386c:	bf00      	nop
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	ffff0000 	.word	0xffff0000
 800387c:	08002f83 	.word	0x08002f83
 8003880:	0800391b 	.word	0x0800391b

08003884 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b60      	cmp	r3, #96	@ 0x60
 8003896:	d10e      	bne.n	80038b6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fb5d 	bl	8002f6e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038b4:	e009      	b.n	80038ca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fb48 	bl	8002f5a <HAL_I2C_ErrorCallback>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d103      	bne.n	80038f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2200      	movs	r2, #0
 80038ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d007      	beq.n	800390e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	619a      	str	r2, [r3, #24]
  }
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	2200      	movs	r2, #0
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	2200      	movs	r2, #0
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff ff9b 	bl	8003884 <I2C_TreatErrorCallback>
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003966:	e03b      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f961 	bl	8003c34 <I2C_IsErrorOccurred>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e041      	b.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d02d      	beq.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fd fe26 	bl	80015d4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d122      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d113      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e00f      	b.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d0b4      	beq.n	8003968 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a14:	e033      	b.n	8003a7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f90a 	bl	8003c34 <I2C_IsErrorOccurred>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e031      	b.n	8003a8e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d025      	beq.n	8003a7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fd fdcf 	bl	80015d4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d11a      	bne.n	8003a7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d013      	beq.n	8003a7e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e007      	b.n	8003a8e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d1c4      	bne.n	8003a16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa2:	e02f      	b.n	8003b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f8c3 	bl	8003c34 <I2C_IsErrorOccurred>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e02d      	b.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab8:	f7fd fd8c 	bl	80015d4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11a      	bne.n	8003b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d013      	beq.n	8003b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e007      	b.n	8003b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f003 0320 	and.w	r3, r3, #32
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d1c8      	bne.n	8003aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b2c:	e071      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f87e 	bl	8003c34 <I2C_IsErrorOccurred>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d13b      	bne.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d138      	bne.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d105      	bne.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d121      	bne.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2220      	movs	r2, #32
 8003b92:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b24      	ldr	r3, [pc, #144]	@ (8003c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
 8003bc0:	e002      	b.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003bc8:	f7fd fd04 	bl	80015d4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d302      	bcc.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d119      	bne.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d116      	bne.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d00f      	beq.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d002      	beq.n	8003c26 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d083      	beq.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	fe00e800 	.word	0xfe00e800

08003c34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	@ 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d068      	beq.n	8003d32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2210      	movs	r2, #16
 8003c66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c68:	e049      	b.n	8003cfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d045      	beq.n	8003cfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fd fcaf 	bl	80015d4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_IsErrorOccurred+0x54>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d13a      	bne.n	8003cfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003caa:	d121      	bne.n	8003cf0 <I2C_IsErrorOccurred+0xbc>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cb2:	d01d      	beq.n	8003cf0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d01a      	beq.n	8003cf0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cca:	f7fd fc83 	bl	80015d4 <HAL_GetTick>
 8003cce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd0:	e00e      	b.n	8003cf0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cd2:	f7fd fc7f 	bl	80015d4 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b19      	cmp	r3, #25
 8003cde:	d907      	bls.n	8003cf0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f043 0320 	orr.w	r3, r3, #32
 8003ce6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003cee:	e006      	b.n	8003cfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d1e9      	bne.n	8003cd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d003      	beq.n	8003d14 <I2C_IsErrorOccurred+0xe0>
 8003d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0aa      	beq.n	8003c6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2220      	movs	r2, #32
 8003d22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f043 0304 	orr.w	r3, r3, #4
 8003d2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f043 0308 	orr.w	r3, r3, #8
 8003d6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f043 0302 	orr.w	r3, r3, #2
 8003d8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01c      	beq.n	8003de2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7ff fd92 	bl	80038d2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <I2C_IsErrorOccurred+0x1bc>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003de2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3728      	adds	r7, #40	@ 0x28
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	fe00e800 	.word	0xfe00e800

08003df4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607b      	str	r3, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	817b      	strh	r3, [r7, #10]
 8003e02:	4613      	mov	r3, r2
 8003e04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e0c:	7a7b      	ldrb	r3, [r7, #9]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	0d5b      	lsrs	r3, r3, #21
 8003e2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e32:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <I2C_TransferConfig+0x60>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	43db      	mvns	r3, r3
 8003e38:	ea02 0103 	and.w	r1, r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	03ff63ff 	.word	0x03ff63ff

08003e58 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e68:	887b      	ldrh	r3, [r7, #2]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00f      	beq.n	8003e92 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003e78:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e86:	2b28      	cmp	r3, #40	@ 0x28
 8003e88:	d003      	beq.n	8003e92 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003e90:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00f      	beq.n	8003ebc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003ea2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003eb0:	2b28      	cmp	r3, #40	@ 0x28
 8003eb2:	d003      	beq.n	8003ebc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003eba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	da03      	bge.n	8003ecc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003eca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d103      	bne.n	8003eda <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003eda:	887b      	ldrh	r3, [r7, #2]
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d103      	bne.n	8003ee8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f043 0320 	orr.w	r3, r3, #32
 8003ee6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d103      	bne.n	8003ef6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	400a      	ands	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d138      	bne.n	8003f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e032      	b.n	8003f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	@ 0x24
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d139      	bne.n	8004034 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e033      	b.n	8004036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2224      	movs	r2, #36	@ 0x24
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ffc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <HAL_PWREx_GetVoltageRange+0x18>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000

08004060 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800406e:	d130      	bne.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004070:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800407c:	d038      	beq.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800407e:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004086:	4a1e      	ldr	r2, [pc, #120]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004088:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800408c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800408e:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2232      	movs	r2, #50	@ 0x32
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	4a1b      	ldr	r2, [pc, #108]	@ (8004108 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9b      	lsrs	r3, r3, #18
 80040a0:	3301      	adds	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a4:	e002      	b.n	80040ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040ac:	4b14      	ldr	r3, [pc, #80]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b8:	d102      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f2      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040cc:	d110      	bne.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e00f      	b.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040de:	d007      	beq.n	80040f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040e0:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040e8:	4a05      	ldr	r2, [pc, #20]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40007000 	.word	0x40007000
 8004104:	20000004 	.word	0x20000004
 8004108:	431bde83 	.word	0x431bde83

0800410c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f000 bc02 	b.w	8004924 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004120:	4b96      	ldr	r3, [pc, #600]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800412a:	4b94      	ldr	r3, [pc, #592]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 80e4 	beq.w	800430a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <HAL_RCC_OscConfig+0x4c>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b0c      	cmp	r3, #12
 800414c:	f040 808b 	bne.w	8004266 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b01      	cmp	r3, #1
 8004154:	f040 8087 	bne.w	8004266 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004158:	4b88      	ldr	r3, [pc, #544]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_OscConfig+0x64>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e3d9      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	4b81      	ldr	r3, [pc, #516]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <HAL_RCC_OscConfig+0x7e>
 8004180:	4b7e      	ldr	r3, [pc, #504]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004188:	e005      	b.n	8004196 <HAL_RCC_OscConfig+0x8a>
 800418a:	4b7c      	ldr	r3, [pc, #496]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004196:	4293      	cmp	r3, r2
 8004198:	d223      	bcs.n	80041e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fd54 	bl	8004c4c <RCC_SetFlashLatencyFromMSIRange>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e3ba      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ae:	4b73      	ldr	r3, [pc, #460]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a72      	ldr	r2, [pc, #456]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041b4:	f043 0308 	orr.w	r3, r3, #8
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b70      	ldr	r3, [pc, #448]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	496d      	ldr	r1, [pc, #436]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041cc:	4b6b      	ldr	r3, [pc, #428]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	4968      	ldr	r1, [pc, #416]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
 80041e0:	e025      	b.n	800422e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041e2:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a65      	ldr	r2, [pc, #404]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b63      	ldr	r3, [pc, #396]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4960      	ldr	r1, [pc, #384]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004200:	4b5e      	ldr	r3, [pc, #376]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	495b      	ldr	r1, [pc, #364]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fd14 	bl	8004c4c <RCC_SetFlashLatencyFromMSIRange>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e37a      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800422e:	f000 fc81 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b51      	ldr	r3, [pc, #324]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	4950      	ldr	r1, [pc, #320]	@ (8004380 <HAL_RCC_OscConfig+0x274>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	4a4e      	ldr	r2, [pc, #312]	@ (8004384 <HAL_RCC_OscConfig+0x278>)
 800424c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800424e:	4b4e      	ldr	r3, [pc, #312]	@ (8004388 <HAL_RCC_OscConfig+0x27c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd f96e 	bl	8001534 <HAL_InitTick>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d052      	beq.n	8004308 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	e35e      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d032      	beq.n	80042d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800426e:	4b43      	ldr	r3, [pc, #268]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a42      	ldr	r2, [pc, #264]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800427a:	f7fd f9ab 	bl	80015d4 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004282:	f7fd f9a7 	bl	80015d4 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e347      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004294:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a0:	4b36      	ldr	r3, [pc, #216]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a35      	ldr	r2, [pc, #212]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042a6:	f043 0308 	orr.w	r3, r3, #8
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	4b33      	ldr	r3, [pc, #204]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	4930      	ldr	r1, [pc, #192]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042be:	4b2f      	ldr	r3, [pc, #188]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	492b      	ldr	r1, [pc, #172]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
 80042d2:	e01a      	b.n	800430a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042d4:	4b29      	ldr	r3, [pc, #164]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a28      	ldr	r2, [pc, #160]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042e0:	f7fd f978 	bl	80015d4 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e8:	f7fd f974 	bl	80015d4 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e314      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042fa:	4b20      	ldr	r3, [pc, #128]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x1dc>
 8004306:	e000      	b.n	800430a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004308:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d073      	beq.n	80043fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d005      	beq.n	8004328 <HAL_RCC_OscConfig+0x21c>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d10e      	bne.n	8004340 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d10b      	bne.n	8004340 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004328:	4b14      	ldr	r3, [pc, #80]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d063      	beq.n	80043fc <HAL_RCC_OscConfig+0x2f0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d15f      	bne.n	80043fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e2f1      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004348:	d106      	bne.n	8004358 <HAL_RCC_OscConfig+0x24c>
 800434a:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a0b      	ldr	r2, [pc, #44]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e025      	b.n	80043a4 <HAL_RCC_OscConfig+0x298>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004360:	d114      	bne.n	800438c <HAL_RCC_OscConfig+0x280>
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a05      	ldr	r2, [pc, #20]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b03      	ldr	r3, [pc, #12]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a02      	ldr	r2, [pc, #8]	@ (800437c <HAL_RCC_OscConfig+0x270>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e013      	b.n	80043a4 <HAL_RCC_OscConfig+0x298>
 800437c:	40021000 	.word	0x40021000
 8004380:	0800570c 	.word	0x0800570c
 8004384:	20000004 	.word	0x20000004
 8004388:	20000008 	.word	0x20000008
 800438c:	4ba0      	ldr	r3, [pc, #640]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a9f      	ldr	r2, [pc, #636]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	4b9d      	ldr	r3, [pc, #628]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a9c      	ldr	r2, [pc, #624]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800439e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d013      	beq.n	80043d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fd f912 	bl	80015d4 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fd f90e 	bl	80015d4 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e2ae      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c6:	4b92      	ldr	r3, [pc, #584]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x2a8>
 80043d2:	e014      	b.n	80043fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd f8fe 	bl	80015d4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fd f8fa 	bl	80015d4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	@ 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e29a      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ee:	4b88      	ldr	r3, [pc, #544]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x2d0>
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d060      	beq.n	80044cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d005      	beq.n	800441c <HAL_RCC_OscConfig+0x310>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b0c      	cmp	r3, #12
 8004414:	d119      	bne.n	800444a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d116      	bne.n	800444a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800441c:	4b7c      	ldr	r3, [pc, #496]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_RCC_OscConfig+0x328>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e277      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b76      	ldr	r3, [pc, #472]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	4973      	ldr	r1, [pc, #460]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004448:	e040      	b.n	80044cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d023      	beq.n	800449a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004452:	4b6f      	ldr	r3, [pc, #444]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a6e      	ldr	r2, [pc, #440]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800445c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fd f8b9 	bl	80015d4 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004466:	f7fd f8b5 	bl	80015d4 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e255      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004478:	4b65      	ldr	r3, [pc, #404]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004484:	4b62      	ldr	r3, [pc, #392]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	495f      	ldr	r1, [pc, #380]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
 8004498:	e018      	b.n	80044cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449a:	4b5d      	ldr	r3, [pc, #372]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a5c      	ldr	r2, [pc, #368]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80044a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fd f895 	bl	80015d4 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fd f891 	bl	80015d4 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e231      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044c0:	4b53      	ldr	r3, [pc, #332]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d03c      	beq.n	8004552 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01c      	beq.n	800451a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80044e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd f870 	bl	80015d4 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f8:	f7fd f86c 	bl	80015d4 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e20c      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800450a:	4b41      	ldr	r3, [pc, #260]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800450c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ef      	beq.n	80044f8 <HAL_RCC_OscConfig+0x3ec>
 8004518:	e01b      	b.n	8004552 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800451a:	4b3d      	ldr	r3, [pc, #244]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004520:	4a3b      	ldr	r2, [pc, #236]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452a:	f7fd f853 	bl	80015d4 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004532:	f7fd f84f 	bl	80015d4 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e1ef      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004544:	4b32      	ldr	r3, [pc, #200]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ef      	bne.n	8004532 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 80a6 	beq.w	80046ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004560:	2300      	movs	r3, #0
 8004562:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004564:	4b2a      	ldr	r3, [pc, #168]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b27      	ldr	r3, [pc, #156]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004574:	4a26      	ldr	r2, [pc, #152]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800457a:	6593      	str	r3, [r2, #88]	@ 0x58
 800457c:	4b24      	ldr	r3, [pc, #144]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458c:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <HAL_RCC_OscConfig+0x508>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d118      	bne.n	80045ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004598:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <HAL_RCC_OscConfig+0x508>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1d      	ldr	r2, [pc, #116]	@ (8004614 <HAL_RCC_OscConfig+0x508>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a4:	f7fd f816 	bl	80015d4 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ac:	f7fd f812 	bl	80015d4 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1b2      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045be:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <HAL_RCC_OscConfig+0x508>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d108      	bne.n	80045e4 <HAL_RCC_OscConfig+0x4d8>
 80045d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045e2:	e029      	b.n	8004638 <HAL_RCC_OscConfig+0x52c>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	d115      	bne.n	8004618 <HAL_RCC_OscConfig+0x50c>
 80045ec:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80045ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f2:	4a07      	ldr	r2, [pc, #28]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045fc:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004602:	4a03      	ldr	r2, [pc, #12]	@ (8004610 <HAL_RCC_OscConfig+0x504>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800460c:	e014      	b.n	8004638 <HAL_RCC_OscConfig+0x52c>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	40007000 	.word	0x40007000
 8004618:	4b9a      	ldr	r3, [pc, #616]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461e:	4a99      	ldr	r2, [pc, #612]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004628:	4b96      	ldr	r3, [pc, #600]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462e:	4a95      	ldr	r2, [pc, #596]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d016      	beq.n	800466e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fc ffc8 	bl	80015d4 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fc ffc4 	bl	80015d4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e162      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465e:	4b89      	ldr	r3, [pc, #548]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ed      	beq.n	8004648 <HAL_RCC_OscConfig+0x53c>
 800466c:	e015      	b.n	800469a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fc ffb1 	bl	80015d4 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fc ffad 	bl	80015d4 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e14b      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800468c:	4b7d      	ldr	r3, [pc, #500]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ed      	bne.n	8004676 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469a:	7ffb      	ldrb	r3, [r7, #31]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d105      	bne.n	80046ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a0:	4b78      	ldr	r3, [pc, #480]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a4:	4a77      	ldr	r2, [pc, #476]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80046a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d03c      	beq.n	8004732 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01c      	beq.n	80046fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046c0:	4b70      	ldr	r3, [pc, #448]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80046c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80046c8:	f043 0301 	orr.w	r3, r3, #1
 80046cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d0:	f7fc ff80 	bl	80015d4 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d8:	f7fc ff7c 	bl	80015d4 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e11c      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ea:	4b66      	ldr	r3, [pc, #408]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80046ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ef      	beq.n	80046d8 <HAL_RCC_OscConfig+0x5cc>
 80046f8:	e01b      	b.n	8004732 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046fa:	4b62      	ldr	r3, [pc, #392]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80046fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004700:	4a60      	ldr	r2, [pc, #384]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fc ff63 	bl	80015d4 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004712:	f7fc ff5f 	bl	80015d4 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0ff      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004724:	4b57      	ldr	r3, [pc, #348]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004726:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1ef      	bne.n	8004712 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80f3 	beq.w	8004922 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	2b02      	cmp	r3, #2
 8004742:	f040 80c9 	bne.w	80048d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004746:	4b4f      	ldr	r3, [pc, #316]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	429a      	cmp	r2, r3
 8004758:	d12c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	3b01      	subs	r3, #1
 8004766:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d123      	bne.n	80047b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004776:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d11b      	bne.n	80047b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d113      	bne.n	80047b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	3b01      	subs	r3, #1
 800479a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d109      	bne.n	80047b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d06b      	beq.n	800488c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d062      	beq.n	8004880 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ba:	4b32      	ldr	r3, [pc, #200]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0ac      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80047d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047d6:	f7fc fefd 	bl	80015d4 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047de:	f7fc fef9 	bl	80015d4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e099      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f0:	4b24      	ldr	r3, [pc, #144]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fc:	4b21      	ldr	r3, [pc, #132]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <HAL_RCC_OscConfig+0x77c>)
 8004802:	4013      	ands	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800480c:	3a01      	subs	r2, #1
 800480e:	0112      	lsls	r2, r2, #4
 8004810:	4311      	orrs	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004816:	0212      	lsls	r2, r2, #8
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800481e:	0852      	lsrs	r2, r2, #1
 8004820:	3a01      	subs	r2, #1
 8004822:	0552      	lsls	r2, r2, #21
 8004824:	4311      	orrs	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800482a:	0852      	lsrs	r2, r2, #1
 800482c:	3a01      	subs	r2, #1
 800482e:	0652      	lsls	r2, r2, #25
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004836:	06d2      	lsls	r2, r2, #27
 8004838:	430a      	orrs	r2, r1
 800483a:	4912      	ldr	r1, [pc, #72]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 800483c:	4313      	orrs	r3, r2
 800483e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004840:	4b10      	ldr	r3, [pc, #64]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0f      	ldr	r2, [pc, #60]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800484c:	4b0d      	ldr	r3, [pc, #52]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a0c      	ldr	r2, [pc, #48]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004858:	f7fc febc 	bl	80015d4 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fc feb8 	bl	80015d4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e058      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004872:	4b04      	ldr	r3, [pc, #16]	@ (8004884 <HAL_RCC_OscConfig+0x778>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487e:	e050      	b.n	8004922 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e04f      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
 8004884:	40021000 	.word	0x40021000
 8004888:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488c:	4b27      	ldr	r3, [pc, #156]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d144      	bne.n	8004922 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004898:	4b24      	ldr	r3, [pc, #144]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a23      	ldr	r2, [pc, #140]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 800489e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048a4:	4b21      	ldr	r3, [pc, #132]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4a20      	ldr	r2, [pc, #128]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 80048aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048b0:	f7fc fe90 	bl	80015d4 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fc fe8c 	bl	80015d4 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e02c      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ca:	4b18      	ldr	r3, [pc, #96]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCC_OscConfig+0x7ac>
 80048d6:	e024      	b.n	8004922 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d01f      	beq.n	800491e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048de:	4b13      	ldr	r3, [pc, #76]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a12      	ldr	r2, [pc, #72]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 80048e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fc fe73 	bl	80015d4 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fc fe6f 	bl	80015d4 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e00f      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004904:	4b09      	ldr	r3, [pc, #36]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	4905      	ldr	r1, [pc, #20]	@ (800492c <HAL_RCC_OscConfig+0x820>)
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_OscConfig+0x824>)
 8004918:	4013      	ands	r3, r2
 800491a:	60cb      	str	r3, [r1, #12]
 800491c:	e001      	b.n	8004922 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	feeefffc 	.word	0xfeeefffc

08004934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0e7      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b75      	ldr	r3, [pc, #468]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d910      	bls.n	8004978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b72      	ldr	r3, [pc, #456]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 0207 	bic.w	r2, r3, #7
 800495e:	4970      	ldr	r1, [pc, #448]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b6e      	ldr	r3, [pc, #440]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0cf      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	4b66      	ldr	r3, [pc, #408]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004990:	429a      	cmp	r2, r3
 8004992:	d908      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b63      	ldr	r3, [pc, #396]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4960      	ldr	r1, [pc, #384]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d04c      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b03      	cmp	r3, #3
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ba:	4b5a      	ldr	r3, [pc, #360]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d121      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0a6      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049d2:	4b54      	ldr	r3, [pc, #336]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d115      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e09a      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e08e      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e086      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a0a:	4b46      	ldr	r3, [pc, #280]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4943      	ldr	r1, [pc, #268]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1c:	f7fc fdda 	bl	80015d4 <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fc fdd6 	bl	80015d4 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e06e      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 020c 	and.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d1eb      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d010      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	4b31      	ldr	r3, [pc, #196]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d208      	bcs.n	8004a7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a68:	4b2e      	ldr	r3, [pc, #184]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	492b      	ldr	r1, [pc, #172]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7a:	4b29      	ldr	r3, [pc, #164]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d210      	bcs.n	8004aaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a88:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 0207 	bic.w	r2, r3, #7
 8004a90:	4923      	ldr	r1, [pc, #140]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a98:	4b21      	ldr	r3, [pc, #132]	@ (8004b20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e036      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	4918      	ldr	r1, [pc, #96]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	4910      	ldr	r1, [pc, #64]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ae8:	f000 f824 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	490b      	ldr	r1, [pc, #44]	@ (8004b28 <HAL_RCC_ClockConfig+0x1f4>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	4a09      	ldr	r2, [pc, #36]	@ (8004b2c <HAL_RCC_ClockConfig+0x1f8>)
 8004b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b08:	4b09      	ldr	r3, [pc, #36]	@ (8004b30 <HAL_RCC_ClockConfig+0x1fc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fc fd11 	bl	8001534 <HAL_InitTick>
 8004b12:	4603      	mov	r3, r0
 8004b14:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b16:	7afb      	ldrb	r3, [r7, #11]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40021000 	.word	0x40021000
 8004b28:	0800570c 	.word	0x0800570c
 8004b2c:	20000004 	.word	0x20000004
 8004b30:	20000008 	.word	0x20000008

08004b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b089      	sub	sp, #36	@ 0x24
 8004b38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b42:	4b3e      	ldr	r3, [pc, #248]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d121      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d11e      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b68:	4b34      	ldr	r3, [pc, #208]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b74:	4b31      	ldr	r3, [pc, #196]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e005      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b84:	4b2d      	ldr	r3, [pc, #180]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b90:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d102      	bne.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bac:	4b25      	ldr	r3, [pc, #148]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e004      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bb8:	4b23      	ldr	r3, [pc, #140]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d134      	bne.n	8004c2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0xa6>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b03      	cmp	r3, #3
 8004bd6:	d003      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0xac>
 8004bd8:	e005      	b.n	8004be6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bdc:	617b      	str	r3, [r7, #20]
      break;
 8004bde:	e005      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004be0:	4b19      	ldr	r3, [pc, #100]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8004be2:	617b      	str	r3, [r7, #20]
      break;
 8004be4:	e002      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	617b      	str	r3, [r7, #20]
      break;
 8004bea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bec:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bfa:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	fb03 f202 	mul.w	r2, r3, r2
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c12:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	0e5b      	lsrs	r3, r3, #25
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c2c:	69bb      	ldr	r3, [r7, #24]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3724      	adds	r7, #36	@ 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	0800571c 	.word	0x0800571c
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	007a1200 	.word	0x007a1200

08004c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c58:	4b2a      	ldr	r3, [pc, #168]	@ (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c64:	f7ff f9ee 	bl	8004044 <HAL_PWREx_GetVoltageRange>
 8004c68:	6178      	str	r0, [r7, #20]
 8004c6a:	e014      	b.n	8004c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c6c:	4b25      	ldr	r3, [pc, #148]	@ (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c70:	4a24      	ldr	r2, [pc, #144]	@ (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c78:	4b22      	ldr	r3, [pc, #136]	@ (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c84:	f7ff f9de 	bl	8004044 <HAL_PWREx_GetVoltageRange>
 8004c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9c:	d10b      	bne.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b80      	cmp	r3, #128	@ 0x80
 8004ca2:	d919      	bls.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ca8:	d902      	bls.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004caa:	2302      	movs	r3, #2
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	e013      	b.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e010      	b.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b80      	cmp	r3, #128	@ 0x80
 8004cba:	d902      	bls.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	e00a      	b.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b80      	cmp	r3, #128	@ 0x80
 8004cc6:	d102      	bne.n	8004cce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc8:	2302      	movs	r3, #2
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	e004      	b.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b70      	cmp	r3, #112	@ 0x70
 8004cd2:	d101      	bne.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 0207 	bic.w	r2, r3, #7
 8004ce0:	4909      	ldr	r1, [pc, #36]	@ (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ce8:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d001      	beq.n	8004cfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40022000 	.word	0x40022000

08004d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d14:	2300      	movs	r3, #0
 8004d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d18:	2300      	movs	r3, #0
 8004d1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d031      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d30:	d01a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d36:	d814      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d40:	d10f      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d42:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	4a5c      	ldr	r2, [pc, #368]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d4e:	e00c      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fa22 	bl	80051a0 <RCCEx_PLLSAI1_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d60:	e003      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	74fb      	strb	r3, [r7, #19]
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6a:	7cfb      	ldrb	r3, [r7, #19]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d70:	4b51      	ldr	r3, [pc, #324]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7e:	494e      	ldr	r1, [pc, #312]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d86:	e001      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 809e 	beq.w	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d9e:	4b46      	ldr	r3, [pc, #280]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b40      	ldr	r3, [pc, #256]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc0:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a39      	ldr	r2, [pc, #228]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ddc:	f7fc fbfa 	bl	80015d4 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004de2:	e009      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de4:	f7fc fbf6 	bl	80015d4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d902      	bls.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	74fb      	strb	r3, [r7, #19]
        break;
 8004df6:	e005      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004df8:	4b30      	ldr	r3, [pc, #192]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ef      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d15a      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01e      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d019      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e32:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e38:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e42:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e48:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e52:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d016      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fc fbb6 	bl	80015d4 <HAL_GetTick>
 8004e68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7fc fbb2 	bl	80015d4 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d902      	bls.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	74fb      	strb	r3, [r7, #19]
            break;
 8004e82:	e006      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e84:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0ec      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e92:	7cfb      	ldrb	r3, [r7, #19]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10b      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e98:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea6:	4904      	ldr	r1, [pc, #16]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004eae:	e009      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	74bb      	strb	r3, [r7, #18]
 8004eb4:	e006      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec4:	7c7b      	ldrb	r3, [r7, #17]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d105      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eca:	4b8d      	ldr	r3, [pc, #564]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	4a8c      	ldr	r2, [pc, #560]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ee2:	4b87      	ldr	r3, [pc, #540]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee8:	f023 0203 	bic.w	r2, r3, #3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4983      	ldr	r1, [pc, #524]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f04:	4b7e      	ldr	r3, [pc, #504]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0a:	f023 020c 	bic.w	r2, r3, #12
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	497b      	ldr	r1, [pc, #492]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f26:	4b76      	ldr	r3, [pc, #472]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f34:	4972      	ldr	r1, [pc, #456]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f48:	4b6d      	ldr	r3, [pc, #436]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f56:	496a      	ldr	r1, [pc, #424]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f6a:	4b65      	ldr	r3, [pc, #404]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	4961      	ldr	r1, [pc, #388]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	4959      	ldr	r1, [pc, #356]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fae:	4b54      	ldr	r3, [pc, #336]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	4950      	ldr	r1, [pc, #320]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fde:	4948      	ldr	r1, [pc, #288]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ff2:	4b43      	ldr	r3, [pc, #268]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005000:	493f      	ldr	r1, [pc, #252]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d028      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005014:	4b3a      	ldr	r3, [pc, #232]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005022:	4937      	ldr	r1, [pc, #220]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005032:	d106      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005034:	4b32      	ldr	r3, [pc, #200]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4a31      	ldr	r2, [pc, #196]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800503a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800503e:	60d3      	str	r3, [r2, #12]
 8005040:	e011      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005046:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800504a:	d10c      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3304      	adds	r3, #4
 8005050:	2101      	movs	r1, #1
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f8a4 	bl	80051a0 <RCCEx_PLLSAI1_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800505c:	7cfb      	ldrb	r3, [r7, #19]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d028      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005072:	4b23      	ldr	r3, [pc, #140]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005080:	491f      	ldr	r1, [pc, #124]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005090:	d106      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005092:	4b1b      	ldr	r3, [pc, #108]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	4a1a      	ldr	r2, [pc, #104]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005098:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800509c:	60d3      	str	r3, [r2, #12]
 800509e:	e011      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2101      	movs	r1, #1
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 f875 	bl	80051a0 <RCCEx_PLLSAI1_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
 80050c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d02b      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050de:	4908      	ldr	r1, [pc, #32]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050ee:	d109      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f0:	4b03      	ldr	r3, [pc, #12]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	4a02      	ldr	r2, [pc, #8]	@ (8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050fa:	60d3      	str	r3, [r2, #12]
 80050fc:	e014      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005108:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800510c:	d10c      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3304      	adds	r3, #4
 8005112:	2101      	movs	r1, #1
 8005114:	4618      	mov	r0, r3
 8005116:	f000 f843 	bl	80051a0 <RCCEx_PLLSAI1_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800511e:	7cfb      	ldrb	r3, [r7, #19]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005134:	4b19      	ldr	r3, [pc, #100]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005142:	4916      	ldr	r1, [pc, #88]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005152:	d10c      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	2102      	movs	r1, #2
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f820 	bl	80051a0 <RCCEx_PLLSAI1_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800517a:	4b08      	ldr	r3, [pc, #32]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005188:	4904      	ldr	r1, [pc, #16]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005190:	7cbb      	ldrb	r3, [r7, #18]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000

080051a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051ae:	4b74      	ldr	r3, [pc, #464]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d018      	beq.n	80051ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051ba:	4b71      	ldr	r3, [pc, #452]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0203 	and.w	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d10d      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
       ||
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051d2:	4b6b      	ldr	r3, [pc, #428]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
       ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d047      	beq.n	8005276 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	73fb      	strb	r3, [r7, #15]
 80051ea:	e044      	b.n	8005276 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d018      	beq.n	8005226 <RCCEx_PLLSAI1_Config+0x86>
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d825      	bhi.n	8005244 <RCCEx_PLLSAI1_Config+0xa4>
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d002      	beq.n	8005202 <RCCEx_PLLSAI1_Config+0x62>
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d009      	beq.n	8005214 <RCCEx_PLLSAI1_Config+0x74>
 8005200:	e020      	b.n	8005244 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005202:	4b5f      	ldr	r3, [pc, #380]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11d      	bne.n	800524a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005212:	e01a      	b.n	800524a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005214:	4b5a      	ldr	r3, [pc, #360]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521c:	2b00      	cmp	r3, #0
 800521e:	d116      	bne.n	800524e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005224:	e013      	b.n	800524e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005226:	4b56      	ldr	r3, [pc, #344]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005232:	4b53      	ldr	r3, [pc, #332]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005242:	e006      	b.n	8005252 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
      break;
 8005248:	e004      	b.n	8005254 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005252:	bf00      	nop
    }

    if(status == HAL_OK)
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10d      	bne.n	8005276 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800525a:	4b49      	ldr	r3, [pc, #292]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6819      	ldr	r1, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	3b01      	subs	r3, #1
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	430b      	orrs	r3, r1
 8005270:	4943      	ldr	r1, [pc, #268]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005272:	4313      	orrs	r3, r2
 8005274:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d17c      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800527c:	4b40      	ldr	r3, [pc, #256]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a3f      	ldr	r2, [pc, #252]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005282:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005288:	f7fc f9a4 	bl	80015d4 <HAL_GetTick>
 800528c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800528e:	e009      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005290:	f7fc f9a0 	bl	80015d4 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d902      	bls.n	80052a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	73fb      	strb	r3, [r7, #15]
        break;
 80052a2:	e005      	b.n	80052b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052a4:	4b36      	ldr	r3, [pc, #216]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ef      	bne.n	8005290 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d15f      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d110      	bne.n	80052de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052bc:	4b30      	ldr	r3, [pc, #192]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80052c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6892      	ldr	r2, [r2, #8]
 80052cc:	0211      	lsls	r1, r2, #8
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	06d2      	lsls	r2, r2, #27
 80052d4:	430a      	orrs	r2, r1
 80052d6:	492a      	ldr	r1, [pc, #168]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	610b      	str	r3, [r1, #16]
 80052dc:	e027      	b.n	800532e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d112      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052e4:	4b26      	ldr	r3, [pc, #152]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80052ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6892      	ldr	r2, [r2, #8]
 80052f4:	0211      	lsls	r1, r2, #8
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6912      	ldr	r2, [r2, #16]
 80052fa:	0852      	lsrs	r2, r2, #1
 80052fc:	3a01      	subs	r2, #1
 80052fe:	0552      	lsls	r2, r2, #21
 8005300:	430a      	orrs	r2, r1
 8005302:	491f      	ldr	r1, [pc, #124]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005304:	4313      	orrs	r3, r2
 8005306:	610b      	str	r3, [r1, #16]
 8005308:	e011      	b.n	800532e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800530a:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005312:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	0211      	lsls	r1, r2, #8
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6952      	ldr	r2, [r2, #20]
 8005320:	0852      	lsrs	r2, r2, #1
 8005322:	3a01      	subs	r2, #1
 8005324:	0652      	lsls	r2, r2, #25
 8005326:	430a      	orrs	r2, r1
 8005328:	4915      	ldr	r1, [pc, #84]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 800532a:	4313      	orrs	r3, r2
 800532c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800532e:	4b14      	ldr	r3, [pc, #80]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a13      	ldr	r2, [pc, #76]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005334:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005338:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533a:	f7fc f94b 	bl	80015d4 <HAL_GetTick>
 800533e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005340:	e009      	b.n	8005356 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005342:	f7fc f947 	bl	80015d4 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d902      	bls.n	8005356 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	73fb      	strb	r3, [r7, #15]
          break;
 8005354:	e005      	b.n	8005362 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005356:	4b0a      	ldr	r3, [pc, #40]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ef      	beq.n	8005342 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005368:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	4903      	ldr	r1, [pc, #12]	@ (8005380 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005372:	4313      	orrs	r3, r2
 8005374:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000

08005384 <VESC_convertStatus1ToRaw>:
	out->can_dlc = (int8_t)sizeof(VESC_CommandData_t);
	return true;
}

bool VESC_convertStatus1ToRaw(VESC_RawFrame* out, const VESC_Status_1* in)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2209      	movs	r2, #9
 800539a:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	709a      	strb	r2, [r3, #2]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053a8:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_1_DLEN;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2208      	movs	r2, #8
 80053ae:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData32(out, _VESC_offset_Status_1[_VESC_OFFSETIDX_STATUS_1_ERPM], in->erpm, VESC_SCALE_STATUS_1_ERPM);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ba:	2300      	movs	r3, #0
 80053bc:	3308      	adds	r3, #8
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	18d4      	adds	r4, r2, r3
 80053c2:	ee17 0a90 	vmov	r0, s15
 80053c6:	f000 f935 	bl	8005634 <_VESC_b32_swap>
 80053ca:	4603      	mov	r3, r0
 80053cc:	6023      	str	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_1[_VESC_OFFSETIDX_STATUS_1_CURRENT], in->current, VESC_SCALE_STATUS_1_CURRENT);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80053d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80053d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053e0:	ee17 3a90 	vmov	r3, s15
 80053e4:	b219      	sxth	r1, r3
 80053e6:	2304      	movs	r3, #4
 80053e8:	3308      	adds	r3, #8
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	18d4      	adds	r4, r2, r3
 80053ee:	4608      	mov	r0, r1
 80053f0:	f000 f902 	bl	80055f8 <_VESC_b16_swap>
 80053f4:	4603      	mov	r3, r0
 80053f6:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_1[_VESC_OFFSETIDX_STATUS_1_DUTYCYCLE], in->dutyCycle, VESC_SCALE_STATUS_1_DUTYCYCLE);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80053fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800542c <VESC_convertStatus1ToRaw+0xa8>
 8005402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800540a:	ee17 3a90 	vmov	r3, s15
 800540e:	b219      	sxth	r1, r3
 8005410:	2306      	movs	r3, #6
 8005412:	3308      	adds	r3, #8
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	18d4      	adds	r4, r2, r3
 8005418:	4608      	mov	r0, r1
 800541a:	f000 f8ed 	bl	80055f8 <_VESC_b16_swap>
 800541e:	4603      	mov	r3, r0
 8005420:	8023      	strh	r3, [r4, #0]

	return true;
 8005422:	2301      	movs	r3, #1
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bd90      	pop	{r4, r7, pc}
 800542c:	447a0000 	.word	0x447a0000

08005430 <VESC_convertStatus4ToRaw>:

	return true;
}

bool VESC_convertStatus4ToRaw(VESC_RawFrame* out, const VESC_Status_4* in)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_4;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2210      	movs	r2, #16
 8005446:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	709a      	strb	r2, [r3, #2]
 800544e:	2200      	movs	r2, #0
 8005450:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005454:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_4_DLEN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2208      	movs	r2, #8
 800545a:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPFET], in->tempFet, VESC_SCALE_STATUS_4_TEMPFET);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005462:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800546a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800546e:	ee17 3a90 	vmov	r3, s15
 8005472:	b219      	sxth	r1, r3
 8005474:	2300      	movs	r3, #0
 8005476:	3308      	adds	r3, #8
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	18d4      	adds	r4, r2, r3
 800547c:	4608      	mov	r0, r1
 800547e:	f000 f8bb 	bl	80055f8 <_VESC_b16_swap>
 8005482:	4603      	mov	r3, r0
 8005484:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPMOTOR], in->tempMotor, VESC_SCALE_STATUS_4_TEMPMOTOR);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	edd3 7a02 	vldr	s15, [r3, #8]
 800548c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005498:	ee17 3a90 	vmov	r3, s15
 800549c:	b219      	sxth	r1, r3
 800549e:	2302      	movs	r3, #2
 80054a0:	3308      	adds	r3, #8
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	18d4      	adds	r4, r2, r3
 80054a6:	4608      	mov	r0, r1
 80054a8:	f000 f8a6 	bl	80055f8 <_VESC_b16_swap>
 80054ac:	4603      	mov	r3, r0
 80054ae:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_CURRENTIN], in->currentIn, VESC_SCALE_STATUS_4_CURRENTIN);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80054b6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80054ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c2:	ee17 3a90 	vmov	r3, s15
 80054c6:	b219      	sxth	r1, r3
 80054c8:	2304      	movs	r3, #4
 80054ca:	3308      	adds	r3, #8
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	18d4      	adds	r4, r2, r3
 80054d0:	4608      	mov	r0, r1
 80054d2:	f000 f891 	bl	80055f8 <_VESC_b16_swap>
 80054d6:	4603      	mov	r3, r0
 80054d8:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_PIDPOS], in->pidPos, VESC_SCALE_STATUS_4_PIDPOS);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80054e0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005510 <VESC_convertStatus4ToRaw+0xe0>
 80054e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054ec:	ee17 3a90 	vmov	r3, s15
 80054f0:	b219      	sxth	r1, r3
 80054f2:	2306      	movs	r3, #6
 80054f4:	3308      	adds	r3, #8
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	18d4      	adds	r4, r2, r3
 80054fa:	4608      	mov	r0, r1
 80054fc:	f000 f87c 	bl	80055f8 <_VESC_b16_swap>
 8005500:	4603      	mov	r3, r0
 8005502:	8023      	strh	r3, [r4, #0]

	return true;
 8005504:	2301      	movs	r3, #1
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	bd90      	pop	{r4, r7, pc}
 800550e:	bf00      	nop
 8005510:	42480000 	.word	0x42480000

08005514 <VESC_convertStatus6ToRaw>:

	return true;
}

bool VESC_convertStatus6ToRaw(VESC_RawFrame* out, const VESC_Status_6* in)
{
 8005514:	b590      	push	{r4, r7, lr}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_6;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	221c      	movs	r2, #28
 800552a:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	709a      	strb	r2, [r3, #2]
 8005532:	2200      	movs	r2, #0
 8005534:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005538:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_6_DLEN;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2208      	movs	r2, #8
 800553e:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC1], in->adc1, VESC_SCALE_STATUS_6_ADC1);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	edd3 7a01 	vldr	s15, [r3, #4]
 8005546:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80055f4 <VESC_convertStatus6ToRaw+0xe0>
 800554a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800554e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005552:	ee17 3a90 	vmov	r3, s15
 8005556:	b219      	sxth	r1, r3
 8005558:	2300      	movs	r3, #0
 800555a:	3308      	adds	r3, #8
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	18d4      	adds	r4, r2, r3
 8005560:	4608      	mov	r0, r1
 8005562:	f000 f849 	bl	80055f8 <_VESC_b16_swap>
 8005566:	4603      	mov	r3, r0
 8005568:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC2], in->adc2, VESC_SCALE_STATUS_6_ADC2);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005570:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80055f4 <VESC_convertStatus6ToRaw+0xe0>
 8005574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800557c:	ee17 3a90 	vmov	r3, s15
 8005580:	b219      	sxth	r1, r3
 8005582:	2302      	movs	r3, #2
 8005584:	3308      	adds	r3, #8
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	18d4      	adds	r4, r2, r3
 800558a:	4608      	mov	r0, r1
 800558c:	f000 f834 	bl	80055f8 <_VESC_b16_swap>
 8005590:	4603      	mov	r3, r0
 8005592:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC3], in->adc3, VESC_SCALE_STATUS_6_ADC3);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	edd3 7a03 	vldr	s15, [r3, #12]
 800559a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80055f4 <VESC_convertStatus6ToRaw+0xe0>
 800559e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a6:	ee17 3a90 	vmov	r3, s15
 80055aa:	b219      	sxth	r1, r3
 80055ac:	2304      	movs	r3, #4
 80055ae:	3308      	adds	r3, #8
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	18d4      	adds	r4, r2, r3
 80055b4:	4608      	mov	r0, r1
 80055b6:	f000 f81f 	bl	80055f8 <_VESC_b16_swap>
 80055ba:	4603      	mov	r3, r0
 80055bc:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_PPM], in->ppm, VESC_SCALE_STATUS_6_PPM);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80055c4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80055f4 <VESC_convertStatus6ToRaw+0xe0>
 80055c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d0:	ee17 3a90 	vmov	r3, s15
 80055d4:	b219      	sxth	r1, r3
 80055d6:	2306      	movs	r3, #6
 80055d8:	3308      	adds	r3, #8
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	18d4      	adds	r4, r2, r3
 80055de:	4608      	mov	r0, r1
 80055e0:	f000 f80a 	bl	80055f8 <_VESC_b16_swap>
 80055e4:	4603      	mov	r3, r0
 80055e6:	8023      	strh	r3, [r4, #0]

	return true;
 80055e8:	2301      	movs	r3, #1
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd90      	pop	{r4, r7, pc}
 80055f2:	bf00      	nop
 80055f4:	447a0000 	.word	0x447a0000

080055f8 <_VESC_b16_swap>:
#include <libVescCan/VESC_Endian.h>

int16_t _VESC_b16_swap(int16_t val)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	80fb      	strh	r3, [r7, #6]
	int16_t ret = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0x00FF) << 8;
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	b21a      	sxth	r2, r3
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	4313      	orrs	r3, r2
 8005610:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0xFF00) >> 8;
 8005612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005616:	121b      	asrs	r3, r3, #8
 8005618:	b21b      	sxth	r3, r3
 800561a:	b2db      	uxtb	r3, r3
 800561c:	b21a      	sxth	r2, r3
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	4313      	orrs	r3, r2
 8005622:	81fb      	strh	r3, [r7, #14]
	return ret;
 8005624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <_VESC_b32_swap>:

int32_t _VESC_b32_swap(int32_t val)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0x000000FF) << 24;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	061b      	lsls	r3, r3, #24
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0x0000FF00) << 8;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0x00FF0000) >> 8;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	121b      	asrs	r3, r3, #8
 800565c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
	ret |= (val & 0xFF000000) >> 24;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0e1a      	lsrs	r2, r3, #24
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
	return ret;
 8005670:	68fb      	ldr	r3, [r7, #12]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <memset>:
 800567e:	4402      	add	r2, r0
 8005680:	4603      	mov	r3, r0
 8005682:	4293      	cmp	r3, r2
 8005684:	d100      	bne.n	8005688 <memset+0xa>
 8005686:	4770      	bx	lr
 8005688:	f803 1b01 	strb.w	r1, [r3], #1
 800568c:	e7f9      	b.n	8005682 <memset+0x4>
	...

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4d0d      	ldr	r5, [pc, #52]	@ (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	@ (80056cc <__libc_init_array+0x3c>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2600      	movs	r6, #0
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4d0b      	ldr	r5, [pc, #44]	@ (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	@ (80056d4 <__libc_init_array+0x44>)
 80056a4:	f000 f826 	bl	80056f4 <_init>
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2600      	movs	r6, #0
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	0800574c 	.word	0x0800574c
 80056cc:	0800574c 	.word	0x0800574c
 80056d0:	0800574c 	.word	0x0800574c
 80056d4:	08005750 	.word	0x08005750

080056d8 <memcpy>:
 80056d8:	440a      	add	r2, r1
 80056da:	4291      	cmp	r1, r2
 80056dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80056e0:	d100      	bne.n	80056e4 <memcpy+0xc>
 80056e2:	4770      	bx	lr
 80056e4:	b510      	push	{r4, lr}
 80056e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ee:	4291      	cmp	r1, r2
 80056f0:	d1f9      	bne.n	80056e6 <memcpy+0xe>
 80056f2:	bd10      	pop	{r4, pc}

080056f4 <_init>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr

08005700 <_fini>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr
