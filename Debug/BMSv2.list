
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042a4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004430  08004430  00005430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004470  08004470  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004470  08004470  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004470  08004470  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004470  08004470  00005470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004474  08004474  00005474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004478  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  08004488  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004488  00006184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd12  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272a  00000000  00000000  00012d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00015480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  000160f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229ae  00000000  00000000  00016a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109aa  00000000  00000000  000393f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c947d  00000000  00000000  00049d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011321b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003000  00000000  00000000  00113260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00116260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004418 	.word	0x08004418

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004418 	.word	0x08004418

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    bq_i2c = i2c;
 80001d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000284 <BQ_Init+0xb8>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]
    if(bq_i2c == &hi2c1){
 80001da:	4b2a      	ldr	r3, [pc, #168]	@ (8000284 <BQ_Init+0xb8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a2a      	ldr	r2, [pc, #168]	@ (8000288 <BQ_Init+0xbc>)
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d10b      	bne.n	80001fc <BQ_Init+0x30>
    	__HAL_RCC_I2C1_CLK_ENABLE();
 80001e4:	4b29      	ldr	r3, [pc, #164]	@ (800028c <BQ_Init+0xc0>)
 80001e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001e8:	4a28      	ldr	r2, [pc, #160]	@ (800028c <BQ_Init+0xc0>)
 80001ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80001f0:	4b26      	ldr	r3, [pc, #152]	@ (800028c <BQ_Init+0xc0>)
 80001f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f8:	60bb      	str	r3, [r7, #8]
 80001fa:	68bb      	ldr	r3, [r7, #8]
    }
//    ("[BQ] Started", 12);
//    if (USE_SCANNER == 1)
//    {
#ifdef USE_SCANNER
        HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(bq_i2c, bq_deviceAddress << 1, 3, 100);
 80001fc:	4b21      	ldr	r3, [pc, #132]	@ (8000284 <BQ_Init+0xb8>)
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	4b23      	ldr	r3, [pc, #140]	@ (8000290 <BQ_Init+0xc4>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	b299      	uxth	r1, r3
 8000208:	2364      	movs	r3, #100	@ 0x64
 800020a:	2203      	movs	r2, #3
 800020c:	f001 fd36 	bl	8001c7c <HAL_I2C_IsDeviceReady>
 8000210:	4603      	mov	r3, r0
 8000212:	73fb      	strb	r3, [r7, #15]
        while (ret != HAL_OK)
 8000214:	e00f      	b.n	8000236 <BQ_Init+0x6a>
        {
//            ("[BQ] device not founded", 23);
            ret = HAL_I2C_IsDeviceReady(bq_i2c, bq_deviceAddress << 1, 3, 100);
 8000216:	4b1b      	ldr	r3, [pc, #108]	@ (8000284 <BQ_Init+0xb8>)
 8000218:	6818      	ldr	r0, [r3, #0]
 800021a:	4b1d      	ldr	r3, [pc, #116]	@ (8000290 <BQ_Init+0xc4>)
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	005b      	lsls	r3, r3, #1
 8000220:	b299      	uxth	r1, r3
 8000222:	2364      	movs	r3, #100	@ 0x64
 8000224:	2203      	movs	r2, #3
 8000226:	f001 fd29 	bl	8001c7c <HAL_I2C_IsDeviceReady>
 800022a:	4603      	mov	r3, r0
 800022c:	73fb      	strb	r3, [r7, #15]
            HAL_Delay(1000);
 800022e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000232:	f000 ff63 	bl	80010fc <HAL_Delay>
        while (ret != HAL_OK)
 8000236:	7bfb      	ldrb	r3, [r7, #15]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d1ec      	bne.n	8000216 <BQ_Init+0x4a>
#endif
//    }

    

    HAL_Delay(1500);
 800023c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000240:	f000 ff5c 	bl	80010fc <HAL_Delay>
    BQAction_UpdateData();
 8000244:	f000 f9b6 	bl	80005b4 <BQAction_UpdateData>
    BQAction_TryUnsealedDevice();
 8000248:	f000 f984 	bl	8000554 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(false);
 800024c:	2000      	movs	r0, #0
 800024e:	f000 f90f 	bl	8000470 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(false);
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f91f 	bl	8000496 <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(false);
 8000258:	2000      	movs	r0, #0
 800025a:	f000 f92f 	bl	80004bc <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(true);
 800025e:	2001      	movs	r0, #1
 8000260:	f000 f93f 	bl	80004e2 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(true);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 f94f 	bl	8000508 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(true);
 800026a:	2001      	movs	r0, #1
 800026c:	f000 f95f 	bl	800052e <BQAction_SetManufacturingLF>
    BQAction_SetLed(false);
 8000270:	2000      	movs	r0, #0
 8000272:	f000 f8ea 	bl	800044a <BQAction_SetLed>

    BQAction_UpdateData();
 8000276:	f000 f99d 	bl	80005b4 <BQAction_UpdateData>
    //BQ_ForceUpdateFlash();

    //BQ_BoundaryCellVoltage voltages = BQ_GetBoundaryCellVoltage();

//    ("[BQ] initialized", 16);
}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000002c 	.word	0x2000002c
 8000288:	2000012c 	.word	0x2000012c
 800028c:	40021000 	.word	0x40021000
 8000290:	20000000 	.word	0x20000000

08000294 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(unsigned short command)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af02      	add	r7, sp, #8
 800029a:	4603      	mov	r3, r0
 800029c:	80fb      	strh	r3, [r7, #6]
    // send 0x44, then count of bytes, then command
    unsigned char buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 800029e:	2344      	movs	r3, #68	@ 0x44
 80002a0:	733b      	strb	r3, [r7, #12]
 80002a2:	2302      	movs	r3, #2
 80002a4:	737b      	strb	r3, [r7, #13]
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	73bb      	strb	r3, [r7, #14]
 80002ac:	88fb      	ldrh	r3, [r7, #6]
 80002ae:	0a1b      	lsrs	r3, r3, #8
 80002b0:	b29b      	uxth	r3, r3
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80002b6:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <BQ_WriteMABlockCommand+0x44>)
 80002b8:	6818      	ldr	r0, [r3, #0]
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <BQ_WriteMABlockCommand+0x48>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	b299      	uxth	r1, r3
 80002c2:	f107 020c 	add.w	r2, r7, #12
 80002c6:	2364      	movs	r3, #100	@ 0x64
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2304      	movs	r3, #4
 80002cc:	f001 fac8 	bl	8001860 <HAL_I2C_Master_Transmit>
}
 80002d0:	bf00      	nop
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000002c 	.word	0x2000002c
 80002dc:	20000000 	.word	0x20000000

080002e0 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(unsigned short command, unsigned char *receive, unsigned char size)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b090      	sub	sp, #64	@ 0x40
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	4603      	mov	r3, r0
 80002e8:	6039      	str	r1, [r7, #0]
 80002ea:	80fb      	strh	r3, [r7, #6]
 80002ec:	4613      	mov	r3, r2
 80002ee:	717b      	strb	r3, [r7, #5]
    // send 0x44, then count of bytes, then command
    unsigned char buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002f0:	2344      	movs	r3, #68	@ 0x44
 80002f2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80002f6:	2302      	movs	r3, #2
 80002f8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	0a1b      	lsrs	r3, r3, #8
 8000308:	b29b      	uxth	r3, r3
 800030a:	b2db      	uxtb	r3, r3
 800030c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    HAL_I2C_Master_Transmit(bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000310:	4b28      	ldr	r3, [pc, #160]	@ (80003b4 <BQ_ReadMABlockCommand+0xd4>)
 8000312:	6818      	ldr	r0, [r3, #0]
 8000314:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <BQ_ReadMABlockCommand+0xd8>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	b299      	uxth	r1, r3
 800031c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000320:	2364      	movs	r3, #100	@ 0x64
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2304      	movs	r3, #4
 8000326:	f001 fa9b 	bl	8001860 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    unsigned char addr[2] = {0x44, 2 + size};
 800032a:	2344      	movs	r3, #68	@ 0x44
 800032c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000330:	797b      	ldrb	r3, [r7, #5]
 8000332:	3302      	adds	r3, #2
 8000334:	b2db      	uxtb	r3, r3
 8000336:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    HAL_I2C_Master_Transmit(bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 800033a:	4b1e      	ldr	r3, [pc, #120]	@ (80003b4 <BQ_ReadMABlockCommand+0xd4>)
 800033c:	6818      	ldr	r0, [r3, #0]
 800033e:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <BQ_ReadMABlockCommand+0xd8>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	b299      	uxth	r1, r3
 8000346:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800034a:	2364      	movs	r3, #100	@ 0x64
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2302      	movs	r3, #2
 8000350:	f001 fa86 	bl	8001860 <HAL_I2C_Master_Transmit>

    unsigned char result[35] = {0};
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	221f      	movs	r2, #31
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f004 f82d 	bl	80043c0 <memset>
    HAL_I2C_Master_Receive(bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 8000366:	4b13      	ldr	r3, [pc, #76]	@ (80003b4 <BQ_ReadMABlockCommand+0xd4>)
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <BQ_ReadMABlockCommand+0xd8>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	b299      	uxth	r1, r3
 8000372:	f107 0208 	add.w	r2, r7, #8
 8000376:	2364      	movs	r3, #100	@ 0x64
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	2323      	movs	r3, #35	@ 0x23
 800037c:	f001 fb88 	bl	8001a90 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	637b      	str	r3, [r7, #52]	@ 0x34
 8000384:	e00c      	b.n	80003a0 <BQ_ReadMABlockCommand+0xc0>
    {
        receive[i] = result[i + 3];
 8000386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000388:	1cda      	adds	r2, r3, #3
 800038a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800038c:	6839      	ldr	r1, [r7, #0]
 800038e:	440b      	add	r3, r1
 8000390:	3238      	adds	r2, #56	@ 0x38
 8000392:	443a      	add	r2, r7
 8000394:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000398:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800039a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800039c:	3301      	adds	r3, #1
 800039e:	637b      	str	r3, [r7, #52]	@ 0x34
 80003a0:	797b      	ldrb	r3, [r7, #5]
 80003a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80003a4:	429a      	cmp	r2, r3
 80003a6:	dbee      	blt.n	8000386 <BQ_ReadMABlockCommand+0xa6>
    }
}
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	3738      	adds	r7, #56	@ 0x38
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000002c 	.word	0x2000002c
 80003b8:	20000000 	.word	0x20000000

080003bc <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as unsigned short
 * @param command command to read
 * @return 16bit value from command
 */
unsigned short BQ_ReadCommandAsShort(unsigned short command)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	80fb      	strh	r3, [r7, #6]
    unsigned char buf[2];

    BQ_ReadMABlockCommand(command, buf, 2);
 80003c6:	f107 010c 	add.w	r1, r7, #12
 80003ca:	88fb      	ldrh	r3, [r7, #6]
 80003cc:	2202      	movs	r2, #2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff86 	bl	80002e0 <BQ_ReadMABlockCommand>

    unsigned short result = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003d8:	7b3b      	ldrb	r3, [r7, #12]
 80003da:	461a      	mov	r2, r3
 80003dc:	89fb      	ldrh	r3, [r7, #14]
 80003de:	4313      	orrs	r3, r2
 80003e0:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003e2:	7b7b      	ldrb	r3, [r7, #13]
 80003e4:	021b      	lsls	r3, r3, #8
 80003e6:	b21a      	sxth	r2, r3
 80003e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	b21b      	sxth	r3, r3
 80003f0:	81fb      	strh	r3, [r7, #14]

    return result;
 80003f2:	89fb      	ldrh	r3, [r7, #14]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as unsigned int
 * @param command command to read
 * @return 32bit value from command
 */
unsigned int BQ_ReadCommandAsInt(unsigned short command)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
    unsigned char buf[4];

    BQ_ReadMABlockCommand(command, buf, 4);
 8000406:	f107 0108 	add.w	r1, r7, #8
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	2204      	movs	r2, #4
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff66 	bl	80002e0 <BQ_ReadMABlockCommand>

    unsigned int result = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 8000418:	7a3b      	ldrb	r3, [r7, #8]
 800041a:	461a      	mov	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4313      	orrs	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 8000422:	7a7b      	ldrb	r3, [r7, #9]
 8000424:	021b      	lsls	r3, r3, #8
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	4313      	orrs	r3, r2
 800042a:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 800042c:	7abb      	ldrb	r3, [r7, #10]
 800042e:	041b      	lsls	r3, r3, #16
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	4313      	orrs	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 8000436:	7afb      	ldrb	r3, [r7, #11]
 8000438:	061b      	lsls	r3, r3, #24
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	4313      	orrs	r3, r2
 800043e:	60fb      	str	r3, [r7, #12]

    return result;
 8000440:	68fb      	ldr	r3, [r7, #12]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(bool active)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	71fb      	strb	r3, [r7, #7]
    if (BQ_IsLedEnabled() != active)
 8000454:	f000 fa86 	bl	8000964 <BQ_IsLedEnabled>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4293      	cmp	r3, r2
 8000460:	d002      	beq.n	8000468 <BQAction_SetLed+0x1e>
    {
        BQ_WriteMABlockCommand(CMD_LED_TOGGLE);
 8000462:	202b      	movs	r0, #43	@ 0x2b
 8000464:	f7ff ff16 	bl	8000294 <BQ_WriteMABlockCommand>
    }
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(bool active)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
    if (BQ_IsManufacturingAllFetEnabled() != active)
 800047a:	f000 fa23 	bl	80008c4 <BQ_IsManufacturingAllFetEnabled>
 800047e:	4603      	mov	r3, r0
 8000480:	461a      	mov	r2, r3
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	4293      	cmp	r3, r2
 8000486:	d002      	beq.n	800048e <BQAction_SetManufacturingAllFet+0x1e>
    {
        BQ_WriteMABlockCommand(CMD_ALL_FET_EN);
 8000488:	2022      	movs	r0, #34	@ 0x22
 800048a:	f7ff ff03 	bl	8000294 <BQ_WriteMABlockCommand>
    }
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(bool active)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
    if (BQ_IsManufacturingFuseEnabled() != active)
 80004a0:	f000 fa00 	bl	80008a4 <BQ_IsManufacturingFuseEnabled>
 80004a4:	4603      	mov	r3, r0
 80004a6:	461a      	mov	r2, r3
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d002      	beq.n	80004b4 <BQAction_SetManufacturingFuse+0x1e>
    {
        BQ_WriteMABlockCommand(CMD_MAN_FUSE);
 80004ae:	2026      	movs	r0, #38	@ 0x26
 80004b0:	f7ff fef0 	bl	8000294 <BQ_WriteMABlockCommand>
    }
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}

080004bc <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(bool active)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
    if (BQ_IsManufacturingCalibrationEnabled() != active)
 80004c6:	f000 fa1d 	bl	8000904 <BQ_IsManufacturingCalibrationEnabled>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d002      	beq.n	80004da <BQAction_SetCalibration+0x1e>
    {
        BQ_WriteMABlockCommand(CMD_CALIBRATION);
 80004d4:	202d      	movs	r0, #45	@ 0x2d
 80004d6:	f7ff fedd 	bl	8000294 <BQ_WriteMABlockCommand>
    }
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(bool active)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
    if (BQ_IsManufacturingGaugingEnabled() != active)
 80004ec:	f000 f9fa 	bl	80008e4 <BQ_IsManufacturingGaugingEnabled>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d002      	beq.n	8000500 <BQAction_SetManufacturingGauging+0x1e>
    {
        BQ_WriteMABlockCommand(CMD_GAUGING);
 80004fa:	2021      	movs	r0, #33	@ 0x21
 80004fc:	f7ff feca 	bl	8000294 <BQ_WriteMABlockCommand>
    }
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(bool active)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
    if (BQ_IsManufacturingPermanentFailureEnabled() != active)
 8000512:	f000 fa07 	bl	8000924 <BQ_IsManufacturingPermanentFailureEnabled>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4293      	cmp	r3, r2
 800051e:	d002      	beq.n	8000526 <BQAction_SetManufacturingPF+0x1e>
    {
        BQ_WriteMABlockCommand(CMD_PF_EN);
 8000520:	2024      	movs	r0, #36	@ 0x24
 8000522:	f7ff feb7 	bl	8000294 <BQ_WriteMABlockCommand>
    }
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(bool active)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	4603      	mov	r3, r0
 8000536:	71fb      	strb	r3, [r7, #7]
    if (BQ_IsManufacturingLifetimeEnabled() != active)
 8000538:	f000 fa04 	bl	8000944 <BQ_IsManufacturingLifetimeEnabled>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4293      	cmp	r3, r2
 8000544:	d002      	beq.n	800054c <BQAction_SetManufacturingLF+0x1e>
    {
        BQ_WriteMABlockCommand(CMD_LF_EN);
 8000546:	2023      	movs	r0, #35	@ 0x23
 8000548:	f7ff fea4 	bl	8000294 <BQ_WriteMABlockCommand>
    }
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
    bool isSealed = false;
 800055a:	2300      	movs	r3, #0
 800055c:	71bb      	strb	r3, [r7, #6]

    BQAction_UpdateOpStatus();
 800055e:	f000 f88d 	bl	800067c <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode();
 8000562:	f000 f977 	bl	8000854 <BQ_GetSecurityMode>
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 800056a:	e017      	b.n	800059c <BQAction_TryUnsealedDevice+0x48>
    {
        isSealed = true;
 800056c:	2301      	movs	r3, #1
 800056e:	71bb      	strb	r3, [r7, #6]
//        ("[BQ] Security mode - Sealed", 27);

        BQ_WriteMABlockCommand(0x0414);
 8000570:	f240 4014 	movw	r0, #1044	@ 0x414
 8000574:	f7ff fe8e 	bl	8000294 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000578:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800057c:	f000 fdbe 	bl	80010fc <HAL_Delay>
        BQ_WriteMABlockCommand(0x3672);
 8000580:	f243 6072 	movw	r0, #13938	@ 0x3672
 8000584:	f7ff fe86 	bl	8000294 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 8000588:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800058c:	f000 fdb6 	bl	80010fc <HAL_Delay>

        BQAction_UpdateOpStatus();
 8000590:	f000 f874 	bl	800067c <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode();
 8000594:	f000 f95e 	bl	8000854 <BQ_GetSecurityMode>
 8000598:	4603      	mov	r3, r0
 800059a:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0e4      	beq.n	800056c <BQAction_TryUnsealedDevice+0x18>
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	d0e1      	beq.n	800056c <BQAction_TryUnsealedDevice+0x18>
    // print only if the device was previously sealeded
//    if (isSealed){
//        ("[BQ] successfully unsealed", 27);
//    }

}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af04      	add	r7, sp, #16
    unsigned short manStatus = BQ_ReadCommandAsShort(0x0057);
 80005ba:	2057      	movs	r0, #87	@ 0x57
 80005bc:	f7ff fefe 	bl	80003bc <BQ_ReadCommandAsShort>
 80005c0:	4603      	mov	r3, r0
 80005c2:	82fb      	strh	r3, [r7, #22]
    unsigned int chargeStatus = BQ_ReadCommandAsInt(0x0055);
 80005c4:	2055      	movs	r0, #85	@ 0x55
 80005c6:	f7ff ff19 	bl	80003fc <BQ_ReadCommandAsInt>
 80005ca:	6138      	str	r0, [r7, #16]
    unsigned int operationStatus = BQ_ReadCommandAsInt(0x0054);
 80005cc:	2054      	movs	r0, #84	@ 0x54
 80005ce:	f7ff ff15 	bl	80003fc <BQ_ReadCommandAsInt>
 80005d2:	60f8      	str	r0, [r7, #12]
    unsigned int gaugStatus = BQ_ReadCommandAsInt(0x0056);
 80005d4:	2056      	movs	r0, #86	@ 0x56
 80005d6:	f7ff ff11 	bl	80003fc <BQ_ReadCommandAsInt>
 80005da:	60b8      	str	r0, [r7, #8]

    unsigned short batteryMode = I2CHelper_ReadRegisterAsShort(bq_i2c, bq_deviceAddress, REG_BATTERY_MODE);
 80005dc:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <BQAction_UpdateData+0xb0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <BQAction_UpdateData+0xb4>)
 80005e2:	7811      	ldrb	r1, [r2, #0]
 80005e4:	2203      	movs	r2, #3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fb14 	bl	8000c14 <I2CHelper_ReadRegisterAsShort>
 80005ec:	4603      	mov	r3, r0
 80005ee:	80fb      	strh	r3, [r7, #6]
    unsigned short batteryStatus = I2CHelper_ReadRegisterAsShort(bq_i2c, bq_deviceAddress, REG_BATTERY_STATUS);
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <BQAction_UpdateData+0xb0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000668 <BQAction_UpdateData+0xb4>)
 80005f6:	7811      	ldrb	r1, [r2, #0]
 80005f8:	2216      	movs	r2, #22
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb0a 	bl	8000c14 <I2CHelper_ReadRegisterAsShort>
 8000600:	4603      	mov	r3, r0
 8000602:	80bb      	strh	r3, [r7, #4]
    unsigned char gpioStatus = I2CHelper_ReadRegisterAsChar(bq_i2c, bq_deviceAddress, REG_GPIO_READ);
 8000604:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <BQAction_UpdateData+0xb0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a17      	ldr	r2, [pc, #92]	@ (8000668 <BQAction_UpdateData+0xb4>)
 800060a:	7811      	ldrb	r1, [r2, #0]
 800060c:	2248      	movs	r2, #72	@ 0x48
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fb25 	bl	8000c5e <I2CHelper_ReadRegisterAsChar>
 8000614:	4603      	mov	r3, r0
 8000616:	70fb      	strb	r3, [r7, #3]

    BQ_ReadMABlockCommand(0x0071, BQ_daStatus1, 32);
 8000618:	2220      	movs	r2, #32
 800061a:	4914      	ldr	r1, [pc, #80]	@ (800066c <BQAction_UpdateData+0xb8>)
 800061c:	2071      	movs	r0, #113	@ 0x71
 800061e:	f7ff fe5f 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(0x0072, BQ_daStatus2, 16);
 8000622:	2210      	movs	r2, #16
 8000624:	4912      	ldr	r1, [pc, #72]	@ (8000670 <BQAction_UpdateData+0xbc>)
 8000626:	2072      	movs	r0, #114	@ 0x72
 8000628:	f7ff fe5a 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(0x007B, BQ_daStatus3, 18);
 800062c:	2212      	movs	r2, #18
 800062e:	4911      	ldr	r1, [pc, #68]	@ (8000674 <BQAction_UpdateData+0xc0>)
 8000630:	207b      	movs	r0, #123	@ 0x7b
 8000632:	f7ff fe55 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(0xF081, BQ_outCal, 32);
 8000636:	2220      	movs	r2, #32
 8000638:	490f      	ldr	r1, [pc, #60]	@ (8000678 <BQAction_UpdateData+0xc4>)
 800063a:	f24f 0081 	movw	r0, #61569	@ 0xf081
 800063e:	f7ff fe4f 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags(operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 8000642:	78f8      	ldrb	r0, [r7, #3]
 8000644:	88ba      	ldrh	r2, [r7, #4]
 8000646:	88f9      	ldrh	r1, [r7, #6]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	8afb      	ldrh	r3, [r7, #22]
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4603      	mov	r3, r0
 8000656:	68f8      	ldr	r0, [r7, #12]
 8000658:	f000 f85a 	bl	8000710 <BQ_ParseAllFlags>
}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000002c 	.word	0x2000002c
 8000668:	20000000 	.word	0x20000000
 800066c:	200000c8 	.word	0x200000c8
 8000670:	200000e8 	.word	0x200000e8
 8000674:	200000f8 	.word	0x200000f8
 8000678:	2000010c 	.word	0x2000010c

0800067c <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    BQ_ReadMABlockCommand(0x0071, BQ_daStatus1, 32);
 8000680:	2220      	movs	r2, #32
 8000682:	490a      	ldr	r1, [pc, #40]	@ (80006ac <BQAction_UpdateOpStatus+0x30>)
 8000684:	2071      	movs	r0, #113	@ 0x71
 8000686:	f7ff fe2b 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ParseOperationStatus(BQ_ReadCommandAsInt(0x0054));
 800068a:	2054      	movs	r0, #84	@ 0x54
 800068c:	f7ff feb6 	bl	80003fc <BQ_ReadCommandAsInt>
 8000690:	4603      	mov	r3, r0
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f866 	bl	8000764 <BQ_ParseOperationStatus>
    BQ_ParseManufacturingStatus(BQ_ReadCommandAsShort(0x0057));
 8000698:	2057      	movs	r0, #87	@ 0x57
 800069a:	f7ff fe8f 	bl	80003bc <BQ_ReadCommandAsShort>
 800069e:	4603      	mov	r3, r0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f8b3 	bl	800080c <BQ_ParseManufacturingStatus>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000c8 	.word	0x200000c8

080006b0 <decimalToBinary>:
 * @param value decimal value
 * @param array array to write
 * @param count array size
 */
void decimalToBinary(unsigned int value, unsigned char *array, unsigned char count)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	4613      	mov	r3, r2
 80006bc:	71fb      	strb	r3, [r7, #7]
	unsigned char currentCount = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 80006c2:	e00e      	b.n	80006e2 <decimalToBinary+0x32>
	{
		array[currentCount] = value % 2;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	68b9      	ldr	r1, [r7, #8]
 80006cc:	440b      	add	r3, r1
 80006ce:	f002 0201 	and.w	r2, r2, #1
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	701a      	strb	r2, [r3, #0]
		value /= 2;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	085b      	lsrs	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
		currentCount++;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	3301      	adds	r3, #1
 80006e0:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1ed      	bne.n	80006c4 <decimalToBinary+0x14>
	}

	while (currentCount < count)
 80006e8:	e007      	b.n	80006fa <decimalToBinary+0x4a>
	{
		array[currentCount] = 0;
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
		currentCount++;
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	3301      	adds	r3, #1
 80006f8:	75fb      	strb	r3, [r7, #23]
	while (currentCount < count)
 80006fa:	7dfa      	ldrb	r2, [r7, #23]
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d3f3      	bcc.n	80006ea <decimalToBinary+0x3a>
	}
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <BQ_ParseAllFlags>:
					  unsigned short batteryMode,
					  unsigned char gpio,
					  unsigned short manStatus,
					  unsigned int chargeStatus,
					  unsigned int gaugStatus)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	4608      	mov	r0, r1
 800071a:	4611      	mov	r1, r2
 800071c:	461a      	mov	r2, r3
 800071e:	4603      	mov	r3, r0
 8000720:	817b      	strh	r3, [r7, #10]
 8000722:	460b      	mov	r3, r1
 8000724:	813b      	strh	r3, [r7, #8]
 8000726:	4613      	mov	r3, r2
 8000728:	71fb      	strb	r3, [r7, #7]
	BQ_ParseOperationStatus(opStatus);
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f000 f81a 	bl	8000764 <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(chargeStatus);
 8000730:	69f8      	ldr	r0, [r7, #28]
 8000732:	f000 f827 	bl	8000784 <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(gaugStatus);
 8000736:	6a38      	ldr	r0, [r7, #32]
 8000738:	f000 f834 	bl	80007a4 <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(batteryStatus);
 800073c:	897b      	ldrh	r3, [r7, #10]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f840 	bl	80007c4 <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(manStatus);
 8000744:	8b3b      	ldrh	r3, [r7, #24]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f860 	bl	800080c <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(batteryMode);
 800074c:	893b      	ldrh	r3, [r7, #8]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f84a 	bl	80007e8 <BQ_ParseBatteryMode>
	BQ_ParseGpio(gpio);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f86a 	bl	8000830 <BQ_ParseGpio>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(unsigned int raw)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_opStatus
	decimalToBinary(raw, BQ_opStatus, 32);
 800076c:	2220      	movs	r2, #32
 800076e:	4904      	ldr	r1, [pc, #16]	@ (8000780 <BQ_ParseOperationStatus+0x1c>)
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff9d 	bl	80006b0 <decimalToBinary>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000030 	.word	0x20000030

08000784 <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(unsigned int raw)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_chargeStatus
	decimalToBinary(raw, BQ_chargeStatus, 32);
 800078c:	2220      	movs	r2, #32
 800078e:	4904      	ldr	r1, [pc, #16]	@ (80007a0 <BQ_ParseChargeStatus+0x1c>)
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff8d 	bl	80006b0 <decimalToBinary>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000050 	.word	0x20000050

080007a4 <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(unsigned int raw)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_gaugeStatus
	decimalToBinary(raw, BQ_gaugeStatus, 32);
 80007ac:	2220      	movs	r2, #32
 80007ae:	4904      	ldr	r1, [pc, #16]	@ (80007c0 <BQ_ParseGaugeStatus+0x1c>)
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff7d 	bl	80006b0 <decimalToBinary>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000070 	.word	0x20000070

080007c4 <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(unsigned short raw)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	80fb      	strh	r3, [r7, #6]
	//convert to binary array and save in BQ_batteryStatus
	decimalToBinary(raw, BQ_batteryStatus, 16);
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	2210      	movs	r2, #16
 80007d2:	4904      	ldr	r1, [pc, #16]	@ (80007e4 <BQ_ParseBatteryStatus+0x20>)
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff6b 	bl	80006b0 <decimalToBinary>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000090 	.word	0x20000090

080007e8 <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(unsigned short raw)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
	//convert to binary array and save in BQ_batteryMode
	decimalToBinary(raw, BQ_batteryMode, 16);
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	2210      	movs	r2, #16
 80007f6:	4904      	ldr	r1, [pc, #16]	@ (8000808 <BQ_ParseBatteryMode+0x20>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff59 	bl	80006b0 <decimalToBinary>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000a0 	.word	0x200000a0

0800080c <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(unsigned short raw)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
	decimalToBinary(raw, BQ_manufacturingStatus, 16);
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2210      	movs	r2, #16
 800081a:	4904      	ldr	r1, [pc, #16]	@ (800082c <BQ_ParseManufacturingStatus+0x20>)
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff47 	bl	80006b0 <decimalToBinary>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000b0 	.word	0x200000b0

08000830 <BQ_ParseGpio>:

void BQ_ParseGpio(unsigned char raw)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	//convert to binary array and save in BQ_gpio
	decimalToBinary(raw, BQ_gpio, 8);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2208      	movs	r2, #8
 800083e:	4904      	ldr	r1, [pc, #16]	@ (8000850 <BQ_ParseGpio+0x20>)
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff35 	bl	80006b0 <decimalToBinary>
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000c0 	.word	0x200000c0

08000854 <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
    if (BQ_opStatus[9] && BQ_opStatus[8]){
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <BQ_GetSecurityMode+0x4c>)
 800085a:	7a5b      	ldrb	r3, [r3, #9]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d005      	beq.n	800086c <BQ_GetSecurityMode+0x18>
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <BQ_GetSecurityMode+0x4c>)
 8000862:	7a1b      	ldrb	r3, [r3, #8]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <BQ_GetSecurityMode+0x18>
        return SEALED;//11
 8000868:	2300      	movs	r3, #0
 800086a:	e014      	b.n	8000896 <BQ_GetSecurityMode+0x42>
    }else if (BQ_opStatus[9] && !BQ_opStatus[8]){
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <BQ_GetSecurityMode+0x4c>)
 800086e:	7a5b      	ldrb	r3, [r3, #9]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <BQ_GetSecurityMode+0x2c>
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <BQ_GetSecurityMode+0x4c>)
 8000876:	7a1b      	ldrb	r3, [r3, #8]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <BQ_GetSecurityMode+0x2c>
        return UNSEALED;//10
 800087c:	2301      	movs	r3, #1
 800087e:	e00a      	b.n	8000896 <BQ_GetSecurityMode+0x42>
    }else if (!BQ_opStatus[9] && BQ_opStatus[8]){
 8000880:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <BQ_GetSecurityMode+0x4c>)
 8000882:	7a5b      	ldrb	r3, [r3, #9]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d105      	bne.n	8000894 <BQ_GetSecurityMode+0x40>
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <BQ_GetSecurityMode+0x4c>)
 800088a:	7a1b      	ldrb	r3, [r3, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <BQ_GetSecurityMode+0x40>
        return FULL_ACCESS;//01
 8000890:	2302      	movs	r3, #2
 8000892:	e000      	b.n	8000896 <BQ_GetSecurityMode+0x42>
    }else{
        return RESERVED;//00
 8000894:	2303      	movs	r3, #3
    }
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000030 	.word	0x20000030

080008a4 <BQ_IsManufacturingFuseEnabled>:
{
    return BQ_opStatus[3];
}

bool BQ_IsManufacturingFuseEnabled(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[8];
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <BQ_IsManufacturingFuseEnabled+0x1c>)
 80008aa:	7a1b      	ldrb	r3, [r3, #8]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	bf14      	ite	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	2300      	moveq	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	200000b0 	.word	0x200000b0

080008c4 <BQ_IsManufacturingAllFetEnabled>:
/**
 * @brief function shows fet control
 * @return 0 if fet control enabled, 1 if fet control disabled
 */
bool BQ_IsManufacturingAllFetEnabled(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[4];
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <BQ_IsManufacturingAllFetEnabled+0x1c>)
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf14      	ite	ne
 80008d0:	2301      	movne	r3, #1
 80008d2:	2300      	moveq	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	200000b0 	.word	0x200000b0

080008e4 <BQ_IsManufacturingGaugingEnabled>:

bool BQ_IsManufacturingGaugingEnabled(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[3];
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <BQ_IsManufacturingGaugingEnabled+0x1c>)
 80008ea:	78db      	ldrb	r3, [r3, #3]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf14      	ite	ne
 80008f0:	2301      	movne	r3, #1
 80008f2:	2300      	moveq	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	200000b0 	.word	0x200000b0

08000904 <BQ_IsManufacturingCalibrationEnabled>:

bool BQ_IsManufacturingCalibrationEnabled(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[15];
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <BQ_IsManufacturingCalibrationEnabled+0x1c>)
 800090a:	7bdb      	ldrb	r3, [r3, #15]
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	200000b0 	.word	0x200000b0

08000924 <BQ_IsManufacturingPermanentFailureEnabled>:

bool BQ_IsManufacturingPermanentFailureEnabled(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[6];
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <BQ_IsManufacturingPermanentFailureEnabled+0x1c>)
 800092a:	799b      	ldrb	r3, [r3, #6]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	200000b0 	.word	0x200000b0

08000944 <BQ_IsManufacturingLifetimeEnabled>:

bool BQ_IsManufacturingLifetimeEnabled(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[5];
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <BQ_IsManufacturingLifetimeEnabled+0x1c>)
 800094a:	795b      	ldrb	r3, [r3, #5]
 800094c:	2b00      	cmp	r3, #0
 800094e:	bf14      	ite	ne
 8000950:	2301      	movne	r3, #1
 8000952:	2300      	moveq	r3, #0
 8000954:	b2db      	uxtb	r3, r3
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	200000b0 	.word	0x200000b0

08000964 <BQ_IsLedEnabled>:

bool BQ_IsLedEnabled(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
    return BQ_opStatus[17];
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <BQ_IsLedEnabled+0x1c>)
 800096a:	7c5b      	ldrb	r3, [r3, #17]
 800096c:	2b00      	cmp	r3, #0
 800096e:	bf14      	ite	ne
 8000970:	2301      	movne	r3, #1
 8000972:	2300      	moveq	r3, #0
 8000974:	b2db      	uxtb	r3, r3
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	20000030 	.word	0x20000030

08000984 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b45      	ldr	r3, [pc, #276]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a44      	ldr	r2, [pc, #272]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b42      	ldr	r3, [pc, #264]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	@ (8000ab0 <MX_GPIO_Init+0x12c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	21b0      	movs	r1, #176	@ 0xb0
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f000 fe79 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0c:	4829      	ldr	r0, [pc, #164]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 8000a0e:	f000 fe73 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4823      	ldr	r0, [pc, #140]	@ (8000ab8 <MX_GPIO_Init+0x134>)
 8000a2a:	f000 fceb 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4c:	f000 fcda 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a50:	23b0      	movs	r3, #176	@ 0xb0
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f000 fccb 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a6e:	2340      	movs	r3, #64	@ 0x40
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f000 fcbe 	bl	8001404 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	@ (8000ab4 <MX_GPIO_Init+0x130>)
 8000aa2:	f000 fcaf 	bl	8001404 <HAL_GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800

08000abc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f000 fe16 	bl	8001728 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 f9d4 	bl	8000eae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f002 fa21 	bl	8002f50 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 f9cb 	bl	8000eae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f002 fa63 	bl	8002fe6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 f9c2 	bl	8000eae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000012c 	.word	0x2000012c
 8000b34:	40005400 	.word	0x40005400
 8000b38:	10909cec 	.word	0x10909cec

08000b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0a2      	sub	sp, #136	@ 0x88
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2260      	movs	r2, #96	@ 0x60
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fc2f 	bl	80043c0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a28      	ldr	r2, [pc, #160]	@ (8000c08 <HAL_I2C_MspInit+0xcc>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d148      	bne.n	8000bfe <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b6c:	2340      	movs	r3, #64	@ 0x40
 8000b6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 f8e5 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b84:	f000 f993 	bl	8000eae <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ba0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ba4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <HAL_I2C_MspInit+0xd4>)
 8000bc2:	f000 fc1f 	bl	8001404 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000bcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	210a      	movs	r1, #10
 8000be2:	201f      	movs	r0, #31
 8000be4:	f000 fb89 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000be8:	201f      	movs	r0, #31
 8000bea:	f000 fba2 	bl	8001332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2109      	movs	r1, #9
 8000bf2:	2020      	movs	r0, #32
 8000bf4:	f000 fb81 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bf8:	2020      	movs	r0, #32
 8000bfa:	f000 fb9a 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3788      	adds	r7, #136	@ 0x88
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48000400 	.word	0x48000400

08000c14 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
unsigned short I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, unsigned char device, unsigned char address)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
 8000c20:	4613      	mov	r3, r2
 8000c22:	70bb      	strb	r3, [r7, #2]
	unsigned char buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	78ba      	ldrb	r2, [r7, #2]
 8000c2a:	78f9      	ldrb	r1, [r7, #3]
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	9000      	str	r0, [sp, #0]
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 f82a 	bl	8000c8a <I2CHelper_ReadRegister>
	unsigned short result = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000c3a:	7b3b      	ldrb	r3, [r7, #12]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	89fb      	ldrh	r3, [r7, #14]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	81fb      	strh	r3, [r7, #14]

	return result;
 8000c54:	89fb      	ldrh	r3, [r7, #14]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
unsigned char I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, unsigned char device, unsigned char address)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af02      	add	r7, sp, #8
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	460b      	mov	r3, r1
 8000c68:	70fb      	strb	r3, [r7, #3]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	70bb      	strb	r3, [r7, #2]
	unsigned char buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	78ba      	ldrb	r2, [r7, #2]
 8000c74:	78f9      	ldrb	r1, [r7, #3]
 8000c76:	2001      	movs	r0, #1
 8000c78:	9000      	str	r0, [sp, #0]
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 f805 	bl	8000c8a <I2CHelper_ReadRegister>

	return buf[0];
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, unsigned char device, unsigned char address, unsigned char *receive_buffer, unsigned char size)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af02      	add	r7, sp, #8
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	72fb      	strb	r3, [r7, #11]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8000c9c:	7afb      	ldrb	r3, [r7, #11]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	b299      	uxth	r1, r3
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2364      	movs	r3, #100	@ 0x64
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f000 fdd6 	bl	8001860 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	b299      	uxth	r1, r3
 8000cbc:	7e3b      	ldrb	r3, [r7, #24]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	2264      	movs	r2, #100	@ 0x64
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f000 fee2 	bl	8001a90 <HAL_I2C_Master_Receive>
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 f993 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f895 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f7ff fe4f 	bl	8000984 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ce6:	f7ff fee9 	bl	8000abc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 8000cea:	4843      	ldr	r0, [pc, #268]	@ (8000df8 <main+0x124>)
 8000cec:	f000 fd1c 	bl	8001728 <HAL_I2C_Init>
  HAL_I2C_MspInit(&hi2c1);
 8000cf0:	4841      	ldr	r0, [pc, #260]	@ (8000df8 <main+0x124>)
 8000cf2:	f7ff ff23 	bl	8000b3c <HAL_I2C_MspInit>
  uint16_t voltage = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	82fb      	strh	r3, [r7, #22]
  uint16_t current = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	82bb      	strh	r3, [r7, #20]
  uint8_t percentage[2];
  uint16_t cells[6];
  HAL_StatusTypeDef ready;
  BQ_Init(&hi2c1);
 8000cfe:	483e      	ldr	r0, [pc, #248]	@ (8000df8 <main+0x124>)
 8000d00:	f7ff fa64 	bl	80001cc <BQ_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8000d04:	2064      	movs	r0, #100	@ 0x64
 8000d06:	f000 f9f9 	bl	80010fc <HAL_Delay>

	  BQ_ReadMABlockCommand(0x0071, BQ_daStatus1, 32);
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	493b      	ldr	r1, [pc, #236]	@ (8000dfc <main+0x128>)
 8000d0e:	2071      	movs	r0, #113	@ 0x71
 8000d10:	f7ff fae6 	bl	80002e0 <BQ_ReadMABlockCommand>
//	  BQ_ReadMABlockCommand(0x0072, BQ_daStatus2, 16);
	  BQ_ReadMABlockCommand(0x007B, BQ_daStatus3, 18);
 8000d14:	2212      	movs	r2, #18
 8000d16:	493a      	ldr	r1, [pc, #232]	@ (8000e00 <main+0x12c>)
 8000d18:	207b      	movs	r0, #123	@ 0x7b
 8000d1a:	f7ff fae1 	bl	80002e0 <BQ_ReadMABlockCommand>
//	  BQ_ReadMABlockCommand(0xF081, BQ_outCal, 32);
	  voltage = I2CHelper_ReadRegisterAsShort(bq_i2c, bq_deviceAddress, REG_VOLTAGE);//works 0x09
 8000d1e:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <main+0x130>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a39      	ldr	r2, [pc, #228]	@ (8000e08 <main+0x134>)
 8000d24:	7811      	ldrb	r1, [r2, #0]
 8000d26:	2209      	movs	r2, #9
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff73 	bl	8000c14 <I2CHelper_ReadRegisterAsShort>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	82fb      	strh	r3, [r7, #22]
	  current = I2CHelper_ReadRegisterAsShort(bq_i2c, bq_deviceAddress, 0x0A);
 8000d32:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <main+0x130>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a34      	ldr	r2, [pc, #208]	@ (8000e08 <main+0x134>)
 8000d38:	7811      	ldrb	r1, [r2, #0]
 8000d3a:	220a      	movs	r2, #10
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff69 	bl	8000c14 <I2CHelper_ReadRegisterAsShort>
 8000d42:	4603      	mov	r3, r0
 8000d44:	82bb      	strh	r3, [r7, #20]
	  percentage[0] = I2CHelper_ReadRegisterAsChar(bq_i2c, bq_deviceAddress, 0x0D);
 8000d46:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <main+0x130>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8000e08 <main+0x134>)
 8000d4c:	7811      	ldrb	r1, [r2, #0]
 8000d4e:	220d      	movs	r2, #13
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff84 	bl	8000c5e <I2CHelper_ReadRegisterAsChar>
 8000d56:	4603      	mov	r3, r0
 8000d58:	743b      	strb	r3, [r7, #16]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(bq_i2c, bq_deviceAddress, 0x0E);
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <main+0x130>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e08 <main+0x134>)
 8000d60:	7811      	ldrb	r1, [r2, #0]
 8000d62:	220e      	movs	r2, #14
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff7a 	bl	8000c5e <I2CHelper_ReadRegisterAsChar>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	747b      	strb	r3, [r7, #17]
	  cells[0] = BQ_daStatus1[0] | (BQ_daStatus1[1] << 8);
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <main+0x128>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <main+0x128>)
 8000d76:	785b      	ldrb	r3, [r3, #1]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	80bb      	strh	r3, [r7, #4]
	  cells[1] = BQ_daStatus1[2] | (BQ_daStatus1[3] << 8);
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <main+0x128>)
 8000d86:	789b      	ldrb	r3, [r3, #2]
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <main+0x128>)
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	80fb      	strh	r3, [r7, #6]
	  cells[2] = BQ_daStatus1[4] | (BQ_daStatus1[5] << 8);
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <main+0x128>)
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <main+0x128>)
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	813b      	strh	r3, [r7, #8]
	  cells[3] = BQ_daStatus1[6] | (BQ_daStatus1[7] << 8);
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <main+0x128>)
 8000db2:	799b      	ldrb	r3, [r3, #6]
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <main+0x128>)
 8000db8:	79db      	ldrb	r3, [r3, #7]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	817b      	strh	r3, [r7, #10]
	  cells[4] = BQ_daStatus3[0] | (BQ_daStatus3[1] << 8);
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e00 <main+0x12c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <main+0x12c>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	81bb      	strh	r3, [r7, #12]
	  cells[5] = BQ_daStatus3[6] | (BQ_daStatus3[7] << 8);
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <main+0x12c>)
 8000dde:	799b      	ldrb	r3, [r3, #6]
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <main+0x12c>)
 8000de4:	79db      	ldrb	r3, [r3, #7]
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	81fb      	strh	r3, [r7, #14]
	  HAL_Delay(100);
 8000df2:	bf00      	nop
 8000df4:	e786      	b.n	8000d04 <main+0x30>
 8000df6:	bf00      	nop
 8000df8:	2000012c 	.word	0x2000012c
 8000dfc:	200000c8 	.word	0x200000c8
 8000e00:	200000f8 	.word	0x200000f8
 8000e04:	2000002c 	.word	0x2000002c
 8000e08:	20000000 	.word	0x20000000

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b096      	sub	sp, #88	@ 0x58
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2244      	movs	r2, #68	@ 0x44
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fad0 	bl	80043c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e32:	f002 f933 	bl	800309c <HAL_PWREx_ControlVoltageScaling>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e3c:	f000 f837 	bl	8000eae <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4a:	2310      	movs	r3, #16
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e52:	2302      	movs	r3, #2
 8000e54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 f96a 	bl	8003148 <HAL_RCC_OscConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e7a:	f000 f818 	bl	8000eae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	230f      	movs	r3, #15
 8000e80:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e82:	2303      	movs	r3, #3
 8000e84:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2104      	movs	r1, #4
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fd6a 	bl	8003970 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ea2:	f000 f804 	bl	8000eae <Error_Handler>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3758      	adds	r7, #88	@ 0x58
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb2:	b672      	cpsid	i
}
 8000eb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb6:	bf00      	nop
 8000eb8:	e7fd      	b.n	8000eb6 <Error_Handler+0x8>
	...

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f8af 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <I2C1_EV_IRQHandler+0x10>)
 8000f6a:	f000 ff73 	bl	8001e54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000012c 	.word	0x2000012c

08000f78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <I2C1_ER_IRQHandler+0x10>)
 8000f7e:	f000 ff83 	bl	8001e88 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000012c 	.word	0x2000012c

08000f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb4:	f7ff ffea 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f003 f9f7 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe2:	f7ff fe77 	bl	8000cd4 <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ff4:	08004478 	.word	0x08004478
  ldr r2, =_sbss
 8000ff8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ffc:	20000184 	.word	0x20000184

08001000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_IRQHandler>
	...

08001004 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_Init+0x3c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <HAL_Init+0x3c>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001018:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f962 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001020:	2000      	movs	r0, #0
 8001022:	f000 f80f 	bl	8001044 <HAL_InitTick>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	e001      	b.n	8001036 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001032:	f7ff ff43 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001036:	79fb      	ldrb	r3, [r7, #7]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_InitTick+0x6c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d023      	beq.n	80010a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <HAL_InitTick+0x70>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f96d 	bl	800134e <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10f      	bne.n	800109a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d809      	bhi.n	8001094 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f937 	bl	80012fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_InitTick+0x74>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e007      	b.n	80010a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e004      	b.n	80010a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e001      	b.n	80010a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000004 	.word	0x20000004
 80010b8:	20000008 	.word	0x20000008

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2000000c 	.word	0x2000000c
 80010e0:	20000180 	.word	0x20000180

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	@ (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000180 	.word	0x20000180

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001116:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000000c 	.word	0x2000000c

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d005      	beq.n	800138a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2204      	movs	r2, #4
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e029      	b.n	80013de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 020e 	bic.w	r2, r2, #14
 8001398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f003 021c 	and.w	r2, r3, #28
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4798      	blx	r3
    }
  }
  return status;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013f6:	b2db      	uxtb	r3, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	e154      	b.n	80016be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8146 	beq.w	80016b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d005      	beq.n	8001444 <HAL_GPIO_Init+0x40>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d017      	beq.n	80014e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d123      	bne.n	8001536 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691a      	ldr	r2, [r3, #16]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	08da      	lsrs	r2, r3, #3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3208      	adds	r2, #8
 8001530:	6939      	ldr	r1, [r7, #16]
 8001532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0203 	and.w	r2, r3, #3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80a0 	beq.w	80016b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001578:	4b58      	ldr	r3, [pc, #352]	@ (80016dc <HAL_GPIO_Init+0x2d8>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157c:	4a57      	ldr	r2, [pc, #348]	@ (80016dc <HAL_GPIO_Init+0x2d8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6613      	str	r3, [r2, #96]	@ 0x60
 8001584:	4b55      	ldr	r3, [pc, #340]	@ (80016dc <HAL_GPIO_Init+0x2d8>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001590:	4a53      	ldr	r2, [pc, #332]	@ (80016e0 <HAL_GPIO_Init+0x2dc>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ba:	d019      	beq.n	80015f0 <HAL_GPIO_Init+0x1ec>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a49      	ldr	r2, [pc, #292]	@ (80016e4 <HAL_GPIO_Init+0x2e0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d013      	beq.n	80015ec <HAL_GPIO_Init+0x1e8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a48      	ldr	r2, [pc, #288]	@ (80016e8 <HAL_GPIO_Init+0x2e4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d00d      	beq.n	80015e8 <HAL_GPIO_Init+0x1e4>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a47      	ldr	r2, [pc, #284]	@ (80016ec <HAL_GPIO_Init+0x2e8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0x1e0>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a46      	ldr	r2, [pc, #280]	@ (80016f0 <HAL_GPIO_Init+0x2ec>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_GPIO_Init+0x1dc>
 80015dc:	2304      	movs	r3, #4
 80015de:	e008      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015e0:	2307      	movs	r3, #7
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015e4:	2303      	movs	r3, #3
 80015e6:	e004      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015f0:	2300      	movs	r3, #0
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001602:	4937      	ldr	r1, [pc, #220]	@ (80016e0 <HAL_GPIO_Init+0x2dc>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001634:	4a2f      	ldr	r2, [pc, #188]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800163a:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800165e:	4a25      	ldr	r2, [pc, #148]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001664:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001688:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016b2:	4a10      	ldr	r2, [pc, #64]	@ (80016f4 <HAL_GPIO_Init+0x2f0>)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	3301      	adds	r3, #1
 80016bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f47f aea3 	bne.w	8001414 <HAL_GPIO_Init+0x10>
  }
}
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000c00 	.word	0x48000c00
 80016f0:	48001000 	.word	0x48001000
 80016f4:	40010400 	.word	0x40010400

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001714:	e002      	b.n	800171c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e08d      	b.n	8001856 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff f9f4 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2224      	movs	r2, #36	@ 0x24
 8001758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001778:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001788:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e006      	b.n	80017b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d108      	bne.n	80017ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	e007      	b.n	80017da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69d9      	ldr	r1, [r3, #28]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af02      	add	r7, sp, #8
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	460b      	mov	r3, r1
 800186e:	817b      	strh	r3, [r7, #10]
 8001870:	4613      	mov	r3, r2
 8001872:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b20      	cmp	r3, #32
 800187e:	f040 80fd 	bne.w	8001a7c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_I2C_Master_Transmit+0x30>
 800188c:	2302      	movs	r3, #2
 800188e:	e0f6      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x21e>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001898:	f7ff fc24 	bl	80010e4 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2319      	movs	r3, #25
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f001 f871 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0e1      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2221      	movs	r2, #33	@ 0x21
 80018be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2210      	movs	r2, #16
 80018c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	893a      	ldrh	r2, [r7, #8]
 80018da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2bff      	cmp	r3, #255	@ 0xff
 80018ea:	d906      	bls.n	80018fa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	22ff      	movs	r2, #255	@ 0xff
 80018f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80018f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e007      	b.n	800190a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001904:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001908:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190e:	2b00      	cmp	r3, #0
 8001910:	d024      	beq.n	800195c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	8979      	ldrh	r1, [r7, #10]
 800194e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <HAL_I2C_Master_Transmit+0x228>)
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f001 fa6b 	bl	8002e30 <I2C_TransferConfig>
 800195a:	e066      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001960:	b2da      	uxtb	r2, r3
 8001962:	8979      	ldrh	r1, [r7, #10]
 8001964:	4b48      	ldr	r3, [pc, #288]	@ (8001a88 <HAL_I2C_Master_Transmit+0x228>)
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f001 fa60 	bl	8002e30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001970:	e05b      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	6a39      	ldr	r1, [r7, #32]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f001 f864 	bl	8002a44 <I2C_WaitOnTXISFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e07b      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d034      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0x1ca>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d130      	bne.n	8001a2a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	2200      	movs	r2, #0
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 ffdd 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e04d      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2bff      	cmp	r3, #255	@ 0xff
 80019ea:	d90e      	bls.n	8001a0a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	22ff      	movs	r2, #255	@ 0xff
 80019f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	8979      	ldrh	r1, [r7, #10]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f001 fa14 	bl	8002e30 <I2C_TransferConfig>
 8001a08:	e00f      	b.n	8001a2a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	8979      	ldrh	r1, [r7, #10]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f001 fa03 	bl	8002e30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d19e      	bne.n	8001972 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	6a39      	ldr	r1, [r7, #32]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f001 f84a 	bl	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e01a      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <HAL_I2C_Master_Transmit+0x22c>)
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	80002000 	.word	0x80002000
 8001a8c:	fe00e800 	.word	0xfe00e800

08001a90 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	817b      	strh	r3, [r7, #10]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	f040 80db 	bne.w	8001c68 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_I2C_Master_Receive+0x30>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e0d4      	b.n	8001c6a <HAL_I2C_Master_Receive+0x1da>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ac8:	f7ff fb0c 	bl	80010e4 <HAL_GetTick>
 8001acc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2319      	movs	r3, #25
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 ff59 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0bf      	b.n	8001c6a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2222      	movs	r2, #34	@ 0x22
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2210      	movs	r2, #16
 8001af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	893a      	ldrh	r2, [r7, #8]
 8001b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2bff      	cmp	r3, #255	@ 0xff
 8001b1a:	d90e      	bls.n	8001b3a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	8979      	ldrh	r1, [r7, #10]
 8001b2a:	4b52      	ldr	r3, [pc, #328]	@ (8001c74 <HAL_I2C_Master_Receive+0x1e4>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f001 f97c 	bl	8002e30 <I2C_TransferConfig>
 8001b38:	e06d      	b.n	8001c16 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	8979      	ldrh	r1, [r7, #10]
 8001b4c:	4b49      	ldr	r3, [pc, #292]	@ (8001c74 <HAL_I2C_Master_Receive+0x1e4>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f001 f96b 	bl	8002e30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b5a:	e05c      	b.n	8001c16 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	6a39      	ldr	r1, [r7, #32]
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 fff9 	bl	8002b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e07c      	b.n	8001c6a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d034      	beq.n	8001c16 <HAL_I2C_Master_Receive+0x186>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d130      	bne.n	8001c16 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2180      	movs	r1, #128	@ 0x80
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fee7 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e04d      	b.n	8001c6a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2bff      	cmp	r3, #255	@ 0xff
 8001bd6:	d90e      	bls.n	8001bf6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	22ff      	movs	r2, #255	@ 0xff
 8001bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	8979      	ldrh	r1, [r7, #10]
 8001be6:	2300      	movs	r3, #0
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f001 f91e 	bl	8002e30 <I2C_TransferConfig>
 8001bf4:	e00f      	b.n	8001c16 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	8979      	ldrh	r1, [r7, #10]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f001 f90d 	bl	8002e30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d19d      	bne.n	8001b5c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	6a39      	ldr	r1, [r7, #32]
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 ff54 	bl	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e01a      	b.n	8001c6a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_I2C_Master_Receive+0x1e8>)
 8001c48:	400b      	ands	r3, r1
 8001c4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	80002400 	.word	0x80002400
 8001c78:	fe00e800 	.word	0xfe00e800

08001c7c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	@ 0x28
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	f040 80d6 	bne.w	8001e4a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0cc      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_I2C_IsDeviceReady+0x44>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e0c5      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x1d0>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2224      	movs	r2, #36	@ 0x24
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d107      	bne.n	8001cee <HAL_I2C_IsDeviceReady+0x72>
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ce8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cec:	e006      	b.n	8001cfc <HAL_I2C_IsDeviceReady+0x80>
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cf8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f9ef 	bl	80010e4 <HAL_GetTick>
 8001d06:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d34:	e034      	b.n	8001da0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d01a      	beq.n	8001d74 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff f9d1 	bl	80010e4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <HAL_I2C_IsDeviceReady+0xd8>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10f      	bne.n	8001d74 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	f043 0220 	orr.w	r2, r3, #32
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e06b      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	bf0c      	ite	eq
 8001d82:	2301      	moveq	r3, #1
 8001d84:	2300      	movne	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_I2C_IsDeviceReady+0x130>
 8001da6:	7fbb      	ldrb	r3, [r7, #30]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0c4      	beq.n	8001d36 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d01a      	beq.n	8001df0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fde4 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e03b      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e02d      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	2120      	movs	r1, #32
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 fdc9 	bl	8002992 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e020      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2220      	movs	r2, #32
 8001e18:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f63f af56 	bhi.w	8001cd6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
  }
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
  }
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00f      	beq.n	8001eca <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ec8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00f      	beq.n	8001ef4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f043 0208 	orr.w	r2, r3, #8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00f      	beq.n	8001f1e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	f043 0202 	orr.w	r2, r3, #2
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f1c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 030b 	and.w	r3, r3, #11
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001f2e:	68f9      	ldr	r1, [r7, #12]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fbd5 	bl	80026e0 <I2C_ITError>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	70fb      	strb	r3, [r7, #3]
 8001f72:	4613      	mov	r3, r2
 8001f74:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <I2C_Slave_ISR_IT+0x24>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e0e2      	b.n	80021a8 <I2C_Slave_ISR_IT+0x1ea>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ffe:	6939      	ldr	r1, [r7, #16]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f9b5 	bl	8002370 <I2C_ITSlaveCplt>
 8002006:	e0ca      	b.n	800219e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d04b      	beq.n	80020aa <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002018:	2b00      	cmp	r3, #0
 800201a:	d046      	beq.n	80020aa <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d128      	bne.n	8002078 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b28      	cmp	r3, #40	@ 0x28
 8002030:	d108      	bne.n	8002044 <I2C_Slave_ISR_IT+0x86>
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002038:	d104      	bne.n	8002044 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800203a:	6939      	ldr	r1, [r7, #16]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fafb 	bl	8002638 <I2C_ITListenCplt>
 8002042:	e031      	b.n	80020a8 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b29      	cmp	r3, #41	@ 0x29
 800204e:	d10e      	bne.n	800206e <I2C_Slave_ISR_IT+0xb0>
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002056:	d00a      	beq.n	800206e <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2210      	movs	r2, #16
 800205e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fc54 	bl	800290e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f926 	bl	80022b8 <I2C_ITSlaveSeqCplt>
 800206c:	e01c      	b.n	80020a8 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002076:	e08f      	b.n	8002198 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <I2C_Slave_ISR_IT+0xdc>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002098:	d17e      	bne.n	8002198 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	4619      	mov	r1, r3
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fb1d 	bl	80026e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020a6:	e077      	b.n	8002198 <I2C_Slave_ISR_IT+0x1da>
 80020a8:	e076      	b.n	8002198 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d02f      	beq.n	8002114 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d02a      	beq.n	8002114 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d018      	beq.n	80020fa <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d14b      	bne.n	800219c <I2C_Slave_ISR_IT+0x1de>
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800210a:	d047      	beq.n	800219c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f8d3 	bl	80022b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002112:	e043      	b.n	800219c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002128:	6939      	ldr	r1, [r7, #16]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f840 	bl	80021b0 <I2C_ITAddrCplt>
 8002130:	e035      	b.n	800219e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d030      	beq.n	800219e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02b      	beq.n	800219e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d018      	beq.n	8002182 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002180:	e00d      	b.n	800219e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002188:	d002      	beq.n	8002190 <I2C_Slave_ISR_IT+0x1d2>
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d106      	bne.n	800219e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f891 	bl	80022b8 <I2C_ITSlaveSeqCplt>
 8002196:	e002      	b.n	800219e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002198:	bf00      	nop
 800219a:	e000      	b.n	800219e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800219c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021c6:	2b28      	cmp	r3, #40	@ 0x28
 80021c8:	d16a      	bne.n	80022a0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80021e8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002204:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d138      	bne.n	8002280 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	09db      	lsrs	r3, r3, #7
 8002212:	b29a      	uxth	r2, r3
 8002214:	89bb      	ldrh	r3, [r7, #12]
 8002216:	4053      	eors	r3, r2
 8002218:	b29b      	uxth	r3, r3
 800221a:	f003 0306 	and.w	r3, r3, #6
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11c      	bne.n	800225c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002222:	897b      	ldrh	r3, [r7, #10]
 8002224:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002234:	2b02      	cmp	r3, #2
 8002236:	d13b      	bne.n	80022b0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2208      	movs	r2, #8
 8002244:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800224e:	89ba      	ldrh	r2, [r7, #12]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	4619      	mov	r1, r3
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fe86 	bl	8001f66 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800225a:	e029      	b.n	80022b0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800225c:	893b      	ldrh	r3, [r7, #8]
 800225e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fe15 	bl	8002e94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002272:	89ba      	ldrh	r2, [r7, #12]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fe74 	bl	8001f66 <HAL_I2C_AddrCallback>
}
 800227e:	e017      	b.n	80022b0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fe05 	bl	8002e94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002292:	89ba      	ldrh	r2, [r7, #12]
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fe64 	bl	8001f66 <HAL_I2C_AddrCallback>
}
 800229e:	e007      	b.n	80022b0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2208      	movs	r2, #8
 80022a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e00c      	b.n	8002306 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002304:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b29      	cmp	r3, #41	@ 0x29
 8002310:	d112      	bne.n	8002338 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2228      	movs	r2, #40	@ 0x28
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2221      	movs	r2, #33	@ 0x21
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002320:	2101      	movs	r1, #1
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fdb6 	bl	8002e94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff fe04 	bl	8001f3e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002336:	e017      	b.n	8002368 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b2a      	cmp	r3, #42	@ 0x2a
 8002342:	d111      	bne.n	8002368 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2228      	movs	r2, #40	@ 0x28
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2222      	movs	r2, #34	@ 0x22
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002352:	2102      	movs	r1, #2
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fd9d 	bl	8002e94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fdf5 	bl	8001f52 <HAL_I2C_SlaveRxCpltCallback>
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002392:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2220      	movs	r2, #32
 800239a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	2b21      	cmp	r3, #33	@ 0x21
 80023a0:	d002      	beq.n	80023a8 <I2C_ITSlaveCplt+0x38>
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	2b29      	cmp	r3, #41	@ 0x29
 80023a6:	d108      	bne.n	80023ba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023a8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fd71 	bl	8002e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2221      	movs	r2, #33	@ 0x21
 80023b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023b8:	e019      	b.n	80023ee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023ba:	7afb      	ldrb	r3, [r7, #11]
 80023bc:	2b22      	cmp	r3, #34	@ 0x22
 80023be:	d002      	beq.n	80023c6 <I2C_ITSlaveCplt+0x56>
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80023c4:	d108      	bne.n	80023d8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023c6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fd62 	bl	8002e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2222      	movs	r2, #34	@ 0x22
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80023d6:	e00a      	b.n	80023ee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80023d8:	7afb      	ldrb	r3, [r7, #11]
 80023da:	2b28      	cmp	r3, #40	@ 0x28
 80023dc:	d107      	bne.n	80023ee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80023de:	f248 0103 	movw	r1, #32771	@ 0x8003
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fd56 	bl	8002e94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b89      	ldr	r3, [pc, #548]	@ (8002630 <I2C_ITSlaveCplt+0x2c0>)
 800240a:	400b      	ands	r3, r1
 800240c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 fa7d 	bl	800290e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d013      	beq.n	8002446 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800242c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01f      	beq.n	8002476 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002444:	e017      	b.n	8002476 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d012      	beq.n	8002476 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800245e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d020      	beq.n	80024c2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d0:	f043 0204 	orr.w	r2, r3, #4
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d049      	beq.n	8002576 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d044      	beq.n	8002576 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d128      	bne.n	8002548 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b28      	cmp	r3, #40	@ 0x28
 8002500:	d108      	bne.n	8002514 <I2C_ITSlaveCplt+0x1a4>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002508:	d104      	bne.n	8002514 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800250a:	6979      	ldr	r1, [r7, #20]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f893 	bl	8002638 <I2C_ITListenCplt>
 8002512:	e030      	b.n	8002576 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b29      	cmp	r3, #41	@ 0x29
 800251e:	d10e      	bne.n	800253e <I2C_ITSlaveCplt+0x1ce>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002526:	d00a      	beq.n	800253e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2210      	movs	r2, #16
 800252e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f9ec 	bl	800290e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff febe 	bl	80022b8 <I2C_ITSlaveSeqCplt>
 800253c:	e01b      	b.n	8002576 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2210      	movs	r2, #16
 8002544:	61da      	str	r2, [r3, #28]
 8002546:	e016      	b.n	8002576 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <I2C_ITSlaveCplt+0x1fa>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002568:	d105      	bne.n	8002576 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f8b5 	bl	80026e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002588:	2b00      	cmp	r3, #0
 800258a:	d010      	beq.n	80025ae <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8a4 	bl	80026e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b28      	cmp	r3, #40	@ 0x28
 80025a2:	d141      	bne.n	8002628 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80025a4:	6979      	ldr	r1, [r7, #20]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f846 	bl	8002638 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025ac:	e03c      	b.n	8002628 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025b6:	d014      	beq.n	80025e2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff fe7d 	bl	80022b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002634 <I2C_ITSlaveCplt+0x2c4>)
 80025c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fcd1 	bl	8001f82 <HAL_I2C_ListenCpltCallback>
}
 80025e0:	e022      	b.n	8002628 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b22      	cmp	r3, #34	@ 0x22
 80025ec:	d10e      	bne.n	800260c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fca4 	bl	8001f52 <HAL_I2C_SlaveRxCpltCallback>
}
 800260a:	e00d      	b.n	8002628 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fc8b 	bl	8001f3e <HAL_I2C_SlaveTxCpltCallback>
}
 8002628:	bf00      	nop
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	fe00e800 	.word	0xfe00e800
 8002634:	ffff0000 	.word	0xffff0000

08002638 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a25      	ldr	r2, [pc, #148]	@ (80026dc <I2C_ITListenCplt+0xa4>)
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d022      	beq.n	80026b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	d012      	beq.n	80026b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ac:	f043 0204 	orr.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 fbeb 	bl	8002e94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2210      	movs	r2, #16
 80026c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fc57 	bl	8001f82 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a6d      	ldr	r2, [pc, #436]	@ (80028b4 <I2C_ITError+0x1d4>)
 80026fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b28      	cmp	r3, #40	@ 0x28
 8002716:	d005      	beq.n	8002724 <I2C_ITError+0x44>
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b29      	cmp	r3, #41	@ 0x29
 800271c:	d002      	beq.n	8002724 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b2a      	cmp	r3, #42	@ 0x2a
 8002722:	d10b      	bne.n	800273c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002724:	2103      	movs	r1, #3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fbb4 	bl	8002e94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2228      	movs	r2, #40	@ 0x28
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a60      	ldr	r2, [pc, #384]	@ (80028b8 <I2C_ITError+0x1d8>)
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34
 800273a:	e030      	b.n	800279e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800273c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fba7 	bl	8002e94 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8e1 	bl	800290e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b60      	cmp	r3, #96	@ 0x60
 8002756:	d01f      	beq.n	8002798 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b20      	cmp	r3, #32
 800276c:	d114      	bne.n	8002798 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b10      	cmp	r3, #16
 800277a:	d109      	bne.n	8002790 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2210      	movs	r2, #16
 8002782:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002788:	f043 0204 	orr.w	r2, r3, #4
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2220      	movs	r2, #32
 8002796:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d039      	beq.n	8002820 <I2C_ITError+0x140>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b11      	cmp	r3, #17
 80027b0:	d002      	beq.n	80027b8 <I2C_ITError+0xd8>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b21      	cmp	r3, #33	@ 0x21
 80027b6:	d133      	bne.n	8002820 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027c6:	d107      	bne.n	80027d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fe03 	bl	80013e8 <HAL_DMA_GetState>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d017      	beq.n	8002818 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ec:	4a33      	ldr	r2, [pc, #204]	@ (80028bc <I2C_ITError+0x1dc>)
 80027ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fdb2 	bl	8001366 <HAL_DMA_Abort_IT>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d04d      	beq.n	80028a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002812:	4610      	mov	r0, r2
 8002814:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002816:	e045      	b.n	80028a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f851 	bl	80028c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800281e:	e041      	b.n	80028a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d039      	beq.n	800289c <I2C_ITError+0x1bc>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b12      	cmp	r3, #18
 800282c:	d002      	beq.n	8002834 <I2C_ITError+0x154>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b22      	cmp	r3, #34	@ 0x22
 8002832:	d133      	bne.n	800289c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800283e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002842:	d107      	bne.n	8002854 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002852:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fdc5 	bl	80013e8 <HAL_DMA_GetState>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d017      	beq.n	8002894 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002868:	4a14      	ldr	r2, [pc, #80]	@ (80028bc <I2C_ITError+0x1dc>)
 800286a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fd74 	bl	8001366 <HAL_DMA_Abort_IT>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d011      	beq.n	80028a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800288e:	4610      	mov	r0, r2
 8002890:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002892:	e009      	b.n	80028a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f813 	bl	80028c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800289a:	e005      	b.n	80028a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f80f 	bl	80028c0 <I2C_TreatErrorCallback>
  }
}
 80028a2:	e002      	b.n	80028aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028a8:	bf00      	nop
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	ffff0000 	.word	0xffff0000
 80028b8:	08001fbf 	.word	0x08001fbf
 80028bc:	08002957 	.word	0x08002957

080028c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b60      	cmp	r3, #96	@ 0x60
 80028d2:	d10e      	bne.n	80028f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fb5d 	bl	8001faa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028f0:	e009      	b.n	8002906 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fb48 	bl	8001f96 <HAL_I2C_ErrorCallback>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d103      	bne.n	800292c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2200      	movs	r2, #0
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d007      	beq.n	800294a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	619a      	str	r2, [r3, #24]
  }
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	2200      	movs	r2, #0
 8002972:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002980:	2200      	movs	r2, #0
 8002982:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff ff9b 	bl	80028c0 <I2C_TreatErrorCallback>
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	4613      	mov	r3, r2
 80029a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a2:	e03b      	b.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f961 	bl	8002c70 <I2C_IsErrorOccurred>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e041      	b.n	8002a3c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d02d      	beq.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c0:	f7fe fb90 	bl	80010e4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d302      	bcc.n	80029d6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d122      	bne.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d113      	bne.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e00f      	b.n	8002a3c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4013      	ands	r3, r2
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d0b4      	beq.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a50:	e033      	b.n	8002aba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f90a 	bl	8002c70 <I2C_IsErrorOccurred>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e031      	b.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d025      	beq.n	8002aba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fe fb39 	bl	80010e4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d11a      	bne.n	8002aba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d013      	beq.n	8002aba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f043 0220 	orr.w	r2, r3, #32
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e007      	b.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d1c4      	bne.n	8002a52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ade:	e02f      	b.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f8c3 	bl	8002c70 <I2C_IsErrorOccurred>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e02d      	b.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af4:	f7fe faf6 	bl	80010e4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d302      	bcc.n	8002b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11a      	bne.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d013      	beq.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d1c8      	bne.n	8002ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b68:	e071      	b.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f87e 	bl	8002c70 <I2C_IsErrorOccurred>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d13b      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d138      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d105      	bne.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d121      	bne.n	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002bdc:	400b      	ands	r3, r1
 8002bde:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	75fb      	strb	r3, [r7, #23]
 8002bfc:	e002      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c04:	f7fe fa6e 	bl	80010e4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d119      	bne.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d00f      	beq.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d002      	beq.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d083      	beq.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	fe00e800 	.word	0xfe00e800

08002c70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08a      	sub	sp, #40	@ 0x28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d068      	beq.n	8002d6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ca4:	e049      	b.n	8002d3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d045      	beq.n	8002d3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7fe fa19 	bl	80010e4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_IsErrorOccurred+0x54>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d13a      	bne.n	8002d3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ce6:	d121      	bne.n	8002d2c <I2C_IsErrorOccurred+0xbc>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cee:	d01d      	beq.n	8002d2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d01a      	beq.n	8002d2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d06:	f7fe f9ed 	bl	80010e4 <HAL_GetTick>
 8002d0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d0c:	e00e      	b.n	8002d2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d0e:	f7fe f9e9 	bl	80010e4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b19      	cmp	r3, #25
 8002d1a:	d907      	bls.n	8002d2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f043 0320 	orr.w	r3, r3, #32
 8002d22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d2a:	e006      	b.n	8002d3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d1e9      	bne.n	8002d0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d003      	beq.n	8002d50 <I2C_IsErrorOccurred+0xe0>
 8002d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0aa      	beq.n	8002ca6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00b      	beq.n	8002d98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f043 0308 	orr.w	r3, r3, #8
 8002da8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00b      	beq.n	8002ddc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f043 0302 	orr.w	r3, r3, #2
 8002dca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01c      	beq.n	8002e1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fd92 	bl	800290e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <I2C_IsErrorOccurred+0x1bc>)
 8002df6:	400b      	ands	r3, r1
 8002df8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3728      	adds	r7, #40	@ 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	fe00e800 	.word	0xfe00e800

08002e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e42:	897b      	ldrh	r3, [r7, #10]
 8002e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e48:	7a7b      	ldrb	r3, [r7, #9]
 8002e4a:	041b      	lsls	r3, r3, #16
 8002e4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	0d5b      	lsrs	r3, r3, #21
 8002e6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <I2C_TransferConfig+0x60>)
 8002e70:	430b      	orrs	r3, r1
 8002e72:	43db      	mvns	r3, r3
 8002e74:	ea02 0103 	and.w	r1, r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	03ff63ff 	.word	0x03ff63ff

08002e94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00f      	beq.n	8002ece <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002eb4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ec2:	2b28      	cmp	r3, #40	@ 0x28
 8002ec4:	d003      	beq.n	8002ece <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002ecc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00f      	beq.n	8002ef8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002ede:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002eec:	2b28      	cmp	r3, #40	@ 0x28
 8002eee:	d003      	beq.n	8002ef8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da03      	bge.n	8002f08 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d103      	bne.n	8002f16 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d103      	bne.n	8002f24 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f043 0320 	orr.w	r3, r3, #32
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f24:	887b      	ldrh	r3, [r7, #2]
 8002f26:	2b40      	cmp	r3, #64	@ 0x40
 8002f28:	d103      	bne.n	8002f32 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	400a      	ands	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d138      	bne.n	8002fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e032      	b.n	8002fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2224      	movs	r2, #36	@ 0x24
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d139      	bne.n	8003070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003006:	2302      	movs	r3, #2
 8003008:	e033      	b.n	8003072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2224      	movs	r2, #36	@ 0x24
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0201 	bic.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003084:	4b04      	ldr	r3, [pc, #16]	@ (8003098 <HAL_PWREx_GetVoltageRange+0x18>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40007000 	.word	0x40007000

0800309c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030aa:	d130      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ac:	4b23      	ldr	r3, [pc, #140]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b8:	d038      	beq.n	800312c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ba:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030c2:	4a1e      	ldr	r2, [pc, #120]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2232      	movs	r2, #50	@ 0x32
 80030d0:	fb02 f303 	mul.w	r3, r2, r3
 80030d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003144 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9b      	lsrs	r3, r3, #18
 80030dc:	3301      	adds	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e0:	e002      	b.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e8:	4b14      	ldr	r3, [pc, #80]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f4:	d102      	bne.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f2      	bne.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003108:	d110      	bne.n	800312c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e00f      	b.n	800312e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311a:	d007      	beq.n	800312c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800311c:	4b07      	ldr	r3, [pc, #28]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003124:	4a05      	ldr	r2, [pc, #20]	@ (800313c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800312a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40007000 	.word	0x40007000
 8003140:	20000004 	.word	0x20000004
 8003144:	431bde83 	.word	0x431bde83

08003148 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f000 bc02 	b.w	8003960 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800315c:	4b96      	ldr	r3, [pc, #600]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003166:	4b94      	ldr	r3, [pc, #592]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80e4 	beq.w	8003346 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_RCC_OscConfig+0x4c>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	f040 808b 	bne.w	80032a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b01      	cmp	r3, #1
 8003190:	f040 8087 	bne.w	80032a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003194:	4b88      	ldr	r3, [pc, #544]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x64>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e3d9      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1a      	ldr	r2, [r3, #32]
 80031b0:	4b81      	ldr	r3, [pc, #516]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_RCC_OscConfig+0x7e>
 80031bc:	4b7e      	ldr	r3, [pc, #504]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031c4:	e005      	b.n	80031d2 <HAL_RCC_OscConfig+0x8a>
 80031c6:	4b7c      	ldr	r3, [pc, #496]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d223      	bcs.n	800321e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fd54 	bl	8003c88 <RCC_SetFlashLatencyFromMSIRange>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e3ba      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ea:	4b73      	ldr	r3, [pc, #460]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a72      	ldr	r2, [pc, #456]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b70      	ldr	r3, [pc, #448]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	496d      	ldr	r1, [pc, #436]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003208:	4b6b      	ldr	r3, [pc, #428]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	4968      	ldr	r1, [pc, #416]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
 800321c:	e025      	b.n	800326a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321e:	4b66      	ldr	r3, [pc, #408]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a65      	ldr	r2, [pc, #404]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003224:	f043 0308 	orr.w	r3, r3, #8
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b63      	ldr	r3, [pc, #396]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4960      	ldr	r1, [pc, #384]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800323c:	4b5e      	ldr	r3, [pc, #376]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	495b      	ldr	r1, [pc, #364]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fd14 	bl	8003c88 <RCC_SetFlashLatencyFromMSIRange>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e37a      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326a:	f000 fc81 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 800326e:	4602      	mov	r2, r0
 8003270:	4b51      	ldr	r3, [pc, #324]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	4950      	ldr	r1, [pc, #320]	@ (80033bc <HAL_RCC_OscConfig+0x274>)
 800327c:	5ccb      	ldrb	r3, [r1, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	fa22 f303 	lsr.w	r3, r2, r3
 8003286:	4a4e      	ldr	r2, [pc, #312]	@ (80033c0 <HAL_RCC_OscConfig+0x278>)
 8003288:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800328a:	4b4e      	ldr	r3, [pc, #312]	@ (80033c4 <HAL_RCC_OscConfig+0x27c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fed8 	bl	8001044 <HAL_InitTick>
 8003294:	4603      	mov	r3, r0
 8003296:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d052      	beq.n	8003344 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	e35e      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d032      	beq.n	8003310 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032aa:	4b43      	ldr	r3, [pc, #268]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a42      	ldr	r2, [pc, #264]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032b6:	f7fd ff15 	bl	80010e4 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032be:	f7fd ff11 	bl	80010e4 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e347      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032d0:	4b39      	ldr	r3, [pc, #228]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032dc:	4b36      	ldr	r3, [pc, #216]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a35      	ldr	r2, [pc, #212]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032e2:	f043 0308 	orr.w	r3, r3, #8
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b33      	ldr	r3, [pc, #204]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4930      	ldr	r1, [pc, #192]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032fa:	4b2f      	ldr	r3, [pc, #188]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	492b      	ldr	r1, [pc, #172]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 800330a:	4313      	orrs	r3, r2
 800330c:	604b      	str	r3, [r1, #4]
 800330e:	e01a      	b.n	8003346 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003310:	4b29      	ldr	r3, [pc, #164]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a28      	ldr	r2, [pc, #160]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800331c:	f7fd fee2 	bl	80010e4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003324:	f7fd fede 	bl	80010e4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e314      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003336:	4b20      	ldr	r3, [pc, #128]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x1dc>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d073      	beq.n	800343a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d005      	beq.n	8003364 <HAL_RCC_OscConfig+0x21c>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d10e      	bne.n	800337c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d10b      	bne.n	800337c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d063      	beq.n	8003438 <HAL_RCC_OscConfig+0x2f0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d15f      	bne.n	8003438 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e2f1      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d106      	bne.n	8003394 <HAL_RCC_OscConfig+0x24c>
 8003386:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a0b      	ldr	r2, [pc, #44]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e025      	b.n	80033e0 <HAL_RCC_OscConfig+0x298>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800339c:	d114      	bne.n	80033c8 <HAL_RCC_OscConfig+0x280>
 800339e:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a05      	ldr	r2, [pc, #20]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a02      	ldr	r2, [pc, #8]	@ (80033b8 <HAL_RCC_OscConfig+0x270>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e013      	b.n	80033e0 <HAL_RCC_OscConfig+0x298>
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08004430 	.word	0x08004430
 80033c0:	20000004 	.word	0x20000004
 80033c4:	20000008 	.word	0x20000008
 80033c8:	4ba0      	ldr	r3, [pc, #640]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a9f      	ldr	r2, [pc, #636]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b9d      	ldr	r3, [pc, #628]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a9c      	ldr	r2, [pc, #624]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fd fe7c 	bl	80010e4 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd fe78 	bl	80010e4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	@ 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e2ae      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003402:	4b92      	ldr	r3, [pc, #584]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x2a8>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fd fe68 	bl	80010e4 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fd fe64 	bl	80010e4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	@ 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e29a      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800342a:	4b88      	ldr	r3, [pc, #544]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x2d0>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d060      	beq.n	8003508 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d005      	beq.n	8003458 <HAL_RCC_OscConfig+0x310>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d119      	bne.n	8003486 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d116      	bne.n	8003486 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003458:	4b7c      	ldr	r3, [pc, #496]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_OscConfig+0x328>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e277      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b76      	ldr	r3, [pc, #472]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	4973      	ldr	r1, [pc, #460]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	e040      	b.n	8003508 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d023      	beq.n	80034d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348e:	4b6f      	ldr	r3, [pc, #444]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6e      	ldr	r2, [pc, #440]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fd fe23 	bl	80010e4 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a2:	f7fd fe1f 	bl	80010e4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e255      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b4:	4b65      	ldr	r3, [pc, #404]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b62      	ldr	r3, [pc, #392]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	495f      	ldr	r1, [pc, #380]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
 80034d4:	e018      	b.n	8003508 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d6:	4b5d      	ldr	r3, [pc, #372]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a5c      	ldr	r2, [pc, #368]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80034dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e2:	f7fd fdff 	bl	80010e4 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ea:	f7fd fdfb 	bl	80010e4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e231      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034fc:	4b53      	ldr	r3, [pc, #332]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03c      	beq.n	800358e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351c:	4b4b      	ldr	r3, [pc, #300]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003522:	4a4a      	ldr	r2, [pc, #296]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fd fdda 	bl	80010e4 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003534:	f7fd fdd6 	bl	80010e4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e20c      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003546:	4b41      	ldr	r3, [pc, #260]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ef      	beq.n	8003534 <HAL_RCC_OscConfig+0x3ec>
 8003554:	e01b      	b.n	800358e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003556:	4b3d      	ldr	r3, [pc, #244]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355c:	4a3b      	ldr	r2, [pc, #236]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd fdbd 	bl	80010e4 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356e:	f7fd fdb9 	bl	80010e4 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1ef      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003580:	4b32      	ldr	r3, [pc, #200]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003582:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ef      	bne.n	800356e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 80a6 	beq.w	80036e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035a0:	4b2a      	ldr	r3, [pc, #168]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b27      	ldr	r3, [pc, #156]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	4a26      	ldr	r2, [pc, #152]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b8:	4b24      	ldr	r3, [pc, #144]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c8:	4b21      	ldr	r3, [pc, #132]	@ (8003650 <HAL_RCC_OscConfig+0x508>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d118      	bne.n	8003606 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <HAL_RCC_OscConfig+0x508>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_RCC_OscConfig+0x508>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e0:	f7fd fd80 	bl	80010e4 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fd fd7c 	bl	80010e4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1b2      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fa:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <HAL_RCC_OscConfig+0x508>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d108      	bne.n	8003620 <HAL_RCC_OscConfig+0x4d8>
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003614:	4a0d      	ldr	r2, [pc, #52]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800361e:	e029      	b.n	8003674 <HAL_RCC_OscConfig+0x52c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b05      	cmp	r3, #5
 8003626:	d115      	bne.n	8003654 <HAL_RCC_OscConfig+0x50c>
 8003628:	4b08      	ldr	r3, [pc, #32]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362e:	4a07      	ldr	r2, [pc, #28]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003630:	f043 0304 	orr.w	r3, r3, #4
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363e:	4a03      	ldr	r2, [pc, #12]	@ (800364c <HAL_RCC_OscConfig+0x504>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003648:	e014      	b.n	8003674 <HAL_RCC_OscConfig+0x52c>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	40007000 	.word	0x40007000
 8003654:	4b9a      	ldr	r3, [pc, #616]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365a:	4a99      	ldr	r2, [pc, #612]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003664:	4b96      	ldr	r3, [pc, #600]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	4a95      	ldr	r2, [pc, #596]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d016      	beq.n	80036aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fd fd32 	bl	80010e4 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7fd fd2e 	bl	80010e4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e162      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800369a:	4b89      	ldr	r3, [pc, #548]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ed      	beq.n	8003684 <HAL_RCC_OscConfig+0x53c>
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fd fd1b 	bl	80010e4 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd fd17 	bl	80010e4 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e14b      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036c8:	4b7d      	ldr	r3, [pc, #500]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ed      	bne.n	80036b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d6:	7ffb      	ldrb	r3, [r7, #31]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b78      	ldr	r3, [pc, #480]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e0:	4a77      	ldr	r2, [pc, #476]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 80036e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d03c      	beq.n	800376e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01c      	beq.n	8003736 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036fc:	4b70      	ldr	r3, [pc, #448]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 80036fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003702:	4a6f      	ldr	r2, [pc, #444]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fd fcea 	bl	80010e4 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003714:	f7fd fce6 	bl	80010e4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e11c      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003726:	4b66      	ldr	r3, [pc, #408]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ef      	beq.n	8003714 <HAL_RCC_OscConfig+0x5cc>
 8003734:	e01b      	b.n	800376e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003736:	4b62      	ldr	r3, [pc, #392]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003738:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800373c:	4a60      	ldr	r2, [pc, #384]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fd fccd 	bl	80010e4 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800374e:	f7fd fcc9 	bl	80010e4 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0ff      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003760:	4b57      	ldr	r3, [pc, #348]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003762:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ef      	bne.n	800374e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80f3 	beq.w	800395e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	2b02      	cmp	r3, #2
 800377e:	f040 80c9 	bne.w	8003914 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003782:	4b4f      	ldr	r3, [pc, #316]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0203 	and.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	429a      	cmp	r2, r3
 8003794:	d12c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	3b01      	subs	r3, #1
 80037a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d123      	bne.n	80037f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d11b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d113      	bne.n	80037f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	3b01      	subs	r3, #1
 80037d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	3b01      	subs	r3, #1
 80037ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d06b      	beq.n	80038c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d062      	beq.n	80038bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037f6:	4b32      	ldr	r3, [pc, #200]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0ac      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003806:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800380c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003810:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003812:	f7fd fc67 	bl	80010e4 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd fc63 	bl	80010e4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e099      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003838:	4b21      	ldr	r3, [pc, #132]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <HAL_RCC_OscConfig+0x77c>)
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003848:	3a01      	subs	r2, #1
 800384a:	0112      	lsls	r2, r2, #4
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003852:	0212      	lsls	r2, r2, #8
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0552      	lsls	r2, r2, #21
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0652      	lsls	r2, r2, #25
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003872:	06d2      	lsls	r2, r2, #27
 8003874:	430a      	orrs	r2, r1
 8003876:	4912      	ldr	r1, [pc, #72]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003878:	4313      	orrs	r3, r2
 800387a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800387c:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0f      	ldr	r2, [pc, #60]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003888:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a0c      	ldr	r2, [pc, #48]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003892:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003894:	f7fd fc26 	bl	80010e4 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd fc22 	bl	80010e4 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e058      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <HAL_RCC_OscConfig+0x778>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ba:	e050      	b.n	800395e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e04f      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
 80038c0:	40021000 	.word	0x40021000
 80038c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c8:	4b27      	ldr	r3, [pc, #156]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d144      	bne.n	800395e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038d4:	4b24      	ldr	r3, [pc, #144]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 80038da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038e0:	4b21      	ldr	r3, [pc, #132]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4a20      	ldr	r2, [pc, #128]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038ec:	f7fd fbfa 	bl	80010e4 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd fbf6 	bl	80010e4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e02c      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003906:	4b18      	ldr	r3, [pc, #96]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x7ac>
 8003912:	e024      	b.n	800395e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	d01f      	beq.n	800395a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b13      	ldr	r3, [pc, #76]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a12      	ldr	r2, [pc, #72]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 8003920:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd fbdd 	bl	80010e4 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fd fbd9 	bl	80010e4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e00f      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	4905      	ldr	r1, [pc, #20]	@ (8003968 <HAL_RCC_OscConfig+0x820>)
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_RCC_OscConfig+0x824>)
 8003954:	4013      	ands	r3, r2
 8003956:	60cb      	str	r3, [r1, #12]
 8003958:	e001      	b.n	800395e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	feeefffc 	.word	0xfeeefffc

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0e7      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b75      	ldr	r3, [pc, #468]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d910      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b72      	ldr	r3, [pc, #456]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 0207 	bic.w	r2, r3, #7
 800399a:	4970      	ldr	r1, [pc, #448]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0cf      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d010      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	4b66      	ldr	r3, [pc, #408]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d908      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4b63      	ldr	r3, [pc, #396]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4960      	ldr	r1, [pc, #384]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04c      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d121      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0a6      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0e:	4b54      	ldr	r3, [pc, #336]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d115      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e09a      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a26:	4b4e      	ldr	r3, [pc, #312]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e08e      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a36:	4b4a      	ldr	r3, [pc, #296]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e086      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b46      	ldr	r3, [pc, #280]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4943      	ldr	r1, [pc, #268]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a58:	f7fd fb44 	bl	80010e4 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fd fb40 	bl	80010e4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e06e      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b3a      	ldr	r3, [pc, #232]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	4b31      	ldr	r3, [pc, #196]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d208      	bcs.n	8003ab6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	492b      	ldr	r1, [pc, #172]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab6:	4b29      	ldr	r3, [pc, #164]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d210      	bcs.n	8003ae6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac4:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 0207 	bic.w	r2, r3, #7
 8003acc:	4923      	ldr	r1, [pc, #140]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <HAL_RCC_ClockConfig+0x1ec>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d001      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e036      	b.n	8003b54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4918      	ldr	r1, [pc, #96]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b10:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4910      	ldr	r1, [pc, #64]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b24:	f000 f824 	bl	8003b70 <HAL_RCC_GetSysClockFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	490b      	ldr	r1, [pc, #44]	@ (8003b64 <HAL_RCC_ClockConfig+0x1f4>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b40:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003b42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b44:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <HAL_RCC_ClockConfig+0x1fc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fa7b 	bl	8001044 <HAL_InitTick>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b52:	7afb      	ldrb	r3, [r7, #11]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40022000 	.word	0x40022000
 8003b60:	40021000 	.word	0x40021000
 8003b64:	08004430 	.word	0x08004430
 8003b68:	20000004 	.word	0x20000004
 8003b6c:	20000008 	.word	0x20000008

08003b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	@ 0x24
 8003b74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b88:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d121      	bne.n	8003be2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d11e      	bne.n	8003be2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ba4:	4b34      	ldr	r3, [pc, #208]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bb0:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	e005      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d102      	bne.n	8003bee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003be8:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	e004      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bf4:	4b23      	ldr	r3, [pc, #140]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d134      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d003      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0xac>
 8003c14:	e005      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c18:	617b      	str	r3, [r7, #20]
      break;
 8003c1a:	e005      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c1e:	617b      	str	r3, [r7, #20]
      break;
 8003c20:	e002      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	617b      	str	r3, [r7, #20]
      break;
 8003c26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c28:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	3301      	adds	r3, #1
 8003c34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c36:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	0a1b      	lsrs	r3, r3, #8
 8003c3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	fb03 f202 	mul.w	r2, r3, r2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	0e5b      	lsrs	r3, r3, #25
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c68:	69bb      	ldr	r3, [r7, #24]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3724      	adds	r7, #36	@ 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08004440 	.word	0x08004440
 8003c80:	00f42400 	.word	0x00f42400
 8003c84:	007a1200 	.word	0x007a1200

08003c88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c94:	4b2a      	ldr	r3, [pc, #168]	@ (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ca0:	f7ff f9ee 	bl	8003080 <HAL_PWREx_GetVoltageRange>
 8003ca4:	6178      	str	r0, [r7, #20]
 8003ca6:	e014      	b.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	4a24      	ldr	r2, [pc, #144]	@ (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb4:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cc0:	f7ff f9de 	bl	8003080 <HAL_PWREx_GetVoltageRange>
 8003cc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	4a1d      	ldr	r2, [pc, #116]	@ (8003d40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd8:	d10b      	bne.n	8003cf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b80      	cmp	r3, #128	@ 0x80
 8003cde:	d919      	bls.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ce4:	d902      	bls.n	8003cec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e013      	b.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cec:	2301      	movs	r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e010      	b.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b80      	cmp	r3, #128	@ 0x80
 8003cf6:	d902      	bls.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	e00a      	b.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b80      	cmp	r3, #128	@ 0x80
 8003d02:	d102      	bne.n	8003d0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d04:	2302      	movs	r3, #2
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e004      	b.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b70      	cmp	r3, #112	@ 0x70
 8003d0e:	d101      	bne.n	8003d14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d10:	2301      	movs	r3, #1
 8003d12:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 0207 	bic.w	r2, r3, #7
 8003d1c:	4909      	ldr	r1, [pc, #36]	@ (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d24:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40022000 	.word	0x40022000

08003d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d50:	2300      	movs	r3, #0
 8003d52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d54:	2300      	movs	r3, #0
 8003d56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d031      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d6c:	d01a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d72:	d814      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d7c:	d10f      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a5c      	ldr	r2, [pc, #368]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fa22 	bl	80041dc <RCCEx_PLLSAI1_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	74fb      	strb	r3, [r7, #19]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da6:	7cfb      	ldrb	r3, [r7, #19]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dac:	4b51      	ldr	r3, [pc, #324]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	494e      	ldr	r1, [pc, #312]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7cfb      	ldrb	r3, [r7, #19]
 8003dc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 809e 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dda:	4b46      	ldr	r3, [pc, #280]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df0:	4b40      	ldr	r3, [pc, #256]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dfc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a39      	ldr	r2, [pc, #228]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e18:	f7fd f964 	bl	80010e4 <HAL_GetTick>
 8003e1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e1e:	e009      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fd f960 	bl	80010e4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d902      	bls.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	74fb      	strb	r3, [r7, #19]
        break;
 8003e32:	e005      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e34:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ef      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d15a      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e46:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01e      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d019      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e62:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e8e:	4a19      	ldr	r2, [pc, #100]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d016      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd f920 	bl	80010e4 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd f91c 	bl	80010e4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d902      	bls.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ebe:	e006      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ec      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10b      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed4:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	4904      	ldr	r1, [pc, #16]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eea:	e009      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
 8003ef0:	e006      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f00:	7c7b      	ldrb	r3, [r7, #17]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f06:	4b8d      	ldr	r3, [pc, #564]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0a:	4a8c      	ldr	r2, [pc, #560]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f1e:	4b87      	ldr	r3, [pc, #540]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f023 0203 	bic.w	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4983      	ldr	r1, [pc, #524]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 020c 	bic.w	r2, r3, #12
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	497b      	ldr	r1, [pc, #492]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f62:	4b76      	ldr	r3, [pc, #472]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	4972      	ldr	r1, [pc, #456]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f84:	4b6d      	ldr	r3, [pc, #436]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f92:	496a      	ldr	r1, [pc, #424]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa6:	4b65      	ldr	r3, [pc, #404]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	4961      	ldr	r1, [pc, #388]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	4959      	ldr	r1, [pc, #356]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fea:	4b54      	ldr	r3, [pc, #336]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff8:	4950      	ldr	r1, [pc, #320]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800400c:	4b4b      	ldr	r3, [pc, #300]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401a:	4948      	ldr	r1, [pc, #288]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402e:	4b43      	ldr	r3, [pc, #268]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004034:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	493f      	ldr	r1, [pc, #252]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d028      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004050:	4b3a      	ldr	r3, [pc, #232]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405e:	4937      	ldr	r1, [pc, #220]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800406e:	d106      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004070:	4b32      	ldr	r3, [pc, #200]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800407a:	60d3      	str	r3, [r2, #12]
 800407c:	e011      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004086:	d10c      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f8a4 	bl	80041dc <RCCEx_PLLSAI1_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d028      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040ae:	4b23      	ldr	r3, [pc, #140]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040bc:	491f      	ldr	r1, [pc, #124]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040cc:	d106      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040d8:	60d3      	str	r3, [r2, #12]
 80040da:	e011      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f875 	bl	80041dc <RCCEx_PLLSAI1_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d02b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800410c:	4b0b      	ldr	r3, [pc, #44]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411a:	4908      	ldr	r1, [pc, #32]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412a:	d109      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a02      	ldr	r2, [pc, #8]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004136:	60d3      	str	r3, [r2, #12]
 8004138:	e014      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f843 	bl	80041dc <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01c      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004170:	4b19      	ldr	r3, [pc, #100]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417e:	4916      	ldr	r1, [pc, #88]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800418e:	d10c      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f820 	bl	80041dc <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b6:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	4904      	ldr	r1, [pc, #16]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041ea:	4b74      	ldr	r3, [pc, #464]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041f6:	4b71      	ldr	r3, [pc, #452]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0203 	and.w	r2, r3, #3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d10d      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
       ||
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800420e:	4b6b      	ldr	r3, [pc, #428]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	091b      	lsrs	r3, r3, #4
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
       ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d047      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	73fb      	strb	r3, [r7, #15]
 8004226:	e044      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d018      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x86>
 8004230:	2b03      	cmp	r3, #3
 8004232:	d825      	bhi.n	8004280 <RCCEx_PLLSAI1_Config+0xa4>
 8004234:	2b01      	cmp	r3, #1
 8004236:	d002      	beq.n	800423e <RCCEx_PLLSAI1_Config+0x62>
 8004238:	2b02      	cmp	r3, #2
 800423a:	d009      	beq.n	8004250 <RCCEx_PLLSAI1_Config+0x74>
 800423c:	e020      	b.n	8004280 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800423e:	4b5f      	ldr	r3, [pc, #380]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11d      	bne.n	8004286 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424e:	e01a      	b.n	8004286 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004250:	4b5a      	ldr	r3, [pc, #360]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d116      	bne.n	800428a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004260:	e013      	b.n	800428a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004262:	4b56      	ldr	r3, [pc, #344]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800426e:	4b53      	ldr	r3, [pc, #332]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800427e:	e006      	b.n	800428e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e004      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004286:	bf00      	nop
 8004288:	e002      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800428a:	bf00      	nop
 800428c:	e000      	b.n	8004290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800428e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10d      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004296:	4b49      	ldr	r3, [pc, #292]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6819      	ldr	r1, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	430b      	orrs	r3, r1
 80042ac:	4943      	ldr	r1, [pc, #268]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d17c      	bne.n	80043b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042b8:	4b40      	ldr	r3, [pc, #256]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a3f      	ldr	r2, [pc, #252]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fc ff0e 	bl	80010e4 <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ca:	e009      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042cc:	f7fc ff0a 	bl	80010e4 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d902      	bls.n	80042e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	73fb      	strb	r3, [r7, #15]
        break;
 80042de:	e005      	b.n	80042ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042e0:	4b36      	ldr	r3, [pc, #216]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ef      	bne.n	80042cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d15f      	bne.n	80043b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d110      	bne.n	800431a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042f8:	4b30      	ldr	r3, [pc, #192]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004300:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6892      	ldr	r2, [r2, #8]
 8004308:	0211      	lsls	r1, r2, #8
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68d2      	ldr	r2, [r2, #12]
 800430e:	06d2      	lsls	r2, r2, #27
 8004310:	430a      	orrs	r2, r1
 8004312:	492a      	ldr	r1, [pc, #168]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
 8004318:	e027      	b.n	800436a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d112      	bne.n	8004346 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004320:	4b26      	ldr	r3, [pc, #152]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004328:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6892      	ldr	r2, [r2, #8]
 8004330:	0211      	lsls	r1, r2, #8
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6912      	ldr	r2, [r2, #16]
 8004336:	0852      	lsrs	r2, r2, #1
 8004338:	3a01      	subs	r2, #1
 800433a:	0552      	lsls	r2, r2, #21
 800433c:	430a      	orrs	r2, r1
 800433e:	491f      	ldr	r1, [pc, #124]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004340:	4313      	orrs	r3, r2
 8004342:	610b      	str	r3, [r1, #16]
 8004344:	e011      	b.n	800436a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004346:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800434e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	0211      	lsls	r1, r2, #8
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6952      	ldr	r2, [r2, #20]
 800435c:	0852      	lsrs	r2, r2, #1
 800435e:	3a01      	subs	r2, #1
 8004360:	0652      	lsls	r2, r2, #25
 8004362:	430a      	orrs	r2, r1
 8004364:	4915      	ldr	r1, [pc, #84]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004366:	4313      	orrs	r3, r2
 8004368:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800436a:	4b14      	ldr	r3, [pc, #80]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a13      	ldr	r2, [pc, #76]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004374:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fc feb5 	bl	80010e4 <HAL_GetTick>
 800437a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800437c:	e009      	b.n	8004392 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800437e:	f7fc feb1 	bl	80010e4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d902      	bls.n	8004392 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	73fb      	strb	r3, [r7, #15]
          break;
 8004390:	e005      	b.n	800439e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004392:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ef      	beq.n	800437e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	4903      	ldr	r1, [pc, #12]	@ (80043bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000

080043c0 <memset>:
 80043c0:	4402      	add	r2, r0
 80043c2:	4603      	mov	r3, r0
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	f803 1b01 	strb.w	r1, [r3], #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004408 <__libc_init_array+0x38>)
 80043d4:	4c0d      	ldr	r4, [pc, #52]	@ (800440c <__libc_init_array+0x3c>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	2600      	movs	r6, #0
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004410 <__libc_init_array+0x40>)
 80043e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004414 <__libc_init_array+0x44>)
 80043e4:	f000 f818 	bl	8004418 <_init>
 80043e8:	1b64      	subs	r4, r4, r5
 80043ea:	10a4      	asrs	r4, r4, #2
 80043ec:	2600      	movs	r6, #0
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	08004470 	.word	0x08004470
 800440c:	08004470 	.word	0x08004470
 8004410:	08004470 	.word	0x08004470
 8004414:	08004474 	.word	0x08004474

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
