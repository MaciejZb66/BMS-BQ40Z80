
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005214  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e0  080053e0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080053e0  080053e0  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053e0  080053e0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053e4  080053e4  000063e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000000c  080053f4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080053f4  000072c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cc7  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031dc  00000000  00000000  0001bd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0001eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab1  00000000  00000000  0001fd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024669  00000000  00000000  000207c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014963  00000000  00000000  00044e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf78f  00000000  00000000  0005978d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128f1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b4  00000000  00000000  00128f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012c714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005388 	.word	0x08005388

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005388 	.word	0x08005388

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
BQ_data* BMS;
#ifdef USED_I2C1
	if(i2c == &hi2c1){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a29      	ldr	r2, [pc, #164]	@ (800027c <BQ_Init+0xb0>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d101      	bne.n	80001e0 <BQ_Init+0x14>
		BMS = &BMS_1;
 80001dc:	4b28      	ldr	r3, [pc, #160]	@ (8000280 <BQ_Init+0xb4>)
 80001de:	60fb      	str	r3, [r7, #12]
	if(i2c == &hi2c2){
		BMS = &BMS_2;
	}
#endif
#ifdef USED_I2C3
	if(i2c == &hi2c3){
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4a28      	ldr	r2, [pc, #160]	@ (8000284 <BQ_Init+0xb8>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d101      	bne.n	80001ec <BQ_Init+0x20>
		BMS = &BMS_3;
 80001e8:	4b27      	ldr	r3, [pc, #156]	@ (8000288 <BQ_Init+0xbc>)
 80001ea:	60fb      	str	r3, [r7, #12]
	}
#endif
    BMS->bq_i2c = i2c;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	687a      	ldr	r2, [r7, #4]
 80001f0:	601a      	str	r2, [r3, #0]
    BMS->bq_deviceAddress = Address;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	2217      	movs	r2, #23
 80001f6:	711a      	strb	r2, [r3, #4]
#ifdef USE_SCANNER
	CONNECTION_STATUS connect = I2CHelper_CheckAddress(BMS);
 80001f8:	68f8      	ldr	r0, [r7, #12]
 80001fa:	f000 fe46 	bl	8000e8a <I2CHelper_CheckAddress>
 80001fe:	4603      	mov	r3, r0
 8000200:	72fb      	strb	r3, [r7, #11]
	while (connect != CONNECTED)
 8000202:	e00b      	b.n	800021c <BQ_Init+0x50>
	{
		connect = I2CHelper_CheckAddress(BMS);
 8000204:	68f8      	ldr	r0, [r7, #12]
 8000206:	f000 fe40 	bl	8000e8a <I2CHelper_CheckAddress>
 800020a:	4603      	mov	r3, r0
 800020c:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(200);
 800020e:	20c8      	movs	r0, #200	@ 0xc8
 8000210:	f001 f92e 	bl	8001470 <HAL_Delay>
	#ifdef debug
		if(connect != CONNECTED){
 8000214:	7afb      	ldrb	r3, [r7, #11]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d000      	beq.n	800021c <BQ_Init+0x50>
			__asm("nop"); //insert breakpoint here
 800021a:	bf00      	nop
	while (connect != CONNECTED)
 800021c:	7afb      	ldrb	r3, [r7, #11]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1f0      	bne.n	8000204 <BQ_Init+0x38>
		}
	#endif
	}
#endif

    HAL_Delay(1500);
 8000222:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000226:	f001 f923 	bl	8001470 <HAL_Delay>
    BQAction_UpdateData(BMS);
 800022a:	68f8      	ldr	r0, [r7, #12]
 800022c:	f000 f9cf 	bl	80005ce <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS);
 8000230:	68f8      	ldr	r0, [r7, #12]
 8000232:	f000 f998 	bl	8000566 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS, false);
 8000236:	2100      	movs	r1, #0
 8000238:	68f8      	ldr	r0, [r7, #12]
 800023a:	f000 f910 	bl	800045e <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS, false);
 800023e:	2100      	movs	r1, #0
 8000240:	68f8      	ldr	r0, [r7, #12]
 8000242:	f000 f922 	bl	800048a <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS, false);
 8000246:	2100      	movs	r1, #0
 8000248:	68f8      	ldr	r0, [r7, #12]
 800024a:	f000 f934 	bl	80004b6 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS, true);
 800024e:	2101      	movs	r1, #1
 8000250:	68f8      	ldr	r0, [r7, #12]
 8000252:	f000 f946 	bl	80004e2 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS, true);
 8000256:	2101      	movs	r1, #1
 8000258:	68f8      	ldr	r0, [r7, #12]
 800025a:	f000 f958 	bl	800050e <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS, true);
 800025e:	2101      	movs	r1, #1
 8000260:	68f8      	ldr	r0, [r7, #12]
 8000262:	f000 f96a 	bl	800053a <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS, false);
 8000266:	2100      	movs	r1, #0
 8000268:	68f8      	ldr	r0, [r7, #12]
 800026a:	f000 f8e2 	bl	8000432 <BQAction_SetLed>

    BQAction_UpdateData(BMS);
 800026e:	68f8      	ldr	r0, [r7, #12]
 8000270:	f000 f9ad 	bl	80005ce <BQAction_UpdateData>
}
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000094 	.word	0x20000094
 8000280:	20000190 	.word	0x20000190
 8000284:	2000013c 	.word	0x2000013c
 8000288:	20000210 	.word	0x20000210

0800028c <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af02      	add	r7, sp, #8
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000298:	2344      	movs	r3, #68	@ 0x44
 800029a:	733b      	strb	r3, [r7, #12]
 800029c:	2302      	movs	r3, #2
 800029e:	737b      	strb	r3, [r7, #13]
 80002a0:	887b      	ldrh	r3, [r7, #2]
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	73bb      	strb	r3, [r7, #14]
 80002a6:	887b      	ldrh	r3, [r7, #2]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	6818      	ldr	r0, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	4619      	mov	r1, r3
 80002ba:	f107 020c 	add.w	r2, r7, #12
 80002be:	2364      	movs	r3, #100	@ 0x64
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2304      	movs	r3, #4
 80002c4:	f002 f9e6 	bl	8002694 <HAL_I2C_Master_Transmit>
}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b092      	sub	sp, #72	@ 0x48
 80002d4:	af02      	add	r7, sp, #8
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	607a      	str	r2, [r7, #4]
 80002da:	461a      	mov	r2, r3
 80002dc:	460b      	mov	r3, r1
 80002de:	817b      	strh	r3, [r7, #10]
 80002e0:	4613      	mov	r3, r2
 80002e2:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002e4:	2344      	movs	r3, #68	@ 0x44
 80002e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002ea:	2302      	movs	r3, #2
 80002ec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002f0:	897b      	ldrh	r3, [r7, #10]
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002f8:	897b      	ldrh	r3, [r7, #10]
 80002fa:	0a1b      	lsrs	r3, r3, #8
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6818      	ldr	r0, [r3, #0]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	4619      	mov	r1, r3
 800030e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000312:	2364      	movs	r3, #100	@ 0x64
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2304      	movs	r3, #4
 8000318:	f002 f9bc 	bl	8002694 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 800031c:	2344      	movs	r3, #68	@ 0x44
 800031e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000322:	7a7b      	ldrb	r3, [r7, #9]
 8000324:	3302      	adds	r3, #2
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, addr, 2, 100);
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	4619      	mov	r1, r3
 8000336:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800033a:	2364      	movs	r3, #100	@ 0x64
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2302      	movs	r3, #2
 8000340:	f002 f9a8 	bl	8002694 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	221f      	movs	r2, #31
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f004 ffdf 	bl	8005314 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress, result, 35, 100);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6818      	ldr	r0, [r3, #0]
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	791b      	ldrb	r3, [r3, #4]
 800035e:	4619      	mov	r1, r3
 8000360:	f107 0210 	add.w	r2, r7, #16
 8000364:	2364      	movs	r3, #100	@ 0x64
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2323      	movs	r3, #35	@ 0x23
 800036a:	f002 faab 	bl	80028c4 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 800036e:	2300      	movs	r3, #0
 8000370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000372:	e00c      	b.n	800038e <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000376:	1cda      	adds	r2, r3, #3
 8000378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	440b      	add	r3, r1
 800037e:	3240      	adds	r2, #64	@ 0x40
 8000380:	443a      	add	r2, r7
 8000382:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000386:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800038a:	3301      	adds	r3, #1
 800038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800038e:	7a7b      	ldrb	r3, [r7, #9]
 8000390:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000392:	429a      	cmp	r2, r3
 8000394:	dbee      	blt.n	8000374 <BQ_ReadMABlockCommand+0xa4>
    }
}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3740      	adds	r7, #64	@ 0x40
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80003ac:	f107 020c 	add.w	r2, r7, #12
 80003b0:	8879      	ldrh	r1, [r7, #2]
 80003b2:	2302      	movs	r3, #2
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff8b 	bl	80002d0 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003be:	7b3b      	ldrb	r3, [r7, #12]
 80003c0:	461a      	mov	r2, r3
 80003c2:	89fb      	ldrh	r3, [r7, #14]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003c8:	7b7b      	ldrb	r3, [r7, #13]
 80003ca:	021b      	lsls	r3, r3, #8
 80003cc:	b21a      	sxth	r2, r3
 80003ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003d2:	4313      	orrs	r3, r2
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	81fb      	strh	r3, [r7, #14]

    return result;
 80003d8:	89fb      	ldrh	r3, [r7, #14]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b084      	sub	sp, #16
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
 80003ea:	460b      	mov	r3, r1
 80003ec:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003ee:	f107 0208 	add.w	r2, r7, #8
 80003f2:	8879      	ldrh	r1, [r7, #2]
 80003f4:	2304      	movs	r3, #4
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f7ff ff6a 	bl	80002d0 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 8000400:	7a3b      	ldrb	r3, [r7, #8]
 8000402:	461a      	mov	r2, r3
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	4313      	orrs	r3, r2
 8000408:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 800040a:	7a7b      	ldrb	r3, [r7, #9]
 800040c:	021b      	lsls	r3, r3, #8
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000414:	7abb      	ldrb	r3, [r7, #10]
 8000416:	041b      	lsls	r3, r3, #16
 8000418:	68fa      	ldr	r2, [r7, #12]
 800041a:	4313      	orrs	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	061b      	lsls	r3, r3, #24
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	4313      	orrs	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]

    return result;
 8000428:	68fb      	ldr	r3, [r7, #12]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	460b      	mov	r3, r1
 800043c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7a9b      	ldrb	r3, [r3, #10]
 8000442:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	78fa      	ldrb	r2, [r7, #3]
 800044a:	429a      	cmp	r2, r3
 800044c:	d003      	beq.n	8000456 <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 800044e:	212b      	movs	r1, #43	@ 0x2b
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff1b 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
 8000466:	460b      	mov	r3, r1
 8000468:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	7e1b      	ldrb	r3, [r3, #24]
 800046e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	78fa      	ldrb	r2, [r7, #3]
 8000476:	429a      	cmp	r2, r3
 8000478:	d003      	beq.n	8000482 <BQAction_SetManufacturingAllFet+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 800047a:	2122      	movs	r1, #34	@ 0x22
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f7ff ff05 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	460b      	mov	r3, r1
 8000494:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	7e5b      	ldrb	r3, [r3, #25]
 800049a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	78fa      	ldrb	r2, [r7, #3]
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d003      	beq.n	80004ae <BQAction_SetManufacturingFuse+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 80004a6:	2126      	movs	r1, #38	@ 0x26
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f7ff feef 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b082      	sub	sp, #8
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	460b      	mov	r3, r1
 80004c0:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	7e5b      	ldrb	r3, [r3, #25]
 80004c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	78fa      	ldrb	r2, [r7, #3]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d003      	beq.n	80004da <BQAction_SetCalibration+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004d2:	212d      	movs	r1, #45	@ 0x2d
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff fed9 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
 80004ea:	460b      	mov	r3, r1
 80004ec:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7e1b      	ldrb	r3, [r3, #24]
 80004f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	78fa      	ldrb	r2, [r7, #3]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d003      	beq.n	8000506 <BQAction_SetManufacturingGauging+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 80004fe:	2121      	movs	r1, #33	@ 0x21
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f7ff fec3 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7e1b      	ldrb	r3, [r3, #24]
 800051e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	78fa      	ldrb	r2, [r7, #3]
 8000526:	429a      	cmp	r2, r3
 8000528:	d003      	beq.n	8000532 <BQAction_SetManufacturingPF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 800052a:	2124      	movs	r1, #36	@ 0x24
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff fead 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7e1b      	ldrb	r3, [r3, #24]
 800054a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800054e:	b2db      	uxtb	r3, r3
 8000550:	78fa      	ldrb	r2, [r7, #3]
 8000552:	429a      	cmp	r2, r3
 8000554:	d003      	beq.n	800055e <BQAction_SetManufacturingLF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000556:	2123      	movs	r1, #35	@ 0x23
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff fe97 	bl	800028c <BQ_WriteMABlockCommand>
    }
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b084      	sub	sp, #16
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f892 	bl	8000698 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode =  BMS->BQ_opStatus.bits.sec;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7a5b      	ldrb	r3, [r3, #9]
 8000578:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800057c:	b2db      	uxtb	r3, r3
 800057e:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000580:	e01a      	b.n	80005b8 <BQAction_TryUnsealedDevice+0x52>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 8000582:	f240 4114 	movw	r1, #1044	@ 0x414
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff fe80 	bl	800028c <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 800058c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000590:	f000 ff6e 	bl	8001470 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 8000594:	f243 6172 	movw	r1, #13938	@ 0x3672
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fe77 	bl	800028c <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 800059e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005a2:	f000 ff65 	bl	8001470 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f876 	bl	8000698 <BQAction_UpdateOpStatus>
        securityMode = BMS->BQ_opStatus.bits.sec;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7a5b      	ldrb	r3, [r3, #9]
 80005b0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d0e1      	beq.n	8000582 <BQAction_TryUnsealedDevice+0x1c>
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0de      	beq.n	8000582 <BQAction_TryUnsealedDevice+0x1c>
    }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b088      	sub	sp, #32
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80005d6:	2157      	movs	r1, #87	@ 0x57
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff fee1 	bl	80003a0 <BQ_ReadCommandAsShort>
 80005de:	4603      	mov	r3, r0
 80005e0:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	8bfa      	ldrh	r2, [r7, #30]
 80005e6:	831a      	strh	r2, [r3, #24]
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80005e8:	2155      	movs	r1, #85	@ 0x55
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff fef9 	bl	80003e2 <BQ_ReadCommandAsInt>
 80005f0:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	69ba      	ldr	r2, [r7, #24]
 80005f6:	60da      	str	r2, [r3, #12]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80005f8:	2154      	movs	r1, #84	@ 0x54
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fef1 	bl	80003e2 <BQ_ReadCommandAsInt>
 8000600:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	609a      	str	r2, [r3, #8]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000608:	2156      	movs	r1, #86	@ 0x56
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff fee9 	bl	80003e2 <BQ_ReadCommandAsInt>
 8000610:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	611a      	str	r2, [r3, #16]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000618:	2103      	movs	r1, #3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 fbdc 	bl	8000dd8 <I2CHelper_ReadRegisterAsShort>
 8000620:	4603      	mov	r3, r0
 8000622:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	89fa      	ldrh	r2, [r7, #14]
 8000628:	82da      	strh	r2, [r3, #22]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryStatus);
 800062a:	2116      	movs	r1, #22
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 fbd3 	bl	8000dd8 <I2CHelper_ReadRegisterAsShort>
 8000632:	4603      	mov	r3, r0
 8000634:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	89ba      	ldrh	r2, [r7, #12]
 800063a:	829a      	strh	r2, [r3, #20]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_GPIORead);
 800063c:	2148      	movs	r1, #72	@ 0x48
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 fbeb 	bl	8000e1a <I2CHelper_ReadRegisterAsChar>
 8000644:	4603      	mov	r3, r0
 8000646:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7afa      	ldrb	r2, [r7, #11]
 800064c:	769a      	strb	r2, [r3, #26]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f103 021c 	add.w	r2, r3, #28
 8000654:	2320      	movs	r3, #32
 8000656:	2171      	movs	r1, #113	@ 0x71
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff fe39 	bl	80002d0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS->BQ_daStatus2.all, 16);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8000664:	2310      	movs	r3, #16
 8000666:	2172      	movs	r1, #114	@ 0x72
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fe31 	bl	80002d0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS->BQ_daStatus3.all, 18);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8000674:	2312      	movs	r3, #18
 8000676:	217b      	movs	r1, #123	@ 0x7b
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fe29 	bl	80002d0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS->BQ_outCal.all, 32);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f103 025e 	add.w	r2, r3, #94	@ 0x5e
 8000684:	2320      	movs	r3, #32
 8000686:	f24f 0181 	movw	r1, #61569	@ 0xf081
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff fe20 	bl	80002d0 <BQ_ReadMABlockCommand>
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f103 021c 	add.w	r2, r3, #28
 80006a6:	2320      	movs	r3, #32
 80006a8:	2171      	movs	r1, #113	@ 0x71
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff fe10 	bl	80002d0 <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80006b0:	2154      	movs	r1, #84	@ 0x54
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fe95 	bl	80003e2 <BQ_ReadCommandAsInt>
 80006b8:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	609a      	str	r2, [r3, #8]
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006c0:	2157      	movs	r1, #87	@ 0x57
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff fe6c 	bl	80003a0 <BQ_ReadCommandAsShort>
 80006c8:	4603      	mov	r3, r0
 80006ca:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	897a      	ldrh	r2, [r7, #10]
 80006d0:	831a      	strh	r2, [r3, #24]
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <BQ_GetBoundaryCellVoltage>:
        return RELAX;
    }
}

BQ_BoundaryCellVoltage BQ_GetBoundaryCellVoltage(BQ_data* BMS)
{
 80006da:	b480      	push	{r7}
 80006dc:	b089      	sub	sp, #36	@ 0x24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
    BQ_BoundaryCellVoltage result;
    result.Max = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	82fb      	strh	r3, [r7, #22]
    result.Min = 65535;
 80006e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ea:	82bb      	strh	r3, [r7, #20]

    uint16_t cells[6] =
        {
			BMS->BQ_daStatus1.sep.cell_voltage_1, // 1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	8b9b      	ldrh	r3, [r3, #28]
    uint16_t cells[6] =
 80006f0:	813b      	strh	r3, [r7, #8]
			BMS->BQ_daStatus1.sep.cell_voltage_2, // 2
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	8bdb      	ldrh	r3, [r3, #30]
    uint16_t cells[6] =
 80006f6:	817b      	strh	r3, [r7, #10]
            BMS->BQ_daStatus1.sep.cell_voltage_3, // 3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	8c1b      	ldrh	r3, [r3, #32]
    uint16_t cells[6] =
 80006fc:	81bb      	strh	r3, [r7, #12]
            BMS->BQ_daStatus1.sep.cell_voltage_4, // 4
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
    uint16_t cells[6] =
 8000702:	81fb      	strh	r3, [r7, #14]
            BMS->BQ_daStatus3.sep.cell_voltage_5, // 5
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
    uint16_t cells[6] =
 800070a:	823b      	strh	r3, [r7, #16]
            BMS->BQ_daStatus3.sep.cell_voltage_6  // 6
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
    uint16_t cells[6] =
 8000712:	827b      	strh	r3, [r7, #18]
        };

    for (int i = 0; i < 6; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
 8000718:	e022      	b.n	8000760 <BQ_GetBoundaryCellVoltage+0x86>
    {
        if (cells[i] > result.Max)
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	3320      	adds	r3, #32
 8000720:	443b      	add	r3, r7
 8000722:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000726:	8afb      	ldrh	r3, [r7, #22]
 8000728:	429a      	cmp	r2, r3
 800072a:	d906      	bls.n	800073a <BQ_GetBoundaryCellVoltage+0x60>
        {
            result.Max = cells[i];
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	3320      	adds	r3, #32
 8000732:	443b      	add	r3, r7
 8000734:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000738:	82fb      	strh	r3, [r7, #22]
        }
        if (cells[i] < result.Min)
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	3320      	adds	r3, #32
 8000740:	443b      	add	r3, r7
 8000742:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000746:	8abb      	ldrh	r3, [r7, #20]
 8000748:	429a      	cmp	r2, r3
 800074a:	d206      	bcs.n	800075a <BQ_GetBoundaryCellVoltage+0x80>
        {
            result.Min = cells[i];
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	3320      	adds	r3, #32
 8000752:	443b      	add	r3, r7
 8000754:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000758:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3301      	adds	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	2b05      	cmp	r3, #5
 8000764:	ddd9      	ble.n	800071a <BQ_GetBoundaryCellVoltage+0x40>
        }
    }

    return result;
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	2300      	movs	r3, #0
 800076c:	8b3a      	ldrh	r2, [r7, #24]
 800076e:	f362 030f 	bfi	r3, r2, #0, #16
 8000772:	8b7a      	ldrh	r2, [r7, #26]
 8000774:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000778:	4618      	mov	r0, r3
 800077a:	3724      	adds	r7, #36	@ 0x24
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <BQ_GetSendData>:

void BQ_GetSendData(BQ_data* BMS, ToSendData* data){
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	data->voltage = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_Voltage);
 800078e:	2109      	movs	r1, #9
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 fb21 	bl	8000dd8 <I2CHelper_ReadRegisterAsShort>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	809a      	strh	r2, [r3, #4]
	data->current = BMS->BQ_outCal.sep.current;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	@ 0x60
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	80da      	strh	r2, [r3, #6]
	data->balance = BQ_GetBoundaryCellVoltage(BMS);
 80007a8:	683c      	ldr	r4, [r7, #0]
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff95 	bl	80006da <BQ_GetBoundaryCellVoltage>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	8022      	strh	r2, [r4, #0]
 80007b6:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80007ba:	8063      	strh	r3, [r4, #2]
	data->cell_temperature = BMS->BQ_daStatus2.sep.ts1_temperature - KelvinToCelsius;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80007c0:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	819a      	strh	r2, [r3, #12]
	data->fet_temperature = BMS->BQ_daStatus2.sep.ts2_temperature - KelvinToCelsius;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80007d0:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	815a      	strh	r2, [r3, #10]
	data->percentage = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_RelativeStateOfCharge);
 80007da:	210d      	movs	r1, #13
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 fb1c 	bl	8000e1a <I2CHelper_ReadRegisterAsChar>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	721a      	strb	r2, [r3, #8]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd90      	pop	{r4, r7, pc}
	...

080007f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f8:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <MX_CAN1_Init+0xc8>)
 80007fa:	4a31      	ldr	r2, [pc, #196]	@ (80008c0 <MX_CAN1_Init+0xcc>)
 80007fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 48;
 80007fe:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000800:	2230      	movs	r2, #48	@ 0x30
 8000802:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000804:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <MX_CAN1_Init+0xc8>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <MX_CAN1_Init+0xc8>)
 800081e:	2200      	movs	r2, #0
 8000820:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000824:	2200      	movs	r2, #0
 8000826:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_CAN1_Init+0xc8>)
 800082a:	2200      	movs	r2, #0
 800082c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000830:	2200      	movs	r2, #0
 8000832:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000834:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000836:	2200      	movs	r2, #0
 8000838:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083a:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <MX_CAN1_Init+0xc8>)
 800083c:	2200      	movs	r2, #0
 800083e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000840:	481e      	ldr	r0, [pc, #120]	@ (80008bc <MX_CAN1_Init+0xc8>)
 8000842:	f000 fe39 	bl	80014b8 <HAL_CAN_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 fca3 	bl	8001196 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfil.FilterBank = 0;
 8000850:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
    canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000856:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
    canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 800085c:	4b19      	ldr	r3, [pc, #100]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
//    canfil.FilterIdHigh = 0x05<<5;
//    canfil.FilterIdLow = 0x0;
//    canfil.FilterMaskIdHigh = 0x0F<<5;


    canfil.FilterMaskIdHigh = 0;
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
    canfil.FilterMaskIdLow = 0;
 8000868:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 8000870:	2201      	movs	r2, #1
 8000872:	61da      	str	r2, [r3, #28]
    canfil.FilterActivation = ENABLE;
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 8000876:	2201      	movs	r2, #1
 8000878:	621a      	str	r2, [r3, #32]
    canfil.SlaveStartFilterBank = 14;
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 800087c:	220e      	movs	r2, #14
 800087e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Transmit messages configuration */
    TxHeader.IDE = CAN_ID_EXT;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_CAN1_Init+0xd4>)
 8000882:	2204      	movs	r2, #4
 8000884:	609a      	str	r2, [r3, #8]
    TxHeader.ExtId = 0x10000;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_CAN1_Init+0xd4>)
 8000888:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800088c:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_CAN1_Init+0xd4>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_CAN1_Init+0xd4>)
 8000896:	2208      	movs	r2, #8
 8000898:	611a      	str	r2, [r3, #16]

    HAL_CAN_ConfigFilter(&hcan1,&canfil);
 800089a:	490a      	ldr	r1, [pc, #40]	@ (80008c4 <MX_CAN1_Init+0xd0>)
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <MX_CAN1_Init+0xc8>)
 800089e:	f000 ff06 	bl	80016ae <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <MX_CAN1_Init+0xc8>)
 80008a4:	f000 ffcd 	bl	8001842 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80008a8:	2102      	movs	r1, #2
 80008aa:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_CAN1_Init+0xc8>)
 80008ac:	f001 f8dd 	bl	8001a6a <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80008b0:	2101      	movs	r1, #1
 80008b2:	4802      	ldr	r0, [pc, #8]	@ (80008bc <MX_CAN1_Init+0xc8>)
 80008b4:	f001 f8d9 	bl	8001a6a <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000006c 	.word	0x2000006c
 80008c0:	40006400 	.word	0x40006400
 80008c4:	20000044 	.word	0x20000044
 80008c8:	20000028 	.word	0x20000028

080008cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <HAL_CAN_MspInit+0x90>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d131      	bne.n	8000952 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_CAN_MspInit+0x94>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000960 <HAL_CAN_MspInit+0x94>)
 80008f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_CAN_MspInit+0x94>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_CAN_MspInit+0x94>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a15      	ldr	r2, [pc, #84]	@ (8000960 <HAL_CAN_MspInit+0x94>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <HAL_CAN_MspInit+0x94>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800091e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000930:	2309      	movs	r3, #9
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800093e:	f001 fc49 	bl	80021d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2108      	movs	r1, #8
 8000946:	2014      	movs	r0, #20
 8000948:	f001 fbbf 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800094c:	2014      	movs	r0, #20
 800094e:	f001 fbd8 	bl	8002102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	@ 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40006400 	.word	0x40006400
 8000960:	40021000 	.word	0x40021000

08000964 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b38      	ldr	r3, [pc, #224]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a37      	ldr	r2, [pc, #220]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000986:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	4b32      	ldr	r3, [pc, #200]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	4a31      	ldr	r2, [pc, #196]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a2b      	ldr	r2, [pc, #172]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a25      	ldr	r2, [pc, #148]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <MX_GPIO_Init+0xf8>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e0:	481f      	ldr	r0, [pc, #124]	@ (8000a60 <MX_GPIO_Init+0xfc>)
 80009e2:	f001 fd71 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4819      	ldr	r0, [pc, #100]	@ (8000a64 <MX_GPIO_Init+0x100>)
 80009fe:	f001 fbe9 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a20:	f001 fbd8 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4808      	ldr	r0, [pc, #32]	@ (8000a60 <MX_GPIO_Init+0xfc>)
 8000a3e:	f001 fbc9 	bl	80021d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210c      	movs	r1, #12
 8000a46:	2028      	movs	r0, #40	@ 0x28
 8000a48:	f001 fb3f 	bl	80020ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4c:	2028      	movs	r0, #40	@ 0x28
 8000a4e:	f001 fb58 	bl	8002102 <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000400 	.word	0x48000400
 8000a64:	48000800 	.word	0x48000800

08000a68 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae0 <MX_I2C1_Init+0x78>)
 8000a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C18DCC;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae4 <MX_I2C1_Init+0x7c>)
 8000a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a78:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa2:	480e      	ldr	r0, [pc, #56]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000aa4:	f001 fd5a 	bl	800255c <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000aae:	f000 fb72 	bl	8001196 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4809      	ldr	r0, [pc, #36]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000ab6:	f003 f965 	bl	8003d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac0:	f000 fb69 	bl	8001196 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_I2C1_Init+0x74>)
 8000ac8:	f003 f9a7 	bl	8003e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 fb60 	bl	8001196 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000094 	.word	0x20000094
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	10c18dcc 	.word	0x10c18dcc

08000ae8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	@ (8000b60 <MX_I2C2_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10C18DCC;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <MX_I2C2_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b22:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b24:	f001 fd1a 	bl	800255c <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 fb32 	bl	8001196 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b36:	f003 f925 	bl	8003d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 fb29 	bl	8001196 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_I2C2_Init+0x74>)
 8000b48:	f003 f967 	bl	8003e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 fb20 	bl	8001196 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000e8 	.word	0x200000e8
 8000b60:	40005800 	.word	0x40005800
 8000b64:	10c18dcc 	.word	0x10c18dcc

08000b68 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <MX_I2C3_Init+0x78>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C18DCC;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <MX_I2C3_Init+0x7c>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b78:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000ba4:	f001 fcda 	bl	800255c <HAL_I2C_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bae:	f000 faf2 	bl	8001196 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000bb6:	f003 f8e5 	bl	8003d84 <HAL_I2CEx_ConfigAnalogFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000bc0:	f000 fae9 	bl	8001196 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_I2C3_Init+0x74>)
 8000bc8:	f003 f927 	bl	8003e1a <HAL_I2CEx_ConfigDigitalFilter>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000bd2:	f000 fae0 	bl	8001196 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000013c 	.word	0x2000013c
 8000be0:	40005c00 	.word	0x40005c00
 8000be4:	10c18dcc 	.word	0x10c18dcc

08000be8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0a6      	sub	sp, #152	@ 0x98
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	2260      	movs	r2, #96	@ 0x60
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fb83 	bl	8005314 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a6b      	ldr	r2, [pc, #428]	@ (8000dc0 <HAL_I2C_MspInit+0x1d8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d14c      	bne.n	8000cb2 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c18:	2340      	movs	r3, #64	@ 0x40
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 ffa9 	bl	8004b7c <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c30:	f000 fab1 	bl	8001196 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b63      	ldr	r3, [pc, #396]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c38:	4a62      	ldr	r2, [pc, #392]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c40:	4b60      	ldr	r3, [pc, #384]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	623b      	str	r3, [r7, #32]
 8000c4a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c4c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c66:	2304      	movs	r3, #4
 8000c68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c70:	4619      	mov	r1, r3
 8000c72:	4855      	ldr	r0, [pc, #340]	@ (8000dc8 <HAL_I2C_MspInit+0x1e0>)
 8000c74:	f001 faae 	bl	80021d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	4b52      	ldr	r3, [pc, #328]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7c:	4a51      	ldr	r2, [pc, #324]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000c7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c84:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	210a      	movs	r1, #10
 8000c94:	201f      	movs	r0, #31
 8000c96:	f001 fa18 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c9a:	201f      	movs	r0, #31
 8000c9c:	f001 fa31 	bl	8002102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2109      	movs	r1, #9
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f001 fa10 	bl	80020ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000caa:	2020      	movs	r0, #32
 8000cac:	f001 fa29 	bl	8002102 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000cb0:	e082      	b.n	8000db8 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a45      	ldr	r2, [pc, #276]	@ (8000dcc <HAL_I2C_MspInit+0x1e4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d13c      	bne.n	8000d36 <HAL_I2C_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f003 ff57 	bl	8004b7c <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000cd4:	f000 fa5f 	bl	8001196 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	4a39      	ldr	r2, [pc, #228]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce4:	4b37      	ldr	r3, [pc, #220]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cf0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d14:	4619      	mov	r1, r3
 8000d16:	482c      	ldr	r0, [pc, #176]	@ (8000dc8 <HAL_I2C_MspInit+0x1e0>)
 8000d18:	f001 fa5c 	bl	80021d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d20:	4a28      	ldr	r2, [pc, #160]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000d22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
}
 8000d34:	e040      	b.n	8000db8 <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C3)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a25      	ldr	r2, [pc, #148]	@ (8000dd0 <HAL_I2C_MspInit+0x1e8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d13b      	bne.n	8000db8 <HAL_I2C_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 ff14 	bl	8004b7c <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_I2C_MspInit+0x176>
      Error_Handler();
 8000d5a:	f000 fa1c 	bl	8001196 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d76:	2303      	movs	r3, #3
 8000d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <HAL_I2C_MspInit+0x1ec>)
 8000d9c:	f001 fa1a 	bl	80021d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000da6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_I2C_MspInit+0x1dc>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3798      	adds	r7, #152	@ 0x98
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	40005800 	.word	0x40005800
 8000dd0:	40005c00 	.word	0x40005c00
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(BQ_data* BMS, uint8_t address)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2];
	I2CHelper_ReadRegister(BMS, address, buf, 2);
 8000de4:	f107 020c 	add.w	r2, r7, #12
 8000de8:	78f9      	ldrb	r1, [r7, #3]
 8000dea:	2302      	movs	r3, #2
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f826 	bl	8000e3e <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000df6:	7b3b      	ldrb	r3, [r7, #12]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000e00:	7b7b      	ldrb	r3, [r7, #13]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b21a      	sxth	r2, r3
 8000e06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	81fb      	strh	r3, [r7, #14]

	return result;
 8000e10:	89fb      	ldrh	r3, [r7, #14]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(BQ_data* BMS, uint8_t address)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[1];
	I2CHelper_ReadRegister(BMS, address, buf, 1);
 8000e26:	f107 020c 	add.w	r2, r7, #12
 8000e2a:	78f9      	ldrb	r1, [r7, #3]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f805 	bl	8000e3e <I2CHelper_ReadRegister>

	return buf[0];
 8000e34:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(BQ_data* BMS, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af02      	add	r7, sp, #8
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	72fb      	strb	r3, [r7, #11]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, &address, 1, 100);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f107 020b 	add.w	r2, r7, #11
 8000e60:	2364      	movs	r3, #100	@ 0x64
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	f001 fc15 	bl	8002694 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress,  receive_buffer, size, 100);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	4619      	mov	r1, r3
 8000e74:	7abb      	ldrb	r3, [r7, #10]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	2264      	movs	r2, #100	@ 0x64
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	f001 fd21 	bl	80028c4 <HAL_I2C_Master_Receive>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <I2CHelper_CheckAddress>:
 * @brief scanning i2c devices and return first
 * @param i2c I2C_HandleTypeDef pointer
 * @return first i2c device
 */
CONNECTION_STATUS I2CHelper_CheckAddress(BQ_data* BMS)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, BMS->bq_deviceAddress, 3, 5);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	791b      	ldrb	r3, [r3, #4]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	f001 fe06 	bl	8002ab0 <HAL_I2C_IsDeviceReady>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73bb      	strb	r3, [r7, #14]
	if (ret == HAL_BUSY){
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d101      	bne.n	8000eb2 <I2CHelper_CheckAddress+0x28>
		return NEED_RESET;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e023      	b.n	8000efa <I2CHelper_CheckAddress+0x70>
	}
	if (ret == HAL_OK)
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <I2CHelper_CheckAddress+0x32>
	{
		return CONNECTED;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e01e      	b.n	8000efa <I2CHelper_CheckAddress+0x70>
	}
	for (uint8_t i = 1; i < 255; i++)
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e017      	b.n	8000ef2 <I2CHelper_CheckAddress+0x68>
	{
		ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, i, 3, 5);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6818      	ldr	r0, [r3, #0]
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	b299      	uxth	r1, r3
 8000eca:	2305      	movs	r3, #5
 8000ecc:	2203      	movs	r2, #3
 8000ece:	f001 fdef 	bl	8002ab0 <HAL_I2C_IsDeviceReady>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73bb      	strb	r3, [r7, #14]
		if (ret == HAL_OK)
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d104      	bne.n	8000ee6 <I2CHelper_CheckAddress+0x5c>
		{
			BMS->bq_deviceAddress = i;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	711a      	strb	r2, [r3, #4]
			return CHANGED_ADDRESS;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e009      	b.n	8000efa <I2CHelper_CheckAddress+0x70>
		}
		HAL_Delay(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f000 fac2 	bl	8001470 <HAL_Delay>
	for (uint8_t i = 1; i < 255; i++)
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	2bff      	cmp	r3, #255	@ 0xff
 8000ef6:	d1e4      	bne.n	8000ec2 <I2CHelper_CheckAddress+0x38>
	}
	return INVALID_DEVICE;
 8000ef8:	2302      	movs	r3, #2
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_EXTI_Callback>:
#endif


bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f14:	d113      	bne.n	8000f3e <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	bf14      	ite	ne
 8000f1e:	2301      	movne	r3, #1
 8000f20:	2300      	moveq	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f32:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <HAL_GPIO_EXTI_Callback+0x48>)
 8000f3a:	f001 fadd 	bl	80024f8 <HAL_GPIO_TogglePin>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000290 	.word	0x20000290
 8000f4c:	48000400 	.word	0x48000400

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 fa0f 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 f8c1 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f7ff fd01 	bl	8000964 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f62:	f7ff fd81 	bl	8000a68 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000f66:	f7ff fc45 	bl	80007f4 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000f6a:	f7ff fdbd 	bl	8000ae8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000f6e:	f7ff fdfb 	bl	8000b68 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

#ifdef USED_I2C1
ToSendData data_1 = {0};
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	819a      	strh	r2, [r3, #12]
#endif
#ifdef USED_I2C2
ToSendData data_2 = {0};
#endif
#ifdef USED_I2C3
ToSendData data_3 = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	819a      	strh	r2, [r3, #12]
#endif
//  BQ_BoundaryCellVoltage balance;
  status = false;
 8000f8c:	4b47      	ldr	r3, [pc, #284]	@ (80010ac <main+0x15c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
//  uint16_t cells[6] = {0};
//  bool fun[5] = {0};
//  uint8_t test[11] = {0};
//  uint16_t temperature[2] = {0};
#ifdef USED_I2C1
  BQ_Init(&hi2c1);
 8000f92:	4847      	ldr	r0, [pc, #284]	@ (80010b0 <main+0x160>)
 8000f94:	f7ff f91a 	bl	80001cc <BQ_Init>
#endif
#ifdef USED_I2C2
  BQ_Init(&hi2c2);
#endif
#ifdef USED_I2C3
  BQ_Init(&hi2c3);
 8000f98:	4846      	ldr	r0, [pc, #280]	@ (80010b4 <main+0x164>)
 8000f9a:	f7ff f917 	bl	80001cc <BQ_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 8000f9e:	20c8      	movs	r0, #200	@ 0xc8
 8000fa0:	f000 fa66 	bl	8001470 <HAL_Delay>
#ifdef USED_I2C1
	  BQAction_UpdateData(&BMS_1);
 8000fa4:	4844      	ldr	r0, [pc, #272]	@ (80010b8 <main+0x168>)
 8000fa6:	f7ff fb12 	bl	80005ce <BQAction_UpdateData>
	  BQ_GetSendData(&BMS_1, &data_1);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4841      	ldr	r0, [pc, #260]	@ (80010b8 <main+0x168>)
 8000fb2:	f7ff fbe7 	bl	8000784 <BQ_GetSendData>
	  stat4.pidPos = 1.0f;
 8000fb6:	4b41      	ldr	r3, [pc, #260]	@ (80010bc <main+0x16c>)
 8000fb8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fbc:	611a      	str	r2, [r3, #16]
	  stat4.currentIn = (float)(data_1.current) / 1000;
 8000fbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80010c0 <main+0x170>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80010bc <main+0x16c>)
 8000fd4:	edc3 7a03 	vstr	s15, [r3, #12]
	  stat4.tempFet = (float)(data_1.fet_temperature) / 10;
 8000fd8:	8b7b      	ldrh	r3, [r7, #26]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fe2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fea:	4b34      	ldr	r3, [pc, #208]	@ (80010bc <main+0x16c>)
 8000fec:	edc3 7a01 	vstr	s15, [r3, #4]
	  stat4.tempMotor = (float)(data_1.cell_temperature) / 10;
 8000ff0:	8bbb      	ldrh	r3, [r7, #28]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ffa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001002:	4b2e      	ldr	r3, [pc, #184]	@ (80010bc <main+0x16c>)
 8001004:	edc3 7a02 	vstr	s15, [r3, #8]
	  VESC_convertStatus4ToRaw(&rawFrame, &stat4);
 8001008:	492c      	ldr	r1, [pc, #176]	@ (80010bc <main+0x16c>)
 800100a:	482e      	ldr	r0, [pc, #184]	@ (80010c4 <main+0x174>)
 800100c:	f004 f8f2 	bl	80051f4 <VESC_convertStatus4ToRaw>
	  vesc2halcan(&TxHeader, txData, 8, &rawFrame);
 8001010:	4b2c      	ldr	r3, [pc, #176]	@ (80010c4 <main+0x174>)
 8001012:	2208      	movs	r2, #8
 8001014:	492c      	ldr	r1, [pc, #176]	@ (80010c8 <main+0x178>)
 8001016:	482d      	ldr	r0, [pc, #180]	@ (80010cc <main+0x17c>)
 8001018:	f000 f950 	bl	80012bc <vesc2halcan>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
 800101c:	4b2c      	ldr	r3, [pc, #176]	@ (80010d0 <main+0x180>)
 800101e:	4a2a      	ldr	r2, [pc, #168]	@ (80010c8 <main+0x178>)
 8001020:	492a      	ldr	r1, [pc, #168]	@ (80010cc <main+0x17c>)
 8001022:	482c      	ldr	r0, [pc, #176]	@ (80010d4 <main+0x184>)
 8001024:	f000 fc51 	bl	80018ca <HAL_CAN_AddTxMessage>
	  VESC_convertStatus4ToRaw(&rawFrame, &stat4);
	  vesc2halcan(&TxHeader, txData, 8, &rawFrame);
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
#endif
#ifdef USED_I2C3
	  BQAction_UpdateData(&BMS_3);
 8001028:	482b      	ldr	r0, [pc, #172]	@ (80010d8 <main+0x188>)
 800102a:	f7ff fad0 	bl	80005ce <BQAction_UpdateData>
	  BQ_GetSendData(&BMS_3, &data_3);
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <main+0x188>)
 8001034:	f7ff fba6 	bl	8000784 <BQ_GetSendData>
	  stat4.pidPos = 3.0f;
 8001038:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <main+0x16c>)
 800103a:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <main+0x18c>)
 800103c:	611a      	str	r2, [r3, #16]
	  stat4.currentIn = (float)(data_3.current) / 1000;
 800103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104a:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80010c0 <main+0x170>
 800104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <main+0x16c>)
 8001054:	edc3 7a03 	vstr	s15, [r3, #12]
	  stat4.tempFet = (float)(data_3.fet_temperature) / 10;
 8001058:	897b      	ldrh	r3, [r7, #10]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001062:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <main+0x16c>)
 800106c:	edc3 7a01 	vstr	s15, [r3, #4]
	  stat4.tempMotor = (float)(data_3.cell_temperature) / 10;
 8001070:	89bb      	ldrh	r3, [r7, #12]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800107a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800107e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <main+0x16c>)
 8001084:	edc3 7a02 	vstr	s15, [r3, #8]
	  VESC_convertStatus4ToRaw(&rawFrame, &stat4);
 8001088:	490c      	ldr	r1, [pc, #48]	@ (80010bc <main+0x16c>)
 800108a:	480e      	ldr	r0, [pc, #56]	@ (80010c4 <main+0x174>)
 800108c:	f004 f8b2 	bl	80051f4 <VESC_convertStatus4ToRaw>
	  vesc2halcan(&TxHeader, txData, 8, &rawFrame);
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <main+0x174>)
 8001092:	2208      	movs	r2, #8
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <main+0x178>)
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <main+0x17c>)
 8001098:	f000 f910 	bl	80012bc <vesc2halcan>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <main+0x180>)
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <main+0x178>)
 80010a0:	490a      	ldr	r1, [pc, #40]	@ (80010cc <main+0x17c>)
 80010a2:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <main+0x184>)
 80010a4:	f000 fc11 	bl	80018ca <HAL_CAN_AddTxMessage>
	  HAL_Delay(200);
 80010a8:	bf00      	nop
 80010aa:	e778      	b.n	8000f9e <main+0x4e>
 80010ac:	20000290 	.word	0x20000290
 80010b0:	20000094 	.word	0x20000094
 80010b4:	2000013c 	.word	0x2000013c
 80010b8:	20000190 	.word	0x20000190
 80010bc:	20000294 	.word	0x20000294
 80010c0:	447a0000 	.word	0x447a0000
 80010c4:	200002a8 	.word	0x200002a8
 80010c8:	200002b8 	.word	0x200002b8
 80010cc:	20000028 	.word	0x20000028
 80010d0:	20000040 	.word	0x20000040
 80010d4:	2000006c 	.word	0x2000006c
 80010d8:	20000210 	.word	0x20000210
 80010dc:	40400000 	.word	0x40400000

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	@ 0x58
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2244      	movs	r2, #68	@ 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 f910 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001102:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001106:	f002 fee3 	bl	8003ed0 <HAL_PWREx_ControlVoltageScaling>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001110:	f000 f841 	bl	8001196 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 800112e:	2309      	movs	r3, #9
 8001130:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001132:	2307      	movs	r3, #7
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4618      	mov	r0, r3
 8001144:	f002 ff1a 	bl	8003f7c <HAL_RCC_OscConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800114e:	f000 f822 	bl	8001196 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2303      	movs	r3, #3
 8001158:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	2104      	movs	r1, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fb1a 	bl	80047a4 <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001176:	f000 f80e 	bl	8001196 <Error_Handler>
  }
}
 800117a:	bf00      	nop
 800117c:	3758      	adds	r7, #88	@ 0x58
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119a:	b672      	cpsid	i
}
 800119c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119e:	bf00      	nop
 80011a0:	e7fd      	b.n	800119e <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_MspInit+0x44>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_MspInit+0x44>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f8f5 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <CAN1_RX0_IRQHandler+0x10>)
 8001252:	f000 fc30 	bl	8001ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000006c 	.word	0x2000006c

08001260 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <I2C1_EV_IRQHandler+0x10>)
 8001266:	f001 fd0f 	bl	8002c88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000094 	.word	0x20000094

08001274 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <I2C1_ER_IRQHandler+0x10>)
 800127a:	f001 fd1f 	bl	8002cbc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000094 	.word	0x20000094

08001288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800128c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001290:	f001 f94c 	bl	800252c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <vesc2halcan>:
#include "vesc2halcan.h"

uint8_t vesc2halcan(CAN_TxHeaderTypeDef* txHeader, uint8_t* txData, size_t txDataSize, const VESC_RawFrame* vescRawFrame)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]
	if (txDataSize < vescRawFrame->can_dlc){
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	461a      	mov	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d201      	bcs.n	80012da <vesc2halcan+0x1e>
		return VESC2HALCAN_ERR_TXDATA;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e020      	b.n	800131c <vesc2halcan+0x60>
	}
	txHeader->ExtId = *(uint32_t*)vescRawFrame & 0x1FFFFFFF; //Identifier
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	605a      	str	r2, [r3, #4]
	txHeader->IDE = CAN_ID_EXT;//IdType
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2204      	movs	r2, #4
 80012ea:	609a      	str	r2, [r3, #8]
	txHeader->RTR = CAN_RTR_DATA; //TxFrameType
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]

	// see FDCAN_data_length_code
	if (vescRawFrame->can_dlc >= 0u && vescRawFrame->can_dlc <= 8u){
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	791b      	ldrb	r3, [r3, #4]
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d80f      	bhi.n	800131a <vesc2halcan+0x5e>
		txHeader->DLC = vescRawFrame->can_dlc;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	791b      	ldrb	r3, [r3, #4]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	611a      	str	r2, [r3, #16]
//	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
//	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
//	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	txHeader->MessageMarker = 0x0;

	memcpy(txData, vescRawFrame->rawData, vescRawFrame->can_dlc);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f103 0108 	add.w	r1, r3, #8
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	791b      	ldrb	r3, [r3, #4]
 800130e:	461a      	mov	r2, r3
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f004 f82b 	bl	800536c <memcpy>

	return VESC2HALCAN_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <vesc2halcan+0x60>
		return VESC2HALCAN_ERR_DLC;
 800131a:	2303      	movs	r3, #3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800135c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001328:	f7ff ffb6 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	@ (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	@ (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f003 ffe7 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff fdfb 	bl	8000f50 <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800135c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001368:	080053e8 	.word	0x080053e8
  ldr r2, =_sbss
 800136c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001370:	200002c4 	.word	0x200002c4

08001374 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_IRQHandler>
	...

08001378 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_Init+0x3c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_Init+0x3c>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138e:	2003      	movs	r0, #3
 8001390:	f000 fe90 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001394:	2000      	movs	r0, #0
 8001396:	f000 f80f 	bl	80013b8 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	e001      	b.n	80013aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a6:	f7ff fefd 	bl	80011a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40022000 	.word	0x40022000

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_InitTick+0x6c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d023      	beq.n	8001414 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <HAL_InitTick+0x70>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <HAL_InitTick+0x6c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fe9b 	bl	800211e <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10f      	bne.n	800140e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d809      	bhi.n	8001408 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 fe65 	bl	80020ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001400:	4a0a      	ldr	r2, [pc, #40]	@ (800142c <HAL_InitTick+0x74>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e007      	b.n	8001418 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e004      	b.n	8001418 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e001      	b.n	8001418 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	200002c0 	.word	0x200002c0

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200002c0 	.word	0x200002c0

08001470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff ffee 	bl	8001458 <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800148a:	4b0a      	ldr	r3, [pc, #40]	@ (80014b4 <HAL_Delay+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffde 	bl	8001458 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0ed      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff f9f8 	bl	80008cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ec:	f7ff ffb4 	bl	8001458 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014f2:	e012      	b.n	800151a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f4:	f7ff ffb0 	bl	8001458 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d90b      	bls.n	800151a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2205      	movs	r2, #5
 8001512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0c5      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0e5      	beq.n	80014f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0202 	bic.w	r2, r2, #2
 8001536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001538:	f7ff ff8e 	bl	8001458 <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800153e:	e012      	b.n	8001566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001540:	f7ff ff8a 	bl	8001458 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d90b      	bls.n	8001566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2205      	movs	r2, #5
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e09f      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e5      	bne.n	8001540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e007      	b.n	800159e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e5b      	ldrb	r3, [r3, #25]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e9b      	ldrb	r3, [r3, #26]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e007      	b.n	80015f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0220 	bic.w	r2, r2, #32
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7edb      	ldrb	r3, [r3, #27]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0210 	bic.w	r2, r2, #16
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e007      	b.n	800161c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0210 	orr.w	r2, r2, #16
 800161a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7f1b      	ldrb	r3, [r3, #28]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0208 	orr.w	r2, r2, #8
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e007      	b.n	8001646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0208 	bic.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7f5b      	ldrb	r3, [r3, #29]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0204 	orr.w	r2, r2, #4
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e007      	b.n	8001670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0204 	bic.w	r2, r2, #4
 800166e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	ea42 0103 	orr.w	r1, r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b087      	sub	sp, #28
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80016c6:	7cfb      	ldrb	r3, [r7, #19]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d003      	beq.n	80016d4 <HAL_CAN_ConfigFilter+0x26>
 80016cc:	7cfb      	ldrb	r3, [r7, #19]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	f040 80aa 	bne.w	8001828 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2201      	movs	r2, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d123      	bne.n	8001756 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	43db      	mvns	r3, r3
 8001718:	401a      	ands	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001730:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3248      	adds	r2, #72	@ 0x48
 8001736:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800174a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800174c:	6979      	ldr	r1, [r7, #20]
 800174e:	3348      	adds	r3, #72	@ 0x48
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d122      	bne.n	80017a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	431a      	orrs	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800177e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3248      	adds	r2, #72	@ 0x48
 8001784:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001798:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	3348      	adds	r3, #72	@ 0x48
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80017be:	e007      	b.n	80017d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017ea:	e007      	b.n	80017fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	431a      	orrs	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800181a:	f023 0201 	bic.w	r2, r3, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e006      	b.n	8001836 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d12e      	bne.n	80018b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800186e:	f7ff fdf3 	bl	8001458 <HAL_GetTick>
 8001872:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001874:	e012      	b.n	800189c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001876:	f7ff fdef 	bl	8001458 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b0a      	cmp	r3, #10
 8001882:	d90b      	bls.n	800189c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2205      	movs	r2, #5
 8001894:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e012      	b.n	80018c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1e5      	bne.n	8001876 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e006      	b.n	80018c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
  }
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b089      	sub	sp, #36	@ 0x24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d003      	beq.n	80018f6 <HAL_CAN_AddTxMessage+0x2c>
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	f040 80ad 	bne.w	8001a50 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8095 	beq.w	8001a40 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	0e1b      	lsrs	r3, r3, #24
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001920:	2201      	movs	r2, #1
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	409a      	lsls	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	6809      	ldr	r1, [r1, #0]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3318      	adds	r3, #24
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	440b      	add	r3, r1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e00f      	b.n	800196e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001958:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001962:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3318      	adds	r3, #24
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	440b      	add	r3, r1
 800196c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3318      	adds	r3, #24
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	440b      	add	r3, r1
 800197e:	3304      	adds	r3, #4
 8001980:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	7d1b      	ldrb	r3, [r3, #20]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d111      	bne.n	80019ae <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3318      	adds	r3, #24
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	3304      	adds	r3, #4
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	6811      	ldr	r1, [r2, #0]
 800199e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3318      	adds	r3, #24
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	440b      	add	r3, r1
 80019aa:	3304      	adds	r3, #4
 80019ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3307      	adds	r3, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	061a      	lsls	r2, r3, #24
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3306      	adds	r3, #6
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	041b      	lsls	r3, r3, #16
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3305      	adds	r3, #5
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	4313      	orrs	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	3204      	adds	r2, #4
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	4610      	mov	r0, r2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	ea43 0200 	orr.w	r2, r3, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	440b      	add	r3, r1
 80019e0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3303      	adds	r3, #3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	061a      	lsls	r2, r3, #24
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3302      	adds	r3, #2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3301      	adds	r3, #1
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	4313      	orrs	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	4610      	mov	r0, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	6811      	ldr	r1, [r2, #0]
 8001a0c:	ea43 0200 	orr.w	r2, r3, r0
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	440b      	add	r3, r1
 8001a16:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001a1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3318      	adds	r3, #24
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	6811      	ldr	r1, [r2, #0]
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3318      	adds	r3, #24
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	440b      	add	r3, r1
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e00e      	b.n	8001a5e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e006      	b.n	8001a5e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d002      	beq.n	8001a88 <HAL_CAN_ActivateNotification+0x1e>
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d109      	bne.n	8001a9c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6959      	ldr	r1, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e006      	b.n	8001aaa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b08a      	sub	sp, #40	@ 0x28
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d07c      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d023      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f983 	bl	8001e24 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b1e:	e016      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b32:	e00c      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	e002      	b.n	8001b4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f989 	bl	8001e60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d024      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f963 	bl	8001e38 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b72:	e016      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d004      	beq.n	8001b88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b86:	e00c      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9a:	e002      	b.n	8001ba2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f969 	bl	8001e74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d024      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f943 	bl	8001e4c <HAL_CAN_TxMailbox2CompleteCallback>
 8001bc6:	e016      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	e00c      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bee:	e002      	b.n	8001bf6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f949 	bl	8001e88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2208      	movs	r2, #8
 8001c34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f930 	bl	8001e9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fa94 	bl	8001182 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c7e:	6a3b      	ldr	r3, [r7, #32]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2208      	movs	r2, #8
 8001c98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f912 	bl	8001ec4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f8f9 	bl	8001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00b      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8fc 	bl	8001ed8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8f5 	bl	8001eec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d07b      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d072      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d043      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d03e      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d84:	2b60      	cmp	r3, #96	@ 0x60
 8001d86:	d02b      	beq.n	8001de0 <HAL_CAN_IRQHandler+0x32a>
 8001d88:	2b60      	cmp	r3, #96	@ 0x60
 8001d8a:	d82e      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d8c:	2b50      	cmp	r3, #80	@ 0x50
 8001d8e:	d022      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x320>
 8001d90:	2b50      	cmp	r3, #80	@ 0x50
 8001d92:	d82a      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d94:	2b40      	cmp	r3, #64	@ 0x40
 8001d96:	d019      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x316>
 8001d98:	2b40      	cmp	r3, #64	@ 0x40
 8001d9a:	d826      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001d9c:	2b30      	cmp	r3, #48	@ 0x30
 8001d9e:	d010      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x30c>
 8001da0:	2b30      	cmp	r3, #48	@ 0x30
 8001da2:	d822      	bhi.n	8001dea <HAL_CAN_IRQHandler+0x334>
 8001da4:	2b10      	cmp	r3, #16
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_IRQHandler+0x2f8>
 8001da8:	2b20      	cmp	r3, #32
 8001daa:	d005      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001dac:	e01d      	b.n	8001dea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001db6:	e019      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dc0:	e014      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dca:	e00f      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dd4:	e00a      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dde:	e005      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001de8:	e000      	b.n	8001dec <HAL_CAN_IRQHandler+0x336>
            break;
 8001dea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001dfa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2204      	movs	r2, #4
 8001e02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f872 	bl	8001f00 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	@ 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	@ (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff29 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff3e 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff31 	bl	8001f78 <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa2 	bl	8002070 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d005      	beq.n	800215a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2204      	movs	r2, #4
 8002152:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e029      	b.n	80021ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 020e 	bic.w	r2, r2, #14
 8002168:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f003 021c 	and.w	r2, r3, #28
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
    }
  }
  return status;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021c6:	b2db      	uxtb	r3, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	e154      	b.n	800248e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2101      	movs	r1, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa01 f303 	lsl.w	r3, r1, r3
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8146 	beq.w	8002488 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d005      	beq.n	8002214 <HAL_GPIO_Init+0x40>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d130      	bne.n	8002276 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	2203      	movs	r2, #3
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800224a:	2201      	movs	r2, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f003 0201 	and.w	r2, r3, #1
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b03      	cmp	r3, #3
 8002280:	d017      	beq.n	80022b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	2203      	movs	r2, #3
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d123      	bne.n	8002306 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	220f      	movs	r2, #15
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691a      	ldr	r2, [r3, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	6939      	ldr	r1, [r7, #16]
 8002302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80a0 	beq.w	8002488 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002348:	4b58      	ldr	r3, [pc, #352]	@ (80024ac <HAL_GPIO_Init+0x2d8>)
 800234a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234c:	4a57      	ldr	r2, [pc, #348]	@ (80024ac <HAL_GPIO_Init+0x2d8>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6613      	str	r3, [r2, #96]	@ 0x60
 8002354:	4b55      	ldr	r3, [pc, #340]	@ (80024ac <HAL_GPIO_Init+0x2d8>)
 8002356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002360:	4a53      	ldr	r2, [pc, #332]	@ (80024b0 <HAL_GPIO_Init+0x2dc>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	220f      	movs	r2, #15
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800238a:	d019      	beq.n	80023c0 <HAL_GPIO_Init+0x1ec>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a49      	ldr	r2, [pc, #292]	@ (80024b4 <HAL_GPIO_Init+0x2e0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_GPIO_Init+0x1e8>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a48      	ldr	r2, [pc, #288]	@ (80024b8 <HAL_GPIO_Init+0x2e4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00d      	beq.n	80023b8 <HAL_GPIO_Init+0x1e4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a47      	ldr	r2, [pc, #284]	@ (80024bc <HAL_GPIO_Init+0x2e8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <HAL_GPIO_Init+0x1e0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a46      	ldr	r2, [pc, #280]	@ (80024c0 <HAL_GPIO_Init+0x2ec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_GPIO_Init+0x1dc>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e008      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b0:	2307      	movs	r3, #7
 80023b2:	e006      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e004      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e002      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_GPIO_Init+0x1ee>
 80023c0:	2300      	movs	r3, #0
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	f002 0203 	and.w	r2, r2, #3
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	4093      	lsls	r3, r2
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d2:	4937      	ldr	r1, [pc, #220]	@ (80024b0 <HAL_GPIO_Init+0x2dc>)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e0:	4b38      	ldr	r3, [pc, #224]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002404:	4a2f      	ldr	r2, [pc, #188]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800240a:	4b2e      	ldr	r3, [pc, #184]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800242e:	4a25      	ldr	r2, [pc, #148]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002434:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002458:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800245e:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002482:	4a10      	ldr	r2, [pc, #64]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	3301      	adds	r3, #1
 800248c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	f47f aea3 	bne.w	80021e4 <HAL_GPIO_Init+0x10>
  }
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010000 	.word	0x40010000
 80024b4:	48000400 	.word	0x48000400
 80024b8:	48000800 	.word	0x48000800
 80024bc:	48000c00 	.word	0x48000c00
 80024c0:	48001000 	.word	0x48001000
 80024c4:	40010400 	.word	0x40010400

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	041a      	lsls	r2, r3, #16
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43d9      	mvns	r1, r3
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	400b      	ands	r3, r1
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fcda 	bl	8000f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e08d      	b.n	800268a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fb30 	bl	8000be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	@ 0x24
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	e006      	b.n	80025e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d108      	bne.n	80025fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	e007      	b.n	800260e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800260c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800261c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002620:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002630:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69d9      	ldr	r1, [r3, #28]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a1a      	ldr	r2, [r3, #32]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	461a      	mov	r2, r3
 80026a0:	460b      	mov	r3, r1
 80026a2:	817b      	strh	r3, [r7, #10]
 80026a4:	4613      	mov	r3, r2
 80026a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	f040 80fd 	bne.w	80028b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_I2C_Master_Transmit+0x30>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0f6      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x21e>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026cc:	f7fe fec4 	bl	8001458 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2319      	movs	r3, #25
 80026d8:	2201      	movs	r2, #1
 80026da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f001 f871 	bl	80037c6 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0e1      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2221      	movs	r2, #33	@ 0x21
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2210      	movs	r2, #16
 80026fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	893a      	ldrh	r2, [r7, #8]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	2bff      	cmp	r3, #255	@ 0xff
 800271e:	d906      	bls.n	800272e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	22ff      	movs	r2, #255	@ 0xff
 8002724:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002726:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e007      	b.n	800273e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002738:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800273c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276e:	3b01      	subs	r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3301      	adds	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	4b4e      	ldr	r3, [pc, #312]	@ (80028bc <HAL_I2C_Master_Transmit+0x228>)
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f001 fa6b 	bl	8003c64 <I2C_TransferConfig>
 800278e:	e066      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	b2da      	uxtb	r2, r3
 8002796:	8979      	ldrh	r1, [r7, #10]
 8002798:	4b48      	ldr	r3, [pc, #288]	@ (80028bc <HAL_I2C_Master_Transmit+0x228>)
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f001 fa60 	bl	8003c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80027a4:	e05b      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	6a39      	ldr	r1, [r7, #32]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f001 f864 	bl	8003878 <I2C_WaitOnTXISFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07b      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	1c5a      	adds	r2, r3, #1
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d034      	beq.n	800285e <HAL_I2C_Master_Transmit+0x1ca>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d130      	bne.n	800285e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 ffdd 	bl	80037c6 <I2C_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e04d      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2bff      	cmp	r3, #255	@ 0xff
 800281e:	d90e      	bls.n	800283e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	22ff      	movs	r2, #255	@ 0xff
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	b2da      	uxtb	r2, r3
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	2300      	movs	r3, #0
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f001 fa14 	bl	8003c64 <I2C_TransferConfig>
 800283c:	e00f      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f001 fa03 	bl	8003c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d19e      	bne.n	80027a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f001 f84a 	bl	8003906 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e01a      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2220      	movs	r2, #32
 8002882:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_I2C_Master_Transmit+0x22c>)
 8002890:	400b      	ands	r3, r1
 8002892:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	80002000 	.word	0x80002000
 80028c0:	fe00e800 	.word	0xfe00e800

080028c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	461a      	mov	r2, r3
 80028d0:	460b      	mov	r3, r1
 80028d2:	817b      	strh	r3, [r7, #10]
 80028d4:	4613      	mov	r3, r2
 80028d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	f040 80db 	bne.w	8002a9c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_I2C_Master_Receive+0x30>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0d4      	b.n	8002a9e <HAL_I2C_Master_Receive+0x1da>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe fdac 	bl	8001458 <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2319      	movs	r3, #25
 8002908:	2201      	movs	r2, #1
 800290a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 ff59 	bl	80037c6 <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0bf      	b.n	8002a9e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2222      	movs	r2, #34	@ 0x22
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2210      	movs	r2, #16
 800292a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	893a      	ldrh	r2, [r7, #8]
 800293e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2bff      	cmp	r3, #255	@ 0xff
 800294e:	d90e      	bls.n	800296e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	b2da      	uxtb	r2, r3
 800295c:	8979      	ldrh	r1, [r7, #10]
 800295e:	4b52      	ldr	r3, [pc, #328]	@ (8002aa8 <HAL_I2C_Master_Receive+0x1e4>)
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f001 f97c 	bl	8003c64 <I2C_TransferConfig>
 800296c:	e06d      	b.n	8002a4a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <HAL_I2C_Master_Receive+0x1e4>)
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f001 f96b 	bl	8003c64 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800298e:	e05c      	b.n	8002a4a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	6a39      	ldr	r1, [r7, #32]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fff9 	bl	800398c <I2C_WaitOnRXNEFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e07c      	b.n	8002a9e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d034      	beq.n	8002a4a <HAL_I2C_Master_Receive+0x186>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d130      	bne.n	8002a4a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	2200      	movs	r2, #0
 80029f0:	2180      	movs	r1, #128	@ 0x80
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 fee7 	bl	80037c6 <I2C_WaitOnFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e04d      	b.n	8002a9e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2bff      	cmp	r3, #255	@ 0xff
 8002a0a:	d90e      	bls.n	8002a2a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	22ff      	movs	r2, #255	@ 0xff
 8002a10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f001 f91e 	bl	8003c64 <I2C_TransferConfig>
 8002a28:	e00f      	b.n	8002a4a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f001 f90d 	bl	8003c64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d19d      	bne.n	8002990 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	6a39      	ldr	r1, [r7, #32]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 ff54 	bl	8003906 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e01a      	b.n	8002a9e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <HAL_I2C_Master_Receive+0x1e8>)
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	80002400 	.word	0x80002400
 8002aac:	fe00e800 	.word	0xfe00e800

08002ab0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	f040 80d6 	bne.w	8002c7e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae0:	d101      	bne.n	8002ae6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0cc      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_I2C_IsDeviceReady+0x44>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0c5      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x1d0>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2224      	movs	r2, #36	@ 0x24
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <HAL_I2C_IsDeviceReady+0x72>
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b1c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b20:	e006      	b.n	8002b30 <HAL_I2C_IsDeviceReady+0x80>
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b2c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe fc8f 	bl	8001458 <HAL_GetTick>
 8002b3a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	bf0c      	ite	eq
 8002b4a:	2301      	moveq	r3, #1
 8002b4c:	2300      	movne	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b68:	e034      	b.n	8002bd4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d01a      	beq.n	8002ba8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7fe fc71 	bl	8001458 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <HAL_I2C_IsDeviceReady+0xd8>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e06b      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bd4:	7ffb      	ldrb	r3, [r7, #31]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_I2C_IsDeviceReady+0x130>
 8002bda:	7fbb      	ldrb	r3, [r7, #30]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0c4      	beq.n	8002b6a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d01a      	beq.n	8002c24 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fde4 	bl	80037c6 <I2C_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e03b      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e02d      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2120      	movs	r1, #32
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fdc9 	bl	80037c6 <I2C_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e020      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2210      	movs	r2, #16
 8002c44:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	3301      	adds	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f63f af56 	bhi.w	8002b0a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
  }
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	68f9      	ldr	r1, [r7, #12]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00f      	beq.n	8002cfe <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cfc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00f      	beq.n	8002d28 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	f043 0208 	orr.w	r2, r3, #8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00f      	beq.n	8002d52 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d40:	f043 0202 	orr.w	r2, r3, #2
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d50:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 030b 	and.w	r3, r3, #11
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002d62:	68f9      	ldr	r1, [r7, #12]
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fbd5 	bl	8003514 <I2C_ITError>
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	70fb      	strb	r3, [r7, #3]
 8002da6:	4613      	mov	r3, r2
 8002da8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <I2C_Slave_ISR_IT+0x24>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0e2      	b.n	8002fdc <I2C_Slave_ISR_IT+0x1ea>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e32:	6939      	ldr	r1, [r7, #16]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f9b5 	bl	80031a4 <I2C_ITSlaveCplt>
 8002e3a:	e0ca      	b.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d04b      	beq.n	8002ede <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d046      	beq.n	8002ede <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d128      	bne.n	8002eac <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b28      	cmp	r3, #40	@ 0x28
 8002e64:	d108      	bne.n	8002e78 <I2C_Slave_ISR_IT+0x86>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e6c:	d104      	bne.n	8002e78 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e6e:	6939      	ldr	r1, [r7, #16]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fafb 	bl	800346c <I2C_ITListenCplt>
 8002e76:	e031      	b.n	8002edc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b29      	cmp	r3, #41	@ 0x29
 8002e82:	d10e      	bne.n	8002ea2 <I2C_Slave_ISR_IT+0xb0>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e8a:	d00a      	beq.n	8002ea2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2210      	movs	r2, #16
 8002e92:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fc54 	bl	8003742 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f926 	bl	80030ec <I2C_ITSlaveSeqCplt>
 8002ea0:	e01c      	b.n	8002edc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002eaa:	e08f      	b.n	8002fcc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <I2C_Slave_ISR_IT+0xdc>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ecc:	d17e      	bne.n	8002fcc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fb1d 	bl	8003514 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002eda:	e077      	b.n	8002fcc <I2C_Slave_ISR_IT+0x1da>
 8002edc:	e076      	b.n	8002fcc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d02f      	beq.n	8002f48 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d02a      	beq.n	8002f48 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d018      	beq.n	8002f2e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d14b      	bne.n	8002fd0 <I2C_Slave_ISR_IT+0x1de>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f3e:	d047      	beq.n	8002fd0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f8d3 	bl	80030ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f46:	e043      	b.n	8002fd0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d009      	beq.n	8002f66 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f5c:	6939      	ldr	r1, [r7, #16]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f840 	bl	8002fe4 <I2C_ITAddrCplt>
 8002f64:	e035      	b.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d030      	beq.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02b      	beq.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d018      	beq.n	8002fb6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002fb4:	e00d      	b.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fbc:	d002      	beq.n	8002fc4 <I2C_Slave_ISR_IT+0x1d2>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f891 	bl	80030ec <I2C_ITSlaveSeqCplt>
 8002fca:	e002      	b.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002fd0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ffa:	2b28      	cmp	r3, #40	@ 0x28
 8002ffc:	d16a      	bne.n	80030d4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	b29b      	uxth	r3, r3
 8003018:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800301c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	b29b      	uxth	r3, r3
 8003026:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800302a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003038:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d138      	bne.n	80030b4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	09db      	lsrs	r3, r3, #7
 8003046:	b29a      	uxth	r2, r3
 8003048:	89bb      	ldrh	r3, [r7, #12]
 800304a:	4053      	eors	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	f003 0306 	and.w	r3, r3, #6
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11c      	bne.n	8003090 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003056:	897b      	ldrh	r3, [r7, #10]
 8003058:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003068:	2b02      	cmp	r3, #2
 800306a:	d13b      	bne.n	80030e4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2208      	movs	r2, #8
 8003078:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003082:	89ba      	ldrh	r2, [r7, #12]
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fe86 	bl	8002d9a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800308e:	e029      	b.n	80030e4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003090:	893b      	ldrh	r3, [r7, #8]
 8003092:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003094:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fe15 	bl	8003cc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030a6:	89ba      	ldrh	r2, [r7, #12]
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fe74 	bl	8002d9a <HAL_I2C_AddrCallback>
}
 80030b2:	e017      	b.n	80030e4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fe05 	bl	8003cc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030c6:	89ba      	ldrh	r2, [r7, #12]
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fe64 	bl	8002d9a <HAL_I2C_AddrCallback>
}
 80030d2:	e007      	b.n	80030e4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2208      	movs	r2, #8
 80030da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e00c      	b.n	800313a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003138:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b29      	cmp	r3, #41	@ 0x29
 8003144:	d112      	bne.n	800316c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2228      	movs	r2, #40	@ 0x28
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2221      	movs	r2, #33	@ 0x21
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003154:	2101      	movs	r1, #1
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fdb6 	bl	8003cc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fe04 	bl	8002d72 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800316a:	e017      	b.n	800319c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b2a      	cmp	r3, #42	@ 0x2a
 8003176:	d111      	bne.n	800319c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2228      	movs	r2, #40	@ 0x28
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2222      	movs	r2, #34	@ 0x22
 8003184:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003186:	2102      	movs	r1, #2
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fd9d 	bl	8003cc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff fdf5 	bl	8002d86 <HAL_I2C_SlaveRxCpltCallback>
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2220      	movs	r2, #32
 80031ce:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031d0:	7afb      	ldrb	r3, [r7, #11]
 80031d2:	2b21      	cmp	r3, #33	@ 0x21
 80031d4:	d002      	beq.n	80031dc <I2C_ITSlaveCplt+0x38>
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	2b29      	cmp	r3, #41	@ 0x29
 80031da:	d108      	bne.n	80031ee <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80031dc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fd71 	bl	8003cc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2221      	movs	r2, #33	@ 0x21
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80031ec:	e019      	b.n	8003222 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	2b22      	cmp	r3, #34	@ 0x22
 80031f2:	d002      	beq.n	80031fa <I2C_ITSlaveCplt+0x56>
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f8:	d108      	bne.n	800320c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80031fa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fd62 	bl	8003cc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2222      	movs	r2, #34	@ 0x22
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
 800320a:	e00a      	b.n	8003222 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800320c:	7afb      	ldrb	r3, [r7, #11]
 800320e:	2b28      	cmp	r3, #40	@ 0x28
 8003210:	d107      	bne.n	8003222 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003212:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fd56 	bl	8003cc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003230:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b89      	ldr	r3, [pc, #548]	@ (8003464 <I2C_ITSlaveCplt+0x2c0>)
 800323e:	400b      	ands	r3, r1
 8003240:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa7d 	bl	8003742 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d013      	beq.n	800327a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003260:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01f      	beq.n	80032aa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003278:	e017      	b.n	80032aa <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d012      	beq.n	80032aa <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003292:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00c      	beq.n	80032f6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d049      	beq.n	80033aa <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800331c:	2b00      	cmp	r3, #0
 800331e:	d044      	beq.n	80033aa <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d128      	bne.n	800337c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b28      	cmp	r3, #40	@ 0x28
 8003334:	d108      	bne.n	8003348 <I2C_ITSlaveCplt+0x1a4>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800333c:	d104      	bne.n	8003348 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f893 	bl	800346c <I2C_ITListenCplt>
 8003346:	e030      	b.n	80033aa <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b29      	cmp	r3, #41	@ 0x29
 8003352:	d10e      	bne.n	8003372 <I2C_ITSlaveCplt+0x1ce>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800335a:	d00a      	beq.n	8003372 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2210      	movs	r2, #16
 8003362:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f9ec 	bl	8003742 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff febe 	bl	80030ec <I2C_ITSlaveSeqCplt>
 8003370:	e01b      	b.n	80033aa <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2210      	movs	r2, #16
 8003378:	61da      	str	r2, [r3, #28]
 800337a:	e016      	b.n	80033aa <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2210      	movs	r2, #16
 8003382:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <I2C_ITSlaveCplt+0x1fa>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800339c:	d105      	bne.n	80033aa <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f8b5 	bl	8003514 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8a4 	bl	8003514 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b28      	cmp	r3, #40	@ 0x28
 80033d6:	d141      	bne.n	800345c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80033d8:	6979      	ldr	r1, [r7, #20]
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f846 	bl	800346c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033e0:	e03c      	b.n	800345c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033ea:	d014      	beq.n	8003416 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff fe7d 	bl	80030ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <I2C_ITSlaveCplt+0x2c4>)
 80033f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fcd1 	bl	8002db6 <HAL_I2C_ListenCpltCallback>
}
 8003414:	e022      	b.n	800345c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b22      	cmp	r3, #34	@ 0x22
 8003420:	d10e      	bne.n	8003440 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fca4 	bl	8002d86 <HAL_I2C_SlaveRxCpltCallback>
}
 800343e:	e00d      	b.n	800345c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fc8b 	bl	8002d72 <HAL_I2C_SlaveTxCpltCallback>
}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	fe00e800 	.word	0xfe00e800
 8003468:	ffff0000 	.word	0xffff0000

0800346c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a25      	ldr	r2, [pc, #148]	@ (8003510 <I2C_ITListenCplt+0xa4>)
 800347a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d022      	beq.n	80034e8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034e8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fbeb 	bl	8003cc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2210      	movs	r2, #16
 80034f8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fc57 	bl	8002db6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	ffff0000 	.word	0xffff0000

08003514 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003524:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a6d      	ldr	r2, [pc, #436]	@ (80036e8 <I2C_ITError+0x1d4>)
 8003532:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b28      	cmp	r3, #40	@ 0x28
 800354a:	d005      	beq.n	8003558 <I2C_ITError+0x44>
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b29      	cmp	r3, #41	@ 0x29
 8003550:	d002      	beq.n	8003558 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b2a      	cmp	r3, #42	@ 0x2a
 8003556:	d10b      	bne.n	8003570 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003558:	2103      	movs	r1, #3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fbb4 	bl	8003cc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2228      	movs	r2, #40	@ 0x28
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a60      	ldr	r2, [pc, #384]	@ (80036ec <I2C_ITError+0x1d8>)
 800356c:	635a      	str	r2, [r3, #52]	@ 0x34
 800356e:	e030      	b.n	80035d2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003570:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fba7 	bl	8003cc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f8e1 	bl	8003742 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b60      	cmp	r3, #96	@ 0x60
 800358a:	d01f      	beq.n	80035cc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d114      	bne.n	80035cc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d109      	bne.n	80035c4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2210      	movs	r2, #16
 80035b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d039      	beq.n	8003654 <I2C_ITError+0x140>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b11      	cmp	r3, #17
 80035e4:	d002      	beq.n	80035ec <I2C_ITError+0xd8>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b21      	cmp	r3, #33	@ 0x21
 80035ea:	d133      	bne.n	8003654 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035fa:	d107      	bne.n	800360c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800360a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	4618      	mov	r0, r3
 8003612:	f7fe fdd1 	bl	80021b8 <HAL_DMA_GetState>
 8003616:	4603      	mov	r3, r0
 8003618:	2b01      	cmp	r3, #1
 800361a:	d017      	beq.n	800364c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	4a33      	ldr	r2, [pc, #204]	@ (80036f0 <I2C_ITError+0x1dc>)
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fd80 	bl	8002136 <HAL_DMA_Abort_IT>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d04d      	beq.n	80036d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003646:	4610      	mov	r0, r2
 8003648:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800364a:	e045      	b.n	80036d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f851 	bl	80036f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003652:	e041      	b.n	80036d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d039      	beq.n	80036d0 <I2C_ITError+0x1bc>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b12      	cmp	r3, #18
 8003660:	d002      	beq.n	8003668 <I2C_ITError+0x154>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b22      	cmp	r3, #34	@ 0x22
 8003666:	d133      	bne.n	80036d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003676:	d107      	bne.n	8003688 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003686:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fd93 	bl	80021b8 <HAL_DMA_GetState>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d017      	beq.n	80036c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	4a14      	ldr	r2, [pc, #80]	@ (80036f0 <I2C_ITError+0x1dc>)
 800369e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe fd42 	bl	8002136 <HAL_DMA_Abort_IT>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d011      	beq.n	80036dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036c2:	4610      	mov	r0, r2
 80036c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036c6:	e009      	b.n	80036dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f813 	bl	80036f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036ce:	e005      	b.n	80036dc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f80f 	bl	80036f4 <I2C_TreatErrorCallback>
  }
}
 80036d6:	e002      	b.n	80036de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036dc:	bf00      	nop
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	ffff0000 	.word	0xffff0000
 80036ec:	08002df3 	.word	0x08002df3
 80036f0:	0800378b 	.word	0x0800378b

080036f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b60      	cmp	r3, #96	@ 0x60
 8003706:	d10e      	bne.n	8003726 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff fb5d 	bl	8002dde <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003724:	e009      	b.n	800373a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fb48 	bl	8002dca <HAL_I2C_ErrorCallback>
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d103      	bne.n	8003760 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d007      	beq.n	800377e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699a      	ldr	r2, [r3, #24]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	619a      	str	r2, [r3, #24]
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a4:	2200      	movs	r2, #0
 80037a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	2200      	movs	r2, #0
 80037b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff9b 	bl	80036f4 <I2C_TreatErrorCallback>
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d6:	e03b      	b.n	8003850 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	6839      	ldr	r1, [r7, #0]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f961 	bl	8003aa4 <I2C_IsErrorOccurred>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e041      	b.n	8003870 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d02d      	beq.n	8003850 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7fd fe30 	bl	8001458 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d122      	bne.n	8003850 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	429a      	cmp	r2, r3
 8003826:	d113      	bne.n	8003850 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e00f      	b.n	8003870 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	429a      	cmp	r2, r3
 800386c:	d0b4      	beq.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003884:	e033      	b.n	80038ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f90a 	bl	8003aa4 <I2C_IsErrorOccurred>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e031      	b.n	80038fe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d025      	beq.n	80038ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fd fdd9 	bl	8001458 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11a      	bne.n	80038ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d013      	beq.n	80038ee <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e007      	b.n	80038fe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d1c4      	bne.n	8003886 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003912:	e02f      	b.n	8003974 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f8c3 	bl	8003aa4 <I2C_IsErrorOccurred>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e02d      	b.n	8003984 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003928:	f7fd fd96 	bl	8001458 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	429a      	cmp	r2, r3
 8003936:	d302      	bcc.n	800393e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11a      	bne.n	8003974 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d013      	beq.n	8003974 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e007      	b.n	8003984 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b20      	cmp	r3, #32
 8003980:	d1c8      	bne.n	8003914 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800399c:	e071      	b.n	8003a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f87e 	bl	8003aa4 <I2C_IsErrorOccurred>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d13b      	bne.n	8003a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d138      	bne.n	8003a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d105      	bne.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b10      	cmp	r3, #16
 80039ec:	d121      	bne.n	8003a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2210      	movs	r2, #16
 80039f4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2204      	movs	r2, #4
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2220      	movs	r2, #32
 8003a02:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4b24      	ldr	r3, [pc, #144]	@ (8003aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003a10:	400b      	ands	r3, r1
 8003a12:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
 8003a30:	e002      	b.n	8003a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003a38:	f7fd fd0e 	bl	8001458 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d302      	bcc.n	8003a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d119      	bne.n	8003a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d00f      	beq.n	8003a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f043 0220 	orr.w	r2, r3, #32
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d002      	beq.n	8003a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d083      	beq.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	@ 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d068      	beq.n	8003ba2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2210      	movs	r2, #16
 8003ad6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ad8:	e049      	b.n	8003b6e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d045      	beq.n	8003b6e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7fd fcb9 	bl	8001458 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <I2C_IsErrorOccurred+0x54>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d13a      	bne.n	8003b6e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b1a:	d121      	bne.n	8003b60 <I2C_IsErrorOccurred+0xbc>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b22:	d01d      	beq.n	8003b60 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d01a      	beq.n	8003b60 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b3a:	f7fd fc8d 	bl	8001458 <HAL_GetTick>
 8003b3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b40:	e00e      	b.n	8003b60 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003b42:	f7fd fc89 	bl	8001458 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b19      	cmp	r3, #25
 8003b4e:	d907      	bls.n	8003b60 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f043 0320 	orr.w	r3, r3, #32
 8003b56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003b5e:	e006      	b.n	8003b6e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d1e9      	bne.n	8003b42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d003      	beq.n	8003b84 <I2C_IsErrorOccurred+0xe0>
 8003b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0aa      	beq.n	8003ada <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d103      	bne.n	8003b94 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2220      	movs	r2, #32
 8003b92:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f043 0308 	orr.w	r3, r3, #8
 8003bdc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003be6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00b      	beq.n	8003c10 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	f043 0302 	orr.w	r3, r3, #2
 8003bfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01c      	beq.n	8003c52 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fd92 	bl	8003742 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <I2C_IsErrorOccurred+0x1bc>)
 8003c2a:	400b      	ands	r3, r1
 8003c2c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003c52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3728      	adds	r7, #40	@ 0x28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	fe00e800 	.word	0xfe00e800

08003c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	4613      	mov	r3, r2
 8003c74:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c76:	897b      	ldrh	r3, [r7, #10]
 8003c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c7c:	7a7b      	ldrb	r3, [r7, #9]
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c84:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c92:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	0d5b      	lsrs	r3, r3, #21
 8003c9e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ca2:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <I2C_TransferConfig+0x60>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	ea02 0103 	and.w	r1, r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	03ff63ff 	.word	0x03ff63ff

08003cc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cd8:	887b      	ldrh	r3, [r7, #2]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00f      	beq.n	8003d02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003ce8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cf6:	2b28      	cmp	r3, #40	@ 0x28
 8003cf8:	d003      	beq.n	8003d02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003d00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d02:	887b      	ldrh	r3, [r7, #2]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003d12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d20:	2b28      	cmp	r3, #40	@ 0x28
 8003d22:	d003      	beq.n	8003d2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003d2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da03      	bge.n	8003d3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003d3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d3c:	887b      	ldrh	r3, [r7, #2]
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d103      	bne.n	8003d4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d103      	bne.n	8003d58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f043 0320 	orr.w	r3, r3, #32
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d103      	bne.n	8003d66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	400a      	ands	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d138      	bne.n	8003e0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e032      	b.n	8003e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	@ 0x24
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6819      	ldr	r1, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d139      	bne.n	8003ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e033      	b.n	8003ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2224      	movs	r2, #36	@ 0x24
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003eb8:	4b04      	ldr	r3, [pc, #16]	@ (8003ecc <HAL_PWREx_GetVoltageRange+0x18>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40007000 	.word	0x40007000

08003ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ede:	d130      	bne.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ee0:	4b23      	ldr	r3, [pc, #140]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eec:	d038      	beq.n	8003f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eee:	4b20      	ldr	r3, [pc, #128]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2232      	movs	r2, #50	@ 0x32
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	4a1b      	ldr	r2, [pc, #108]	@ (8003f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0c9b      	lsrs	r3, r3, #18
 8003f10:	3301      	adds	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f14:	e002      	b.n	8003f1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f1c:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f28:	d102      	bne.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f2      	bne.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f30:	4b0f      	ldr	r3, [pc, #60]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3c:	d110      	bne.n	8003f60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e00f      	b.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f42:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d007      	beq.n	8003f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f50:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f58:	4a05      	ldr	r2, [pc, #20]	@ (8003f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40007000 	.word	0x40007000
 8003f74:	20000000 	.word	0x20000000
 8003f78:	431bde83 	.word	0x431bde83

08003f7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f000 bc02 	b.w	8004794 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f90:	4b96      	ldr	r3, [pc, #600]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f9a:	4b94      	ldr	r3, [pc, #592]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80e4 	beq.w	800417a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x4c>
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b0c      	cmp	r3, #12
 8003fbc:	f040 808b 	bne.w	80040d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 8087 	bne.w	80040d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc8:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x64>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e3d9      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	4b81      	ldr	r3, [pc, #516]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_RCC_OscConfig+0x7e>
 8003ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ff8:	e005      	b.n	8004006 <HAL_RCC_OscConfig+0x8a>
 8003ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8003ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004006:	4293      	cmp	r3, r2
 8004008:	d223      	bcs.n	8004052 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fd54 	bl	8004abc <RCC_SetFlashLatencyFromMSIRange>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e3ba      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800401e:	4b73      	ldr	r3, [pc, #460]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a72      	ldr	r2, [pc, #456]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004024:	f043 0308 	orr.w	r3, r3, #8
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b70      	ldr	r3, [pc, #448]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	496d      	ldr	r1, [pc, #436]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800403c:	4b6b      	ldr	r3, [pc, #428]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	4968      	ldr	r1, [pc, #416]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	e025      	b.n	800409e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004052:	4b66      	ldr	r3, [pc, #408]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a65      	ldr	r2, [pc, #404]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004058:	f043 0308 	orr.w	r3, r3, #8
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b63      	ldr	r3, [pc, #396]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4960      	ldr	r1, [pc, #384]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800406c:	4313      	orrs	r3, r2
 800406e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004070:	4b5e      	ldr	r3, [pc, #376]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	495b      	ldr	r1, [pc, #364]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fd14 	bl	8004abc <RCC_SetFlashLatencyFromMSIRange>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e37a      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800409e:	f000 fc81 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4b51      	ldr	r3, [pc, #324]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	4950      	ldr	r1, [pc, #320]	@ (80041f0 <HAL_RCC_OscConfig+0x274>)
 80040b0:	5ccb      	ldrb	r3, [r1, r3]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a4e      	ldr	r2, [pc, #312]	@ (80041f4 <HAL_RCC_OscConfig+0x278>)
 80040bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040be:	4b4e      	ldr	r3, [pc, #312]	@ (80041f8 <HAL_RCC_OscConfig+0x27c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd f978 	bl	80013b8 <HAL_InitTick>
 80040c8:	4603      	mov	r3, r0
 80040ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d052      	beq.n	8004178 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	e35e      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d032      	beq.n	8004144 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040de:	4b43      	ldr	r3, [pc, #268]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a42      	ldr	r2, [pc, #264]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ea:	f7fd f9b5 	bl	8001458 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040f2:	f7fd f9b1 	bl	8001458 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e347      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004104:	4b39      	ldr	r3, [pc, #228]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004110:	4b36      	ldr	r3, [pc, #216]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a35      	ldr	r2, [pc, #212]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004116:	f043 0308 	orr.w	r3, r3, #8
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b33      	ldr	r3, [pc, #204]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	4930      	ldr	r1, [pc, #192]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800412e:	4b2f      	ldr	r3, [pc, #188]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	492b      	ldr	r1, [pc, #172]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
 8004142:	e01a      	b.n	800417a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004144:	4b29      	ldr	r3, [pc, #164]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a28      	ldr	r2, [pc, #160]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004150:	f7fd f982 	bl	8001458 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004158:	f7fd f97e 	bl	8001458 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e314      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800416a:	4b20      	ldr	r3, [pc, #128]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x1dc>
 8004176:	e000      	b.n	800417a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d073      	beq.n	800426e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d005      	beq.n	8004198 <HAL_RCC_OscConfig+0x21c>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b0c      	cmp	r3, #12
 8004190:	d10e      	bne.n	80041b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d10b      	bne.n	80041b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004198:	4b14      	ldr	r3, [pc, #80]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d063      	beq.n	800426c <HAL_RCC_OscConfig+0x2f0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d15f      	bne.n	800426c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e2f1      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b8:	d106      	bne.n	80041c8 <HAL_RCC_OscConfig+0x24c>
 80041ba:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a0b      	ldr	r2, [pc, #44]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e025      	b.n	8004214 <HAL_RCC_OscConfig+0x298>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041d0:	d114      	bne.n	80041fc <HAL_RCC_OscConfig+0x280>
 80041d2:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a05      	ldr	r2, [pc, #20]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80041d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a02      	ldr	r2, [pc, #8]	@ (80041ec <HAL_RCC_OscConfig+0x270>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e013      	b.n	8004214 <HAL_RCC_OscConfig+0x298>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	080053a0 	.word	0x080053a0
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000004 	.word	0x20000004
 80041fc:	4ba0      	ldr	r3, [pc, #640]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a9f      	ldr	r2, [pc, #636]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b9d      	ldr	r3, [pc, #628]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a9c      	ldr	r2, [pc, #624]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421c:	f7fd f91c 	bl	8001458 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7fd f918 	bl	8001458 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e2ae      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004236:	4b92      	ldr	r3, [pc, #584]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x2a8>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd f908 	bl	8001458 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fd f904 	bl	8001458 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	@ 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e29a      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800425e:	4b88      	ldr	r3, [pc, #544]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x2d0>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d060      	beq.n	800433c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d005      	beq.n	800428c <HAL_RCC_OscConfig+0x310>
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d119      	bne.n	80042ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d116      	bne.n	80042ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428c:	4b7c      	ldr	r3, [pc, #496]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_OscConfig+0x328>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e277      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b76      	ldr	r3, [pc, #472]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	4973      	ldr	r1, [pc, #460]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b8:	e040      	b.n	800433c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d023      	beq.n	800430a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ce:	f7fd f8c3 	bl	8001458 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d6:	f7fd f8bf 	bl	8001458 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e255      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e8:	4b65      	ldr	r3, [pc, #404]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b62      	ldr	r3, [pc, #392]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	495f      	ldr	r1, [pc, #380]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
 8004308:	e018      	b.n	800433c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a5c      	ldr	r2, [pc, #368]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fd f89f 	bl	8001458 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431e:	f7fd f89b 	bl	8001458 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e231      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004330:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d03c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01c      	beq.n	800438a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004350:	4b4b      	ldr	r3, [pc, #300]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004356:	4a4a      	ldr	r2, [pc, #296]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fd f87a 	bl	8001458 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004368:	f7fd f876 	bl	8001458 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e20c      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800437a:	4b41      	ldr	r3, [pc, #260]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ef      	beq.n	8004368 <HAL_RCC_OscConfig+0x3ec>
 8004388:	e01b      	b.n	80043c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438a:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800438c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fd f85d 	bl	8001458 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fd f859 	bl	8001458 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1ef      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043b4:	4b32      	ldr	r3, [pc, #200]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1ef      	bne.n	80043a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80a6 	beq.w	800451c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10d      	bne.n	80043fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b27      	ldr	r3, [pc, #156]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	4a26      	ldr	r2, [pc, #152]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ec:	4b24      	ldr	r3, [pc, #144]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043f8:	2301      	movs	r3, #1
 80043fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fc:	4b21      	ldr	r3, [pc, #132]	@ (8004484 <HAL_RCC_OscConfig+0x508>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d118      	bne.n	800443a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004408:	4b1e      	ldr	r3, [pc, #120]	@ (8004484 <HAL_RCC_OscConfig+0x508>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1d      	ldr	r2, [pc, #116]	@ (8004484 <HAL_RCC_OscConfig+0x508>)
 800440e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004414:	f7fd f820 	bl	8001458 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441c:	f7fd f81c 	bl	8001458 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1b2      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800442e:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <HAL_RCC_OscConfig+0x508>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d108      	bne.n	8004454 <HAL_RCC_OscConfig+0x4d8>
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004448:	4a0d      	ldr	r2, [pc, #52]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004452:	e029      	b.n	80044a8 <HAL_RCC_OscConfig+0x52c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b05      	cmp	r3, #5
 800445a:	d115      	bne.n	8004488 <HAL_RCC_OscConfig+0x50c>
 800445c:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800445e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004462:	4a07      	ldr	r2, [pc, #28]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800446c:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	4a03      	ldr	r2, [pc, #12]	@ (8004480 <HAL_RCC_OscConfig+0x504>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800447c:	e014      	b.n	80044a8 <HAL_RCC_OscConfig+0x52c>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40007000 	.word	0x40007000
 8004488:	4b9a      	ldr	r3, [pc, #616]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448e:	4a99      	ldr	r2, [pc, #612]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004498:	4b96      	ldr	r3, [pc, #600]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	4a95      	ldr	r2, [pc, #596]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d016      	beq.n	80044de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fc ffd2 	bl	8001458 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fc ffce 	bl	8001458 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e162      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	4b89      	ldr	r3, [pc, #548]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ed      	beq.n	80044b8 <HAL_RCC_OscConfig+0x53c>
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044de:	f7fc ffbb 	bl	8001458 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7fc ffb7 	bl	8001458 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e14b      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044fc:	4b7d      	ldr	r3, [pc, #500]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ed      	bne.n	80044e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450a:	7ffb      	ldrb	r3, [r7, #31]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004510:	4b78      	ldr	r3, [pc, #480]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	4a77      	ldr	r2, [pc, #476]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d03c      	beq.n	80045a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01c      	beq.n	800456a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004530:	4b70      	ldr	r3, [pc, #448]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004536:	4a6f      	ldr	r2, [pc, #444]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004540:	f7fc ff8a 	bl	8001458 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004548:	f7fc ff86 	bl	8001458 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e11c      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455a:	4b66      	ldr	r3, [pc, #408]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 800455c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ef      	beq.n	8004548 <HAL_RCC_OscConfig+0x5cc>
 8004568:	e01b      	b.n	80045a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800456a:	4b62      	ldr	r3, [pc, #392]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 800456c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004570:	4a60      	ldr	r2, [pc, #384]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fc ff6d 	bl	8001458 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004582:	f7fc ff69 	bl	8001458 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e0ff      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004594:	4b57      	ldr	r3, [pc, #348]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ef      	bne.n	8004582 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80f3 	beq.w	8004792 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f040 80c9 	bne.w	8004748 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045b6:	4b4f      	ldr	r3, [pc, #316]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0203 	and.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d12c      	bne.n	8004624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d4:	3b01      	subs	r3, #1
 80045d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d123      	bne.n	8004624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d11b      	bne.n	8004624 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d113      	bne.n	8004624 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	3b01      	subs	r3, #1
 800460a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d109      	bne.n	8004624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	3b01      	subs	r3, #1
 800461e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d06b      	beq.n	80046fc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d062      	beq.n	80046f0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800462a:	4b32      	ldr	r3, [pc, #200]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0ac      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800463a:	4b2e      	ldr	r3, [pc, #184]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2d      	ldr	r2, [pc, #180]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004640:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004644:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004646:	f7fc ff07 	bl	8001458 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fc ff03 	bl	8001458 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e099      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	4b24      	ldr	r3, [pc, #144]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800466c:	4b21      	ldr	r3, [pc, #132]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	4b21      	ldr	r3, [pc, #132]	@ (80046f8 <HAL_RCC_OscConfig+0x77c>)
 8004672:	4013      	ands	r3, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800467c:	3a01      	subs	r2, #1
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004686:	0212      	lsls	r2, r2, #8
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0552      	lsls	r2, r2, #21
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800469a:	0852      	lsrs	r2, r2, #1
 800469c:	3a01      	subs	r2, #1
 800469e:	0652      	lsls	r2, r2, #25
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046a6:	06d2      	lsls	r2, r2, #27
 80046a8:	430a      	orrs	r2, r1
 80046aa:	4912      	ldr	r1, [pc, #72]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046b0:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0f      	ldr	r2, [pc, #60]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046bc:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80046c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c8:	f7fc fec6 	bl	8001458 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fc fec2 	bl	8001458 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e058      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e2:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <HAL_RCC_OscConfig+0x778>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046ee:	e050      	b.n	8004792 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04f      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
 80046f4:	40021000 	.word	0x40021000
 80046f8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fc:	4b27      	ldr	r3, [pc, #156]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d144      	bne.n	8004792 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004708:	4b24      	ldr	r3, [pc, #144]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a23      	ldr	r2, [pc, #140]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 800470e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004714:	4b21      	ldr	r3, [pc, #132]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a20      	ldr	r2, [pc, #128]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800471e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004720:	f7fc fe9a 	bl	8001458 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fc fe96 	bl	8001458 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e02c      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	4b18      	ldr	r3, [pc, #96]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x7ac>
 8004746:	e024      	b.n	8004792 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d01f      	beq.n	800478e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474e:	4b13      	ldr	r3, [pc, #76]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a12      	ldr	r2, [pc, #72]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 8004754:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fc fe7d 	bl	8001458 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004762:	f7fc fe79 	bl	8001458 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e00f      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004780:	4b06      	ldr	r3, [pc, #24]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	4905      	ldr	r1, [pc, #20]	@ (800479c <HAL_RCC_OscConfig+0x820>)
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_OscConfig+0x824>)
 8004788:	4013      	ands	r3, r2
 800478a:	60cb      	str	r3, [r1, #12]
 800478c:	e001      	b.n	8004792 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40021000 	.word	0x40021000
 80047a0:	feeefffc 	.word	0xfeeefffc

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0e7      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b75      	ldr	r3, [pc, #468]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b72      	ldr	r3, [pc, #456]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4970      	ldr	r1, [pc, #448]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0cf      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	4b66      	ldr	r3, [pc, #408]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004800:	429a      	cmp	r2, r3
 8004802:	d908      	bls.n	8004816 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b63      	ldr	r3, [pc, #396]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4960      	ldr	r1, [pc, #384]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d04c      	beq.n	80048bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b03      	cmp	r3, #3
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482a:	4b5a      	ldr	r3, [pc, #360]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d121      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e0a6      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004842:	4b54      	ldr	r3, [pc, #336]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d115      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e09a      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d107      	bne.n	800486a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800485a:	4b4e      	ldr	r3, [pc, #312]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e08e      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800486a:	4b4a      	ldr	r3, [pc, #296]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e086      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800487a:	4b46      	ldr	r3, [pc, #280]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	4943      	ldr	r1, [pc, #268]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004888:	4313      	orrs	r3, r2
 800488a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488c:	f7fc fde4 	bl	8001458 <HAL_GetTick>
 8004890:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004892:	e00a      	b.n	80048aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004894:	f7fc fde0 	bl	8001458 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e06e      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 020c 	and.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d1eb      	bne.n	8004894 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d010      	beq.n	80048ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b31      	ldr	r3, [pc, #196]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d208      	bcs.n	80048ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	492b      	ldr	r1, [pc, #172]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ea:	4b29      	ldr	r3, [pc, #164]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d210      	bcs.n	800491a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f8:	4b25      	ldr	r3, [pc, #148]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f023 0207 	bic.w	r2, r3, #7
 8004900:	4923      	ldr	r1, [pc, #140]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004908:	4b21      	ldr	r3, [pc, #132]	@ (8004990 <HAL_RCC_ClockConfig+0x1ec>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d001      	beq.n	800491a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e036      	b.n	8004988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004926:	4b1b      	ldr	r3, [pc, #108]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4918      	ldr	r1, [pc, #96]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d009      	beq.n	8004958 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004944:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4910      	ldr	r1, [pc, #64]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004958:	f000 f824 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 800495c:	4602      	mov	r2, r0
 800495e:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <HAL_RCC_ClockConfig+0x1f0>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	490b      	ldr	r1, [pc, #44]	@ (8004998 <HAL_RCC_ClockConfig+0x1f4>)
 800496a:	5ccb      	ldrb	r3, [r1, r3]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	4a09      	ldr	r2, [pc, #36]	@ (800499c <HAL_RCC_ClockConfig+0x1f8>)
 8004976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004978:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <HAL_RCC_ClockConfig+0x1fc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fc fd1b 	bl	80013b8 <HAL_InitTick>
 8004982:	4603      	mov	r3, r0
 8004984:	72fb      	strb	r3, [r7, #11]

  return status;
 8004986:	7afb      	ldrb	r3, [r7, #11]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40022000 	.word	0x40022000
 8004994:	40021000 	.word	0x40021000
 8004998:	080053a0 	.word	0x080053a0
 800499c:	20000000 	.word	0x20000000
 80049a0:	20000004 	.word	0x20000004

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b089      	sub	sp, #36	@ 0x24
 80049a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b2:	4b3e      	ldr	r3, [pc, #248]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049bc:	4b3b      	ldr	r3, [pc, #236]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x34>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d121      	bne.n	8004a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11e      	bne.n	8004a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049d8:	4b34      	ldr	r3, [pc, #208]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d107      	bne.n	80049f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049e4:	4b31      	ldr	r3, [pc, #196]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e005      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049f4:	4b2d      	ldr	r3, [pc, #180]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a00:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10d      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d102      	bne.n	8004a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a1c:	4b25      	ldr	r3, [pc, #148]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	e004      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a28:	4b23      	ldr	r3, [pc, #140]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	d134      	bne.n	8004a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a32:	4b1e      	ldr	r3, [pc, #120]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d003      	beq.n	8004a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d003      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0xac>
 8004a48:	e005      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a4c:	617b      	str	r3, [r7, #20]
      break;
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a50:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a52:	617b      	str	r3, [r7, #20]
      break;
 8004a54:	e002      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	617b      	str	r3, [r7, #20]
      break;
 8004a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a5c:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	3301      	adds	r3, #1
 8004a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a6a:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	0a1b      	lsrs	r3, r3, #8
 8004a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	fb03 f202 	mul.w	r2, r3, r2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a82:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x108>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	0e5b      	lsrs	r3, r3, #25
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3724      	adds	r7, #36	@ 0x24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	080053b0 	.word	0x080053b0
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	007a1200 	.word	0x007a1200

08004abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ad4:	f7ff f9ee 	bl	8003eb4 <HAL_PWREx_GetVoltageRange>
 8004ad8:	6178      	str	r0, [r7, #20]
 8004ada:	e014      	b.n	8004b06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004adc:	4b25      	ldr	r3, [pc, #148]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae0:	4a24      	ldr	r2, [pc, #144]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae8:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004af4:	f7ff f9de 	bl	8003eb4 <HAL_PWREx_GetVoltageRange>
 8004af8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b1e      	ldr	r3, [pc, #120]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afe:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0c:	d10b      	bne.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b80      	cmp	r3, #128	@ 0x80
 8004b12:	d919      	bls.n	8004b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b18:	d902      	bls.n	8004b20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e013      	b.n	8004b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b20:	2301      	movs	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	e010      	b.n	8004b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b80      	cmp	r3, #128	@ 0x80
 8004b2a:	d902      	bls.n	8004b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	e00a      	b.n	8004b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b80      	cmp	r3, #128	@ 0x80
 8004b36:	d102      	bne.n	8004b3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b38:	2302      	movs	r3, #2
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	e004      	b.n	8004b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b70      	cmp	r3, #112	@ 0x70
 8004b42:	d101      	bne.n	8004b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b44:	2301      	movs	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b48:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 0207 	bic.w	r2, r3, #7
 8004b50:	4909      	ldr	r1, [pc, #36]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b58:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40022000 	.word	0x40022000

08004b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b84:	2300      	movs	r3, #0
 8004b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d031      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ba0:	d01a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004ba2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ba6:	d814      	bhi.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004bac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bbe:	e00c      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa22 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bd0:	e003      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8004bd6:	e000      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be0:	4b51      	ldr	r3, [pc, #324]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bee:	494e      	ldr	r1, [pc, #312]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004bf6:	e001      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	7cfb      	ldrb	r3, [r7, #19]
 8004bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 809e 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c0e:	4b46      	ldr	r3, [pc, #280]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00d      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c24:	4b40      	ldr	r3, [pc, #256]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c28:	4a3f      	ldr	r2, [pc, #252]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c30:	4b3d      	ldr	r3, [pc, #244]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c40:	4b3a      	ldr	r3, [pc, #232]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a39      	ldr	r2, [pc, #228]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c4c:	f7fc fc04 	bl	8001458 <HAL_GetTick>
 8004c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fc fc00 	bl	8001458 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d902      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	74fb      	strb	r3, [r7, #19]
        break;
 8004c66:	e005      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c68:	4b30      	ldr	r3, [pc, #192]	@ (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d15a      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01e      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d019      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c96:	4b24      	ldr	r3, [pc, #144]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ca2:	4b21      	ldr	r3, [pc, #132]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cc2:	4a19      	ldr	r2, [pc, #100]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d016      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fc fbc0 	bl	8001458 <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cdc:	f7fc fbbc 	bl	8001458 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d902      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	74fb      	strb	r3, [r7, #19]
            break;
 8004cf2:	e006      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ec      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d08:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d16:	4904      	ldr	r1, [pc, #16]	@ (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d1e:	e009      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d34:	7c7b      	ldrb	r3, [r7, #17]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3e:	4a8c      	ldr	r2, [pc, #560]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d52:	4b87      	ldr	r3, [pc, #540]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d58:	f023 0203 	bic.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4983      	ldr	r1, [pc, #524]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d74:	4b7e      	ldr	r3, [pc, #504]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7a:	f023 020c 	bic.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	497b      	ldr	r1, [pc, #492]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d96:	4b76      	ldr	r3, [pc, #472]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	4972      	ldr	r1, [pc, #456]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004db8:	4b6d      	ldr	r3, [pc, #436]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	496a      	ldr	r1, [pc, #424]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dda:	4b65      	ldr	r3, [pc, #404]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de8:	4961      	ldr	r1, [pc, #388]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	4959      	ldr	r1, [pc, #356]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e1e:	4b54      	ldr	r3, [pc, #336]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	4950      	ldr	r1, [pc, #320]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e40:	4b4b      	ldr	r3, [pc, #300]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4e:	4948      	ldr	r1, [pc, #288]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e62:	4b43      	ldr	r3, [pc, #268]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	493f      	ldr	r1, [pc, #252]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d028      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e84:	4b3a      	ldr	r3, [pc, #232]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e92:	4937      	ldr	r1, [pc, #220]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea4:	4b32      	ldr	r3, [pc, #200]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4a31      	ldr	r2, [pc, #196]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eae:	60d3      	str	r3, [r2, #12]
 8004eb0:	e011      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eba:	d10c      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f8a4 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ecc:	7cfb      	ldrb	r3, [r7, #19]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d028      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ee2:	4b23      	ldr	r3, [pc, #140]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef0:	491f      	ldr	r1, [pc, #124]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f00:	d106      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f02:	4b1b      	ldr	r3, [pc, #108]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	4a1a      	ldr	r2, [pc, #104]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f0c:	60d3      	str	r3, [r2, #12]
 8004f0e:	e011      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f875 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d02b      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4e:	4908      	ldr	r1, [pc, #32]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f5e:	d109      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f60:	4b03      	ldr	r3, [pc, #12]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4a02      	ldr	r2, [pc, #8]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f6a:	60d3      	str	r3, [r2, #12]
 8004f6c:	e014      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f6e:	bf00      	nop
 8004f70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2101      	movs	r1, #1
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 f843 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f8e:	7cfb      	ldrb	r3, [r7, #19]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01c      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fa4:	4b19      	ldr	r3, [pc, #100]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb2:	4916      	ldr	r1, [pc, #88]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fc2:	d10c      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	2102      	movs	r1, #2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f820 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004fda:	7cfb      	ldrb	r3, [r7, #19]
 8004fdc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fea:	4b08      	ldr	r3, [pc, #32]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff8:	4904      	ldr	r1, [pc, #16]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005000:	7cbb      	ldrb	r3, [r7, #18]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000

08005010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800501e:	4b74      	ldr	r3, [pc, #464]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800502a:	4b71      	ldr	r3, [pc, #452]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0203 	and.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d10d      	bne.n	8005056 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
       ||
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005042:	4b6b      	ldr	r3, [pc, #428]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
       ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d047      	beq.n	80050e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
 800505a:	e044      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d018      	beq.n	8005096 <RCCEx_PLLSAI1_Config+0x86>
 8005064:	2b03      	cmp	r3, #3
 8005066:	d825      	bhi.n	80050b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005068:	2b01      	cmp	r3, #1
 800506a:	d002      	beq.n	8005072 <RCCEx_PLLSAI1_Config+0x62>
 800506c:	2b02      	cmp	r3, #2
 800506e:	d009      	beq.n	8005084 <RCCEx_PLLSAI1_Config+0x74>
 8005070:	e020      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005072:	4b5f      	ldr	r3, [pc, #380]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d11d      	bne.n	80050ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005082:	e01a      	b.n	80050ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005084:	4b5a      	ldr	r3, [pc, #360]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800508c:	2b00      	cmp	r3, #0
 800508e:	d116      	bne.n	80050be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005094:	e013      	b.n	80050be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005096:	4b56      	ldr	r3, [pc, #344]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050a2:	4b53      	ldr	r3, [pc, #332]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050b2:	e006      	b.n	80050c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	e004      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ca:	4b49      	ldr	r3, [pc, #292]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	430b      	orrs	r3, r1
 80050e0:	4943      	ldr	r1, [pc, #268]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d17c      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050ec:	4b40      	ldr	r3, [pc, #256]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3f      	ldr	r2, [pc, #252]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f8:	f7fc f9ae 	bl	8001458 <HAL_GetTick>
 80050fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050fe:	e009      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005100:	f7fc f9aa 	bl	8001458 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d902      	bls.n	8005114 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	73fb      	strb	r3, [r7, #15]
        break;
 8005112:	e005      	b.n	8005120 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005114:	4b36      	ldr	r3, [pc, #216]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ef      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d15f      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d110      	bne.n	800514e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800512c:	4b30      	ldr	r3, [pc, #192]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005134:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	0211      	lsls	r1, r2, #8
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68d2      	ldr	r2, [r2, #12]
 8005142:	06d2      	lsls	r2, r2, #27
 8005144:	430a      	orrs	r2, r1
 8005146:	492a      	ldr	r1, [pc, #168]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005148:	4313      	orrs	r3, r2
 800514a:	610b      	str	r3, [r1, #16]
 800514c:	e027      	b.n	800519e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d112      	bne.n	800517a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005154:	4b26      	ldr	r3, [pc, #152]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800515c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	0211      	lsls	r1, r2, #8
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6912      	ldr	r2, [r2, #16]
 800516a:	0852      	lsrs	r2, r2, #1
 800516c:	3a01      	subs	r2, #1
 800516e:	0552      	lsls	r2, r2, #21
 8005170:	430a      	orrs	r2, r1
 8005172:	491f      	ldr	r1, [pc, #124]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005174:	4313      	orrs	r3, r2
 8005176:	610b      	str	r3, [r1, #16]
 8005178:	e011      	b.n	800519e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800517a:	4b1d      	ldr	r3, [pc, #116]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005182:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6892      	ldr	r2, [r2, #8]
 800518a:	0211      	lsls	r1, r2, #8
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6952      	ldr	r2, [r2, #20]
 8005190:	0852      	lsrs	r2, r2, #1
 8005192:	3a01      	subs	r2, #1
 8005194:	0652      	lsls	r2, r2, #25
 8005196:	430a      	orrs	r2, r1
 8005198:	4915      	ldr	r1, [pc, #84]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800519a:	4313      	orrs	r3, r2
 800519c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800519e:	4b14      	ldr	r3, [pc, #80]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a13      	ldr	r2, [pc, #76]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051aa:	f7fc f955 	bl	8001458 <HAL_GetTick>
 80051ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b0:	e009      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b2:	f7fc f951 	bl	8001458 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d902      	bls.n	80051c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	73fb      	strb	r3, [r7, #15]
          break;
 80051c4:	e005      	b.n	80051d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0ef      	beq.n	80051b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051d8:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	4903      	ldr	r1, [pc, #12]	@ (80051f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40021000 	.word	0x40021000

080051f4 <VESC_convertStatus4ToRaw>:

	return true;
}

bool VESC_convertStatus4ToRaw(VESC_RawFrame* out, const VESC_Status_4* in)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2210      	movs	r2, #16
 800520a:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	709a      	strb	r2, [r3, #2]
 8005212:	2200      	movs	r2, #0
 8005214:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005218:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_4_DLEN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2208      	movs	r2, #8
 800521e:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPFET], in->tempFet, VESC_SCALE_STATUS_4_TEMPFET);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	edd3 7a01 	vldr	s15, [r3, #4]
 8005226:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800522a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800522e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005232:	ee17 3a90 	vmov	r3, s15
 8005236:	b219      	sxth	r1, r3
 8005238:	2300      	movs	r3, #0
 800523a:	3308      	adds	r3, #8
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	18d4      	adds	r4, r2, r3
 8005240:	4608      	mov	r0, r1
 8005242:	f000 f849 	bl	80052d8 <_VESC_b16_swap>
 8005246:	4603      	mov	r3, r0
 8005248:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPMOTOR], in->tempMotor, VESC_SCALE_STATUS_4_TEMPMOTOR);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005250:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800525c:	ee17 3a90 	vmov	r3, s15
 8005260:	b219      	sxth	r1, r3
 8005262:	2302      	movs	r3, #2
 8005264:	3308      	adds	r3, #8
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	18d4      	adds	r4, r2, r3
 800526a:	4608      	mov	r0, r1
 800526c:	f000 f834 	bl	80052d8 <_VESC_b16_swap>
 8005270:	4603      	mov	r3, r0
 8005272:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_CURRENTIN], in->currentIn, VESC_SCALE_STATUS_4_CURRENTIN);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	edd3 7a03 	vldr	s15, [r3, #12]
 800527a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800527e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005286:	ee17 3a90 	vmov	r3, s15
 800528a:	b219      	sxth	r1, r3
 800528c:	2304      	movs	r3, #4
 800528e:	3308      	adds	r3, #8
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	18d4      	adds	r4, r2, r3
 8005294:	4608      	mov	r0, r1
 8005296:	f000 f81f 	bl	80052d8 <_VESC_b16_swap>
 800529a:	4603      	mov	r3, r0
 800529c:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_PIDPOS], in->pidPos, VESC_SCALE_STATUS_4_PIDPOS);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80052a4:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80052d4 <VESC_convertStatus4ToRaw+0xe0>
 80052a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052b0:	ee17 3a90 	vmov	r3, s15
 80052b4:	b219      	sxth	r1, r3
 80052b6:	2306      	movs	r3, #6
 80052b8:	3308      	adds	r3, #8
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	18d4      	adds	r4, r2, r3
 80052be:	4608      	mov	r0, r1
 80052c0:	f000 f80a 	bl	80052d8 <_VESC_b16_swap>
 80052c4:	4603      	mov	r3, r0
 80052c6:	8023      	strh	r3, [r4, #0]

	return true;
 80052c8:	2301      	movs	r3, #1
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd90      	pop	{r4, r7, pc}
 80052d2:	bf00      	nop
 80052d4:	42480000 	.word	0x42480000

080052d8 <_VESC_b16_swap>:
#include <libVescCan/VESC_Endian.h>

int16_t _VESC_b16_swap(int16_t val)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
	int16_t ret = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0x00FF) << 8;
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	b21a      	sxth	r2, r3
 80052ec:	89fb      	ldrh	r3, [r7, #14]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0xFF00) >> 8;
 80052f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f6:	121b      	asrs	r3, r3, #8
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	b21a      	sxth	r2, r3
 80052fe:	89fb      	ldrh	r3, [r7, #14]
 8005300:	4313      	orrs	r3, r2
 8005302:	81fb      	strh	r3, [r7, #14]
	return ret;
 8005304:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <memset>:
 8005314:	4402      	add	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4d0d      	ldr	r5, [pc, #52]	@ (800535c <__libc_init_array+0x38>)
 8005328:	4c0d      	ldr	r4, [pc, #52]	@ (8005360 <__libc_init_array+0x3c>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	2600      	movs	r6, #0
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	4d0b      	ldr	r5, [pc, #44]	@ (8005364 <__libc_init_array+0x40>)
 8005336:	4c0c      	ldr	r4, [pc, #48]	@ (8005368 <__libc_init_array+0x44>)
 8005338:	f000 f826 	bl	8005388 <_init>
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	2600      	movs	r6, #0
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f855 3b04 	ldr.w	r3, [r5], #4
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f855 3b04 	ldr.w	r3, [r5], #4
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	080053e0 	.word	0x080053e0
 8005360:	080053e0 	.word	0x080053e0
 8005364:	080053e0 	.word	0x080053e0
 8005368:	080053e4 	.word	0x080053e4

0800536c <memcpy>:
 800536c:	440a      	add	r2, r1
 800536e:	4291      	cmp	r1, r2
 8005370:	f100 33ff 	add.w	r3, r0, #4294967295
 8005374:	d100      	bne.n	8005378 <memcpy+0xc>
 8005376:	4770      	bx	lr
 8005378:	b510      	push	{r4, lr}
 800537a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800537e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005382:	4291      	cmp	r1, r2
 8005384:	d1f9      	bne.n	800537a <memcpy+0xe>
 8005386:	bd10      	pop	{r4, pc}

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
