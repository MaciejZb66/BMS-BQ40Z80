
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a4  080055a4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080055a4  080055a4  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055a4  080055a4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000065a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080055ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  080055b8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080055b8  00007268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015049  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322f  00000000  00000000  0001c085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0001f2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad0  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002466e  00000000  00000000  00020be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014998  00000000  00000000  0004524e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf79e  00000000  00000000  00059be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003860  00000000  00000000  001293c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800554c 	.word	0x0800554c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800554c 	.word	0x0800554c

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
BQ_data* BMS;
uint8_t control = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	72fb      	strb	r3, [r7, #11]
#ifdef USED_I2C1
	if(i2c == &hi2c1){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4a26      	ldr	r2, [pc, #152]	@ (8000274 <BQ_Init+0xa8>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d101      	bne.n	80001e4 <BQ_Init+0x18>
		BMS = &BMS_1;
 80001e0:	4b25      	ldr	r3, [pc, #148]	@ (8000278 <BQ_Init+0xac>)
 80001e2:	60fb      	str	r3, [r7, #12]
#ifdef USED_I2C3
	if(i2c == &hi2c3){
		BMS = &BMS_3;
	}
#endif
    BMS->bq_i2c = i2c;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	687a      	ldr	r2, [r7, #4]
 80001e8:	601a      	str	r2, [r3, #0]
    BMS->bq_deviceAddress = Address;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	2217      	movs	r2, #23
 80001ee:	711a      	strb	r2, [r3, #4]
#ifdef USE_SCANNER
	I2CHelper_CheckAddress(BMS);
 80001f0:	68f8      	ldr	r0, [r7, #12]
 80001f2:	f000 fe74 	bl	8000ede <I2CHelper_CheckAddress>
	while (BMS->connection != CONNECTED)
 80001f6:	e00b      	b.n	8000210 <BQ_Init+0x44>
	{
		I2CHelper_CheckAddress(BMS);
 80001f8:	68f8      	ldr	r0, [r7, #12]
 80001fa:	f000 fe70 	bl	8000ede <I2CHelper_CheckAddress>
		HAL_Delay(20);
 80001fe:	2014      	movs	r0, #20
 8000200:	f001 f9c4 	bl	800158c <HAL_Delay>
		control ++;
 8000204:	7afb      	ldrb	r3, [r7, #11]
 8000206:	3301      	adds	r3, #1
 8000208:	72fb      	strb	r3, [r7, #11]
		if(control >= 5){
 800020a:	7afb      	ldrb	r3, [r7, #11]
 800020c:	2b04      	cmp	r3, #4
 800020e:	d82d      	bhi.n	800026c <BQ_Init+0xa0>
	while (BMS->connection != CONNECTED)
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	7d1b      	ldrb	r3, [r3, #20]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1ef      	bne.n	80001f8 <BQ_Init+0x2c>
			return;
		}
	}
#endif

    HAL_Delay(1500);
 8000218:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800021c:	f001 f9b6 	bl	800158c <HAL_Delay>
    BQAction_UpdateData(BMS);
 8000220:	68f8      	ldr	r0, [r7, #12]
 8000222:	f000 f9d2 	bl	80005ca <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS);
 8000226:	68f8      	ldr	r0, [r7, #12]
 8000228:	f000 f99b 	bl	8000562 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS, false);
 800022c:	2100      	movs	r1, #0
 800022e:	68f8      	ldr	r0, [r7, #12]
 8000230:	f000 f90d 	bl	800044e <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS, false);
 8000234:	2100      	movs	r1, #0
 8000236:	68f8      	ldr	r0, [r7, #12]
 8000238:	f000 f920 	bl	800047c <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS, false);
 800023c:	2100      	movs	r1, #0
 800023e:	68f8      	ldr	r0, [r7, #12]
 8000240:	f000 f933 	bl	80004aa <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS, true);
 8000244:	2101      	movs	r1, #1
 8000246:	68f8      	ldr	r0, [r7, #12]
 8000248:	f000 f946 	bl	80004d8 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS, true);
 800024c:	2101      	movs	r1, #1
 800024e:	68f8      	ldr	r0, [r7, #12]
 8000250:	f000 f959 	bl	8000506 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS, true);
 8000254:	2101      	movs	r1, #1
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f000 f96c 	bl	8000534 <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS, false);
 800025c:	2100      	movs	r1, #0
 800025e:	68f8      	ldr	r0, [r7, #12]
 8000260:	f000 f8df 	bl	8000422 <BQAction_SetLed>

    BQAction_UpdateData(BMS);
 8000264:	68f8      	ldr	r0, [r7, #12]
 8000266:	f000 f9b0 	bl	80005ca <BQAction_UpdateData>
 800026a:	e000      	b.n	800026e <BQ_Init+0xa2>
			return;
 800026c:	bf00      	nop
}
 800026e:	3710      	adds	r7, #16
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000094 	.word	0x20000094
 8000278:	20000190 	.word	0x20000190

0800027c <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af02      	add	r7, sp, #8
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000288:	2344      	movs	r3, #68	@ 0x44
 800028a:	733b      	strb	r3, [r7, #12]
 800028c:	2302      	movs	r3, #2
 800028e:	737b      	strb	r3, [r7, #13]
 8000290:	887b      	ldrh	r3, [r7, #2]
 8000292:	b2db      	uxtb	r3, r3
 8000294:	73bb      	strb	r3, [r7, #14]
 8000296:	887b      	ldrh	r3, [r7, #2]
 8000298:	0a1b      	lsrs	r3, r3, #8
 800029a:	b29b      	uxth	r3, r3
 800029c:	b2db      	uxtb	r3, r3
 800029e:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	6818      	ldr	r0, [r3, #0]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	791b      	ldrb	r3, [r3, #4]
 80002a8:	4619      	mov	r1, r3
 80002aa:	f107 020c 	add.w	r2, r7, #12
 80002ae:	2364      	movs	r3, #100	@ 0x64
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2304      	movs	r3, #4
 80002b4:	f002 fa5e 	bl	8002774 <HAL_I2C_Master_Transmit>
}
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b092      	sub	sp, #72	@ 0x48
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	607a      	str	r2, [r7, #4]
 80002ca:	461a      	mov	r2, r3
 80002cc:	460b      	mov	r3, r1
 80002ce:	817b      	strh	r3, [r7, #10]
 80002d0:	4613      	mov	r3, r2
 80002d2:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002d4:	2344      	movs	r3, #68	@ 0x44
 80002d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002da:	2302      	movs	r3, #2
 80002dc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002e0:	897b      	ldrh	r3, [r7, #10]
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002e8:	897b      	ldrh	r3, [r7, #10]
 80002ea:	0a1b      	lsrs	r3, r3, #8
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	6818      	ldr	r0, [r3, #0]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	791b      	ldrb	r3, [r3, #4]
 80002fc:	4619      	mov	r1, r3
 80002fe:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000302:	2364      	movs	r3, #100	@ 0x64
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2304      	movs	r3, #4
 8000308:	f002 fa34 	bl	8002774 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 800030c:	2344      	movs	r3, #68	@ 0x44
 800030e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000312:	7a7b      	ldrb	r3, [r7, #9]
 8000314:	3302      	adds	r3, #2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, addr, 2, 100);
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	6818      	ldr	r0, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	4619      	mov	r1, r3
 8000326:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800032a:	2364      	movs	r3, #100	@ 0x64
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2302      	movs	r3, #2
 8000330:	f002 fa20 	bl	8002774 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	221f      	movs	r2, #31
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f005 f8c9 	bl	80054d8 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress, result, 35, 100);
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	791b      	ldrb	r3, [r3, #4]
 800034e:	4619      	mov	r1, r3
 8000350:	f107 0210 	add.w	r2, r7, #16
 8000354:	2364      	movs	r3, #100	@ 0x64
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	2323      	movs	r3, #35	@ 0x23
 800035a:	f002 fb23 	bl	80029a4 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 800035e:	2300      	movs	r3, #0
 8000360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000362:	e00c      	b.n	800037e <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000366:	1cda      	adds	r2, r3, #3
 8000368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	440b      	add	r3, r1
 800036e:	3240      	adds	r2, #64	@ 0x40
 8000370:	443a      	add	r2, r7
 8000372:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000376:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037a:	3301      	adds	r3, #1
 800037c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800037e:	7a7b      	ldrb	r3, [r7, #9]
 8000380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000382:	429a      	cmp	r2, r3
 8000384:	dbee      	blt.n	8000364 <BQ_ReadMABlockCommand+0xa4>
    }
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3740      	adds	r7, #64	@ 0x40
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 800039c:	f107 020c 	add.w	r2, r7, #12
 80003a0:	8879      	ldrh	r1, [r7, #2]
 80003a2:	2302      	movs	r3, #2
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f7ff ff8b 	bl	80002c0 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003ae:	7b3b      	ldrb	r3, [r7, #12]
 80003b0:	461a      	mov	r2, r3
 80003b2:	89fb      	ldrh	r3, [r7, #14]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003b8:	7b7b      	ldrb	r3, [r7, #13]
 80003ba:	021b      	lsls	r3, r3, #8
 80003bc:	b21a      	sxth	r2, r3
 80003be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003c2:	4313      	orrs	r3, r2
 80003c4:	b21b      	sxth	r3, r3
 80003c6:	81fb      	strh	r3, [r7, #14]

    return result;
 80003c8:	89fb      	ldrh	r3, [r7, #14]
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b084      	sub	sp, #16
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	460b      	mov	r3, r1
 80003dc:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003de:	f107 0208 	add.w	r2, r7, #8
 80003e2:	8879      	ldrh	r1, [r7, #2]
 80003e4:	2304      	movs	r3, #4
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f7ff ff6a 	bl	80002c0 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 80003f0:	7a3b      	ldrb	r3, [r7, #8]
 80003f2:	461a      	mov	r2, r3
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 80003fa:	7a7b      	ldrb	r3, [r7, #9]
 80003fc:	021b      	lsls	r3, r3, #8
 80003fe:	68fa      	ldr	r2, [r7, #12]
 8000400:	4313      	orrs	r3, r2
 8000402:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000404:	7abb      	ldrb	r3, [r7, #10]
 8000406:	041b      	lsls	r3, r3, #16
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	4313      	orrs	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	061b      	lsls	r3, r3, #24
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	4313      	orrs	r3, r2
 8000416:	60fb      	str	r3, [r7, #12]

    return result;
 8000418:	68fb      	ldr	r3, [r7, #12]
}
 800041a:	4618      	mov	r0, r3
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	460b      	mov	r3, r1
 800042c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	7e9b      	ldrb	r3, [r3, #26]
 8000432:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000436:	b2db      	uxtb	r3, r3
 8000438:	78fa      	ldrb	r2, [r7, #3]
 800043a:	429a      	cmp	r2, r3
 800043c:	d003      	beq.n	8000446 <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 800043e:	212b      	movs	r1, #43	@ 0x2b
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f7ff ff1b 	bl	800027c <BQ_WriteMABlockCommand>
    }
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	460b      	mov	r3, r1
 8000458:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000460:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000464:	b2db      	uxtb	r3, r3
 8000466:	78fa      	ldrb	r2, [r7, #3]
 8000468:	429a      	cmp	r2, r3
 800046a:	d003      	beq.n	8000474 <BQAction_SetManufacturingAllFet+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 800046c:	2122      	movs	r1, #34	@ 0x22
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff04 	bl	800027c <BQ_WriteMABlockCommand>
    }
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800048e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	78fa      	ldrb	r2, [r7, #3]
 8000496:	429a      	cmp	r2, r3
 8000498:	d003      	beq.n	80004a2 <BQAction_SetManufacturingFuse+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 800049a:	2126      	movs	r1, #38	@ 0x26
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff feed 	bl	800027c <BQ_WriteMABlockCommand>
    }
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	460b      	mov	r3, r1
 80004b4:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80004bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	78fa      	ldrb	r2, [r7, #3]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d003      	beq.n	80004d0 <BQAction_SetCalibration+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004c8:	212d      	movs	r1, #45	@ 0x2d
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f7ff fed6 	bl	800027c <BQ_WriteMABlockCommand>
    }
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80004ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	78fa      	ldrb	r2, [r7, #3]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d003      	beq.n	80004fe <BQAction_SetManufacturingGauging+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 80004f6:	2121      	movs	r1, #33	@ 0x21
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff febf 	bl	800027c <BQ_WriteMABlockCommand>
    }
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000518:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	429a      	cmp	r2, r3
 8000522:	d003      	beq.n	800052c <BQAction_SetManufacturingPF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000524:	2124      	movs	r1, #36	@ 0x24
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff fea8 	bl	800027c <BQ_WriteMABlockCommand>
    }
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	460b      	mov	r3, r1
 800053e:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000546:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	429a      	cmp	r2, r3
 8000550:	d003      	beq.n	800055a <BQAction_SetManufacturingLF+0x26>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000552:	2123      	movs	r1, #35	@ 0x23
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe91 	bl	800027c <BQ_WriteMABlockCommand>
    }
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b084      	sub	sp, #16
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f893 	bl	8000696 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode =  BMS->BQ_opStatus.bits.sec;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	7e5b      	ldrb	r3, [r3, #25]
 8000574:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 800057c:	e01a      	b.n	80005b4 <BQAction_TryUnsealedDevice+0x52>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 800057e:	f240 4114 	movw	r1, #1044	@ 0x414
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fe7a 	bl	800027c <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800058c:	f000 fffe 	bl	800158c <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 8000590:	f243 6172 	movw	r1, #13938	@ 0x3672
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff fe71 	bl	800027c <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 800059a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800059e:	f000 fff5 	bl	800158c <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 f877 	bl	8000696 <BQAction_UpdateOpStatus>
        securityMode = BMS->BQ_opStatus.bits.sec;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7e5b      	ldrb	r3, [r3, #25]
 80005ac:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d0e1      	beq.n	800057e <BQAction_TryUnsealedDevice+0x1c>
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d0de      	beq.n	800057e <BQAction_TryUnsealedDevice+0x1c>
    }
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b088      	sub	sp, #32
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80005d2:	2157      	movs	r1, #87	@ 0x57
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff fedb 	bl	8000390 <BQ_ReadCommandAsShort>
 80005da:	4603      	mov	r3, r0
 80005dc:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	8bfa      	ldrh	r2, [r7, #30]
 80005e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80005e4:	2155      	movs	r1, #85	@ 0x55
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff fef3 	bl	80003d2 <BQ_ReadCommandAsInt>
 80005ec:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	61da      	str	r2, [r3, #28]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80005f4:	2154      	movs	r1, #84	@ 0x54
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff feeb 	bl	80003d2 <BQ_ReadCommandAsInt>
 80005fc:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	619a      	str	r2, [r3, #24]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000604:	2156      	movs	r1, #86	@ 0x56
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff fee3 	bl	80003d2 <BQ_ReadCommandAsInt>
 800060c:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	621a      	str	r2, [r3, #32]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000614:	2103      	movs	r1, #3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 fc08 	bl	8000e2c <I2CHelper_ReadRegisterAsShort>
 800061c:	4603      	mov	r3, r0
 800061e:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	89fa      	ldrh	r2, [r7, #14]
 8000624:	84da      	strh	r2, [r3, #38]	@ 0x26
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryStatus);
 8000626:	2116      	movs	r1, #22
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 fbff 	bl	8000e2c <I2CHelper_ReadRegisterAsShort>
 800062e:	4603      	mov	r3, r0
 8000630:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	89ba      	ldrh	r2, [r7, #12]
 8000636:	849a      	strh	r2, [r3, #36]	@ 0x24
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_GPIORead);
 8000638:	2148      	movs	r1, #72	@ 0x48
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 fc17 	bl	8000e6e <I2CHelper_ReadRegisterAsChar>
 8000640:	4603      	mov	r3, r0
 8000642:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7afa      	ldrb	r2, [r7, #11]
 8000648:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000652:	2320      	movs	r3, #32
 8000654:	2171      	movs	r1, #113	@ 0x71
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff fe32 	bl	80002c0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS->BQ_daStatus2.all, 16);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8000662:	2310      	movs	r3, #16
 8000664:	2172      	movs	r1, #114	@ 0x72
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fe2a 	bl	80002c0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS->BQ_daStatus3.all, 18);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8000672:	2312      	movs	r3, #18
 8000674:	217b      	movs	r1, #123	@ 0x7b
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fe22 	bl	80002c0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS->BQ_outCal.all, 32);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
 8000682:	2320      	movs	r3, #32
 8000684:	f24f 0181 	movw	r1, #61569	@ 0xf081
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff fe19 	bl	80002c0 <BQ_ReadMABlockCommand>
}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b084      	sub	sp, #16
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80006a4:	2320      	movs	r3, #32
 80006a6:	2171      	movs	r1, #113	@ 0x71
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff fe09 	bl	80002c0 <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80006ae:	2154      	movs	r1, #84	@ 0x54
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fe8e 	bl	80003d2 <BQ_ReadCommandAsInt>
 80006b6:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	619a      	str	r2, [r3, #24]
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006be:	2157      	movs	r1, #87	@ 0x57
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fe65 	bl	8000390 <BQ_ReadCommandAsShort>
 80006c6:	4603      	mov	r3, r0
 80006c8:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	897a      	ldrh	r2, [r7, #10]
 80006ce:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <BQ_GetBoundaryCellVoltage>:
        return RELAX;
    }
}

BQ_BoundaryCellVoltage BQ_GetBoundaryCellVoltage(BQ_data* BMS)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	@ 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    BQ_BoundaryCellVoltage result;
    result.Max = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	82fb      	strh	r3, [r7, #22]
    result.Min = 65535;
 80006e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006e8:	82bb      	strh	r3, [r7, #20]

    uint16_t cells[6] =
        {
			BMS->BQ_daStatus1.sep.cell_voltage_1, // 1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
    uint16_t cells[6] =
 80006ee:	813b      	strh	r3, [r7, #8]
			BMS->BQ_daStatus1.sep.cell_voltage_2, // 2
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
    uint16_t cells[6] =
 80006f4:	817b      	strh	r3, [r7, #10]
            BMS->BQ_daStatus1.sep.cell_voltage_3, // 3
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
    uint16_t cells[6] =
 80006fa:	81bb      	strh	r3, [r7, #12]
            BMS->BQ_daStatus1.sep.cell_voltage_4, // 4
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
    uint16_t cells[6] =
 8000700:	81fb      	strh	r3, [r7, #14]
            BMS->BQ_daStatus3.sep.cell_voltage_5, // 5
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
    uint16_t cells[6] =
 8000708:	823b      	strh	r3, [r7, #16]
            BMS->BQ_daStatus3.sep.cell_voltage_6  // 6
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
    uint16_t cells[6] =
 8000710:	827b      	strh	r3, [r7, #18]
        };

    for (int i = 0; i < 6; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
 8000716:	e022      	b.n	800075e <BQ_GetBoundaryCellVoltage+0x86>
    {
        if (cells[i] > result.Max)
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	3320      	adds	r3, #32
 800071e:	443b      	add	r3, r7
 8000720:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000724:	8afb      	ldrh	r3, [r7, #22]
 8000726:	429a      	cmp	r2, r3
 8000728:	d906      	bls.n	8000738 <BQ_GetBoundaryCellVoltage+0x60>
        {
            result.Max = cells[i];
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	3320      	adds	r3, #32
 8000730:	443b      	add	r3, r7
 8000732:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000736:	82fb      	strh	r3, [r7, #22]
        }
        if (cells[i] < result.Min)
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3320      	adds	r3, #32
 800073e:	443b      	add	r3, r7
 8000740:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000744:	8abb      	ldrh	r3, [r7, #20]
 8000746:	429a      	cmp	r2, r3
 8000748:	d206      	bcs.n	8000758 <BQ_GetBoundaryCellVoltage+0x80>
        {
            result.Min = cells[i];
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	3320      	adds	r3, #32
 8000750:	443b      	add	r3, r7
 8000752:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000756:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	2b05      	cmp	r3, #5
 8000762:	ddd9      	ble.n	8000718 <BQ_GetBoundaryCellVoltage+0x40>
        }
    }

    return result;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	2300      	movs	r3, #0
 800076a:	8b3a      	ldrh	r2, [r7, #24]
 800076c:	f362 030f 	bfi	r3, r2, #0, #16
 8000770:	8b7a      	ldrh	r2, [r7, #26]
 8000772:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	@ 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <BQ_GetSendData>:

void BQ_GetSendData(BQ_data* BMS){
 8000782:	b590      	push	{r4, r7, lr}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	BMS->data.voltage = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_Voltage);
 800078a:	2109      	movs	r1, #9
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 fb4d 	bl	8000e2c <I2CHelper_ReadRegisterAsShort>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	815a      	strh	r2, [r3, #10]
	BMS->data.current = BMS->BQ_outCal.sep.current;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f9b3 2070 	ldrsh.w	r2, [r3, #112]	@ 0x70
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	819a      	strh	r2, [r3, #12]
	BMS->data.balance = BQ_GetBoundaryCellVoltage(BMS);
 80007a4:	687c      	ldr	r4, [r7, #4]
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff96 	bl	80006d8 <BQ_GetBoundaryCellVoltage>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	80e2      	strh	r2, [r4, #6]
 80007b2:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80007b6:	8123      	strh	r3, [r4, #8]
	BMS->data.cell_temperature = BMS->BQ_daStatus2.sep.ts1_temperature - KelvinToCelsius;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80007be:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	825a      	strh	r2, [r3, #18]
	BMS->data.fet_temperature = BMS->BQ_daStatus2.sep.ts2_temperature - KelvinToCelsius;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80007ce:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	821a      	strh	r2, [r3, #16]
	BMS->data.percentage = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_RelativeStateOfCharge);
 80007d8:	210d      	movs	r1, #13
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 fb47 	bl	8000e6e <I2CHelper_ReadRegisterAsChar>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	739a      	strb	r2, [r3, #14]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}

080007f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f6:	4b33      	ldr	r3, [pc, #204]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 80007f8:	4a33      	ldr	r2, [pc, #204]	@ (80008c8 <MX_CAN1_Init+0xd8>)
 80007fa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 80007fc:	4b31      	ldr	r3, [pc, #196]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 80007fe:	220a      	movs	r2, #10
 8000800:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000802:	4b30      	ldr	r3, [pc, #192]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000808:	4b2e      	ldr	r3, [pc, #184]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000810:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000814:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000816:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000818:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800081c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800081e:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000820:	2200      	movs	r2, #0
 8000822:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000826:	2200      	movs	r2, #0
 8000828:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 800082c:	2200      	movs	r2, #0
 800082e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000830:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000832:	2201      	movs	r2, #1
 8000834:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000838:	2200      	movs	r2, #0
 800083a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083c:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 800083e:	2200      	movs	r2, #0
 8000840:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000842:	4820      	ldr	r0, [pc, #128]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 8000844:	f000 fec6 	bl	80015d4 <HAL_CAN_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800084e:	f000 fd27 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  	canfil.FilterBank = 0;
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_CAN1_Init+0xdc>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
    canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_CAN1_Init+0xdc>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
    canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_CAN1_Init+0xdc>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
    canfil.FilterMaskIdHigh = 0 << 5;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_CAN1_Init+0xdc>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    canfil.FilterMaskIdLow = 0 << 5;
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_CAN1_Init+0xdc>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_CAN1_Init+0xdc>)
 8000872:	2201      	movs	r2, #1
 8000874:	61da      	str	r2, [r3, #28]
    canfil.FilterActivation = ENABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_CAN1_Init+0xdc>)
 8000878:	2201      	movs	r2, #1
 800087a:	621a      	str	r2, [r3, #32]
    canfil.SlaveStartFilterBank = 14;
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <MX_CAN1_Init+0xdc>)
 800087e:	220e      	movs	r2, #14
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24

    TxHeader.IDE = CAN_ID_EXT;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_CAN1_Init+0xe0>)
 8000884:	2204      	movs	r2, #4
 8000886:	609a      	str	r2, [r3, #8]
    TxHeader.ExtId = 0;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_CAN1_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_CAN1_Init+0xe0>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 8000894:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_CAN1_Init+0xe0>)
 8000896:	2208      	movs	r2, #8
 8000898:	611a      	str	r2, [r3, #16]

    HAL_StatusTypeDef test;
    test = HAL_CAN_ConfigFilter(&hcan1,&canfil);
 800089a:	490c      	ldr	r1, [pc, #48]	@ (80008cc <MX_CAN1_Init+0xdc>)
 800089c:	4809      	ldr	r0, [pc, #36]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 800089e:	f000 ff94 	bl	80017ca <HAL_CAN_ConfigFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    test = HAL_CAN_Start(&hcan1);
 80008a6:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 80008a8:	f001 f859 	bl	800195e <HAL_CAN_Start>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]

    test = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
 80008b0:	2103      	movs	r1, #3
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_CAN1_Init+0xd4>)
 80008b4:	f001 f967 	bl	8001b86 <HAL_CAN_ActivateNotification>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
//    test = HAL_CAN_ActivateNotification(&hcan1, );
  /* USER CODE END CAN1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000006c 	.word	0x2000006c
 80008c8:	40006400 	.word	0x40006400
 80008cc:	20000044 	.word	0x20000044
 80008d0:	20000028 	.word	0x20000028

080008d4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a2e      	ldr	r2, [pc, #184]	@ (80009ac <HAL_CAN_MspInit+0xd8>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d156      	bne.n	80009a4 <HAL_CAN_MspInit+0xd0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008f6:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fa:	4a2d      	ldr	r2, [pc, #180]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 80008fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000900:	6593      	str	r3, [r2, #88]	@ 0x58
 8000902:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a27      	ldr	r2, [pc, #156]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b25      	ldr	r3, [pc, #148]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <HAL_CAN_MspInit+0xdc>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800093e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000950:	2309      	movs	r3, #9
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	4619      	mov	r1, r3
 800095a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095e:	f001 fca9 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000974:	2309      	movs	r3, #9
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <HAL_CAN_MspInit+0xe0>)
 8000980:	f001 fc98 	bl	80022b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 7, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2107      	movs	r1, #7
 8000988:	2013      	movs	r0, #19
 800098a:	f001 fc0e 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800098e:	2013      	movs	r0, #19
 8000990:	f001 fc27 	bl	80021e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2108      	movs	r1, #8
 8000998:	2014      	movs	r0, #20
 800099a:	f001 fc06 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800099e:	2014      	movs	r0, #20
 80009a0:	f001 fc1f 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40006400 	.word	0x40006400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400

080009b8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b38      	ldr	r3, [pc, #224]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	4a37      	ldr	r2, [pc, #220]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009da:	4b35      	ldr	r3, [pc, #212]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	4b32      	ldr	r3, [pc, #200]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	4a31      	ldr	r2, [pc, #196]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0a:	4b29      	ldr	r3, [pc, #164]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4a25      	ldr	r2, [pc, #148]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <MX_GPIO_Init+0xf8>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a34:	481f      	ldr	r0, [pc, #124]	@ (8000ab4 <MX_GPIO_Init+0xfc>)
 8000a36:	f001 fdb7 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4819      	ldr	r0, [pc, #100]	@ (8000ab8 <MX_GPIO_Init+0x100>)
 8000a52:	f001 fc2f 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a56:	230c      	movs	r3, #12
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a66:	2307      	movs	r3, #7
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a74:	f001 fc1e 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	@ (8000ab4 <MX_GPIO_Init+0xfc>)
 8000a92:	f001 fc0f 	bl	80022b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210c      	movs	r1, #12
 8000a9a:	2028      	movs	r0, #40	@ 0x28
 8000a9c:	f001 fb85 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	@ 0x28
 8000aa2:	f001 fb9e 	bl	80021e2 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000400 	.word	0x48000400
 8000ab8:	48000800 	.word	0x48000800

08000abc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f001 fda0 	bl	800263c <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f000 fbcd 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f003 f9ab 	bl	8003e64 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f000 fbc4 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f003 f9ed 	bl	8003efa <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 fbbb 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000094 	.word	0x20000094
 8000b34:	40005400 	.word	0x40005400
 8000b38:	10d19ce4 	.word	0x10d19ce4

08000b3c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <MX_I2C2_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b48:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb8 <MX_I2C2_Init+0x7c>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b76:	480e      	ldr	r0, [pc, #56]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b78:	f001 fd60 	bl	800263c <HAL_I2C_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b82:	f000 fb8d 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b8a:	f003 f96b 	bl	8003e64 <HAL_I2CEx_ConfigAnalogFilter>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b94:	f000 fb84 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_I2C2_Init+0x74>)
 8000b9c:	f003 f9ad 	bl	8003efa <HAL_I2CEx_ConfigDigitalFilter>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f000 fb7b 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000e8 	.word	0x200000e8
 8000bb4:	40005800 	.word	0x40005800
 8000bb8:	10d19ce4 	.word	0x10d19ce4

08000bbc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c34 <MX_I2C3_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10D19CE4;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c38 <MX_I2C3_Init+0x7c>)
 8000bca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bcc:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bf6:	480e      	ldr	r0, [pc, #56]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000bf8:	f001 fd20 	bl	800263c <HAL_I2C_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c02:	f000 fb4d 	bl	80012a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4809      	ldr	r0, [pc, #36]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000c0a:	f003 f92b 	bl	8003e64 <HAL_I2CEx_ConfigAnalogFilter>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c14:	f000 fb44 	bl	80012a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_I2C3_Init+0x74>)
 8000c1c:	f003 f96d 	bl	8003efa <HAL_I2CEx_ConfigDigitalFilter>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c26:	f000 fb3b 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000013c 	.word	0x2000013c
 8000c34:	40005c00 	.word	0x40005c00
 8000c38:	10d19ce4 	.word	0x10d19ce4

08000c3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0a6      	sub	sp, #152	@ 0x98
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	2260      	movs	r2, #96	@ 0x60
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f004 fc3b 	bl	80054d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a6b      	ldr	r2, [pc, #428]	@ (8000e14 <HAL_I2C_MspInit+0x1d8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d14c      	bne.n	8000d06 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c6c:	2340      	movs	r3, #64	@ 0x40
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 ffef 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c84:	f000 fb0c 	bl	80012a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b63      	ldr	r3, [pc, #396]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	4a62      	ldr	r2, [pc, #392]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c94:	4b60      	ldr	r3, [pc, #384]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ca0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ca4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4855      	ldr	r0, [pc, #340]	@ (8000e1c <HAL_I2C_MspInit+0x1e0>)
 8000cc8:	f001 faf4 	bl	80022b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ccc:	4b52      	ldr	r3, [pc, #328]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd0:	4a51      	ldr	r2, [pc, #324]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	210a      	movs	r1, #10
 8000ce8:	201f      	movs	r0, #31
 8000cea:	f001 fa5e 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cee:	201f      	movs	r0, #31
 8000cf0:	f001 fa77 	bl	80021e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2109      	movs	r1, #9
 8000cf8:	2020      	movs	r0, #32
 8000cfa:	f001 fa56 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cfe:	2020      	movs	r0, #32
 8000d00:	f001 fa6f 	bl	80021e2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d04:	e082      	b.n	8000e0c <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a45      	ldr	r2, [pc, #276]	@ (8000e20 <HAL_I2C_MspInit+0x1e4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d13c      	bne.n	8000d8a <HAL_I2C_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 ff9d 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000d28:	f000 faba 	bl	80012a0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	4a39      	ldr	r2, [pc, #228]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d38:	4b37      	ldr	r3, [pc, #220]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482c      	ldr	r0, [pc, #176]	@ (8000e1c <HAL_I2C_MspInit+0x1e0>)
 8000d6c:	f001 faa2 	bl	80022b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d70:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d74:	4a28      	ldr	r2, [pc, #160]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000d76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7c:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
}
 8000d88:	e040      	b.n	8000e0c <HAL_I2C_MspInit+0x1d0>
  else if(i2cHandle->Instance==I2C3)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a25      	ldr	r2, [pc, #148]	@ (8000e24 <HAL_I2C_MspInit+0x1e8>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d13b      	bne.n	8000e0c <HAL_I2C_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 ff5a 	bl	8004c5c <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_I2C_MspInit+0x176>
      Error_Handler();
 8000dae:	f000 fa77 	bl	80012a0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a18      	ldr	r2, [pc, #96]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000de2:	2304      	movs	r3, #4
 8000de4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000dec:	4619      	mov	r1, r3
 8000dee:	480e      	ldr	r0, [pc, #56]	@ (8000e28 <HAL_I2C_MspInit+0x1ec>)
 8000df0:	f001 fa60 	bl	80022b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000dfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000dfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <HAL_I2C_MspInit+0x1dc>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3798      	adds	r7, #152	@ 0x98
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	40005800 	.word	0x40005800
 8000e24:	40005c00 	.word	0x40005c00
 8000e28:	48000800 	.word	0x48000800

08000e2c <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(BQ_data* BMS, uint8_t address)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2];
	I2CHelper_ReadRegister(BMS, address, buf, 2);
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	78f9      	ldrb	r1, [r7, #3]
 8000e3e:	2302      	movs	r3, #2
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f826 	bl	8000e92 <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000e4a:	7b3b      	ldrb	r3, [r7, #12]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000e54:	7b7b      	ldrb	r3, [r7, #13]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	81fb      	strh	r3, [r7, #14]

	return result;
 8000e64:	89fb      	ldrh	r3, [r7, #14]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(BQ_data* BMS, uint8_t address)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[1];
	I2CHelper_ReadRegister(BMS, address, buf, 1);
 8000e7a:	f107 020c 	add.w	r2, r7, #12
 8000e7e:	78f9      	ldrb	r1, [r7, #3]
 8000e80:	2301      	movs	r3, #1
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f805 	bl	8000e92 <I2CHelper_ReadRegister>

	return buf[0];
 8000e88:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(BQ_data* BMS, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af02      	add	r7, sp, #8
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	607a      	str	r2, [r7, #4]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	72fb      	strb	r3, [r7, #11]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, &address, 1, 100);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	791b      	ldrb	r3, [r3, #4]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f107 020b 	add.w	r2, r7, #11
 8000eb4:	2364      	movs	r3, #100	@ 0x64
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f001 fc5b 	bl	8002774 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress,  receive_buffer, size, 100);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	791b      	ldrb	r3, [r3, #4]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	7abb      	ldrb	r3, [r7, #10]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	2264      	movs	r2, #100	@ 0x64
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	f001 fd67 	bl	80029a4 <HAL_I2C_Master_Receive>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <I2CHelper_CheckAddress>:
 * @brief scanning i2c devices and return first
 * @param i2c I2C_HandleTypeDef pointer
 * @return first i2c device
 */
void I2CHelper_CheckAddress(BQ_data* BMS)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, BMS->bq_deviceAddress, 3, 5);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	f001 fe4c 	bl	8002b90 <HAL_I2C_IsDeviceReady>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73bb      	strb	r3, [r7, #14]
	if (ret == HAL_BUSY){
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d103      	bne.n	8000f0a <I2CHelper_CheckAddress+0x2c>
		BMS->connection = NEED_RESET;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	751a      	strb	r2, [r3, #20]
		return;
 8000f08:	e029      	b.n	8000f5e <I2CHelper_CheckAddress+0x80>
	}
	if (ret == HAL_OK)
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <I2CHelper_CheckAddress+0x3a>
	{
		BMS->connection = CONNECTED;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	751a      	strb	r2, [r3, #20]
		return;
 8000f16:	e022      	b.n	8000f5e <I2CHelper_CheckAddress+0x80>
	}
	for (uint8_t i = 1; i < 255; i++)
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e019      	b.n	8000f52 <I2CHelper_CheckAddress+0x74>
	{
		ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, i, 3, 5);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	b299      	uxth	r1, r3
 8000f26:	2305      	movs	r3, #5
 8000f28:	2203      	movs	r2, #3
 8000f2a:	f001 fe31 	bl	8002b90 <HAL_I2C_IsDeviceReady>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73bb      	strb	r3, [r7, #14]
		if (ret == HAL_OK)
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <I2CHelper_CheckAddress+0x68>
		{
			BMS->bq_deviceAddress = i;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	711a      	strb	r2, [r3, #4]
			BMS->connection = CHANGED_ADDRESS;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	751a      	strb	r2, [r3, #20]
			return;
 8000f44:	e00b      	b.n	8000f5e <I2CHelper_CheckAddress+0x80>
		}
		HAL_Delay(1);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f000 fb20 	bl	800158c <HAL_Delay>
	for (uint8_t i = 1; i < 255; i++)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2bff      	cmp	r3, #255	@ 0xff
 8000f56:	d1e2      	bne.n	8000f1e <I2CHelper_CheckAddress+0x40>
	}
	BMS->connection = INVALID_DEVICE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	751a      	strb	r2, [r3, #20]
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_GPIO_EXTI_Callback>:
#ifdef USED_I2C3
BQ_data BMS_3 = {0};
#endif

bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f74:	d113      	bne.n	8000f9e <HAL_GPIO_EXTI_Callback+0x3a>
		status = !status;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf14      	ite	ne
 8000f7e:	2301      	movne	r3, #1
 8000f80:	2300      	moveq	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000f92:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000f94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <HAL_GPIO_EXTI_Callback+0x48>)
 8000f9a:	f001 fb1d 	bl	80025d8 <HAL_GPIO_TogglePin>
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000220 	.word	0x20000220
 8000fac:	48000400 	.word	0x48000400

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f000 fa6e 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f81e 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f7ff fcfc 	bl	80009b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fc0:	f7ff fd7c 	bl	8000abc <MX_I2C1_Init>
  MX_CAN1_Init();
 8000fc4:	f7ff fc14 	bl	80007f0 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000fc8:	f7ff fdb8 	bl	8000b3c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000fcc:	f7ff fdf6 	bl	8000bbc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	status = false;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <main+0x3c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
#ifdef USED_I2C1
	BQ_Init(&hi2c1);
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <main+0x40>)
 8000fd8:	f7ff f8f8 	bl	80001cc <BQ_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		HAL_Delay(200);
 8000fdc:	20c8      	movs	r0, #200	@ 0xc8
 8000fde:	f000 fad5 	bl	800158c <HAL_Delay>
#ifdef USED_I2C1
		BQ_and_can(&BMS_1);
 8000fe2:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <main+0x44>)
 8000fe4:	f000 f85a 	bl	800109c <BQ_and_can>
		HAL_Delay(200);
 8000fe8:	bf00      	nop
 8000fea:	e7f7      	b.n	8000fdc <main+0x2c>
 8000fec:	20000220 	.word	0x20000220
 8000ff0:	20000094 	.word	0x20000094
 8000ff4:	20000190 	.word	0x20000190

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	@ 0x58
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2244      	movs	r2, #68	@ 0x44
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fa66 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800101e:	f002 ffc7 	bl	8003fb0 <HAL_PWREx_ControlVoltageScaling>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001028:	f000 f93a 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001034:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001042:	2301      	movs	r3, #1
 8001044:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001046:	230a      	movs	r3, #10
 8001048:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800104a:	2307      	movs	r3, #7
 800104c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fffe 	bl	800405c <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001066:	f000 f91b 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2303      	movs	r3, #3
 8001070:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2104      	movs	r1, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f003 fbfe 	bl	8004884 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108e:	f000 f907 	bl	80012a0 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3758      	adds	r7, #88	@ 0x58
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <BQ_and_can>:

/* USER CODE BEGIN 4 */
void BQ_and_can(BQ_data *BMS) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	I2CHelper_CheckAddress(BMS);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff1a 	bl	8000ede <I2CHelper_CheckAddress>
	HAL_StatusTypeDef test;
	if (BMS->connection == CONNECTED) {
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7d1b      	ldrb	r3, [r3, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 808b 	bne.w	80011ca <BQ_and_can+0x12e>
		BQAction_UpdateData(BMS);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fa88 	bl	80005ca <BQAction_UpdateData>
		BQ_GetSendData(BMS);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fb61 	bl	8000782 <BQ_GetSendData>
#ifdef USED_I2C1
		if (BMS == &BMS_1) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a4e      	ldr	r2, [pc, #312]	@ (80011fc <BQ_and_can+0x160>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d105      	bne.n	80010d4 <BQ_and_can+0x38>
			stat4.vescID = 0x81;
 80010c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001200 <BQ_and_can+0x164>)
 80010ca:	2281      	movs	r2, #129	@ 0x81
 80010cc:	701a      	strb	r2, [r3, #0]
			stat6.vescID = 0x81;
 80010ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001204 <BQ_and_can+0x168>)
 80010d0:	2281      	movs	r2, #129	@ 0x81
 80010d2:	701a      	strb	r2, [r3, #0]
		if(BMS == &BMS_3){
			stat4.vescID = 0x83;
			stat6.vescID = 0x83;
		}
#endif
		stat4.pidPos = 0;
 80010d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001200 <BQ_and_can+0x164>)
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
		stat4.currentIn = (float) (BMS->data.current) / 1000;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ea:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8001208 <BQ_and_can+0x16c>
 80010ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f2:	4b43      	ldr	r3, [pc, #268]	@ (8001200 <BQ_and_can+0x164>)
 80010f4:	edc3 7a03 	vstr	s15, [r3, #12]
		stat4.tempFet = (float) (BMS->data.fet_temperature) / 10;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	8a1b      	ldrh	r3, [r3, #16]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001104:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001108:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110c:	4b3c      	ldr	r3, [pc, #240]	@ (8001200 <BQ_and_can+0x164>)
 800110e:	edc3 7a01 	vstr	s15, [r3, #4]
		stat4.tempMotor = (float) (BMS->data.cell_temperature) / 10;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	8a5b      	ldrh	r3, [r3, #18]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800111e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	4b36      	ldr	r3, [pc, #216]	@ (8001200 <BQ_and_can+0x164>)
 8001128:	edc3 7a02 	vstr	s15, [r3, #8]
		VESC_convertStatus4ToRaw(&rawFrame, &stat4);
 800112c:	4934      	ldr	r1, [pc, #208]	@ (8001200 <BQ_and_can+0x164>)
 800112e:	4837      	ldr	r0, [pc, #220]	@ (800120c <BQ_and_can+0x170>)
 8001130:	f004 f8d0 	bl	80052d4 <VESC_convertStatus4ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 8001134:	4b35      	ldr	r3, [pc, #212]	@ (800120c <BQ_and_can+0x170>)
 8001136:	2208      	movs	r2, #8
 8001138:	4935      	ldr	r1, [pc, #212]	@ (8001210 <BQ_and_can+0x174>)
 800113a:	4836      	ldr	r0, [pc, #216]	@ (8001214 <BQ_and_can+0x178>)
 800113c:	f000 f94c 	bl	80013d8 <vesc2halcan>
		test = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001140:	4b35      	ldr	r3, [pc, #212]	@ (8001218 <BQ_and_can+0x17c>)
 8001142:	4a33      	ldr	r2, [pc, #204]	@ (8001210 <BQ_and_can+0x174>)
 8001144:	4933      	ldr	r1, [pc, #204]	@ (8001214 <BQ_and_can+0x178>)
 8001146:	4835      	ldr	r0, [pc, #212]	@ (800121c <BQ_and_can+0x180>)
 8001148:	f000 fc4d 	bl	80019e6 <HAL_CAN_AddTxMessage>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1);
 8001150:	2001      	movs	r0, #1
 8001152:	f000 fa1b 	bl	800158c <HAL_Delay>
		stat6.adc1 = (float) (BMS->data.voltage);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	895b      	ldrh	r3, [r3, #10]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001162:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <BQ_and_can+0x168>)
 8001164:	edc3 7a01 	vstr	s15, [r3, #4]
		stat6.adc2 = (float) (BMS->data.balance.Min);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	88db      	ldrh	r3, [r3, #6]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001174:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <BQ_and_can+0x168>)
 8001176:	edc3 7a02 	vstr	s15, [r3, #8]
		stat6.adc3 = (float) (BMS->data.balance.Max);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	891b      	ldrh	r3, [r3, #8]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <BQ_and_can+0x168>)
 8001188:	edc3 7a03 	vstr	s15, [r3, #12]
		stat6.ppm = (float) (BMS->data.percentage);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7b9b      	ldrb	r3, [r3, #14]
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <BQ_and_can+0x168>)
 800119a:	edc3 7a04 	vstr	s15, [r3, #16]
		VESC_convertStatus6ToRaw(&rawFrame, &stat6);
 800119e:	4919      	ldr	r1, [pc, #100]	@ (8001204 <BQ_and_can+0x168>)
 80011a0:	481a      	ldr	r0, [pc, #104]	@ (800120c <BQ_and_can+0x170>)
 80011a2:	f004 f909 	bl	80053b8 <VESC_convertStatus6ToRaw>
		vesc2halcan(&TxHeader, TxData, 8, &rawFrame);
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <BQ_and_can+0x170>)
 80011a8:	2208      	movs	r2, #8
 80011aa:	4919      	ldr	r1, [pc, #100]	@ (8001210 <BQ_and_can+0x174>)
 80011ac:	4819      	ldr	r0, [pc, #100]	@ (8001214 <BQ_and_can+0x178>)
 80011ae:	f000 f913 	bl	80013d8 <vesc2halcan>
		test = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80011b2:	4b19      	ldr	r3, [pc, #100]	@ (8001218 <BQ_and_can+0x17c>)
 80011b4:	4a16      	ldr	r2, [pc, #88]	@ (8001210 <BQ_and_can+0x174>)
 80011b6:	4917      	ldr	r1, [pc, #92]	@ (8001214 <BQ_and_can+0x178>)
 80011b8:	4818      	ldr	r0, [pc, #96]	@ (800121c <BQ_and_can+0x180>)
 80011ba:	f000 fc14 	bl	80019e6 <HAL_CAN_AddTxMessage>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 f9e2 	bl	800158c <HAL_Delay>
			TxHeader.ExtId = 0x83;
		}
#endif
		test = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	}
}
 80011c8:	e014      	b.n	80011f4 <BQ_and_can+0x158>
		TxData[0] = 0;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <BQ_and_can+0x174>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
		TxHeader.DLC = 1;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <BQ_and_can+0x178>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	611a      	str	r2, [r3, #16]
		if (BMS == &BMS_1) {
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <BQ_and_can+0x160>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d102      	bne.n	80011e4 <BQ_and_can+0x148>
			TxHeader.ExtId = 0x81;
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <BQ_and_can+0x178>)
 80011e0:	2281      	movs	r2, #129	@ 0x81
 80011e2:	605a      	str	r2, [r3, #4]
		test = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <BQ_and_can+0x17c>)
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <BQ_and_can+0x174>)
 80011e8:	490a      	ldr	r1, [pc, #40]	@ (8001214 <BQ_and_can+0x178>)
 80011ea:	480c      	ldr	r0, [pc, #48]	@ (800121c <BQ_and_can+0x180>)
 80011ec:	f000 fbfb 	bl	80019e6 <HAL_CAN_AddTxMessage>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000190 	.word	0x20000190
 8001200:	20000224 	.word	0x20000224
 8001204:	20000238 	.word	0x20000238
 8001208:	447a0000 	.word	0x447a0000
 800120c:	2000024c 	.word	0x2000024c
 8001210:	2000025c 	.word	0x2000025c
 8001214:	20000028 	.word	0x20000028
 8001218:	20000040 	.word	0x20000040
 800121c:	2000006c 	.word	0x2000006c

08001220 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001228:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800122e:	f001 f9d3 	bl	80025d8 <HAL_GPIO_TogglePin>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	48000400 	.word	0x48000400

08001240 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);//2097152
 8001248:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <HAL_CAN_ErrorCallback+0x1c>)
 800124e:	f001 f9c3 	bl	80025d8 <HAL_GPIO_TogglePin>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	48000400 	.word	0x48000400

08001260 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001268:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800126e:	f001 f9b3 	bl	80025d8 <HAL_GPIO_TogglePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	48000400 	.word	0x48000400

08001280 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800128c:	4803      	ldr	r0, [pc, #12]	@ (800129c <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 800128e:	f001 f9a3 	bl	80025d8 <HAL_GPIO_TogglePin>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	48000400 	.word	0x48000400

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <Error_Handler+0x8>

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <NMI_Handler+0x4>

080012fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <UsageFault_Handler+0x4>

0800131c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134a:	f000 f8ff 	bl	800154c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <CAN1_TX_IRQHandler+0x10>)
 800135a:	f000 fc3a 	bl	8001bd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000006c 	.word	0x2000006c

08001368 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <CAN1_RX0_IRQHandler+0x10>)
 800136e:	f000 fc30 	bl	8001bd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000006c 	.word	0x2000006c

0800137c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <I2C1_EV_IRQHandler+0x10>)
 8001382:	f001 fcf1 	bl	8002d68 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000094 	.word	0x20000094

08001390 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <I2C1_ER_IRQHandler+0x10>)
 8001396:	f001 fd01 	bl	8002d9c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000094 	.word	0x20000094

080013a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013ac:	f001 f92e 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <vesc2halcan>:
#include "vesc2halcan.h"

uint8_t vesc2halcan(CAN_TxHeaderTypeDef* txHeader, uint8_t* txData, size_t txDataSize, const VESC_RawFrame* vescRawFrame)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
	if (txDataSize < vescRawFrame->can_dlc){
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	461a      	mov	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d201      	bcs.n	80013f6 <vesc2halcan+0x1e>
		return VESC2HALCAN_ERR_TXDATA;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e020      	b.n	8001438 <vesc2halcan+0x60>
	}
	txHeader->ExtId = *(uint32_t*)vescRawFrame & 0x1FFFFFFF; //Identifier
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	605a      	str	r2, [r3, #4]
	txHeader->IDE = CAN_ID_EXT;//IdType
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2204      	movs	r2, #4
 8001406:	609a      	str	r2, [r3, #8]
	txHeader->RTR = CAN_RTR_DATA; //TxFrameType
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]

	// see FDCAN_data_length_code
	if (vescRawFrame->can_dlc >= 0u && vescRawFrame->can_dlc <= 8u){
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	2b08      	cmp	r3, #8
 8001414:	d80f      	bhi.n	8001436 <vesc2halcan+0x5e>
		txHeader->DLC = vescRawFrame->can_dlc;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	611a      	str	r2, [r3, #16]
//	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
//	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
//	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	txHeader->MessageMarker = 0x0;

	memcpy(txData, vescRawFrame->rawData, vescRawFrame->can_dlc);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f103 0108 	add.w	r1, r3, #8
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	461a      	mov	r2, r3
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f004 f87f 	bl	8005530 <memcpy>

	return VESC2HALCAN_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <vesc2halcan+0x60>
		return VESC2HALCAN_ERR_DLC;
 8001436:	2303      	movs	r3, #3
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff ffb6 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	@ (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	@ (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	@ (800148c <LoopForever+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f004 f83b 	bl	80054e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff fd9d 	bl	8000fb0 <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001484:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 8001488:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800148c:	20000268 	.word	0x20000268

08001490 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_IRQHandler>
	...

08001494 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <HAL_Init+0x3c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <HAL_Init+0x3c>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 fe72 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 f80f 	bl	80014d4 <HAL_InitTick>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	e001      	b.n	80014c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c2:	f7ff fef3 	bl	80012ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014e0:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <HAL_InitTick+0x6c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d023      	beq.n	8001530 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_InitTick+0x70>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_InitTick+0x6c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fe7d 	bl	80021fe <HAL_SYSTICK_Config>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10f      	bne.n	800152a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d809      	bhi.n	8001524 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 fe47 	bl	80021aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151c:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <HAL_InitTick+0x74>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e007      	b.n	8001534 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	e004      	b.n	8001534 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e001      	b.n	8001534 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000008 	.word	0x20000008
 8001570:	20000264 	.word	0x20000264

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000264 	.word	0x20000264

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0ed      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff f96e 	bl	80008d4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff ffb4 	bl	8001574 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800160e:	e012      	b.n	8001636 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001610:	f7ff ffb0 	bl	8001574 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0c5      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0e5      	beq.n	8001610 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0202 	bic.w	r2, r2, #2
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff ff8e 	bl	8001574 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff ff8a 	bl	8001574 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e09f      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e5      	bne.n	800165c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7e5b      	ldrb	r3, [r3, #25]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e9b      	ldrb	r3, [r3, #26]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0220 	orr.w	r2, r2, #32
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0220 	bic.w	r2, r2, #32
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7edb      	ldrb	r3, [r3, #27]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0210 	bic.w	r2, r2, #16
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7f1b      	ldrb	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0208 	orr.w	r2, r2, #8
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0208 	bic.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7f5b      	ldrb	r3, [r3, #29]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0204 	orr.w	r2, r2, #4
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	ea42 0103 	orr.w	r1, r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b087      	sub	sp, #28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017e2:	7cfb      	ldrb	r3, [r7, #19]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d003      	beq.n	80017f0 <HAL_CAN_ConfigFilter+0x26>
 80017e8:	7cfb      	ldrb	r3, [r7, #19]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	f040 80aa 	bne.w	8001944 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017f6:	f043 0201 	orr.w	r2, r3, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	2201      	movs	r2, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d123      	bne.n	8001872 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	401a      	ands	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800184c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3248      	adds	r2, #72	@ 0x48
 8001852:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001866:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	3348      	adds	r3, #72	@ 0x48
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d122      	bne.n	80018c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	431a      	orrs	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800189a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3248      	adds	r2, #72	@ 0x48
 80018a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b6:	6979      	ldr	r1, [r7, #20]
 80018b8:	3348      	adds	r3, #72	@ 0x48
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	440b      	add	r3, r1
 80018be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80018da:	e007      	b.n	80018ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001906:	e007      	b.n	8001918 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001936:	f023 0201 	bic.w	r2, r3, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	e006      	b.n	8001952 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d12e      	bne.n	80019d0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0201 	bic.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800198a:	f7ff fdf3 	bl	8001574 <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001990:	e012      	b.n	80019b8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001992:	f7ff fdef 	bl	8001574 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b0a      	cmp	r3, #10
 800199e:	d90b      	bls.n	80019b8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2205      	movs	r2, #5
 80019b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e012      	b.n	80019de <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e006      	b.n	80019de <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
  }
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b089      	sub	sp, #36	@ 0x24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a04:	7ffb      	ldrb	r3, [r7, #31]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d003      	beq.n	8001a12 <HAL_CAN_AddTxMessage+0x2c>
 8001a0a:	7ffb      	ldrb	r3, [r7, #31]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	f040 80ad 	bne.w	8001b6c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10a      	bne.n	8001a32 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 8095 	beq.w	8001b5c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	0e1b      	lsrs	r3, r3, #24
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	409a      	lsls	r2, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10d      	bne.n	8001a6a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a58:	68f9      	ldr	r1, [r7, #12]
 8001a5a:	6809      	ldr	r1, [r1, #0]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3318      	adds	r3, #24
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	440b      	add	r3, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e00f      	b.n	8001a8a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3318      	adds	r3, #24
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	440b      	add	r3, r1
 8001a88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6819      	ldr	r1, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	691a      	ldr	r2, [r3, #16]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3318      	adds	r3, #24
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	440b      	add	r3, r1
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	7d1b      	ldrb	r3, [r3, #20]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d111      	bne.n	8001aca <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3318      	adds	r3, #24
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3307      	adds	r3, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061a      	lsls	r2, r3, #24
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3306      	adds	r3, #6
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	3204      	adds	r2, #4
 8001aea:	7812      	ldrb	r2, [r2, #0]
 8001aec:	4610      	mov	r0, r2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	6811      	ldr	r1, [r2, #0]
 8001af2:	ea43 0200 	orr.w	r2, r3, r0
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	440b      	add	r3, r1
 8001afc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3303      	adds	r3, #3
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	061a      	lsls	r2, r3, #24
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	4610      	mov	r0, r2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	6811      	ldr	r1, [r2, #0]
 8001b28:	ea43 0200 	orr.w	r2, r3, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	440b      	add	r3, r1
 8001b32:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3318      	adds	r3, #24
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	6811      	ldr	r1, [r2, #0]
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3318      	adds	r3, #24
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	440b      	add	r3, r1
 8001b56:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e00e      	b.n	8001b7a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e006      	b.n	8001b7a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	@ 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b96:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d002      	beq.n	8001ba4 <HAL_CAN_ActivateNotification+0x1e>
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d109      	bne.n	8001bb8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6959      	ldr	r1, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e006      	b.n	8001bc6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
  }
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b08a      	sub	sp, #40	@ 0x28
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d07c      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d023      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2201      	movs	r2, #1
 8001c28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fb13 	bl	8001260 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c3a:	e016      	b.n	8001c6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d004      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4e:	e00c      	b.n	8001c6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	e002      	b.n	8001c6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff fb0b 	bl	8001280 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d024      	beq.n	8001cbe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f959 	bl	8001f40 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c8e:	e016      	b.n	8001cbe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca2:	e00c      	b.n	8001cbe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb6:	e002      	b.n	8001cbe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f955 	bl	8001f68 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d024      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f939 	bl	8001f54 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ce2:	e016      	b.n	8001d12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf6:	e00c      	b.n	8001d12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d0a:	e002      	b.n	8001d12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f935 	bl	8001f7c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00c      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2210      	movs	r2, #16
 8001d34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2208      	movs	r2, #8
 8001d50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f91c 	bl	8001f90 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fa55 	bl	8001220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00c      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2210      	movs	r2, #16
 8001d98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2208      	movs	r2, #8
 8001db4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8fe 	bl	8001fb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d009      	beq.n	8001dda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8e5 	bl	8001fa4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2210      	movs	r2, #16
 8001df4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8e8 	bl	8001fcc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2208      	movs	r2, #8
 8001e16:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f8e1 	bl	8001fe0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d07b      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d072      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d043      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03e      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ea0:	2b60      	cmp	r3, #96	@ 0x60
 8001ea2:	d02b      	beq.n	8001efc <HAL_CAN_IRQHandler+0x32a>
 8001ea4:	2b60      	cmp	r3, #96	@ 0x60
 8001ea6:	d82e      	bhi.n	8001f06 <HAL_CAN_IRQHandler+0x334>
 8001ea8:	2b50      	cmp	r3, #80	@ 0x50
 8001eaa:	d022      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x320>
 8001eac:	2b50      	cmp	r3, #80	@ 0x50
 8001eae:	d82a      	bhi.n	8001f06 <HAL_CAN_IRQHandler+0x334>
 8001eb0:	2b40      	cmp	r3, #64	@ 0x40
 8001eb2:	d019      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x316>
 8001eb4:	2b40      	cmp	r3, #64	@ 0x40
 8001eb6:	d826      	bhi.n	8001f06 <HAL_CAN_IRQHandler+0x334>
 8001eb8:	2b30      	cmp	r3, #48	@ 0x30
 8001eba:	d010      	beq.n	8001ede <HAL_CAN_IRQHandler+0x30c>
 8001ebc:	2b30      	cmp	r3, #48	@ 0x30
 8001ebe:	d822      	bhi.n	8001f06 <HAL_CAN_IRQHandler+0x334>
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d002      	beq.n	8001eca <HAL_CAN_IRQHandler+0x2f8>
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d005      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ec8:	e01d      	b.n	8001f06 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ed2:	e019      	b.n	8001f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001edc:	e014      	b.n	8001f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ee6:	e00f      	b.n	8001f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ef0:	e00a      	b.n	8001f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001efa:	e005      	b.n	8001f08 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f04:	e000      	b.n	8001f08 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f06:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f16:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff f984 	bl	8001240 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	@ (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	@ 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff8e 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff29 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff3e 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff8e 	bl	80020e8 <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5d 	bl	8002094 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff31 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d005      	beq.n	800223a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2204      	movs	r2, #4
 8002232:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e029      	b.n	800228e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 020e 	bic.w	r2, r2, #14
 8002248:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f003 021c 	and.w	r2, r3, #28
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
    }
  }
  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022a6:	b2db      	uxtb	r3, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e154      	b.n	800256e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8146 	beq.w	8002568 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_GPIO_Init+0x40>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b03      	cmp	r3, #3
 8002360:	d017      	beq.n	8002392 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d123      	bne.n	80023e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	220f      	movs	r2, #15
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	6939      	ldr	r1, [r7, #16]
 80023e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	2203      	movs	r2, #3
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0203 	and.w	r2, r3, #3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80a0 	beq.w	8002568 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002428:	4b58      	ldr	r3, [pc, #352]	@ (800258c <HAL_GPIO_Init+0x2d8>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242c:	4a57      	ldr	r2, [pc, #348]	@ (800258c <HAL_GPIO_Init+0x2d8>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6613      	str	r3, [r2, #96]	@ 0x60
 8002434:	4b55      	ldr	r3, [pc, #340]	@ (800258c <HAL_GPIO_Init+0x2d8>)
 8002436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002440:	4a53      	ldr	r2, [pc, #332]	@ (8002590 <HAL_GPIO_Init+0x2dc>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800246a:	d019      	beq.n	80024a0 <HAL_GPIO_Init+0x1ec>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a49      	ldr	r2, [pc, #292]	@ (8002594 <HAL_GPIO_Init+0x2e0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x1e8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a48      	ldr	r2, [pc, #288]	@ (8002598 <HAL_GPIO_Init+0x2e4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1e4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a47      	ldr	r2, [pc, #284]	@ (800259c <HAL_GPIO_Init+0x2e8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1e0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a46      	ldr	r2, [pc, #280]	@ (80025a0 <HAL_GPIO_Init+0x2ec>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1dc>
 800248c:	2304      	movs	r3, #4
 800248e:	e008      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002490:	2307      	movs	r3, #7
 8002492:	e006      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002494:	2303      	movs	r3, #3
 8002496:	e004      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 8002498:	2302      	movs	r3, #2
 800249a:	e002      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_GPIO_Init+0x1ee>
 80024a0:	2300      	movs	r3, #0
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	f002 0203 	and.w	r2, r2, #3
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	4093      	lsls	r3, r2
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024b2:	4937      	ldr	r1, [pc, #220]	@ (8002590 <HAL_GPIO_Init+0x2dc>)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024c0:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024e4:	4a2f      	ldr	r2, [pc, #188]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ea:	4b2e      	ldr	r3, [pc, #184]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800250e:	4a25      	ldr	r2, [pc, #148]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002538:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800253e:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002562:	4a10      	ldr	r2, [pc, #64]	@ (80025a4 <HAL_GPIO_Init+0x2f0>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aea3 	bne.w	80022c4 <HAL_GPIO_Init+0x10>
  }
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000
 8002594:	48000400 	.word	0x48000400
 8002598:	48000800 	.word	0x48000800
 800259c:	48000c00 	.word	0x48000c00
 80025a0:	48001000 	.word	0x48001000
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c4:	e002      	b.n	80025cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4013      	ands	r3, r2
 80025f0:	041a      	lsls	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43d9      	mvns	r1, r3
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	400b      	ands	r3, r1
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002616:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002622:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fc9a 	bl	8000f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e08d      	b.n	800276a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe faea 	bl	8000c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	@ 0x24
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800268c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800269c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d107      	bne.n	80026b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	e006      	b.n	80026c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d108      	bne.n	80026de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	e007      	b.n	80026ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69d9      	ldr	r1, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	460b      	mov	r3, r1
 8002782:	817b      	strh	r3, [r7, #10]
 8002784:	4613      	mov	r3, r2
 8002786:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	f040 80fd 	bne.w	8002990 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_I2C_Master_Transmit+0x30>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e0f6      	b.n	8002992 <HAL_I2C_Master_Transmit+0x21e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027ac:	f7fe fee2 	bl	8001574 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2319      	movs	r3, #25
 80027b8:	2201      	movs	r2, #1
 80027ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f001 f871 	bl	80038a6 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0e1      	b.n	8002992 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2221      	movs	r2, #33	@ 0x21
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2210      	movs	r2, #16
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	893a      	ldrh	r2, [r7, #8]
 80027ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2bff      	cmp	r3, #255	@ 0xff
 80027fe:	d906      	bls.n	800280e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	22ff      	movs	r2, #255	@ 0xff
 8002804:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002806:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e007      	b.n	800281e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002818:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800281c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002822:	2b00      	cmp	r3, #0
 8002824:	d024      	beq.n	8002870 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	8979      	ldrh	r1, [r7, #10]
 8002862:	4b4e      	ldr	r3, [pc, #312]	@ (800299c <HAL_I2C_Master_Transmit+0x228>)
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f001 fa6b 	bl	8003d44 <I2C_TransferConfig>
 800286e:	e066      	b.n	800293e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	4b48      	ldr	r3, [pc, #288]	@ (800299c <HAL_I2C_Master_Transmit+0x228>)
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f001 fa60 	bl	8003d44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002884:	e05b      	b.n	800293e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f001 f864 	bl	8003958 <I2C_WaitOnTXISFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e07b      	b.n	8002992 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d034      	beq.n	800293e <HAL_I2C_Master_Transmit+0x1ca>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d130      	bne.n	800293e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	2200      	movs	r2, #0
 80028e4:	2180      	movs	r1, #128	@ 0x80
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 ffdd 	bl	80038a6 <I2C_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e04d      	b.n	8002992 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2bff      	cmp	r3, #255	@ 0xff
 80028fe:	d90e      	bls.n	800291e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	22ff      	movs	r2, #255	@ 0xff
 8002904:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f001 fa14 	bl	8003d44 <I2C_TransferConfig>
 800291c:	e00f      	b.n	800293e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	b2da      	uxtb	r2, r3
 800292e:	8979      	ldrh	r1, [r7, #10]
 8002930:	2300      	movs	r3, #0
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f001 fa03 	bl	8003d44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d19e      	bne.n	8002886 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	6a39      	ldr	r1, [r7, #32]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f001 f84a 	bl	80039e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01a      	b.n	8002992 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2220      	movs	r2, #32
 8002962:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <HAL_I2C_Master_Transmit+0x22c>)
 8002970:	400b      	ands	r3, r1
 8002972:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	80002000 	.word	0x80002000
 80029a0:	fe00e800 	.word	0xfe00e800

080029a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	461a      	mov	r2, r3
 80029b0:	460b      	mov	r3, r1
 80029b2:	817b      	strh	r3, [r7, #10]
 80029b4:	4613      	mov	r3, r2
 80029b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	f040 80db 	bne.w	8002b7c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_I2C_Master_Receive+0x30>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0d4      	b.n	8002b7e <HAL_I2C_Master_Receive+0x1da>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe fdca 	bl	8001574 <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2319      	movs	r3, #25
 80029e8:	2201      	movs	r2, #1
 80029ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 ff59 	bl	80038a6 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0bf      	b.n	8002b7e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2222      	movs	r2, #34	@ 0x22
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2210      	movs	r2, #16
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	893a      	ldrh	r2, [r7, #8]
 8002a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2bff      	cmp	r3, #255	@ 0xff
 8002a2e:	d90e      	bls.n	8002a4e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	8979      	ldrh	r1, [r7, #10]
 8002a3e:	4b52      	ldr	r3, [pc, #328]	@ (8002b88 <HAL_I2C_Master_Receive+0x1e4>)
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f001 f97c 	bl	8003d44 <I2C_TransferConfig>
 8002a4c:	e06d      	b.n	8002b2a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	8979      	ldrh	r1, [r7, #10]
 8002a60:	4b49      	ldr	r3, [pc, #292]	@ (8002b88 <HAL_I2C_Master_Receive+0x1e4>)
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f001 f96b 	bl	8003d44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a6e:	e05c      	b.n	8002b2a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	6a39      	ldr	r1, [r7, #32]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fff9 	bl	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e07c      	b.n	8002b7e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d034      	beq.n	8002b2a <HAL_I2C_Master_Receive+0x186>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d130      	bne.n	8002b2a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2180      	movs	r1, #128	@ 0x80
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fee7 	bl	80038a6 <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e04d      	b.n	8002b7e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2bff      	cmp	r3, #255	@ 0xff
 8002aea:	d90e      	bls.n	8002b0a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	22ff      	movs	r2, #255	@ 0xff
 8002af0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	8979      	ldrh	r1, [r7, #10]
 8002afa:	2300      	movs	r3, #0
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f001 f91e 	bl	8003d44 <I2C_TransferConfig>
 8002b08:	e00f      	b.n	8002b2a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f001 f90d 	bl	8003d44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d19d      	bne.n	8002a70 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	6a39      	ldr	r1, [r7, #32]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 ff54 	bl	80039e6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e01a      	b.n	8002b7e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <HAL_I2C_Master_Receive+0x1e8>)
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	80002400 	.word	0x80002400
 8002b8c:	fe00e800 	.word	0xfe00e800

08002b90 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	f040 80d6 	bne.w	8002d5e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bc0:	d101      	bne.n	8002bc6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0cc      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_IsDeviceReady+0x44>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0c5      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x1d0>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2224      	movs	r2, #36	@ 0x24
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_I2C_IsDeviceReady+0x72>
 8002bf2:	897b      	ldrh	r3, [r7, #10]
 8002bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bfc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c00:	e006      	b.n	8002c10 <HAL_I2C_IsDeviceReady+0x80>
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c0c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002c16:	f7fe fcad 	bl	8001574 <HAL_GetTick>
 8002c1a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c48:	e034      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d01a      	beq.n	8002c88 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7fe fc8f 	bl	8001574 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <HAL_I2C_IsDeviceReady+0xd8>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10f      	bne.n	8002c88 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e06b      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <HAL_I2C_IsDeviceReady+0x130>
 8002cba:	7fbb      	ldrb	r3, [r7, #30]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0c4      	beq.n	8002c4a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b10      	cmp	r3, #16
 8002ccc:	d01a      	beq.n	8002d04 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2120      	movs	r1, #32
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fde4 	bl	80038a6 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e03b      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2220      	movs	r2, #32
 8002cee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e02d      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2120      	movs	r1, #32
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fdc9 	bl	80038a6 <I2C_WaitOnFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e020      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2210      	movs	r2, #16
 8002d24:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f63f af56 	bhi.w	8002bea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	68f9      	ldr	r1, [r7, #12]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
  }
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00f      	beq.n	8002dde <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ddc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00f      	beq.n	8002e08 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f043 0208 	orr.w	r2, r3, #8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00f      	beq.n	8002e32 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e20:	f043 0202 	orr.w	r2, r3, #2
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e30:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 030b 	and.w	r3, r3, #11
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fbd5 	bl	80035f4 <I2C_ITError>
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]
 8002e86:	4613      	mov	r3, r2
 8002e88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d101      	bne.n	8002ef6 <I2C_Slave_ISR_IT+0x24>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e0e2      	b.n	80030bc <I2C_Slave_ISR_IT+0x1ea>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f9b5 	bl	8003284 <I2C_ITSlaveCplt>
 8002f1a:	e0ca      	b.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d04b      	beq.n	8002fbe <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d046      	beq.n	8002fbe <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d128      	bne.n	8002f8c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b28      	cmp	r3, #40	@ 0x28
 8002f44:	d108      	bne.n	8002f58 <I2C_Slave_ISR_IT+0x86>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f4c:	d104      	bne.n	8002f58 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f4e:	6939      	ldr	r1, [r7, #16]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fafb 	bl	800354c <I2C_ITListenCplt>
 8002f56:	e031      	b.n	8002fbc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b29      	cmp	r3, #41	@ 0x29
 8002f62:	d10e      	bne.n	8002f82 <I2C_Slave_ISR_IT+0xb0>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f6a:	d00a      	beq.n	8002f82 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fc54 	bl	8003822 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f926 	bl	80031cc <I2C_ITSlaveSeqCplt>
 8002f80:	e01c      	b.n	8002fbc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2210      	movs	r2, #16
 8002f88:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f8a:	e08f      	b.n	80030ac <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2210      	movs	r2, #16
 8002f92:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <I2C_Slave_ISR_IT+0xdc>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fac:	d17e      	bne.n	80030ac <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fb1d 	bl	80035f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002fba:	e077      	b.n	80030ac <I2C_Slave_ISR_IT+0x1da>
 8002fbc:	e076      	b.n	80030ac <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02f      	beq.n	8003028 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02a      	beq.n	8003028 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d018      	beq.n	800300e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d14b      	bne.n	80030b0 <I2C_Slave_ISR_IT+0x1de>
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800301e:	d047      	beq.n	80030b0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f8d3 	bl	80031cc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003026:	e043      	b.n	80030b0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800303c:	6939      	ldr	r1, [r7, #16]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f840 	bl	80030c4 <I2C_ITAddrCplt>
 8003044:	e035      	b.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d030      	beq.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02b      	beq.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d018      	beq.n	8003096 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003094:	e00d      	b.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800309c:	d002      	beq.n	80030a4 <I2C_Slave_ISR_IT+0x1d2>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f891 	bl	80031cc <I2C_ITSlaveSeqCplt>
 80030aa:	e002      	b.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80030ac:	bf00      	nop
 80030ae:	e000      	b.n	80030b2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80030b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030da:	2b28      	cmp	r3, #40	@ 0x28
 80030dc:	d16a      	bne.n	80031b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80030fc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800310a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003118:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d138      	bne.n	8003194 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003122:	897b      	ldrh	r3, [r7, #10]
 8003124:	09db      	lsrs	r3, r3, #7
 8003126:	b29a      	uxth	r2, r3
 8003128:	89bb      	ldrh	r3, [r7, #12]
 800312a:	4053      	eors	r3, r2
 800312c:	b29b      	uxth	r3, r3
 800312e:	f003 0306 	and.w	r3, r3, #6
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11c      	bne.n	8003170 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003136:	897b      	ldrh	r3, [r7, #10]
 8003138:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	2b02      	cmp	r3, #2
 800314a:	d13b      	bne.n	80031c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2208      	movs	r2, #8
 8003158:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003162:	89ba      	ldrh	r2, [r7, #12]
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	4619      	mov	r1, r3
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff fe86 	bl	8002e7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800316e:	e029      	b.n	80031c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003174:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fe15 	bl	8003da8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003186:	89ba      	ldrh	r2, [r7, #12]
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	4619      	mov	r1, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fe74 	bl	8002e7a <HAL_I2C_AddrCallback>
}
 8003192:	e017      	b.n	80031c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fe05 	bl	8003da8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031a6:	89ba      	ldrh	r2, [r7, #12]
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fe64 	bl	8002e7a <HAL_I2C_AddrCallback>
}
 80031b2:	e007      	b.n	80031c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e00c      	b.n	800321a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003218:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b29      	cmp	r3, #41	@ 0x29
 8003224:	d112      	bne.n	800324c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2228      	movs	r2, #40	@ 0x28
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2221      	movs	r2, #33	@ 0x21
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003234:	2101      	movs	r1, #1
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fdb6 	bl	8003da8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fe04 	bl	8002e52 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800324a:	e017      	b.n	800327c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b2a      	cmp	r3, #42	@ 0x2a
 8003256:	d111      	bne.n	800327c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2228      	movs	r2, #40	@ 0x28
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2222      	movs	r2, #34	@ 0x22
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003266:	2102      	movs	r1, #2
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fd9d 	bl	8003da8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fdf5 	bl	8002e66 <HAL_I2C_SlaveRxCpltCallback>
}
 800327c:	bf00      	nop
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2220      	movs	r2, #32
 80032ae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032b0:	7afb      	ldrb	r3, [r7, #11]
 80032b2:	2b21      	cmp	r3, #33	@ 0x21
 80032b4:	d002      	beq.n	80032bc <I2C_ITSlaveCplt+0x38>
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	2b29      	cmp	r3, #41	@ 0x29
 80032ba:	d108      	bne.n	80032ce <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80032bc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fd71 	bl	8003da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2221      	movs	r2, #33	@ 0x21
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80032cc:	e019      	b.n	8003302 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	2b22      	cmp	r3, #34	@ 0x22
 80032d2:	d002      	beq.n	80032da <I2C_ITSlaveCplt+0x56>
 80032d4:	7afb      	ldrb	r3, [r7, #11]
 80032d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80032d8:	d108      	bne.n	80032ec <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032da:	f248 0102 	movw	r1, #32770	@ 0x8002
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fd62 	bl	8003da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2222      	movs	r2, #34	@ 0x22
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ea:	e00a      	b.n	8003302 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	2b28      	cmp	r3, #40	@ 0x28
 80032f0:	d107      	bne.n	8003302 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80032f2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fd56 	bl	8003da8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003310:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b89      	ldr	r3, [pc, #548]	@ (8003544 <I2C_ITSlaveCplt+0x2c0>)
 800331e:	400b      	ands	r3, r1
 8003320:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fa7d 	bl	8003822 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d013      	beq.n	800335a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003340:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01f      	beq.n	800338a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003358:	e017      	b.n	800338a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003372:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	b29a      	uxth	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f023 0304 	bic.w	r3, r3, #4
 800339a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d049      	beq.n	800348a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d044      	beq.n	800348a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d128      	bne.n	800345c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b28      	cmp	r3, #40	@ 0x28
 8003414:	d108      	bne.n	8003428 <I2C_ITSlaveCplt+0x1a4>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800341c:	d104      	bne.n	8003428 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800341e:	6979      	ldr	r1, [r7, #20]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f893 	bl	800354c <I2C_ITListenCplt>
 8003426:	e030      	b.n	800348a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b29      	cmp	r3, #41	@ 0x29
 8003432:	d10e      	bne.n	8003452 <I2C_ITSlaveCplt+0x1ce>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800343a:	d00a      	beq.n	8003452 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2210      	movs	r2, #16
 8003442:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f9ec 	bl	8003822 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff febe 	bl	80031cc <I2C_ITSlaveSeqCplt>
 8003450:	e01b      	b.n	800348a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2210      	movs	r2, #16
 8003458:	61da      	str	r2, [r3, #28]
 800345a:	e016      	b.n	800348a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2210      	movs	r2, #16
 8003462:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <I2C_ITSlaveCplt+0x1fa>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800347c:	d105      	bne.n	800348a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8b5 	bl	80035f4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8a4 	bl	80035f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b28      	cmp	r3, #40	@ 0x28
 80034b6:	d141      	bne.n	800353c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80034b8:	6979      	ldr	r1, [r7, #20]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f846 	bl	800354c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034c0:	e03c      	b.n	800353c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034ca:	d014      	beq.n	80034f6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff fe7d 	bl	80031cc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <I2C_ITSlaveCplt+0x2c4>)
 80034d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff fcd1 	bl	8002e96 <HAL_I2C_ListenCpltCallback>
}
 80034f4:	e022      	b.n	800353c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b22      	cmp	r3, #34	@ 0x22
 8003500:	d10e      	bne.n	8003520 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fca4 	bl	8002e66 <HAL_I2C_SlaveRxCpltCallback>
}
 800351e:	e00d      	b.n	800353c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff fc8b 	bl	8002e52 <HAL_I2C_SlaveTxCpltCallback>
}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	fe00e800 	.word	0xfe00e800
 8003548:	ffff0000 	.word	0xffff0000

0800354c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a25      	ldr	r2, [pc, #148]	@ (80035f0 <I2C_ITListenCplt+0xa4>)
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d022      	beq.n	80035c8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d012      	beq.n	80035c8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035c8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fbeb 	bl	8003da8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2210      	movs	r2, #16
 80035d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fc57 	bl	8002e96 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	ffff0000 	.word	0xffff0000

080035f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a6d      	ldr	r2, [pc, #436]	@ (80037c8 <I2C_ITError+0x1d4>)
 8003612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b28      	cmp	r3, #40	@ 0x28
 800362a:	d005      	beq.n	8003638 <I2C_ITError+0x44>
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b29      	cmp	r3, #41	@ 0x29
 8003630:	d002      	beq.n	8003638 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b2a      	cmp	r3, #42	@ 0x2a
 8003636:	d10b      	bne.n	8003650 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003638:	2103      	movs	r1, #3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fbb4 	bl	8003da8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2228      	movs	r2, #40	@ 0x28
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a60      	ldr	r2, [pc, #384]	@ (80037cc <I2C_ITError+0x1d8>)
 800364c:	635a      	str	r2, [r3, #52]	@ 0x34
 800364e:	e030      	b.n	80036b2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003650:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fba7 	bl	8003da8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8e1 	bl	8003822 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b60      	cmp	r3, #96	@ 0x60
 800366a:	d01f      	beq.n	80036ac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d114      	bne.n	80036ac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b10      	cmp	r3, #16
 800368e:	d109      	bne.n	80036a4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2210      	movs	r2, #16
 8003696:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	f043 0204 	orr.w	r2, r3, #4
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2220      	movs	r2, #32
 80036aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d039      	beq.n	8003734 <I2C_ITError+0x140>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b11      	cmp	r3, #17
 80036c4:	d002      	beq.n	80036cc <I2C_ITError+0xd8>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b21      	cmp	r3, #33	@ 0x21
 80036ca:	d133      	bne.n	8003734 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036da:	d107      	bne.n	80036ec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fdd1 	bl	8002298 <HAL_DMA_GetState>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d017      	beq.n	800372c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	4a33      	ldr	r2, [pc, #204]	@ (80037d0 <I2C_ITError+0x1dc>)
 8003702:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fd80 	bl	8002216 <HAL_DMA_Abort_IT>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d04d      	beq.n	80037b8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003726:	4610      	mov	r0, r2
 8003728:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800372a:	e045      	b.n	80037b8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f851 	bl	80037d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003732:	e041      	b.n	80037b8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d039      	beq.n	80037b0 <I2C_ITError+0x1bc>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b12      	cmp	r3, #18
 8003740:	d002      	beq.n	8003748 <I2C_ITError+0x154>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b22      	cmp	r3, #34	@ 0x22
 8003746:	d133      	bne.n	80037b0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003756:	d107      	bne.n	8003768 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003766:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe fd93 	bl	8002298 <HAL_DMA_GetState>
 8003772:	4603      	mov	r3, r0
 8003774:	2b01      	cmp	r3, #1
 8003776:	d017      	beq.n	80037a8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <I2C_ITError+0x1dc>)
 800377e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fd42 	bl	8002216 <HAL_DMA_Abort_IT>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d011      	beq.n	80037bc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037a2:	4610      	mov	r0, r2
 80037a4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037a6:	e009      	b.n	80037bc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f813 	bl	80037d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037ae:	e005      	b.n	80037bc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f80f 	bl	80037d4 <I2C_TreatErrorCallback>
  }
}
 80037b6:	e002      	b.n	80037be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037bc:	bf00      	nop
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	ffff0000 	.word	0xffff0000
 80037cc:	08002ed3 	.word	0x08002ed3
 80037d0:	0800386b 	.word	0x0800386b

080037d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b60      	cmp	r3, #96	@ 0x60
 80037e6:	d10e      	bne.n	8003806 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fb5d 	bl	8002ebe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003804:	e009      	b.n	800381a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fb48 	bl	8002eaa <HAL_I2C_ErrorCallback>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b02      	cmp	r3, #2
 8003836:	d103      	bne.n	8003840 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d007      	beq.n	800385e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0201 	orr.w	r2, r2, #1
 800385c:	619a      	str	r2, [r3, #24]
  }
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	2200      	movs	r2, #0
 8003896:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff ff9b 	bl	80037d4 <I2C_TreatErrorCallback>
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b6:	e03b      	b.n	8003930 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 f961 	bl	8003b84 <I2C_IsErrorOccurred>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e041      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d02d      	beq.n	8003930 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fd fe4e 	bl	8001574 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <I2C_WaitOnFlagUntilTimeout+0x44>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d122      	bne.n	8003930 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d113      	bne.n	8003930 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e00f      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4013      	ands	r3, r2
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	429a      	cmp	r2, r3
 800394c:	d0b4      	beq.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003964:	e033      	b.n	80039ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f90a 	bl	8003b84 <I2C_IsErrorOccurred>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e031      	b.n	80039de <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d025      	beq.n	80039ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7fd fdf7 	bl	8001574 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d11a      	bne.n	80039ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d013      	beq.n	80039ce <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e007      	b.n	80039de <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d1c4      	bne.n	8003966 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f2:	e02f      	b.n	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f8c3 	bl	8003b84 <I2C_IsErrorOccurred>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e02d      	b.n	8003a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7fd fdb4 	bl	8001574 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11a      	bne.n	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d013      	beq.n	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e007      	b.n	8003a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d1c8      	bne.n	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a7c:	e071      	b.n	8003b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f87e 	bl	8003b84 <I2C_IsErrorOccurred>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d13b      	bne.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d138      	bne.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d105      	bne.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d121      	bne.n	8003b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b24      	ldr	r3, [pc, #144]	@ (8003b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003af0:	400b      	ands	r3, r1
 8003af2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
 8003b10:	e002      	b.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003b18:	f7fd fd2c 	bl	8001574 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d119      	bne.n	8003b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d116      	bne.n	8003b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d00f      	beq.n	8003b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d002      	beq.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d083      	beq.n	8003a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	fe00e800 	.word	0xfe00e800

08003b84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	@ 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d068      	beq.n	8003c82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2210      	movs	r2, #16
 8003bb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bb8:	e049      	b.n	8003c4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d045      	beq.n	8003c4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bc2:	f7fd fcd7 	bl	8001574 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <I2C_IsErrorOccurred+0x54>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d13a      	bne.n	8003c4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bfa:	d121      	bne.n	8003c40 <I2C_IsErrorOccurred+0xbc>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c02:	d01d      	beq.n	8003c40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d01a      	beq.n	8003c40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c1a:	f7fd fcab 	bl	8001574 <HAL_GetTick>
 8003c1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c20:	e00e      	b.n	8003c40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c22:	f7fd fca7 	bl	8001574 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b19      	cmp	r3, #25
 8003c2e:	d907      	bls.n	8003c40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f043 0320 	orr.w	r3, r3, #32
 8003c36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003c3e:	e006      	b.n	8003c4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d1e9      	bne.n	8003c22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d003      	beq.n	8003c64 <I2C_IsErrorOccurred+0xe0>
 8003c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0aa      	beq.n	8003bba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2220      	movs	r2, #32
 8003c72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	f043 0304 	orr.w	r3, r3, #4
 8003c7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00b      	beq.n	8003cac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f043 0308 	orr.w	r3, r3, #8
 8003cbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	f043 0302 	orr.w	r3, r3, #2
 8003cde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ce8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01c      	beq.n	8003d32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff fd92 	bl	8003822 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <I2C_IsErrorOccurred+0x1bc>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3728      	adds	r7, #40	@ 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	fe00e800 	.word	0xfe00e800

08003d44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	817b      	strh	r3, [r7, #10]
 8003d52:	4613      	mov	r3, r2
 8003d54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d56:	897b      	ldrh	r3, [r7, #10]
 8003d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d5c:	7a7b      	ldrb	r3, [r7, #9]
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	0d5b      	lsrs	r3, r3, #21
 8003d7e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d82:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <I2C_TransferConfig+0x60>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	43db      	mvns	r3, r3
 8003d88:	ea02 0103 	and.w	r1, r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	03ff63ff 	.word	0x03ff63ff

08003da8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003db8:	887b      	ldrh	r3, [r7, #2]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003dc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dd6:	2b28      	cmp	r3, #40	@ 0x28
 8003dd8:	d003      	beq.n	8003de2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003de0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00f      	beq.n	8003e0c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003df2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e00:	2b28      	cmp	r3, #40	@ 0x28
 8003e02:	d003      	beq.n	8003e0c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da03      	bge.n	8003e1c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003e1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	2b10      	cmp	r3, #16
 8003e20:	d103      	bne.n	8003e2a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d103      	bne.n	8003e38 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f043 0320 	orr.w	r3, r3, #32
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	2b40      	cmp	r3, #64	@ 0x40
 8003e3c:	d103      	bne.n	8003e46 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	400a      	ands	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d138      	bne.n	8003eec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e032      	b.n	8003eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	@ 0x24
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e000      	b.n	8003eee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
  }
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d139      	bne.n	8003f84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e033      	b.n	8003f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2224      	movs	r2, #36	@ 0x24
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f98:	4b04      	ldr	r3, [pc, #16]	@ (8003fac <HAL_PWREx_GetVoltageRange+0x18>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000

08003fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fbe:	d130      	bne.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc0:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fcc:	d038      	beq.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fce:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fde:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2232      	movs	r2, #50	@ 0x32
 8003fe4:	fb02 f303 	mul.w	r3, r2, r3
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0c9b      	lsrs	r3, r3, #18
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff4:	e002      	b.n	8003ffc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffc:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004008:	d102      	bne.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x60>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f2      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004010:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401c:	d110      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e00f      	b.n	8004042 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004022:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	d007      	beq.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004030:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004038:	4a05      	ldr	r2, [pc, #20]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800403e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40007000 	.word	0x40007000
 8004054:	20000000 	.word	0x20000000
 8004058:	431bde83 	.word	0x431bde83

0800405c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f000 bc02 	b.w	8004874 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004070:	4b96      	ldr	r3, [pc, #600]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800407a:	4b94      	ldr	r3, [pc, #592]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80e4 	beq.w	800425a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4c>
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b0c      	cmp	r3, #12
 800409c:	f040 808b 	bne.w	80041b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	f040 8087 	bne.w	80041b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a8:	4b88      	ldr	r3, [pc, #544]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x64>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e3d9      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1a      	ldr	r2, [r3, #32]
 80040c4:	4b81      	ldr	r3, [pc, #516]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d004      	beq.n	80040da <HAL_RCC_OscConfig+0x7e>
 80040d0:	4b7e      	ldr	r3, [pc, #504]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040d8:	e005      	b.n	80040e6 <HAL_RCC_OscConfig+0x8a>
 80040da:	4b7c      	ldr	r3, [pc, #496]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80040dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d223      	bcs.n	8004132 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fd54 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e3ba      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040fe:	4b73      	ldr	r3, [pc, #460]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a72      	ldr	r2, [pc, #456]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004104:	f043 0308 	orr.w	r3, r3, #8
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b70      	ldr	r3, [pc, #448]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	496d      	ldr	r1, [pc, #436]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800411c:	4b6b      	ldr	r3, [pc, #428]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	4968      	ldr	r1, [pc, #416]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
 8004130:	e025      	b.n	800417e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004132:	4b66      	ldr	r3, [pc, #408]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a65      	ldr	r2, [pc, #404]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004138:	f043 0308 	orr.w	r3, r3, #8
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b63      	ldr	r3, [pc, #396]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4960      	ldr	r1, [pc, #384]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004150:	4b5e      	ldr	r3, [pc, #376]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	495b      	ldr	r1, [pc, #364]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fd14 	bl	8004b9c <RCC_SetFlashLatencyFromMSIRange>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e37a      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800417e:	f000 fc81 	bl	8004a84 <HAL_RCC_GetSysClockFreq>
 8004182:	4602      	mov	r2, r0
 8004184:	4b51      	ldr	r3, [pc, #324]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	4950      	ldr	r1, [pc, #320]	@ (80042d0 <HAL_RCC_OscConfig+0x274>)
 8004190:	5ccb      	ldrb	r3, [r1, r3]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	fa22 f303 	lsr.w	r3, r2, r3
 800419a:	4a4e      	ldr	r2, [pc, #312]	@ (80042d4 <HAL_RCC_OscConfig+0x278>)
 800419c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800419e:	4b4e      	ldr	r3, [pc, #312]	@ (80042d8 <HAL_RCC_OscConfig+0x27c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd f996 	bl	80014d4 <HAL_InitTick>
 80041a8:	4603      	mov	r3, r0
 80041aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d052      	beq.n	8004258 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	e35e      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d032      	beq.n	8004224 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041be:	4b43      	ldr	r3, [pc, #268]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041ca:	f7fd f9d3 	bl	8001574 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d2:	f7fd f9cf 	bl	8001574 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e347      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e4:	4b39      	ldr	r3, [pc, #228]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041f0:	4b36      	ldr	r3, [pc, #216]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a35      	ldr	r2, [pc, #212]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80041f6:	f043 0308 	orr.w	r3, r3, #8
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b33      	ldr	r3, [pc, #204]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4930      	ldr	r1, [pc, #192]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800420e:	4b2f      	ldr	r3, [pc, #188]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	492b      	ldr	r1, [pc, #172]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
 8004222:	e01a      	b.n	800425a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004224:	4b29      	ldr	r3, [pc, #164]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a28      	ldr	r2, [pc, #160]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004230:	f7fd f9a0 	bl	8001574 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004238:	f7fd f99c 	bl	8001574 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e314      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800424a:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x1dc>
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004258:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d073      	beq.n	800434e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d005      	beq.n	8004278 <HAL_RCC_OscConfig+0x21c>
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d10e      	bne.n	8004290 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d10b      	bne.n	8004290 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d063      	beq.n	800434c <HAL_RCC_OscConfig+0x2f0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d15f      	bne.n	800434c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e2f1      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004298:	d106      	bne.n	80042a8 <HAL_RCC_OscConfig+0x24c>
 800429a:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a0b      	ldr	r2, [pc, #44]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e025      	b.n	80042f4 <HAL_RCC_OscConfig+0x298>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b0:	d114      	bne.n	80042dc <HAL_RCC_OscConfig+0x280>
 80042b2:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a05      	ldr	r2, [pc, #20]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80042b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b03      	ldr	r3, [pc, #12]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a02      	ldr	r2, [pc, #8]	@ (80042cc <HAL_RCC_OscConfig+0x270>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e013      	b.n	80042f4 <HAL_RCC_OscConfig+0x298>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	08005564 	.word	0x08005564
 80042d4:	20000000 	.word	0x20000000
 80042d8:	20000004 	.word	0x20000004
 80042dc:	4ba0      	ldr	r3, [pc, #640]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a9f      	ldr	r2, [pc, #636]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b9d      	ldr	r3, [pc, #628]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a9c      	ldr	r2, [pc, #624]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd f93a 	bl	8001574 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fd f936 	bl	8001574 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e2ae      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004316:	4b92      	ldr	r3, [pc, #584]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x2a8>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd f926 	bl	8001574 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fd f922 	bl	8001574 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	@ 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e29a      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433e:	4b88      	ldr	r3, [pc, #544]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x2d0>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d060      	beq.n	800441c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d005      	beq.n	800436c <HAL_RCC_OscConfig+0x310>
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d119      	bne.n	800439a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d116      	bne.n	800439a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436c:	4b7c      	ldr	r3, [pc, #496]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_OscConfig+0x328>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e277      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	4973      	ldr	r1, [pc, #460]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004398:	e040      	b.n	800441c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a2:	4b6f      	ldr	r3, [pc, #444]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6e      	ldr	r2, [pc, #440]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd f8e1 	bl	8001574 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fd f8dd 	bl	8001574 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e255      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c8:	4b65      	ldr	r3, [pc, #404]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b62      	ldr	r3, [pc, #392]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	495f      	ldr	r1, [pc, #380]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
 80043e8:	e018      	b.n	800441c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b5d      	ldr	r3, [pc, #372]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80043f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fd f8bd 	bl	8001574 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fd f8b9 	bl	8001574 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e231      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004410:	4b53      	ldr	r3, [pc, #332]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03c      	beq.n	80044a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01c      	beq.n	800446a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004430:	4b4b      	ldr	r3, [pc, #300]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004436:	4a4a      	ldr	r2, [pc, #296]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fd f898 	bl	8001574 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004448:	f7fd f894 	bl	8001574 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e20c      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800445a:	4b41      	ldr	r3, [pc, #260]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ef      	beq.n	8004448 <HAL_RCC_OscConfig+0x3ec>
 8004468:	e01b      	b.n	80044a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446a:	4b3d      	ldr	r3, [pc, #244]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 800446c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004470:	4a3b      	ldr	r2, [pc, #236]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fd f87b 	bl	8001574 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004482:	f7fd f877 	bl	8001574 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1ef      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004494:	4b32      	ldr	r3, [pc, #200]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ef      	bne.n	8004482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a6 	beq.w	80045fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10d      	bne.n	80044dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b27      	ldr	r3, [pc, #156]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	4a26      	ldr	r2, [pc, #152]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80044cc:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d8:	2301      	movs	r3, #1
 80044da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044dc:	4b21      	ldr	r3, [pc, #132]	@ (8004564 <HAL_RCC_OscConfig+0x508>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d118      	bne.n	800451a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004564 <HAL_RCC_OscConfig+0x508>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <HAL_RCC_OscConfig+0x508>)
 80044ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f4:	f7fd f83e 	bl	8001574 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fc:	f7fd f83a 	bl	8001574 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1b2      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450e:	4b15      	ldr	r3, [pc, #84]	@ (8004564 <HAL_RCC_OscConfig+0x508>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d108      	bne.n	8004534 <HAL_RCC_OscConfig+0x4d8>
 8004522:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004528:	4a0d      	ldr	r2, [pc, #52]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004532:	e029      	b.n	8004588 <HAL_RCC_OscConfig+0x52c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b05      	cmp	r3, #5
 800453a:	d115      	bne.n	8004568 <HAL_RCC_OscConfig+0x50c>
 800453c:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 800453e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004542:	4a07      	ldr	r2, [pc, #28]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004544:	f043 0304 	orr.w	r3, r3, #4
 8004548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800454c:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004552:	4a03      	ldr	r2, [pc, #12]	@ (8004560 <HAL_RCC_OscConfig+0x504>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800455c:	e014      	b.n	8004588 <HAL_RCC_OscConfig+0x52c>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	40007000 	.word	0x40007000
 8004568:	4b9a      	ldr	r3, [pc, #616]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456e:	4a99      	ldr	r2, [pc, #612]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004578:	4b96      	ldr	r3, [pc, #600]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800457e:	4a95      	ldr	r2, [pc, #596]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d016      	beq.n	80045be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fc fff0 	bl	8001574 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004596:	e00a      	b.n	80045ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fc ffec 	bl	8001574 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e162      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ae:	4b89      	ldr	r3, [pc, #548]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ed      	beq.n	8004598 <HAL_RCC_OscConfig+0x53c>
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fc ffd9 	bl	8001574 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fc ffd5 	bl	8001574 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e14b      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045dc:	4b7d      	ldr	r3, [pc, #500]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ed      	bne.n	80045c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045ea:	7ffb      	ldrb	r3, [r7, #31]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f0:	4b78      	ldr	r3, [pc, #480]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	4a77      	ldr	r2, [pc, #476]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03c      	beq.n	8004682 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01c      	beq.n	800464a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004610:	4b70      	ldr	r3, [pc, #448]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004616:	4a6f      	ldr	r2, [pc, #444]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fc ffa8 	bl	8001574 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004628:	f7fc ffa4 	bl	8001574 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e11c      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800463a:	4b66      	ldr	r3, [pc, #408]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800463c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ef      	beq.n	8004628 <HAL_RCC_OscConfig+0x5cc>
 8004648:	e01b      	b.n	8004682 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800464a:	4b62      	ldr	r3, [pc, #392]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800464c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004650:	4a60      	ldr	r2, [pc, #384]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fc ff8b 	bl	8001574 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004662:	f7fc ff87 	bl	8001574 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e0ff      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004674:	4b57      	ldr	r3, [pc, #348]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ef      	bne.n	8004662 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80f3 	beq.w	8004872 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	2b02      	cmp	r3, #2
 8004692:	f040 80c9 	bne.w	8004828 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004696:	4b4f      	ldr	r3, [pc, #316]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0203 	and.w	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d12c      	bne.n	8004704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b4:	3b01      	subs	r3, #1
 80046b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d123      	bne.n	8004704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d11b      	bne.n	8004704 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d113      	bne.n	8004704 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	3b01      	subs	r3, #1
 80046ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d109      	bne.n	8004704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	085b      	lsrs	r3, r3, #1
 80046fc:	3b01      	subs	r3, #1
 80046fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d06b      	beq.n	80047dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d062      	beq.n	80047d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800470a:	4b32      	ldr	r3, [pc, #200]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0ac      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800471a:	4b2e      	ldr	r3, [pc, #184]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2d      	ldr	r2, [pc, #180]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004720:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004724:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004726:	f7fc ff25 	bl	8001574 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800472c:	e008      	b.n	8004740 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472e:	f7fc ff21 	bl	8001574 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e099      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004740:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474c:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	4b21      	ldr	r3, [pc, #132]	@ (80047d8 <HAL_RCC_OscConfig+0x77c>)
 8004752:	4013      	ands	r3, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800475c:	3a01      	subs	r2, #1
 800475e:	0112      	lsls	r2, r2, #4
 8004760:	4311      	orrs	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004766:	0212      	lsls	r2, r2, #8
 8004768:	4311      	orrs	r1, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800476e:	0852      	lsrs	r2, r2, #1
 8004770:	3a01      	subs	r2, #1
 8004772:	0552      	lsls	r2, r2, #21
 8004774:	4311      	orrs	r1, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800477a:	0852      	lsrs	r2, r2, #1
 800477c:	3a01      	subs	r2, #1
 800477e:	0652      	lsls	r2, r2, #25
 8004780:	4311      	orrs	r1, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004786:	06d2      	lsls	r2, r2, #27
 8004788:	430a      	orrs	r2, r1
 800478a:	4912      	ldr	r1, [pc, #72]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800478c:	4313      	orrs	r3, r2
 800478e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004790:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0f      	ldr	r2, [pc, #60]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 8004796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800479a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800479c:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a0c      	ldr	r2, [pc, #48]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 80047a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047a8:	f7fc fee4 	bl	8001574 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fc fee0 	bl	8001574 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e058      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c2:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <HAL_RCC_OscConfig+0x778>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ce:	e050      	b.n	8004872 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e04f      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
 80047d4:	40021000 	.word	0x40021000
 80047d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047dc:	4b27      	ldr	r3, [pc, #156]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d144      	bne.n	8004872 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047e8:	4b24      	ldr	r3, [pc, #144]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a23      	ldr	r2, [pc, #140]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 80047ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f4:	4b21      	ldr	r3, [pc, #132]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a20      	ldr	r2, [pc, #128]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004800:	f7fc feb8 	bl	8001574 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fc feb4 	bl	8001574 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e02c      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481a:	4b18      	ldr	r3, [pc, #96]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x7ac>
 8004826:	e024      	b.n	8004872 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d01f      	beq.n	800486e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482e:	4b13      	ldr	r3, [pc, #76]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a12      	ldr	r2, [pc, #72]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 8004834:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fc fe9b 	bl	8001574 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004842:	f7fc fe97 	bl	8001574 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e00f      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004854:	4b09      	ldr	r3, [pc, #36]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f0      	bne.n	8004842 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004860:	4b06      	ldr	r3, [pc, #24]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	4905      	ldr	r1, [pc, #20]	@ (800487c <HAL_RCC_OscConfig+0x820>)
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_OscConfig+0x824>)
 8004868:	4013      	ands	r3, r2
 800486a:	60cb      	str	r3, [r1, #12]
 800486c:	e001      	b.n	8004872 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40021000 	.word	0x40021000
 8004880:	feeefffc 	.word	0xfeeefffc

08004884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0e7      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b75      	ldr	r3, [pc, #468]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d910      	bls.n	80048c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b72      	ldr	r3, [pc, #456]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 0207 	bic.w	r2, r3, #7
 80048ae:	4970      	ldr	r1, [pc, #448]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b6:	4b6e      	ldr	r3, [pc, #440]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0cf      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d010      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	4b66      	ldr	r3, [pc, #408]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d908      	bls.n	80048f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e4:	4b63      	ldr	r3, [pc, #396]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4960      	ldr	r1, [pc, #384]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d04c      	beq.n	800499c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490a:	4b5a      	ldr	r3, [pc, #360]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d121      	bne.n	800495a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e0a6      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004922:	4b54      	ldr	r3, [pc, #336]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d115      	bne.n	800495a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e09a      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800493a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e08e      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e086      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800495a:	4b46      	ldr	r3, [pc, #280]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f023 0203 	bic.w	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	4943      	ldr	r1, [pc, #268]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 8004968:	4313      	orrs	r3, r2
 800496a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496c:	f7fc fe02 	bl	8001574 <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	e00a      	b.n	800498a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004974:	f7fc fdfe 	bl	8001574 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e06e      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	4b3a      	ldr	r3, [pc, #232]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 020c 	and.w	r2, r3, #12
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	429a      	cmp	r2, r3
 800499a:	d1eb      	bne.n	8004974 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d010      	beq.n	80049ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	4b31      	ldr	r3, [pc, #196]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d208      	bcs.n	80049ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	492b      	ldr	r1, [pc, #172]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049ca:	4b29      	ldr	r3, [pc, #164]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d210      	bcs.n	80049fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d8:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 0207 	bic.w	r2, r3, #7
 80049e0:	4923      	ldr	r1, [pc, #140]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e8:	4b21      	ldr	r3, [pc, #132]	@ (8004a70 <HAL_RCC_ClockConfig+0x1ec>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e036      	b.n	8004a68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d008      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a06:	4b1b      	ldr	r3, [pc, #108]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	4918      	ldr	r1, [pc, #96]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d009      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a24:	4b13      	ldr	r3, [pc, #76]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4910      	ldr	r1, [pc, #64]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a38:	f000 f824 	bl	8004a84 <HAL_RCC_GetSysClockFreq>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <HAL_RCC_ClockConfig+0x1f0>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	490b      	ldr	r1, [pc, #44]	@ (8004a78 <HAL_RCC_ClockConfig+0x1f4>)
 8004a4a:	5ccb      	ldrb	r3, [r1, r3]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	4a09      	ldr	r2, [pc, #36]	@ (8004a7c <HAL_RCC_ClockConfig+0x1f8>)
 8004a56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <HAL_RCC_ClockConfig+0x1fc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fc fd39 	bl	80014d4 <HAL_InitTick>
 8004a62:	4603      	mov	r3, r0
 8004a64:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a66:	7afb      	ldrb	r3, [r7, #11]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40022000 	.word	0x40022000
 8004a74:	40021000 	.word	0x40021000
 8004a78:	08005564 	.word	0x08005564
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	20000004 	.word	0x20000004

08004a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a92:	4b3e      	ldr	r3, [pc, #248]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d121      	bne.n	8004af6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d11e      	bne.n	8004af6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ab8:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ac4:	4b31      	ldr	r3, [pc, #196]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aca:	0a1b      	lsrs	r3, r3, #8
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10d      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004af4:	e00a      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d102      	bne.n	8004b02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004afc:	4b25      	ldr	r3, [pc, #148]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004afe:	61bb      	str	r3, [r7, #24]
 8004b00:	e004      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b08:	4b23      	ldr	r3, [pc, #140]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d134      	bne.n	8004b7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b12:	4b1e      	ldr	r3, [pc, #120]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d003      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d003      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0xac>
 8004b28:	e005      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b2c:	617b      	str	r3, [r7, #20]
      break;
 8004b2e:	e005      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b30:	4b19      	ldr	r3, [pc, #100]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b32:	617b      	str	r3, [r7, #20]
      break;
 8004b34:	e002      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	617b      	str	r3, [r7, #20]
      break;
 8004b3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b3c:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	3301      	adds	r3, #1
 8004b48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b4a:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	fb03 f202 	mul.w	r2, r3, r2
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b62:	4b0a      	ldr	r3, [pc, #40]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	0e5b      	lsrs	r3, r3, #25
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b7c:	69bb      	ldr	r3, [r7, #24]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3724      	adds	r7, #36	@ 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	08005574 	.word	0x08005574
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	007a1200 	.word	0x007a1200

08004b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bb4:	f7ff f9ee 	bl	8003f94 <HAL_PWREx_GetVoltageRange>
 8004bb8:	6178      	str	r0, [r7, #20]
 8004bba:	e014      	b.n	8004be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bbc:	4b25      	ldr	r3, [pc, #148]	@ (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc0:	4a24      	ldr	r2, [pc, #144]	@ (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bc8:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bd4:	f7ff f9de 	bl	8003f94 <HAL_PWREx_GetVoltageRange>
 8004bd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bda:	4b1e      	ldr	r3, [pc, #120]	@ (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bde:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bec:	d10b      	bne.n	8004c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b80      	cmp	r3, #128	@ 0x80
 8004bf2:	d919      	bls.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004bf8:	d902      	bls.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	e013      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c00:	2301      	movs	r3, #1
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	e010      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b80      	cmp	r3, #128	@ 0x80
 8004c0a:	d902      	bls.n	8004c12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	e00a      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b80      	cmp	r3, #128	@ 0x80
 8004c16:	d102      	bne.n	8004c1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c18:	2302      	movs	r3, #2
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	e004      	b.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b70      	cmp	r3, #112	@ 0x70
 8004c22:	d101      	bne.n	8004c28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c24:	2301      	movs	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f023 0207 	bic.w	r2, r3, #7
 8004c30:	4909      	ldr	r1, [pc, #36]	@ (8004c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d001      	beq.n	8004c4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40022000 	.word	0x40022000

08004c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c64:	2300      	movs	r3, #0
 8004c66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c68:	2300      	movs	r3, #0
 8004c6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d031      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c80:	d01a      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c86:	d814      	bhi.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c90:	d10f      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c92:	4b5d      	ldr	r3, [pc, #372]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	4a5c      	ldr	r2, [pc, #368]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c9e:	e00c      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fa22 	bl	80050f0 <RCCEx_PLLSAI1_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cb0:	e003      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	74fb      	strb	r3, [r7, #19]
      break;
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cba:	7cfb      	ldrb	r3, [r7, #19]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc0:	4b51      	ldr	r3, [pc, #324]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	494e      	ldr	r1, [pc, #312]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004cd6:	e001      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 809e 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cea:	2300      	movs	r3, #0
 8004cec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cee:	4b46      	ldr	r3, [pc, #280]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d04:	4b40      	ldr	r3, [pc, #256]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d08:	4a3f      	ldr	r2, [pc, #252]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d10:	4b3d      	ldr	r3, [pc, #244]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a39      	ldr	r2, [pc, #228]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d2c:	f7fc fc22 	bl	8001574 <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d32:	e009      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d34:	f7fc fc1e 	bl	8001574 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d902      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	74fb      	strb	r3, [r7, #19]
        break;
 8004d46:	e005      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d48:	4b30      	ldr	r3, [pc, #192]	@ (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ef      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d15a      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01e      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d019      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d76:	4b24      	ldr	r3, [pc, #144]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d82:	4b21      	ldr	r3, [pc, #132]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d88:	4a1f      	ldr	r2, [pc, #124]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d92:	4b1d      	ldr	r3, [pc, #116]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d98:	4a1b      	ldr	r2, [pc, #108]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004da2:	4a19      	ldr	r2, [pc, #100]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d016      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db4:	f7fc fbde 	bl	8001574 <HAL_GetTick>
 8004db8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbc:	f7fc fbda 	bl	8001574 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d902      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	74fb      	strb	r3, [r7, #19]
            break;
 8004dd2:	e006      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0ec      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de8:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df6:	4904      	ldr	r1, [pc, #16]	@ (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004dfe:	e009      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	74bb      	strb	r3, [r7, #18]
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e14:	7c7b      	ldrb	r3, [r7, #17]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	4a8c      	ldr	r2, [pc, #560]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e32:	4b87      	ldr	r3, [pc, #540]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	f023 0203 	bic.w	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	4983      	ldr	r1, [pc, #524]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e54:	4b7e      	ldr	r3, [pc, #504]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5a:	f023 020c 	bic.w	r2, r3, #12
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	497b      	ldr	r1, [pc, #492]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e76:	4b76      	ldr	r3, [pc, #472]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e84:	4972      	ldr	r1, [pc, #456]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e98:	4b6d      	ldr	r3, [pc, #436]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	496a      	ldr	r1, [pc, #424]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eba:	4b65      	ldr	r3, [pc, #404]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	4961      	ldr	r1, [pc, #388]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004edc:	4b5c      	ldr	r3, [pc, #368]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	4959      	ldr	r1, [pc, #356]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004efe:	4b54      	ldr	r3, [pc, #336]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	4950      	ldr	r1, [pc, #320]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f20:	4b4b      	ldr	r3, [pc, #300]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2e:	4948      	ldr	r1, [pc, #288]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f42:	4b43      	ldr	r3, [pc, #268]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f50:	493f      	ldr	r1, [pc, #252]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d028      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f64:	4b3a      	ldr	r3, [pc, #232]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f72:	4937      	ldr	r1, [pc, #220]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f82:	d106      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f84:	4b32      	ldr	r3, [pc, #200]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a31      	ldr	r2, [pc, #196]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f8e:	60d3      	str	r3, [r2, #12]
 8004f90:	e011      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f8a4 	bl	80050f0 <RCCEx_PLLSAI1_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fac:	7cfb      	ldrb	r3, [r7, #19]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d028      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fc2:	4b23      	ldr	r3, [pc, #140]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd0:	491f      	ldr	r1, [pc, #124]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fec:	60d3      	str	r3, [r2, #12]
 8004fee:	e011      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	2101      	movs	r1, #1
 8005000:	4618      	mov	r0, r3
 8005002:	f000 f875 	bl	80050f0 <RCCEx_PLLSAI1_Config>
 8005006:	4603      	mov	r3, r0
 8005008:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800500a:	7cfb      	ldrb	r3, [r7, #19]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02b      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800502e:	4908      	ldr	r1, [pc, #32]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800503e:	d109      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005040:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a02      	ldr	r2, [pc, #8]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800504a:	60d3      	str	r3, [r2, #12]
 800504c:	e014      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800505c:	d10c      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3304      	adds	r3, #4
 8005062:	2101      	movs	r1, #1
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f843 	bl	80050f0 <RCCEx_PLLSAI1_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800506e:	7cfb      	ldrb	r3, [r7, #19]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01c      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005084:	4b19      	ldr	r3, [pc, #100]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005092:	4916      	ldr	r1, [pc, #88]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050a2:	d10c      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	2102      	movs	r1, #2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 f820 	bl	80050f0 <RCCEx_PLLSAI1_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050ca:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d8:	4904      	ldr	r1, [pc, #16]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000

080050f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050fe:	4b74      	ldr	r3, [pc, #464]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d018      	beq.n	800513c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800510a:	4b71      	ldr	r3, [pc, #452]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0203 	and.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d10d      	bne.n	8005136 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
       ||
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005122:	4b6b      	ldr	r3, [pc, #428]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
       ||
 8005132:	429a      	cmp	r2, r3
 8005134:	d047      	beq.n	80051c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
 800513a:	e044      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b03      	cmp	r3, #3
 8005142:	d018      	beq.n	8005176 <RCCEx_PLLSAI1_Config+0x86>
 8005144:	2b03      	cmp	r3, #3
 8005146:	d825      	bhi.n	8005194 <RCCEx_PLLSAI1_Config+0xa4>
 8005148:	2b01      	cmp	r3, #1
 800514a:	d002      	beq.n	8005152 <RCCEx_PLLSAI1_Config+0x62>
 800514c:	2b02      	cmp	r3, #2
 800514e:	d009      	beq.n	8005164 <RCCEx_PLLSAI1_Config+0x74>
 8005150:	e020      	b.n	8005194 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005152:	4b5f      	ldr	r3, [pc, #380]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11d      	bne.n	800519a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005162:	e01a      	b.n	800519a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005164:	4b5a      	ldr	r3, [pc, #360]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800516c:	2b00      	cmp	r3, #0
 800516e:	d116      	bne.n	800519e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005174:	e013      	b.n	800519e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005176:	4b56      	ldr	r3, [pc, #344]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005182:	4b53      	ldr	r3, [pc, #332]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005192:	e006      	b.n	80051a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e004      	b.n	80051a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800519a:	bf00      	nop
 800519c:	e002      	b.n	80051a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10d      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051aa:	4b49      	ldr	r3, [pc, #292]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	430b      	orrs	r3, r1
 80051c0:	4943      	ldr	r1, [pc, #268]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d17c      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051cc:	4b40      	ldr	r3, [pc, #256]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a3f      	ldr	r2, [pc, #252]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fc f9cc 	bl	8001574 <HAL_GetTick>
 80051dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051de:	e009      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e0:	f7fc f9c8 	bl	8001574 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d902      	bls.n	80051f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	73fb      	strb	r3, [r7, #15]
        break;
 80051f2:	e005      	b.n	8005200 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051f4:	4b36      	ldr	r3, [pc, #216]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1ef      	bne.n	80051e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d15f      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d110      	bne.n	800522e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800520c:	4b30      	ldr	r3, [pc, #192]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005214:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6892      	ldr	r2, [r2, #8]
 800521c:	0211      	lsls	r1, r2, #8
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68d2      	ldr	r2, [r2, #12]
 8005222:	06d2      	lsls	r2, r2, #27
 8005224:	430a      	orrs	r2, r1
 8005226:	492a      	ldr	r1, [pc, #168]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005228:	4313      	orrs	r3, r2
 800522a:	610b      	str	r3, [r1, #16]
 800522c:	e027      	b.n	800527e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d112      	bne.n	800525a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005234:	4b26      	ldr	r3, [pc, #152]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800523c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	0211      	lsls	r1, r2, #8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6912      	ldr	r2, [r2, #16]
 800524a:	0852      	lsrs	r2, r2, #1
 800524c:	3a01      	subs	r2, #1
 800524e:	0552      	lsls	r2, r2, #21
 8005250:	430a      	orrs	r2, r1
 8005252:	491f      	ldr	r1, [pc, #124]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005254:	4313      	orrs	r3, r2
 8005256:	610b      	str	r3, [r1, #16]
 8005258:	e011      	b.n	800527e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800525a:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005262:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6892      	ldr	r2, [r2, #8]
 800526a:	0211      	lsls	r1, r2, #8
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6952      	ldr	r2, [r2, #20]
 8005270:	0852      	lsrs	r2, r2, #1
 8005272:	3a01      	subs	r2, #1
 8005274:	0652      	lsls	r2, r2, #25
 8005276:	430a      	orrs	r2, r1
 8005278:	4915      	ldr	r1, [pc, #84]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527a:	4313      	orrs	r3, r2
 800527c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800527e:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a13      	ldr	r2, [pc, #76]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005284:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005288:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528a:	f7fc f973 	bl	8001574 <HAL_GetTick>
 800528e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005290:	e009      	b.n	80052a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005292:	f7fc f96f 	bl	8001574 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d902      	bls.n	80052a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	73fb      	strb	r3, [r7, #15]
          break;
 80052a4:	e005      	b.n	80052b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052a6:	4b0a      	ldr	r3, [pc, #40]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ef      	beq.n	8005292 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052b8:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	4903      	ldr	r1, [pc, #12]	@ (80052d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000

080052d4 <VESC_convertStatus4ToRaw>:

	return true;
}

bool VESC_convertStatus4ToRaw(VESC_RawFrame* out, const VESC_Status_4* in)
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781a      	ldrb	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_4;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2210      	movs	r2, #16
 80052ea:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	709a      	strb	r2, [r3, #2]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052f8:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_4_DLEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2208      	movs	r2, #8
 80052fe:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPFET], in->tempFet, VESC_SCALE_STATUS_4_TEMPFET);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	edd3 7a01 	vldr	s15, [r3, #4]
 8005306:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800530a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800530e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005312:	ee17 3a90 	vmov	r3, s15
 8005316:	b219      	sxth	r1, r3
 8005318:	2300      	movs	r3, #0
 800531a:	3308      	adds	r3, #8
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	18d4      	adds	r4, r2, r3
 8005320:	4608      	mov	r0, r1
 8005322:	f000 f8bb 	bl	800549c <_VESC_b16_swap>
 8005326:	4603      	mov	r3, r0
 8005328:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPMOTOR], in->tempMotor, VESC_SCALE_STATUS_4_TEMPMOTOR);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005330:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800533c:	ee17 3a90 	vmov	r3, s15
 8005340:	b219      	sxth	r1, r3
 8005342:	2302      	movs	r3, #2
 8005344:	3308      	adds	r3, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	18d4      	adds	r4, r2, r3
 800534a:	4608      	mov	r0, r1
 800534c:	f000 f8a6 	bl	800549c <_VESC_b16_swap>
 8005350:	4603      	mov	r3, r0
 8005352:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_CURRENTIN], in->currentIn, VESC_SCALE_STATUS_4_CURRENTIN);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	edd3 7a03 	vldr	s15, [r3, #12]
 800535a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800535e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005366:	ee17 3a90 	vmov	r3, s15
 800536a:	b219      	sxth	r1, r3
 800536c:	2304      	movs	r3, #4
 800536e:	3308      	adds	r3, #8
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	18d4      	adds	r4, r2, r3
 8005374:	4608      	mov	r0, r1
 8005376:	f000 f891 	bl	800549c <_VESC_b16_swap>
 800537a:	4603      	mov	r3, r0
 800537c:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_PIDPOS], in->pidPos, VESC_SCALE_STATUS_4_PIDPOS);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	edd3 7a04 	vldr	s15, [r3, #16]
 8005384:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80053b4 <VESC_convertStatus4ToRaw+0xe0>
 8005388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800538c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005390:	ee17 3a90 	vmov	r3, s15
 8005394:	b219      	sxth	r1, r3
 8005396:	2306      	movs	r3, #6
 8005398:	3308      	adds	r3, #8
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	18d4      	adds	r4, r2, r3
 800539e:	4608      	mov	r0, r1
 80053a0:	f000 f87c 	bl	800549c <_VESC_b16_swap>
 80053a4:	4603      	mov	r3, r0
 80053a6:	8023      	strh	r3, [r4, #0]

	return true;
 80053a8:	2301      	movs	r3, #1
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd90      	pop	{r4, r7, pc}
 80053b2:	bf00      	nop
 80053b4:	42480000 	.word	0x42480000

080053b8 <VESC_convertStatus6ToRaw>:

	return true;
}

bool VESC_convertStatus6ToRaw(VESC_RawFrame* out, const VESC_Status_6* in)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	781a      	ldrb	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_6;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	221c      	movs	r2, #28
 80053ce:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	709a      	strb	r2, [r3, #2]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053dc:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_6_DLEN;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2208      	movs	r2, #8
 80053e2:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC1], in->adc1, VESC_SCALE_STATUS_6_ADC1);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8005498 <VESC_convertStatus6ToRaw+0xe0>
 80053ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f6:	ee17 3a90 	vmov	r3, s15
 80053fa:	b219      	sxth	r1, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	3308      	adds	r3, #8
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	18d4      	adds	r4, r2, r3
 8005404:	4608      	mov	r0, r1
 8005406:	f000 f849 	bl	800549c <_VESC_b16_swap>
 800540a:	4603      	mov	r3, r0
 800540c:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC2], in->adc2, VESC_SCALE_STATUS_6_ADC2);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	edd3 7a02 	vldr	s15, [r3, #8]
 8005414:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8005498 <VESC_convertStatus6ToRaw+0xe0>
 8005418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800541c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005420:	ee17 3a90 	vmov	r3, s15
 8005424:	b219      	sxth	r1, r3
 8005426:	2302      	movs	r3, #2
 8005428:	3308      	adds	r3, #8
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	18d4      	adds	r4, r2, r3
 800542e:	4608      	mov	r0, r1
 8005430:	f000 f834 	bl	800549c <_VESC_b16_swap>
 8005434:	4603      	mov	r3, r0
 8005436:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_ADC3], in->adc3, VESC_SCALE_STATUS_6_ADC3);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	edd3 7a03 	vldr	s15, [r3, #12]
 800543e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005498 <VESC_convertStatus6ToRaw+0xe0>
 8005442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800544a:	ee17 3a90 	vmov	r3, s15
 800544e:	b219      	sxth	r1, r3
 8005450:	2304      	movs	r3, #4
 8005452:	3308      	adds	r3, #8
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	18d4      	adds	r4, r2, r3
 8005458:	4608      	mov	r0, r1
 800545a:	f000 f81f 	bl	800549c <_VESC_b16_swap>
 800545e:	4603      	mov	r3, r0
 8005460:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_6[_VESC_OFFSETIDX_STATUS_6_PPM], in->ppm, VESC_SCALE_STATUS_6_PPM);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	edd3 7a04 	vldr	s15, [r3, #16]
 8005468:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005498 <VESC_convertStatus6ToRaw+0xe0>
 800546c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005474:	ee17 3a90 	vmov	r3, s15
 8005478:	b219      	sxth	r1, r3
 800547a:	2306      	movs	r3, #6
 800547c:	3308      	adds	r3, #8
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	18d4      	adds	r4, r2, r3
 8005482:	4608      	mov	r0, r1
 8005484:	f000 f80a 	bl	800549c <_VESC_b16_swap>
 8005488:	4603      	mov	r3, r0
 800548a:	8023      	strh	r3, [r4, #0]

	return true;
 800548c:	2301      	movs	r3, #1
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bd90      	pop	{r4, r7, pc}
 8005496:	bf00      	nop
 8005498:	447a0000 	.word	0x447a0000

0800549c <_VESC_b16_swap>:
#include <libVescCan/VESC_Endian.h>

int16_t _VESC_b16_swap(int16_t val)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	80fb      	strh	r3, [r7, #6]
	int16_t ret = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0x00FF) << 8;
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	b21a      	sxth	r2, r3
 80054b0:	89fb      	ldrh	r3, [r7, #14]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0xFF00) >> 8;
 80054b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ba:	121b      	asrs	r3, r3, #8
 80054bc:	b21b      	sxth	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	b21a      	sxth	r2, r3
 80054c2:	89fb      	ldrh	r3, [r7, #14]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	81fb      	strh	r3, [r7, #14]
	return ret;
 80054c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <__libc_init_array>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005520 <__libc_init_array+0x38>)
 80054ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005524 <__libc_init_array+0x3c>)
 80054ee:	1b64      	subs	r4, r4, r5
 80054f0:	10a4      	asrs	r4, r4, #2
 80054f2:	2600      	movs	r6, #0
 80054f4:	42a6      	cmp	r6, r4
 80054f6:	d109      	bne.n	800550c <__libc_init_array+0x24>
 80054f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005528 <__libc_init_array+0x40>)
 80054fa:	4c0c      	ldr	r4, [pc, #48]	@ (800552c <__libc_init_array+0x44>)
 80054fc:	f000 f826 	bl	800554c <_init>
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	2600      	movs	r6, #0
 8005506:	42a6      	cmp	r6, r4
 8005508:	d105      	bne.n	8005516 <__libc_init_array+0x2e>
 800550a:	bd70      	pop	{r4, r5, r6, pc}
 800550c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005510:	4798      	blx	r3
 8005512:	3601      	adds	r6, #1
 8005514:	e7ee      	b.n	80054f4 <__libc_init_array+0xc>
 8005516:	f855 3b04 	ldr.w	r3, [r5], #4
 800551a:	4798      	blx	r3
 800551c:	3601      	adds	r6, #1
 800551e:	e7f2      	b.n	8005506 <__libc_init_array+0x1e>
 8005520:	080055a4 	.word	0x080055a4
 8005524:	080055a4 	.word	0x080055a4
 8005528:	080055a4 	.word	0x080055a4
 800552c:	080055a8 	.word	0x080055a8

08005530 <memcpy>:
 8005530:	440a      	add	r2, r1
 8005532:	4291      	cmp	r1, r2
 8005534:	f100 33ff 	add.w	r3, r0, #4294967295
 8005538:	d100      	bne.n	800553c <memcpy+0xc>
 800553a:	4770      	bx	lr
 800553c:	b510      	push	{r4, lr}
 800553e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005546:	4291      	cmp	r1, r2
 8005548:	d1f9      	bne.n	800553e <memcpy+0xe>
 800554a:	bd10      	pop	{r4, pc}

0800554c <_init>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	bf00      	nop
 8005550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005552:	bc08      	pop	{r3}
 8005554:	469e      	mov	lr, r3
 8005556:	4770      	bx	lr

08005558 <_fini>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr
