
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047cc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004958  08004958  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004998  08004998  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004998  08004998  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004998  08004998  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004998  08004998  00005998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800499c  0800499c  0000599c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080049a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000010  080049b0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080049b0  0000615c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f28a  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aec  00000000  00000000  000152ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00017db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000930  00000000  00000000  00018a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233e4  00000000  00000000  00019340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c78  00000000  00000000  0003c724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6ff  00000000  00000000  0004e39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118a9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc4  00000000  00000000  00118ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011baa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004940 	.word	0x08004940

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004940 	.word	0x08004940

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    BMS_1.bq_i2c = i2c;
 80001d4:	4a30      	ldr	r2, [pc, #192]	@ (8000298 <BQ_Init+0xcc>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]
    if(i2c == &hi2c1){
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a2f      	ldr	r2, [pc, #188]	@ (800029c <BQ_Init+0xd0>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d10b      	bne.n	80001fa <BQ_Init+0x2e>
    	__HAL_RCC_I2C1_CLK_ENABLE();
 80001e2:	4b2f      	ldr	r3, [pc, #188]	@ (80002a0 <BQ_Init+0xd4>)
 80001e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001e6:	4a2e      	ldr	r2, [pc, #184]	@ (80002a0 <BQ_Init+0xd4>)
 80001e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80001ee:	4b2c      	ldr	r3, [pc, #176]	@ (80002a0 <BQ_Init+0xd4>)
 80001f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]

//    ("[BQ] Started", 12);
//    if (USE_SCANNER == 1)
//    {
#ifdef USE_SCANNER
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001fa:	4b2a      	ldr	r3, [pc, #168]	@ (80002a4 <BQ_Init+0xd8>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	b299      	uxth	r1, r3
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	2203      	movs	r2, #3
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f001 ffcc 	bl	80021a4 <HAL_I2C_IsDeviceReady>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
	while (ret != HAL_OK)
 8000210:	e012      	b.n	8000238 <BQ_Init+0x6c>
	{
//            ("[BQ] device not founded", 23);
		ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 8000212:	4b24      	ldr	r3, [pc, #144]	@ (80002a4 <BQ_Init+0xd8>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	b299      	uxth	r1, r3
 800021a:	2364      	movs	r3, #100	@ 0x64
 800021c:	2203      	movs	r2, #3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f001 ffc0 	bl	80021a4 <HAL_I2C_IsDeviceReady>
 8000224:	4603      	mov	r3, r0
 8000226:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022c:	f001 f9c8 	bl	80015c0 <HAL_Delay>
	#ifdef debug
		if(ret == HAL_ERROR){
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d100      	bne.n	8000238 <BQ_Init+0x6c>
			__asm("nop");
 8000236:	bf00      	nop
	while (ret != HAL_OK)
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1e9      	bne.n	8000212 <BQ_Init+0x46>
#endif
//    }

    

    HAL_Delay(1500);
 800023e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000242:	f001 f9bd 	bl	80015c0 <HAL_Delay>
    BQAction_UpdateData(&BMS_1);
 8000246:	4814      	ldr	r0, [pc, #80]	@ (8000298 <BQ_Init+0xcc>)
 8000248:	f000 faa6 	bl	8000798 <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(&BMS_1);
 800024c:	4812      	ldr	r0, [pc, #72]	@ (8000298 <BQ_Init+0xcc>)
 800024e:	f000 fa71 	bl	8000734 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(&BMS_1, false);
 8000252:	2100      	movs	r1, #0
 8000254:	4810      	ldr	r0, [pc, #64]	@ (8000298 <BQ_Init+0xcc>)
 8000256:	f000 f963 	bl	8000520 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(&BMS_1, false);
 800025a:	2100      	movs	r1, #0
 800025c:	480e      	ldr	r0, [pc, #56]	@ (8000298 <BQ_Init+0xcc>)
 800025e:	f000 f975 	bl	800054c <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(&BMS_1, false);
 8000262:	2100      	movs	r1, #0
 8000264:	480c      	ldr	r0, [pc, #48]	@ (8000298 <BQ_Init+0xcc>)
 8000266:	f000 f987 	bl	8000578 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(&BMS_1, true);
 800026a:	2101      	movs	r1, #1
 800026c:	480a      	ldr	r0, [pc, #40]	@ (8000298 <BQ_Init+0xcc>)
 800026e:	f000 f999 	bl	80005a4 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(&BMS_1, true);
 8000272:	2101      	movs	r1, #1
 8000274:	4808      	ldr	r0, [pc, #32]	@ (8000298 <BQ_Init+0xcc>)
 8000276:	f000 f9ab 	bl	80005d0 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(&BMS_1, true);
 800027a:	2101      	movs	r1, #1
 800027c:	4806      	ldr	r0, [pc, #24]	@ (8000298 <BQ_Init+0xcc>)
 800027e:	f000 f9bd 	bl	80005fc <BQAction_SetManufacturingLF>
    BQAction_SetLed(&BMS_1, false);
 8000282:	2100      	movs	r1, #0
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <BQ_Init+0xcc>)
 8000286:	f000 f935 	bl	80004f4 <BQAction_SetLed>

    BQAction_UpdateData(&BMS_1);
 800028a:	4803      	ldr	r0, [pc, #12]	@ (8000298 <BQ_Init+0xcc>)
 800028c:	f000 fa84 	bl	8000798 <BQAction_UpdateData>
    //BQ_ForceUpdateFlash();

    //BQ_BoundaryCellVoltage voltages = BQ_GetBoundaryCellVoltage();

//    ("[BQ] initialized", 16);
}
 8000290:	bf00      	nop
 8000292:	3710      	adds	r7, #16
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000002c 	.word	0x2000002c
 800029c:	20000100 	.word	0x20000100
 80002a0:	40021000 	.word	0x40021000
 80002a4:	20000000 	.word	0x20000000

080002a8 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af02      	add	r7, sp, #8
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	460b      	mov	r3, r1
 80002b2:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002b4:	2344      	movs	r3, #68	@ 0x44
 80002b6:	733b      	strb	r3, [r7, #12]
 80002b8:	2302      	movs	r3, #2
 80002ba:	737b      	strb	r3, [r7, #13]
 80002bc:	887b      	ldrh	r3, [r7, #2]
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	73bb      	strb	r3, [r7, #14]
 80002c2:	887b      	ldrh	r3, [r7, #2]
 80002c4:	0a1b      	lsrs	r3, r3, #8
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	6818      	ldr	r0, [r3, #0]
 80002d0:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <BQ_WriteMABlockCommand+0x48>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	b299      	uxth	r1, r3
 80002d8:	f107 020c 	add.w	r2, r7, #12
 80002dc:	2364      	movs	r3, #100	@ 0x64
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2304      	movs	r3, #4
 80002e2:	f001 fd51 	bl	8001d88 <HAL_I2C_Master_Transmit>
}
 80002e6:	bf00      	nop
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000000 	.word	0x20000000

080002f4 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b092      	sub	sp, #72	@ 0x48
 80002f8:	af02      	add	r7, sp, #8
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	607a      	str	r2, [r7, #4]
 80002fe:	461a      	mov	r2, r3
 8000300:	460b      	mov	r3, r1
 8000302:	817b      	strh	r3, [r7, #10]
 8000304:	4613      	mov	r3, r2
 8000306:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000308:	2344      	movs	r3, #68	@ 0x44
 800030a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800030e:	2302      	movs	r3, #2
 8000310:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000314:	897b      	ldrh	r3, [r7, #10]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800031c:	897b      	ldrh	r3, [r7, #10]
 800031e:	0a1b      	lsrs	r3, r3, #8
 8000320:	b29b      	uxth	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	6818      	ldr	r0, [r3, #0]
 800032c:	4b27      	ldr	r3, [pc, #156]	@ (80003cc <BQ_ReadMABlockCommand+0xd8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	005b      	lsls	r3, r3, #1
 8000332:	b299      	uxth	r1, r3
 8000334:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000338:	2364      	movs	r3, #100	@ 0x64
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2304      	movs	r3, #4
 800033e:	f001 fd23 	bl	8001d88 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 8000342:	2344      	movs	r3, #68	@ 0x44
 8000344:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000348:	7a7b      	ldrb	r3, [r7, #9]
 800034a:	3302      	adds	r3, #2
 800034c:	b2db      	uxtb	r3, r3
 800034e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6818      	ldr	r0, [r3, #0]
 8000356:	4b1d      	ldr	r3, [pc, #116]	@ (80003cc <BQ_ReadMABlockCommand+0xd8>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	b299      	uxth	r1, r3
 800035e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000362:	2364      	movs	r3, #100	@ 0x64
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2302      	movs	r3, #2
 8000368:	f001 fd0e 	bl	8001d88 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 800036c:	2300      	movs	r3, #0
 800036e:	613b      	str	r3, [r7, #16]
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	221f      	movs	r2, #31
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f004 fab5 	bl	80048e8 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <BQ_ReadMABlockCommand+0xd8>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	b299      	uxth	r1, r3
 800038a:	f107 0210 	add.w	r2, r7, #16
 800038e:	2364      	movs	r3, #100	@ 0x64
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	2323      	movs	r3, #35	@ 0x23
 8000394:	f001 fe10 	bl	8001fb8 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000398:	2300      	movs	r3, #0
 800039a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800039c:	e00c      	b.n	80003b8 <BQ_ReadMABlockCommand+0xc4>
    {
        receive[i] = result[i + 3];
 800039e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003a0:	1cda      	adds	r2, r3, #3
 80003a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003a4:	6879      	ldr	r1, [r7, #4]
 80003a6:	440b      	add	r3, r1
 80003a8:	3240      	adds	r2, #64	@ 0x40
 80003aa:	443a      	add	r2, r7
 80003ac:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 80003b0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 80003b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003b4:	3301      	adds	r3, #1
 80003b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80003b8:	7a7b      	ldrb	r3, [r7, #9]
 80003ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80003bc:	429a      	cmp	r2, r3
 80003be:	dbee      	blt.n	800039e <BQ_ReadMABlockCommand+0xaa>
    }
}
 80003c0:	bf00      	nop
 80003c2:	bf00      	nop
 80003c4:	3740      	adds	r7, #64	@ 0x40
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000000 	.word	0x20000000

080003d0 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80003dc:	f107 020c 	add.w	r2, r7, #12
 80003e0:	8879      	ldrh	r1, [r7, #2]
 80003e2:	2302      	movs	r3, #2
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f7ff ff85 	bl	80002f4 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003ee:	7b3b      	ldrb	r3, [r7, #12]
 80003f0:	461a      	mov	r2, r3
 80003f2:	89fb      	ldrh	r3, [r7, #14]
 80003f4:	4313      	orrs	r3, r2
 80003f6:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003f8:	7b7b      	ldrb	r3, [r7, #13]
 80003fa:	021b      	lsls	r3, r3, #8
 80003fc:	b21a      	sxth	r2, r3
 80003fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000402:	4313      	orrs	r3, r2
 8000404:	b21b      	sxth	r3, r3
 8000406:	81fb      	strh	r3, [r7, #14]

    return result;
 8000408:	89fb      	ldrh	r3, [r7, #14]
}
 800040a:	4618      	mov	r0, r3
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <BQ_ReadCommandAsLShort>:

uint16_t BQ_ReadCommandAsLShort(BQ_data* BMS, uint16_t command){
 8000412:	b580      	push	{r7, lr}
 8000414:	b084      	sub	sp, #16
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
 800041a:	460b      	mov	r3, r1
 800041c:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 800041e:	f107 020c 	add.w	r2, r7, #12
 8000422:	8879      	ldrh	r1, [r7, #2]
 8000424:	2302      	movs	r3, #2
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f7ff ff64 	bl	80002f4 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	81fb      	strh	r3, [r7, #14]

    result = result | buf[1];
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	461a      	mov	r2, r3
 8000434:	89fb      	ldrh	r3, [r7, #14]
 8000436:	4313      	orrs	r3, r2
 8000438:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[0] << 8);
 800043a:	7b3b      	ldrb	r3, [r7, #12]
 800043c:	021b      	lsls	r3, r3, #8
 800043e:	b21a      	sxth	r2, r3
 8000440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000444:	4313      	orrs	r3, r2
 8000446:	b21b      	sxth	r3, r3
 8000448:	81fb      	strh	r3, [r7, #14]

    return result;
 800044a:	89fb      	ldrh	r3, [r7, #14]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 8000460:	f107 0208 	add.w	r2, r7, #8
 8000464:	8879      	ldrh	r1, [r7, #2]
 8000466:	2304      	movs	r3, #4
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f7ff ff43 	bl	80002f4 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 8000472:	7a3b      	ldrb	r3, [r7, #8]
 8000474:	461a      	mov	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	4313      	orrs	r3, r2
 800047a:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 800047c:	7a7b      	ldrb	r3, [r7, #9]
 800047e:	021b      	lsls	r3, r3, #8
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	4313      	orrs	r3, r2
 8000484:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000486:	7abb      	ldrb	r3, [r7, #10]
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4313      	orrs	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 8000490:	7afb      	ldrb	r3, [r7, #11]
 8000492:	061b      	lsls	r3, r3, #24
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	4313      	orrs	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]

    return result;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	4618      	mov	r0, r3
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <BQ_ReadCommandAsLInt>:

uint32_t BQ_ReadCommandAsLInt(BQ_data* BMS, uint16_t command){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	460b      	mov	r3, r1
 80004ae:	807b      	strh	r3, [r7, #2]
	uint8_t buf[4];

	    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80004b0:	f107 0208 	add.w	r2, r7, #8
 80004b4:	8879      	ldrh	r1, [r7, #2]
 80004b6:	2304      	movs	r3, #4
 80004b8:	6878      	ldr	r0, [r7, #4]
 80004ba:	f7ff ff1b 	bl	80002f4 <BQ_ReadMABlockCommand>

	    uint32_t result = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]

	    result = result | (buf[3]);
 80004c2:	7afb      	ldrb	r3, [r7, #11]
 80004c4:	461a      	mov	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	4313      	orrs	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
	    result = result | (buf[2] << 8);
 80004cc:	7abb      	ldrb	r3, [r7, #10]
 80004ce:	021b      	lsls	r3, r3, #8
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	4313      	orrs	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
	    result = result | (buf[1] << 16);
 80004d6:	7a7b      	ldrb	r3, [r7, #9]
 80004d8:	041b      	lsls	r3, r3, #16
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	4313      	orrs	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
	    result = result | (buf[0] << 24);
 80004e0:	7a3b      	ldrb	r3, [r7, #8]
 80004e2:	061b      	lsls	r3, r3, #24
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	4313      	orrs	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]

	    return result;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	78fa      	ldrb	r2, [r7, #3]
 800050c:	429a      	cmp	r2, r3
 800050e:	d003      	beq.n	8000518 <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 8000510:	212b      	movs	r1, #43	@ 0x2b
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff fec8 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingAllFetEnabled(BMS) != active)
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 fb95 	bl	8000c5c <BQ_IsManufacturingAllFetEnabled>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	78fb      	ldrb	r3, [r7, #3]
 8000538:	4293      	cmp	r3, r2
 800053a:	d003      	beq.n	8000544 <BQAction_SetManufacturingAllFet+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 800053c:	2122      	movs	r1, #34	@ 0x22
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff feb2 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingFuseEnabled(BMS) != active)
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 fbbe 	bl	8000cda <BQ_IsManufacturingFuseEnabled>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	78fb      	ldrb	r3, [r7, #3]
 8000564:	4293      	cmp	r3, r2
 8000566:	d003      	beq.n	8000570 <BQAction_SetManufacturingFuse+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 8000568:	2126      	movs	r1, #38	@ 0x26
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff fe9c 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingCalibrationEnabled(BMS) != active)
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 fbd2 	bl	8000d2e <BQ_IsManufacturingCalibrationEnabled>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	4293      	cmp	r3, r2
 8000592:	d003      	beq.n	800059c <BQAction_SetCalibration+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 8000594:	212d      	movs	r1, #45	@ 0x2d
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fe86 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingGaugingEnabled(BMS) != active)
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 fb3e 	bl	8000c32 <BQ_IsManufacturingGaugingEnabled>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	78fb      	ldrb	r3, [r7, #3]
 80005bc:	4293      	cmp	r3, r2
 80005be:	d003      	beq.n	80005c8 <BQAction_SetManufacturingGauging+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 80005c0:	2121      	movs	r1, #33	@ 0x21
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fe70 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingPermanentFailureEnabled(BMS) != active)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fb67 	bl	8000cb0 <BQ_IsManufacturingPermanentFailureEnabled>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d003      	beq.n	80005f4 <BQAction_SetManufacturingPF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 80005ec:	2124      	movs	r1, #36	@ 0x24
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff fe5a 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingLifetimeEnabled(BMS) != active)
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 fb3c 	bl	8000c86 <BQ_IsManufacturingLifetimeEnabled>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	4293      	cmp	r3, r2
 8000616:	d003      	beq.n	8000620 <BQAction_SetManufacturingLF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000618:	2123      	movs	r1, #35	@ 0x23
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe44 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <BQAction_EnableDischarging>:
/**
 * @brief enable discharge fet and disable the rest
 * @param none
 */
bool BQAction_EnableDischarging(BQ_data* BMS)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    if (BQ_GetChargeMode(BMS) == DISCHARGE){
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 fa53 	bl	8000adc <BQ_GetChargeMode>
 8000636:	4603      	mov	r3, r0
 8000638:	2b02      	cmp	r3, #2
 800063a:	d101      	bne.n	8000640 <BQAction_EnableDischarging+0x18>
        return false;
 800063c:	2300      	movs	r3, #0
 800063e:	e041      	b.n	80006c4 <BQAction_EnableDischarging+0x9c>
    }

    // turn off unused fets
    if (BQ_IsChargeFetTestEnabled(BMS)){
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 facc 	bl	8000bde <BQ_IsChargeFetTestEnabled>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <BQAction_EnableDischarging+0x2c>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 800064c:	211f      	movs	r1, #31
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff fe2a 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f000 fb55 	bl	8000d04 <BQ_IsPreDischargeFetTestEnabled>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <BQAction_EnableDischarging+0x40>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000660:	211c      	movs	r1, #28
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff fe20 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 faa3 	bl	8000bb4 <BQ_IsPreChargeFetTestEnabled>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <BQAction_EnableDischarging+0x54>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 8000674:	211e      	movs	r1, #30
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fe16 	bl	80002a8 <BQ_WriteMABlockCommand>
    }

    // turn on discharge
    if (!BQ_IsDischargeFetTestEnabled(BMS)){
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 fac3 	bl	8000c08 <BQ_IsDischargeFetTestEnabled>
 8000682:	4603      	mov	r3, r0
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <BQAction_EnableDischarging+0x6e>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 800068e:	2120      	movs	r1, #32
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff fe09 	bl	80002a8 <BQ_WriteMABlockCommand>
    }

    HAL_Delay(1500);
 8000696:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800069a:	f000 ff91 	bl	80015c0 <HAL_Delay>

    if (BQ_GetChargeMode(BMS) != CHARGE){
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 fa1c 	bl	8000adc <BQ_GetChargeMode>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d001      	beq.n	80006ae <BQAction_EnableDischarging+0x86>
        return true;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00a      	b.n	80006c4 <BQAction_EnableDischarging+0x9c>
    }else{
        // turn off discharge
        if (BQ_IsDischargeFetTestEnabled(BMS)){
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 faaa 	bl	8000c08 <BQ_IsDischargeFetTestEnabled>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <BQAction_EnableDischarging+0x9a>
            BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80006ba:	2120      	movs	r1, #32
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fdf3 	bl	80002a8 <BQ_WriteMABlockCommand>
        }
        return false;
 80006c2:	2300      	movs	r3, #0
    }
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <BQAction_DisableFets>:
/**
 * @brief disable all fets
 * @param none
 */
bool BQAction_DisableFets(BQ_data* BMS)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f000 f8d3 	bl	8000880 <BQAction_UpdateOpStatus>
    if (BQ_IsChargeFetTestEnabled(BMS)){
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 fa7f 	bl	8000bde <BQ_IsChargeFetTestEnabled>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <BQAction_DisableFets+0x22>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 80006e6:	211f      	movs	r1, #31
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff fddd 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsDischargeFetTestEnabled(BMS)){
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 fa8a 	bl	8000c08 <BQ_IsDischargeFetTestEnabled>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <BQAction_DisableFets+0x36>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80006fa:	2120      	movs	r1, #32
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff fdd3 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 fa56 	bl	8000bb4 <BQ_IsPreChargeFetTestEnabled>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <BQAction_DisableFets+0x4a>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 800070e:	211e      	movs	r1, #30
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff fdc9 	bl	80002a8 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 faf4 	bl	8000d04 <BQ_IsPreDischargeFetTestEnabled>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <BQAction_DisableFets+0x5e>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000722:	211c      	movs	r1, #28
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fdbf 	bl	80002a8 <BQ_WriteMABlockCommand>
    }

    return true;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
//    bool isSealed = false;

    BQAction_UpdateOpStatus(BMS);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f89f 	bl	8000880 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode(BMS);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 f98e 	bl	8000a64 <BQ_GetSecurityMode>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 800074c:	e019      	b.n	8000782 <BQAction_TryUnsealedDevice+0x4e>
    {
//        isSealed = true;
//        ("[BQ] Security mode - Sealed", 27);

        BQ_WriteMABlockCommand(BMS, 0x0414);
 800074e:	f240 4114 	movw	r1, #1044	@ 0x414
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff fda8 	bl	80002a8 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000758:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800075c:	f000 ff30 	bl	80015c0 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 8000760:	f243 6172 	movw	r1, #13938	@ 0x3672
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd9f 	bl	80002a8 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 800076a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800076e:	f000 ff27 	bl	80015c0 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 f884 	bl	8000880 <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode(BMS);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f973 	bl	8000a64 <BQ_GetSecurityMode>
 800077e:	4603      	mov	r3, r0
 8000780:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0e2      	beq.n	800074e <BQAction_TryUnsealedDevice+0x1a>
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d0df      	beq.n	800074e <BQAction_TryUnsealedDevice+0x1a>
    // print only if the device was previously sealeded
//    if (isSealed){
//        ("[BQ] successfully unsealed", 27);
//    }

}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af04      	add	r7, sp, #16
 800079e:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsLShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80007a0:	2157      	movs	r1, #87	@ 0x57
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fe35 	bl	8000412 <BQ_ReadCommandAsLShort>
 80007a8:	4603      	mov	r3, r0
 80007aa:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	8bfa      	ldrh	r2, [r7, #30]
 80007b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80007b4:	2155      	movs	r1, #85	@ 0x55
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fe4c 	bl	8000454 <BQ_ReadCommandAsInt>
 80007bc:	61b8      	str	r0, [r7, #24]
    uint32_t operationStatus = BQ_ReadCommandAsLInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80007be:	2154      	movs	r1, #84	@ 0x54
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fe6f 	bl	80004a4 <BQ_ReadCommandAsLInt>
 80007c6:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all= operationStatus;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	697a      	ldr	r2, [r7, #20]
 80007cc:	605a      	str	r2, [r3, #4]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 80007ce:	2156      	movs	r1, #86	@ 0x56
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff fe3f 	bl	8000454 <BQ_ReadCommandAsInt>
 80007d6:	6138      	str	r0, [r7, #16]

    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a23      	ldr	r2, [pc, #140]	@ (800086c <BQAction_UpdateData+0xd4>)
 80007de:	7811      	ldrb	r1, [r2, #0]
 80007e0:	2203      	movs	r2, #3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fc08 	bl	8000ff8 <I2CHelper_ReadRegisterAsShort>
 80007e8:	4603      	mov	r3, r0
 80007ea:	81fb      	strh	r3, [r7, #14]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <BQAction_UpdateData+0xd4>)
 80007f2:	7811      	ldrb	r1, [r2, #0]
 80007f4:	2216      	movs	r2, #22
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 fbfe 	bl	8000ff8 <I2CHelper_ReadRegisterAsShort>
 80007fc:	4603      	mov	r3, r0
 80007fe:	81bb      	strh	r3, [r7, #12]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a19      	ldr	r2, [pc, #100]	@ (800086c <BQAction_UpdateData+0xd4>)
 8000806:	7811      	ldrb	r1, [r2, #0]
 8000808:	2248      	movs	r2, #72	@ 0x48
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fc19 	bl	8001042 <I2CHelper_ReadRegisterAsChar>
 8000810:	4603      	mov	r3, r0
 8000812:	72fb      	strb	r3, [r7, #11]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000814:	2320      	movs	r3, #32
 8000816:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <BQAction_UpdateData+0xd8>)
 8000818:	2171      	movs	r1, #113	@ 0x71
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fd6a 	bl	80002f4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2, 16);
 8000820:	2310      	movs	r3, #16
 8000822:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <BQAction_UpdateData+0xdc>)
 8000824:	2172      	movs	r1, #114	@ 0x72
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fd64 	bl	80002f4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
 800082c:	2312      	movs	r3, #18
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <BQAction_UpdateData+0xe0>)
 8000830:	217b      	movs	r1, #123	@ 0x7b
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff fd5e 	bl	80002f4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal, 32);
 8000838:	2320      	movs	r3, #32
 800083a:	4a10      	ldr	r2, [pc, #64]	@ (800087c <BQAction_UpdateData+0xe4>)
 800083c:	f24f 0181 	movw	r1, #61569	@ 0xf081
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fd57 	bl	80002f4 <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags(BMS, operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 8000846:	89b9      	ldrh	r1, [r7, #12]
 8000848:	89fa      	ldrh	r2, [r7, #14]
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	9303      	str	r3, [sp, #12]
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	8bfb      	ldrh	r3, [r7, #30]
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	460b      	mov	r3, r1
 800085c:	6979      	ldr	r1, [r7, #20]
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f860 	bl	8000924 <BQ_ParseAllFlags>
}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	2000009e 	.word	0x2000009e
 8000874:	200000be 	.word	0x200000be
 8000878:	200000ce 	.word	0x200000ce
 800087c:	200000e0 	.word	0x200000e0

08000880 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000888:	2320      	movs	r3, #32
 800088a:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <BQAction_UpdateOpStatus+0x40>)
 800088c:	2171      	movs	r1, #113	@ 0x71
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fd30 	bl	80002f4 <BQ_ReadMABlockCommand>
    BQ_ParseOperationStatus(BMS, BQ_ReadCommandAsLInt(BMS, BQ40Z80_MFA_OPERATION_STATUS));
 8000894:	2154      	movs	r1, #84	@ 0x54
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fe04 	bl	80004a4 <BQ_ReadCommandAsLInt>
 800089c:	4603      	mov	r3, r0
 800089e:	4619      	mov	r1, r3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f86e 	bl	8000982 <BQ_ParseOperationStatus>
    BQ_ParseManufacturingStatus(BMS, BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS));
 80008a6:	2157      	movs	r1, #87	@ 0x57
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fd91 	bl	80003d0 <BQ_ReadCommandAsShort>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4619      	mov	r1, r3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f8b5 	bl	8000a22 <BQ_ParseManufacturingStatus>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000009e 	.word	0x2000009e

080008c4 <decimalToBinary>:
 * @param value decimal value
 * @param array array to write
 * @param count array size
 */
void decimalToBinary(uint32_t value, uint8_t *array, uint8_t count)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	4613      	mov	r3, r2
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint8_t currentCount = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 80008d6:	e00e      	b.n	80008f6 <decimalToBinary+0x32>
	{
		array[currentCount] = value % 2;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	440b      	add	r3, r1
 80008e2:	f002 0201 	and.w	r2, r2, #1
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	701a      	strb	r2, [r3, #0]
		value /= 2;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
		currentCount++;
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	3301      	adds	r3, #1
 80008f4:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1ed      	bne.n	80008d8 <decimalToBinary+0x14>
	}

	while (currentCount < count)
 80008fc:	e007      	b.n	800090e <decimalToBinary+0x4a>
	{
		array[currentCount] = 0;
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	4413      	add	r3, r2
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
		currentCount++;
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	3301      	adds	r3, #1
 800090c:	75fb      	strb	r3, [r7, #23]
	while (currentCount < count)
 800090e:	7dfa      	ldrb	r2, [r7, #23]
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	429a      	cmp	r2, r3
 8000914:	d3f3      	bcc.n	80008fe <decimalToBinary+0x3a>
	}
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <BQ_ParseAllFlags>:
					  uint16_t batteryMode,
					  uint8_t gpio,
					  uint16_t manStatus,
					  uint32_t chargeStatus,
					  uint32_t gaugStatus)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	4611      	mov	r1, r2
 8000930:	461a      	mov	r2, r3
 8000932:	460b      	mov	r3, r1
 8000934:	80fb      	strh	r3, [r7, #6]
 8000936:	4613      	mov	r3, r2
 8000938:	80bb      	strh	r3, [r7, #4]
	BQ_ParseOperationStatus(BMS, opStatus);
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f000 f820 	bl	8000982 <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(BMS, chargeStatus);
 8000942:	6a39      	ldr	r1, [r7, #32]
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f000 f82a 	bl	800099e <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(BMS, gaugStatus);
 800094a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 f836 	bl	80009be <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(BMS, batteryStatus);
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	4619      	mov	r1, r3
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 f841 	bl	80009de <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(BMS, manStatus);
 800095c:	8bbb      	ldrh	r3, [r7, #28]
 800095e:	4619      	mov	r1, r3
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f000 f85e 	bl	8000a22 <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(BMS, batteryMode);
 8000966:	88bb      	ldrh	r3, [r7, #4]
 8000968:	4619      	mov	r1, r3
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f000 f848 	bl	8000a00 <BQ_ParseBatteryMode>
	BQ_ParseGpio(BMS, gpio);
 8000970:	7e3b      	ldrb	r3, [r7, #24]
 8000972:	4619      	mov	r1, r3
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f864 	bl	8000a42 <BQ_ParseGpio>
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(BQ_data* BMS, uint32_t raw)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_opStatus
	//	decimalToBinary(raw, BMS.BQ_opStatus, 32);
	BMS->BQ_opStatus.all = raw;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	605a      	str	r2, [r3, #4]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(BQ_data* BMS, uint32_t raw)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_chargeStatus
	decimalToBinary(raw, BMS->BQ_chargeStatus, 32);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	2220      	movs	r2, #32
 80009ae:	4619      	mov	r1, r3
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	f7ff ff87 	bl	80008c4 <decimalToBinary>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(BQ_data* BMS, uint32_t raw)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_gaugeStatus
	decimalToBinary(raw, BMS->BQ_gaugeStatus, 32);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3328      	adds	r3, #40	@ 0x28
 80009cc:	2220      	movs	r2, #32
 80009ce:	4619      	mov	r1, r3
 80009d0:	6838      	ldr	r0, [r7, #0]
 80009d2:	f7ff ff77 	bl	80008c4 <decimalToBinary>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(BQ_data* BMS, uint16_t raw)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	807b      	strh	r3, [r7, #2]
	//convert to binary array and save in BQ_batteryStatus
	decimalToBinary(raw, BMS->BQ_batteryStatus, 16);
 80009ea:	8878      	ldrh	r0, [r7, #2]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3348      	adds	r3, #72	@ 0x48
 80009f0:	2210      	movs	r2, #16
 80009f2:	4619      	mov	r1, r3
 80009f4:	f7ff ff66 	bl	80008c4 <decimalToBinary>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(BQ_data* BMS, uint16_t raw)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
	//convert to binary array and save in BQ_batteryMode
	decimalToBinary(raw, BMS->BQ_batteryMode, 16);
 8000a0c:	8878      	ldrh	r0, [r7, #2]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3358      	adds	r3, #88	@ 0x58
 8000a12:	2210      	movs	r2, #16
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff ff55 	bl	80008c4 <decimalToBinary>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(BQ_data* BMS, uint16_t raw)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	807b      	strh	r3, [r7, #2]
//	decimalToBinary(raw, BMS->BQ_manufacturingStatus, 16);
	BMS->BQ_manufacturingStatus.all = raw;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	887a      	ldrh	r2, [r7, #2]
 8000a32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <BQ_ParseGpio>:

void BQ_ParseGpio(BQ_data* BMS, uint8_t raw)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	70fb      	strb	r3, [r7, #3]
	//convert to binary array and save in BQ_gpio
	decimalToBinary(raw, BMS->BQ_gpio, 8);
 8000a4e:	78f8      	ldrb	r0, [r7, #3]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	336a      	adds	r3, #106	@ 0x6a
 8000a54:	2208      	movs	r2, #8
 8000a56:	4619      	mov	r1, r3
 8000a58:	f7ff ff34 	bl	80008c4 <decimalToBinary>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(BQ_data* BMS)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    if (BMS->BQ_opStatus.bits.sec1 && BMS->BQ_opStatus.bits.sec0){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	799b      	ldrb	r3, [r3, #6]
 8000a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d008      	beq.n	8000a8c <BQ_GetSecurityMode+0x28>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	799b      	ldrb	r3, [r3, #6]
 8000a7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <BQ_GetSecurityMode+0x28>
        return SEALED;//11
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e020      	b.n	8000ace <BQ_GetSecurityMode+0x6a>
    }else if (BMS->BQ_opStatus.bits.sec1 && !BMS->BQ_opStatus.bits.sec0){
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	799b      	ldrb	r3, [r3, #6]
 8000a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <BQ_GetSecurityMode+0x48>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	799b      	ldrb	r3, [r3, #6]
 8000a9e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <BQ_GetSecurityMode+0x48>
        return UNSEALED;//10
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e010      	b.n	8000ace <BQ_GetSecurityMode+0x6a>
    }else if (!BMS->BQ_opStatus.bits.sec1 && BMS->BQ_opStatus.bits.sec0){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	799b      	ldrb	r3, [r3, #6]
 8000ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d108      	bne.n	8000acc <BQ_GetSecurityMode+0x68>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	799b      	ldrb	r3, [r3, #6]
 8000abe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <BQ_GetSecurityMode+0x68>
        return FULL_ACCESS;//01
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e000      	b.n	8000ace <BQ_GetSecurityMode+0x6a>
    }else{
        return RESERVED;//00
 8000acc:	2303      	movs	r3, #3
    }
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <BQ_GetChargeMode>:
/**
 * @brief get charge from BQ_opStatus
 * @return CHARGE, DISCHARGE or RELAX
 */
CHARGE_MODE BQ_GetChargeMode(BQ_data* BMS)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fecb 	bl	8000880 <BQAction_UpdateOpStatus>
    uint16_t packVoltage = BMS->BQ_daStatus1[10] | (BMS->BQ_daStatus1[11] << 8);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	81fb      	strh	r3, [r7, #14]
    uint16_t current = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb0 <BQ_GetChargeMode+0xd4>)
 8000b08:	7811      	ldrb	r1, [r2, #0]
 8000b0a:	220a      	movs	r2, #10
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fa73 	bl	8000ff8 <I2CHelper_ReadRegisterAsShort>
 8000b12:	4603      	mov	r3, r0
 8000b14:	81bb      	strh	r3, [r7, #12]

    if (packVoltage > 1000 && BMS->BQ_opStatus.bits.chg && BMS->BQ_opStatus.bits.pchg && BQ_IsChargeFetTestEnabled(BMS) && current > 0 && current < 30000){
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b1c:	d91d      	bls.n	8000b5a <BQ_GetChargeMode+0x7e>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	79db      	ldrb	r3, [r3, #7]
 8000b22:	f003 0320 	and.w	r3, r3, #32
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d016      	beq.n	8000b5a <BQ_GetChargeMode+0x7e>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	79db      	ldrb	r3, [r3, #7]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00f      	beq.n	8000b5a <BQ_GetChargeMode+0x7e>
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 f84f 	bl	8000bde <BQ_IsChargeFetTestEnabled>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d009      	beq.n	8000b5a <BQ_GetChargeMode+0x7e>
 8000b46:	89bb      	ldrh	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <BQ_GetChargeMode+0x7e>
 8000b4c:	89bb      	ldrh	r3, [r7, #12]
 8000b4e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d801      	bhi.n	8000b5a <BQ_GetChargeMode+0x7e>
        return CHARGE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e025      	b.n	8000ba6 <BQ_GetChargeMode+0xca>
    }else if (packVoltage > 1000 && BMS->BQ_opStatus.bits.xdsg && BMS->BQ_opStatus.bits.dsg && BQ_IsDischargeFetTestEnabled(BMS) && 65535 - current > 0 && current > 30000){
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b60:	d920      	bls.n	8000ba4 <BQ_GetChargeMode+0xc8>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	799b      	ldrb	r3, [r3, #6]
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d019      	beq.n	8000ba4 <BQ_GetChargeMode+0xc8>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	79db      	ldrb	r3, [r3, #7]
 8000b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <BQ_GetChargeMode+0xc8>
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 f842 	bl	8000c08 <BQ_IsDischargeFetTestEnabled>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00c      	beq.n	8000ba4 <BQ_GetChargeMode+0xc8>
 8000b8a:	89bb      	ldrh	r3, [r7, #12]
 8000b8c:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000b90:	33ff      	adds	r3, #255	@ 0xff
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	dd06      	ble.n	8000ba4 <BQ_GetChargeMode+0xc8>
 8000b96:	89bb      	ldrh	r3, [r7, #12]
 8000b98:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d901      	bls.n	8000ba4 <BQ_GetChargeMode+0xc8>
        return DISCHARGE;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e000      	b.n	8000ba6 <BQ_GetChargeMode+0xca>
    }else{
        return RELAX;
 8000ba4:	2300      	movs	r3, #0
    }
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <BQ_IsPreChargeFetTestEnabled>:
//{
//    return BMS.BQ_opStatus.bits.led;
//}

bool BQ_IsPreChargeFetTestEnabled(BQ_data* BMS)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.pchg;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000bc2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bf14      	ite	ne
 8000bcc:	2301      	movne	r3, #1
 8000bce:	2300      	moveq	r3, #0
 8000bd0:	b2db      	uxtb	r3, r3
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <BQ_IsChargeFetTestEnabled>:

bool BQ_IsChargeFetTestEnabled(BQ_data* BMS)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.chg;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000bec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	bf14      	ite	ne
 8000bf6:	2301      	movne	r3, #1
 8000bf8:	2300      	moveq	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <BQ_IsDischargeFetTestEnabled>:

bool BQ_IsDischargeFetTestEnabled(BQ_data* BMS)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.dsg;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000c16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <BQ_IsManufacturingGaugingEnabled>:

bool BQ_IsManufacturingGaugingEnabled(BQ_data* BMS)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.gauge;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000c40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	bf14      	ite	ne
 8000c4a:	2301      	movne	r3, #1
 8000c4c:	2300      	moveq	r3, #0
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <BQ_IsManufacturingAllFetEnabled>:
/**
 * @brief function shows fet control
 * @return 0 if fet control enabled, 1 if fet control disabled
 */
bool BQ_IsManufacturingAllFetEnabled(BQ_data* BMS)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.fet;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000c6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf14      	ite	ne
 8000c74:	2301      	movne	r3, #1
 8000c76:	2300      	moveq	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <BQ_IsManufacturingLifetimeEnabled>:

bool BQ_IsManufacturingLifetimeEnabled(BQ_data* BMS)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.lf;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000c94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bf14      	ite	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	2300      	moveq	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <BQ_IsManufacturingPermanentFailureEnabled>:

bool BQ_IsManufacturingPermanentFailureEnabled(BQ_data* BMS)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.pf;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000cbe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bf14      	ite	ne
 8000cc8:	2301      	movne	r3, #1
 8000cca:	2300      	moveq	r3, #0
 8000ccc:	b2db      	uxtb	r3, r3
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <BQ_IsManufacturingFuseEnabled>:

bool BQ_IsManufacturingFuseEnabled(BQ_data* BMS)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.fuse;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8000ce8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf14      	ite	ne
 8000cf2:	2301      	movne	r3, #1
 8000cf4:	2300      	moveq	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <BQ_IsPreDischargeFetTestEnabled>:

bool BQ_IsPreDischargeFetTestEnabled(BQ_data* BMS)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.pdsg;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8000d12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <BQ_IsManufacturingCalibrationEnabled>:

bool BQ_IsManufacturingCalibrationEnabled(BQ_data* BMS)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
    return BMS->BQ_manufacturingStatus.bits.cal;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8000d3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bf14      	ite	ne
 8000d46:	2301      	movne	r3, #1
 8000d48:	2300      	moveq	r3, #0
 8000d4a:	b2db      	uxtb	r3, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b49      	ldr	r3, [pc, #292]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a48      	ldr	r2, [pc, #288]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b46      	ldr	r3, [pc, #280]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	4b43      	ldr	r3, [pc, #268]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	4a42      	ldr	r2, [pc, #264]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d92:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a3c      	ldr	r2, [pc, #240]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b37      	ldr	r3, [pc, #220]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a36      	ldr	r2, [pc, #216]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b34      	ldr	r3, [pc, #208]	@ (8000e94 <MX_GPIO_Init+0x13c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	21b0      	movs	r1, #176	@ 0xb0
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd6:	f000 fef1 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de0:	482d      	ldr	r0, [pc, #180]	@ (8000e98 <MX_GPIO_Init+0x140>)
 8000de2:	f000 feeb 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4827      	ldr	r0, [pc, #156]	@ (8000e9c <MX_GPIO_Init+0x144>)
 8000dfe:	f000 fd63 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e02:	230c      	movs	r3, #12
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e12:	2307      	movs	r3, #7
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e20:	f000 fd52 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000e24:	23b0      	movs	r3, #176	@ 0xb0
 8000e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3e:	f000 fd43 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000e42:	2340      	movs	r3, #64	@ 0x40
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e58:	f000 fd36 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <MX_GPIO_Init+0x140>)
 8000e76:	f000 fd27 	bl	80018c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	210c      	movs	r1, #12
 8000e7e:	2028      	movs	r0, #40	@ 0x28
 8000e80:	f000 fc9d 	bl	80017be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e84:	2028      	movs	r0, #40	@ 0x28
 8000e86:	f000 fcb6 	bl	80017f6 <HAL_NVIC_EnableIRQ>

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	48000800 	.word	0x48000800

08000ea0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <MX_I2C1_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <MX_I2C1_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000edc:	f000 feb8 	bl	8001c50 <HAL_I2C_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f000 fa3c 	bl	8001362 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4809      	ldr	r0, [pc, #36]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000eee:	f002 fac3 	bl	8003478 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fa33 	bl	8001362 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_I2C1_Init+0x74>)
 8000f00:	f002 fb05 	bl	800350e <HAL_I2CEx_ConfigDigitalFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 fa2a 	bl	8001362 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000100 	.word	0x20000100
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	10909cec 	.word	0x10909cec

08000f20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0a2      	sub	sp, #136	@ 0x88
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2260      	movs	r2, #96	@ 0x60
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fcd1 	bl	80048e8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a28      	ldr	r2, [pc, #160]	@ (8000fec <HAL_I2C_MspInit+0xcc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d148      	bne.n	8000fe2 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 f987 	bl	8004270 <HAL_RCCEx_PeriphCLKConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f68:	f000 f9fb 	bl	8001362 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <HAL_I2C_MspInit+0xd0>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f70:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_I2C_MspInit+0xd0>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_I2C_MspInit+0xd0>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f84:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f88:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f8a:	2312      	movs	r3, #18
 8000f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	2303      	movs	r3, #3
 8000f94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4813      	ldr	r0, [pc, #76]	@ (8000ff4 <HAL_I2C_MspInit+0xd4>)
 8000fa6:	f000 fc8f 	bl	80018c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <HAL_I2C_MspInit+0xd0>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fae:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <HAL_I2C_MspInit+0xd0>)
 8000fb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_I2C_MspInit+0xd0>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	210a      	movs	r1, #10
 8000fc6:	201f      	movs	r0, #31
 8000fc8:	f000 fbf9 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fcc:	201f      	movs	r0, #31
 8000fce:	f000 fc12 	bl	80017f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2109      	movs	r1, #9
 8000fd6:	2020      	movs	r0, #32
 8000fd8:	f000 fbf1 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fdc:	2020      	movs	r0, #32
 8000fde:	f000 fc0a 	bl	80017f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3788      	adds	r7, #136	@ 0x88
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
 8001004:	4613      	mov	r3, r2
 8001006:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	78ba      	ldrb	r2, [r7, #2]
 800100e:	78f9      	ldrb	r1, [r7, #3]
 8001010:	2002      	movs	r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f82a 	bl	800106e <I2CHelper_ReadRegister>
	uint16_t result = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	461a      	mov	r2, r3
 8001022:	89fb      	ldrh	r3, [r7, #14]
 8001024:	4313      	orrs	r3, r2
 8001026:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8001028:	7b7b      	ldrb	r3, [r7, #13]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	81fb      	strh	r3, [r7, #14]

	return result;
 8001038:	89fb      	ldrh	r3, [r7, #14]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af02      	add	r7, sp, #8
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	70fb      	strb	r3, [r7, #3]
 800104e:	4613      	mov	r3, r2
 8001050:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	78ba      	ldrb	r2, [r7, #2]
 8001058:	78f9      	ldrb	r1, [r7, #3]
 800105a:	2001      	movs	r0, #1
 800105c:	9000      	str	r0, [sp, #0]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f805 	bl	800106e <I2CHelper_ReadRegister>

	return buf[0];
 8001064:	7b3b      	ldrb	r3, [r7, #12]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af02      	add	r7, sp, #8
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	72fb      	strb	r3, [r7, #11]
 800107c:	4613      	mov	r3, r2
 800107e:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	b29b      	uxth	r3, r3
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b299      	uxth	r1, r3
 8001088:	f107 020a 	add.w	r2, r7, #10
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 fe78 	bl	8001d88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8001098:	7afb      	ldrb	r3, [r7, #11]
 800109a:	b29b      	uxth	r3, r3
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b299      	uxth	r1, r3
 80010a0:	7e3b      	ldrb	r3, [r7, #24]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	2264      	movs	r2, #100	@ 0x64
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 ff84 	bl	8001fb8 <HAL_I2C_Master_Receive>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010c8:	d113      	bne.n	80010f2 <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_GPIO_EXTI_Callback+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_GPIO_EXTI_Callback+0x44>)
 80010e6:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80010e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <HAL_GPIO_EXTI_Callback+0x48>)
 80010ee:	f000 fd7d 	bl	8001bec <HAL_GPIO_TogglePin>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000154 	.word	0x20000154
 8001100:	48000400 	.word	0x48000400

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f000 f9dd 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110e:	f000 f8d7 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f7ff fe21 	bl	8000d58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001116:	f7ff fec3 	bl	8000ea0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 800111a:	4865      	ldr	r0, [pc, #404]	@ (80012b0 <main+0x1ac>)
 800111c:	f000 fd98 	bl	8001c50 <HAL_I2C_Init>
  HAL_I2C_MspInit(&hi2c1);
 8001120:	4863      	ldr	r0, [pc, #396]	@ (80012b0 <main+0x1ac>)
 8001122:	f7ff fefd 	bl	8000f20 <HAL_I2C_MspInit>
  status = false;
 8001126:	4b63      	ldr	r3, [pc, #396]	@ (80012b4 <main+0x1b0>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t current = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t percentage[2] = {0};
 8001134:	2300      	movs	r3, #0
 8001136:	843b      	strh	r3, [r7, #32]
  uint16_t cells[6] = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	f8c3 2003 	str.w	r2, [r3, #3]
  BQ_Init(&hi2c1);
 800115c:	4854      	ldr	r0, [pc, #336]	@ (80012b0 <main+0x1ac>)
 800115e:	f7ff f835 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(&BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 8001162:	463a      	mov	r2, r7
 8001164:	2306      	movs	r3, #6
 8001166:	2102      	movs	r1, #2
 8001168:	4853      	ldr	r0, [pc, #332]	@ (80012b8 <main+0x1b4>)
 800116a:	f7ff f8c3 	bl	80002f4 <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 800116e:	20c8      	movs	r0, #200	@ 0xc8
 8001170:	f000 fa26 	bl	80015c0 <HAL_Delay>
	  BQAction_UpdateData(&BMS_1);
 8001174:	4850      	ldr	r0, [pc, #320]	@ (80012b8 <main+0x1b4>)
 8001176:	f7ff fb0f 	bl	8000798 <BQAction_UpdateData>
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_DA_STATUS_2, 16);
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_OUTPUT_CADC_CAL, BQ_outCal, 32);
	  voltage = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 800117a:	4b4f      	ldr	r3, [pc, #316]	@ (80012b8 <main+0x1b4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a4f      	ldr	r2, [pc, #316]	@ (80012bc <main+0x1b8>)
 8001180:	7811      	ldrb	r1, [r2, #0]
 8001182:	2209      	movs	r2, #9
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff37 	bl	8000ff8 <I2CHelper_ReadRegisterAsShort>
 800118a:	4603      	mov	r3, r0
 800118c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  current = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);//TODO fix 1A = -400
 800118e:	4b4a      	ldr	r3, [pc, #296]	@ (80012b8 <main+0x1b4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a4a      	ldr	r2, [pc, #296]	@ (80012bc <main+0x1b8>)
 8001194:	7811      	ldrb	r1, [r2, #0]
 8001196:	220a      	movs	r2, #10
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff2d 	bl	8000ff8 <I2CHelper_ReadRegisterAsShort>
 800119e:	4603      	mov	r3, r0
 80011a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  percentage[0] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 80011a2:	4b45      	ldr	r3, [pc, #276]	@ (80012b8 <main+0x1b4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a45      	ldr	r2, [pc, #276]	@ (80012bc <main+0x1b8>)
 80011a8:	7811      	ldrb	r1, [r2, #0]
 80011aa:	220d      	movs	r2, #13
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff48 	bl	8001042 <I2CHelper_ReadRegisterAsChar>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 3020 	strb.w	r3, [r7, #32]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 80011b8:	4b3f      	ldr	r3, [pc, #252]	@ (80012b8 <main+0x1b4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a3f      	ldr	r2, [pc, #252]	@ (80012bc <main+0x1b8>)
 80011be:	7811      	ldrb	r1, [r2, #0]
 80011c0:	220e      	movs	r2, #14
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff3d 	bl	8001042 <I2CHelper_ReadRegisterAsChar>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1[0] | (BMS_1.BQ_daStatus1[1] << 8);
 80011ce:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <main+0x1b4>)
 80011d0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <main+0x1b4>)
 80011d8:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	82bb      	strh	r3, [r7, #20]
	  cells[1] = BMS_1.BQ_daStatus1[2] | (BMS_1.BQ_daStatus1[3] << 8);
 80011e8:	4b33      	ldr	r3, [pc, #204]	@ (80012b8 <main+0x1b4>)
 80011ea:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <main+0x1b4>)
 80011f2:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	b29b      	uxth	r3, r3
 8001200:	82fb      	strh	r3, [r7, #22]
	  cells[2] = BMS_1.BQ_daStatus1[4] | (BMS_1.BQ_daStatus1[5] << 8);
 8001202:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <main+0x1b4>)
 8001204:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <main+0x1b4>)
 800120c:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21b      	sxth	r3, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	833b      	strh	r3, [r7, #24]
	  cells[3] = BMS_1.BQ_daStatus1[6] | (BMS_1.BQ_daStatus1[7] << 8);
 800121c:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <main+0x1b4>)
 800121e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b24      	ldr	r3, [pc, #144]	@ (80012b8 <main+0x1b4>)
 8001226:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	837b      	strh	r3, [r7, #26]
	  cells[4] = BMS_1.BQ_daStatus3[0] | (BMS_1.BQ_daStatus3[1] << 8);
 8001236:	4b20      	ldr	r3, [pc, #128]	@ (80012b8 <main+0x1b4>)
 8001238:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <main+0x1b4>)
 8001240:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21b      	sxth	r3, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	83bb      	strh	r3, [r7, #28]
	  cells[5] = BMS_1.BQ_daStatus3[6] | (BMS_1.BQ_daStatus3[7] << 8);
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <main+0x1b4>)
 8001252:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <main+0x1b4>)
 800125a:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21b      	sxth	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b21b      	sxth	r3, r3
 8001266:	b29b      	uxth	r3, r3
 8001268:	83fb      	strh	r3, [r7, #30]

	  // -----toggle fets--------
	  if(status){
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <main+0x1b0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <main+0x176>
		  BQAction_EnableDischarging(&BMS_1);
 8001272:	4811      	ldr	r0, [pc, #68]	@ (80012b8 <main+0x1b4>)
 8001274:	f7ff f9d8 	bl	8000628 <BQAction_EnableDischarging>
 8001278:	e002      	b.n	8001280 <main+0x17c>
	  }else{
		  BQAction_DisableFets(&BMS_1);
 800127a:	480f      	ldr	r0, [pc, #60]	@ (80012b8 <main+0x1b4>)
 800127c:	f7ff fa26 	bl	80006cc <BQAction_DisableFets>
	  }
	  fun[0] = BMS_1.BQ_opStatus.bits.pdsg;
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <main+0x1b4>)
 8001282:	79db      	ldrb	r3, [r3, #7]
 8001284:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	733b      	strb	r3, [r7, #12]
	  fun[1] = BMS_1.BQ_opStatus.bits.xdsg;
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <main+0x1b4>)
 8001298:	799b      	ldrb	r3, [r3, #6]
 800129a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	737b      	strb	r3, [r7, #13]
	  HAL_Delay(200);
 80012ac:	e75f      	b.n	800116e <main+0x6a>
 80012ae:	bf00      	nop
 80012b0:	20000100 	.word	0x20000100
 80012b4:	20000154 	.word	0x20000154
 80012b8:	2000002c 	.word	0x2000002c
 80012bc:	20000000 	.word	0x20000000

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b096      	sub	sp, #88	@ 0x58
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2244      	movs	r2, #68	@ 0x44
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fb0a 	bl	80048e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012e6:	f002 f96d 	bl	80035c4 <HAL_PWREx_ControlVoltageScaling>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012f0:	f000 f837 	bl	8001362 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fe:	2310      	movs	r3, #16
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2302      	movs	r3, #2
 8001304:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001306:	2302      	movs	r3, #2
 8001308:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800130a:	2301      	movs	r3, #1
 800130c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800130e:	230a      	movs	r3, #10
 8001310:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001312:	2307      	movs	r3, #7
 8001314:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001316:	2302      	movs	r3, #2
 8001318:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800131a:	2302      	movs	r3, #2
 800131c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4618      	mov	r0, r3
 8001324:	f002 f9a4 	bl	8003670 <HAL_RCC_OscConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800132e:	f000 f818 	bl	8001362 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001332:	230f      	movs	r3, #15
 8001334:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2303      	movs	r3, #3
 8001338:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	2104      	movs	r1, #4
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fda4 	bl	8003e98 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001356:	f000 f804 	bl	8001362 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3758      	adds	r7, #88	@ 0x58
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001366:	b672      	cpsid	i
}
 8001368:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136a:	bf00      	nop
 800136c:	e7fd      	b.n	800136a <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_MspInit+0x44>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6613      	str	r3, [r2, #96]	@ 0x60
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_MspInit+0x44>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <HAL_MspInit+0x44>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	@ 0x58
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 f8b7 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800141c:	4802      	ldr	r0, [pc, #8]	@ (8001428 <I2C1_EV_IRQHandler+0x10>)
 800141e:	f000 ffad 	bl	800237c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000100 	.word	0x20000100

0800142c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <I2C1_ER_IRQHandler+0x10>)
 8001432:	f000 ffbd 	bl	80023b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000100 	.word	0x20000100

08001440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001444:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001448:	f000 fbea 	bl	8001c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001478:	f7ff ffea 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	@ (80014b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	@ (80014b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	@ (80014b8 <LoopForever+0xe>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	@ (80014c0 <LoopForever+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f003 fa29 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a6:	f7ff fe2d 	bl	8001104 <main>

080014aa <LoopForever>:

LoopForever:
    b LoopForever
 80014aa:	e7fe      	b.n	80014aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014b8:	080049a0 	.word	0x080049a0
  ldr r2, =_sbss
 80014bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014c0:	2000015c 	.word	0x2000015c

080014c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <HAL_Init+0x3c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_Init+0x3c>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f962 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f80f 	bl	8001508 <HAL_InitTick>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	e001      	b.n	80014fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f6:	f7ff ff3b 	bl	8001370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fa:	79fb      	ldrb	r3, [r7, #7]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40022000 	.word	0x40022000

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001514:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d023      	beq.n	8001564 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_InitTick+0x70>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <HAL_InitTick+0x6c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f96d 	bl	8001812 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d809      	bhi.n	8001558 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 f937 	bl	80017be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_InitTick+0x74>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e007      	b.n	8001568 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e004      	b.n	8001568 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e001      	b.n	8001568 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000004 	.word	0x20000004
 800157c:	20000008 	.word	0x20000008

08001580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	20000158 	.word	0x20000158

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000158 	.word	0x20000158

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d005      	beq.n	80015e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015da:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_Delay+0x44>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e6:	bf00      	nop
 80015e8:	f7ff ffde 	bl	80015a8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d8f7      	bhi.n	80015e8 <HAL_Delay+0x28>
  {
  }
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000000c 	.word	0x2000000c

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	@ (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	@ (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff29 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d0:	f7ff ff3e 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	6978      	ldr	r0, [r7, #20]
 80017dc:	f7ff ff8e 	bl	80016fc <NVIC_EncodePriority>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff5d 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ee:	bf00      	nop
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff31 	bl	800166c <__NVIC_EnableIRQ>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffa2 	bl	8001764 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d005      	beq.n	800184e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2204      	movs	r2, #4
 8001846:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e029      	b.n	80018a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 020e 	bic.w	r2, r2, #14
 800185c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	f003 021c 	and.w	r2, r3, #28
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	4798      	blx	r3
    }
  }
  return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	e154      	b.n	8001b82 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8146 	beq.w	8001b7c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d005      	beq.n	8001908 <HAL_GPIO_Init+0x40>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d130      	bne.n	800196a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800193e:	2201      	movs	r2, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 0201 	and.w	r2, r3, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b03      	cmp	r3, #3
 8001974:	d017      	beq.n	80019a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d123      	bne.n	80019fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0203 	and.w	r2, r3, #3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 80a0 	beq.w	8001b7c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3c:	4b58      	ldr	r3, [pc, #352]	@ (8001ba0 <HAL_GPIO_Init+0x2d8>)
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a40:	4a57      	ldr	r2, [pc, #348]	@ (8001ba0 <HAL_GPIO_Init+0x2d8>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a48:	4b55      	ldr	r3, [pc, #340]	@ (8001ba0 <HAL_GPIO_Init+0x2d8>)
 8001a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a54:	4a53      	ldr	r2, [pc, #332]	@ (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a7e:	d019      	beq.n	8001ab4 <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a49      	ldr	r2, [pc, #292]	@ (8001ba8 <HAL_GPIO_Init+0x2e0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a48      	ldr	r2, [pc, #288]	@ (8001bac <HAL_GPIO_Init+0x2e4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_GPIO_Init+0x1e4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a47      	ldr	r2, [pc, #284]	@ (8001bb0 <HAL_GPIO_Init+0x2e8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x1e0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a46      	ldr	r2, [pc, #280]	@ (8001bb4 <HAL_GPIO_Init+0x2ec>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_GPIO_Init+0x1dc>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e008      	b.n	8001ab6 <HAL_GPIO_Init+0x1ee>
 8001aa4:	2307      	movs	r3, #7
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_Init+0x1ee>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_Init+0x1ee>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x1ee>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_Init+0x1ee>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac6:	4937      	ldr	r1, [pc, #220]	@ (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad4:	4b38      	ldr	r3, [pc, #224]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af8:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b22:	4a25      	ldr	r2, [pc, #148]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b28:	4b23      	ldr	r3, [pc, #140]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b52:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b76:	4a10      	ldr	r2, [pc, #64]	@ (8001bb8 <HAL_GPIO_Init+0x2f0>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f aea3 	bne.w	80018d8 <HAL_GPIO_Init+0x10>
  }
}
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00
 8001bb4:	48001000 	.word	0x48001000
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4013      	ands	r3, r2
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43d9      	mvns	r1, r3
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	400b      	ands	r3, r1
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa3a 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e08d      	b.n	8001d7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff f952 	bl	8000f20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2224      	movs	r2, #36	@ 0x24
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ca0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	e006      	b.n	8001cd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d108      	bne.n	8001cf2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	e007      	b.n	8001d02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69d9      	ldr	r1, [r3, #28]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	460b      	mov	r3, r1
 8001d96:	817b      	strh	r3, [r7, #10]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b20      	cmp	r3, #32
 8001da6:	f040 80fd 	bne.w	8001fa4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0x30>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e0f6      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x21e>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dc0:	f7ff fbf2 	bl	80015a8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2319      	movs	r3, #25
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f001 f871 	bl	8002eba <I2C_WaitOnFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0e1      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2221      	movs	r2, #33	@ 0x21
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2210      	movs	r2, #16
 8001dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	893a      	ldrh	r2, [r7, #8]
 8001e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2bff      	cmp	r3, #255	@ 0xff
 8001e12:	d906      	bls.n	8001e22 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	22ff      	movs	r2, #255	@ 0xff
 8001e18:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e007      	b.n	8001e32 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e30:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d024      	beq.n	8001e84 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <HAL_I2C_Master_Transmit+0x228>)
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f001 fa6b 	bl	8003358 <I2C_TransferConfig>
 8001e82:	e066      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	8979      	ldrh	r1, [r7, #10]
 8001e8c:	4b48      	ldr	r3, [pc, #288]	@ (8001fb0 <HAL_I2C_Master_Transmit+0x228>)
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f001 fa60 	bl	8003358 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e98:	e05b      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f001 f864 	bl	8002f6c <I2C_WaitOnTXISFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e07b      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d034      	beq.n	8001f52 <HAL_I2C_Master_Transmit+0x1ca>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d130      	bne.n	8001f52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 ffdd 	bl	8002eba <I2C_WaitOnFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e04d      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	2bff      	cmp	r3, #255	@ 0xff
 8001f12:	d90e      	bls.n	8001f32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	22ff      	movs	r2, #255	@ 0xff
 8001f18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	2300      	movs	r3, #0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f001 fa14 	bl	8003358 <I2C_TransferConfig>
 8001f30:	e00f      	b.n	8001f52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	8979      	ldrh	r1, [r7, #10]
 8001f44:	2300      	movs	r3, #0
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f001 fa03 	bl	8003358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d19e      	bne.n	8001e9a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	6a39      	ldr	r1, [r7, #32]
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f001 f84a 	bl	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e01a      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2220      	movs	r2, #32
 8001f76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6859      	ldr	r1, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_I2C_Master_Transmit+0x22c>)
 8001f84:	400b      	ands	r3, r1
 8001f86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e000      	b.n	8001fa6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001fa4:	2302      	movs	r3, #2
  }
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	80002000 	.word	0x80002000
 8001fb4:	fe00e800 	.word	0xfe00e800

08001fb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	f040 80db 	bne.w	8002190 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2C_Master_Receive+0x30>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0d4      	b.n	8002192 <HAL_I2C_Master_Receive+0x1da>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fada 	bl	80015a8 <HAL_GetTick>
 8001ff4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2319      	movs	r3, #25
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 ff59 	bl	8002eba <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0bf      	b.n	8002192 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2222      	movs	r2, #34	@ 0x22
 8002016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2210      	movs	r2, #16
 800201e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	893a      	ldrh	r2, [r7, #8]
 8002032:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	2bff      	cmp	r3, #255	@ 0xff
 8002042:	d90e      	bls.n	8002062 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	b2da      	uxtb	r2, r3
 8002050:	8979      	ldrh	r1, [r7, #10]
 8002052:	4b52      	ldr	r3, [pc, #328]	@ (800219c <HAL_I2C_Master_Receive+0x1e4>)
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f001 f97c 	bl	8003358 <I2C_TransferConfig>
 8002060:	e06d      	b.n	800213e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002070:	b2da      	uxtb	r2, r3
 8002072:	8979      	ldrh	r1, [r7, #10]
 8002074:	4b49      	ldr	r3, [pc, #292]	@ (800219c <HAL_I2C_Master_Receive+0x1e4>)
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f001 f96b 	bl	8003358 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002082:	e05c      	b.n	800213e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	6a39      	ldr	r1, [r7, #32]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 fff9 	bl	8003080 <I2C_WaitOnRXNEFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e07c      	b.n	8002192 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d034      	beq.n	800213e <HAL_I2C_Master_Receive+0x186>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d130      	bne.n	800213e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fee7 	bl	8002eba <I2C_WaitOnFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e04d      	b.n	8002192 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2bff      	cmp	r3, #255	@ 0xff
 80020fe:	d90e      	bls.n	800211e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	22ff      	movs	r2, #255	@ 0xff
 8002104:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800210a:	b2da      	uxtb	r2, r3
 800210c:	8979      	ldrh	r1, [r7, #10]
 800210e:	2300      	movs	r3, #0
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f001 f91e 	bl	8003358 <I2C_TransferConfig>
 800211c:	e00f      	b.n	800213e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212c:	b2da      	uxtb	r2, r3
 800212e:	8979      	ldrh	r1, [r7, #10]
 8002130:	2300      	movs	r3, #0
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f001 f90d 	bl	8003358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d19d      	bne.n	8002084 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	6a39      	ldr	r1, [r7, #32]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 ff54 	bl	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e01a      	b.n	8002192 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2220      	movs	r2, #32
 8002162:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_I2C_Master_Receive+0x1e8>)
 8002170:	400b      	ands	r3, r1
 8002172:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	e000      	b.n	8002192 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	80002400 	.word	0x80002400
 80021a0:	fe00e800 	.word	0xfe00e800

080021a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	460b      	mov	r3, r1
 80021b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 80d6 	bne.w	8002372 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021d4:	d101      	bne.n	80021da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0cc      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <HAL_I2C_IsDeviceReady+0x44>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e0c5      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x1d0>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2224      	movs	r2, #36	@ 0x24
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d107      	bne.n	8002216 <HAL_I2C_IsDeviceReady+0x72>
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002210:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002214:	e006      	b.n	8002224 <HAL_I2C_IsDeviceReady+0x80>
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002220:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800222a:	f7ff f9bd 	bl	80015a8 <HAL_GetTick>
 800222e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b20      	cmp	r3, #32
 800223c:	bf0c      	ite	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	2300      	movne	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b10      	cmp	r3, #16
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800225c:	e034      	b.n	80022c8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d01a      	beq.n	800229c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002266:	f7ff f99f 	bl	80015a8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d302      	bcc.n	800227c <HAL_I2C_IsDeviceReady+0xd8>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10f      	bne.n	800229c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e06b      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b10      	cmp	r3, #16
 80022be:	bf0c      	ite	eq
 80022c0:	2301      	moveq	r3, #1
 80022c2:	2300      	movne	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80022c8:	7ffb      	ldrb	r3, [r7, #31]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_I2C_IsDeviceReady+0x130>
 80022ce:	7fbb      	ldrb	r3, [r7, #30]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0c4      	beq.n	800225e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d01a      	beq.n	8002318 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2120      	movs	r1, #32
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fde4 	bl	8002eba <I2C_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e03b      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2220      	movs	r2, #32
 8002302:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	e02d      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	2120      	movs	r1, #32
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fdc9 	bl	8002eba <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e020      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2210      	movs	r2, #16
 8002338:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	f63f af56 	bhi.w	80021fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f043 0220 	orr.w	r2, r3, #32
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	68f9      	ldr	r1, [r7, #12]
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
  }
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00f      	beq.n	80023f2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00f      	beq.n	800241c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	f043 0208 	orr.w	r2, r3, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800241a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00f      	beq.n	8002446 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002434:	f043 0202 	orr.w	r2, r3, #2
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002444:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 030b 	and.w	r3, r3, #11
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fbd5 	bl	8002c08 <I2C_ITError>
  }
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	70fb      	strb	r3, [r7, #3]
 800249a:	4613      	mov	r3, r2
 800249c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <I2C_Slave_ISR_IT+0x24>
 8002506:	2302      	movs	r3, #2
 8002508:	e0e2      	b.n	80026d0 <I2C_Slave_ISR_IT+0x1ea>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d009      	beq.n	8002530 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002526:	6939      	ldr	r1, [r7, #16]
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f9b5 	bl	8002898 <I2C_ITSlaveCplt>
 800252e:	e0ca      	b.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d04b      	beq.n	80025d2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002540:	2b00      	cmp	r3, #0
 8002542:	d046      	beq.n	80025d2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d128      	bne.n	80025a0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b28      	cmp	r3, #40	@ 0x28
 8002558:	d108      	bne.n	800256c <I2C_Slave_ISR_IT+0x86>
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002560:	d104      	bne.n	800256c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002562:	6939      	ldr	r1, [r7, #16]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fafb 	bl	8002b60 <I2C_ITListenCplt>
 800256a:	e031      	b.n	80025d0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b29      	cmp	r3, #41	@ 0x29
 8002576:	d10e      	bne.n	8002596 <I2C_Slave_ISR_IT+0xb0>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800257e:	d00a      	beq.n	8002596 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2210      	movs	r2, #16
 8002586:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fc54 	bl	8002e36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f926 	bl	80027e0 <I2C_ITSlaveSeqCplt>
 8002594:	e01c      	b.n	80025d0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2210      	movs	r2, #16
 800259c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800259e:	e08f      	b.n	80026c0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2210      	movs	r2, #16
 80025a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <I2C_Slave_ISR_IT+0xdc>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c0:	d17e      	bne.n	80026c0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4619      	mov	r1, r3
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fb1d 	bl	8002c08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80025ce:	e077      	b.n	80026c0 <I2C_Slave_ISR_IT+0x1da>
 80025d0:	e076      	b.n	80026c0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02f      	beq.n	800263c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d02a      	beq.n	800263c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d018      	beq.n	8002622 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d14b      	bne.n	80026c4 <I2C_Slave_ISR_IT+0x1de>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002632:	d047      	beq.n	80026c4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f8d3 	bl	80027e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800263a:	e043      	b.n	80026c4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002650:	6939      	ldr	r1, [r7, #16]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f840 	bl	80026d8 <I2C_ITAddrCplt>
 8002658:	e035      	b.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d030      	beq.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800266a:	2b00      	cmp	r3, #0
 800266c:	d02b      	beq.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026a8:	e00d      	b.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b0:	d002      	beq.n	80026b8 <I2C_Slave_ISR_IT+0x1d2>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f891 	bl	80027e0 <I2C_ITSlaveSeqCplt>
 80026be:	e002      	b.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80026c0:	bf00      	nop
 80026c2:	e000      	b.n	80026c6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80026c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80026ee:	2b28      	cmp	r3, #40	@ 0x28
 80026f0:	d16a      	bne.n	80027c8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	b29b      	uxth	r3, r3
 800270c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002710:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	b29b      	uxth	r3, r3
 800271a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800271e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800272c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d138      	bne.n	80027a8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	09db      	lsrs	r3, r3, #7
 800273a:	b29a      	uxth	r2, r3
 800273c:	89bb      	ldrh	r3, [r7, #12]
 800273e:	4053      	eors	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	f003 0306 	and.w	r3, r3, #6
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11c      	bne.n	8002784 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800274a:	897b      	ldrh	r3, [r7, #10]
 800274c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800275c:	2b02      	cmp	r3, #2
 800275e:	d13b      	bne.n	80027d8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2208      	movs	r2, #8
 800276c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002776:	89ba      	ldrh	r2, [r7, #12]
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fe86 	bl	800248e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002782:	e029      	b.n	80027d8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002784:	893b      	ldrh	r3, [r7, #8]
 8002786:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fe15 	bl	80033bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800279a:	89ba      	ldrh	r2, [r7, #12]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	4619      	mov	r1, r3
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fe74 	bl	800248e <HAL_I2C_AddrCallback>
}
 80027a6:	e017      	b.n	80027d8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80027a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fe05 	bl	80033bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80027ba:	89ba      	ldrh	r2, [r7, #12]
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fe64 	bl	800248e <HAL_I2C_AddrCallback>
}
 80027c6:	e007      	b.n	80027d8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e00c      	b.n	800282e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800282c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b29      	cmp	r3, #41	@ 0x29
 8002838:	d112      	bne.n	8002860 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2228      	movs	r2, #40	@ 0x28
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2221      	movs	r2, #33	@ 0x21
 8002846:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002848:	2101      	movs	r1, #1
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fdb6 	bl	80033bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff fe04 	bl	8002466 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800285e:	e017      	b.n	8002890 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b2a      	cmp	r3, #42	@ 0x2a
 800286a:	d111      	bne.n	8002890 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2228      	movs	r2, #40	@ 0x28
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2222      	movs	r2, #34	@ 0x22
 8002878:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800287a:	2102      	movs	r1, #2
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fd9d 	bl	80033bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fdf5 	bl	800247a <HAL_I2C_SlaveRxCpltCallback>
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2220      	movs	r2, #32
 80028c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028c4:	7afb      	ldrb	r3, [r7, #11]
 80028c6:	2b21      	cmp	r3, #33	@ 0x21
 80028c8:	d002      	beq.n	80028d0 <I2C_ITSlaveCplt+0x38>
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	2b29      	cmp	r3, #41	@ 0x29
 80028ce:	d108      	bne.n	80028e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80028d0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fd71 	bl	80033bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2221      	movs	r2, #33	@ 0x21
 80028de:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e0:	e019      	b.n	8002916 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	2b22      	cmp	r3, #34	@ 0x22
 80028e6:	d002      	beq.n	80028ee <I2C_ITSlaveCplt+0x56>
 80028e8:	7afb      	ldrb	r3, [r7, #11]
 80028ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ec:	d108      	bne.n	8002900 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80028ee:	f248 0102 	movw	r1, #32770	@ 0x8002
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fd62 	bl	80033bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2222      	movs	r2, #34	@ 0x22
 80028fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80028fe:	e00a      	b.n	8002916 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	2b28      	cmp	r3, #40	@ 0x28
 8002904:	d107      	bne.n	8002916 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002906:	f248 0103 	movw	r1, #32771	@ 0x8003
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fd56 	bl	80033bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002924:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b89      	ldr	r3, [pc, #548]	@ (8002b58 <I2C_ITSlaveCplt+0x2c0>)
 8002932:	400b      	ands	r3, r1
 8002934:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa7d 	bl	8002e36 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d013      	beq.n	800296e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002954:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01f      	beq.n	800299e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800296c:	e017      	b.n	800299e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002986:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d049      	beq.n	8002a9e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d044      	beq.n	8002a9e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d128      	bne.n	8002a70 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b28      	cmp	r3, #40	@ 0x28
 8002a28:	d108      	bne.n	8002a3c <I2C_ITSlaveCplt+0x1a4>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a30:	d104      	bne.n	8002a3c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a32:	6979      	ldr	r1, [r7, #20]
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f893 	bl	8002b60 <I2C_ITListenCplt>
 8002a3a:	e030      	b.n	8002a9e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b29      	cmp	r3, #41	@ 0x29
 8002a46:	d10e      	bne.n	8002a66 <I2C_ITSlaveCplt+0x1ce>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a4e:	d00a      	beq.n	8002a66 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2210      	movs	r2, #16
 8002a56:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f9ec 	bl	8002e36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff febe 	bl	80027e0 <I2C_ITSlaveSeqCplt>
 8002a64:	e01b      	b.n	8002a9e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	61da      	str	r2, [r3, #28]
 8002a6e:	e016      	b.n	8002a9e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2210      	movs	r2, #16
 8002a76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f043 0204 	orr.w	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <I2C_ITSlaveCplt+0x1fa>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a90:	d105      	bne.n	8002a9e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8b5 	bl	8002c08 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8a4 	bl	8002c08 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b28      	cmp	r3, #40	@ 0x28
 8002aca:	d141      	bne.n	8002b50 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f846 	bl	8002b60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ad4:	e03c      	b.n	8002b50 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ade:	d014      	beq.n	8002b0a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff fe7d 	bl	80027e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <I2C_ITSlaveCplt+0x2c4>)
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fcd1 	bl	80024aa <HAL_I2C_ListenCpltCallback>
}
 8002b08:	e022      	b.n	8002b50 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b22      	cmp	r3, #34	@ 0x22
 8002b14:	d10e      	bne.n	8002b34 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fca4 	bl	800247a <HAL_I2C_SlaveRxCpltCallback>
}
 8002b32:	e00d      	b.n	8002b50 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fc8b 	bl	8002466 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	fe00e800 	.word	0xfe00e800
 8002b5c:	ffff0000 	.word	0xffff0000

08002b60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	@ (8002c04 <I2C_ITListenCplt+0xa4>)
 8002b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d022      	beq.n	8002bdc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d012      	beq.n	8002bdc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bdc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fbeb 	bl	80033bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2210      	movs	r2, #16
 8002bec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fc57 	bl	80024aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	ffff0000 	.word	0xffff0000

08002c08 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c18:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a6d      	ldr	r2, [pc, #436]	@ (8002ddc <I2C_ITError+0x1d4>)
 8002c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b28      	cmp	r3, #40	@ 0x28
 8002c3e:	d005      	beq.n	8002c4c <I2C_ITError+0x44>
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b29      	cmp	r3, #41	@ 0x29
 8002c44:	d002      	beq.n	8002c4c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c4a:	d10b      	bne.n	8002c64 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c4c:	2103      	movs	r1, #3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fbb4 	bl	80033bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2228      	movs	r2, #40	@ 0x28
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a60      	ldr	r2, [pc, #384]	@ (8002de0 <I2C_ITError+0x1d8>)
 8002c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c62:	e030      	b.n	8002cc6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c64:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fba7 	bl	80033bc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8e1 	bl	8002e36 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b60      	cmp	r3, #96	@ 0x60
 8002c7e:	d01f      	beq.n	8002cc0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d114      	bne.n	8002cc0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d109      	bne.n	8002cb8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d039      	beq.n	8002d48 <I2C_ITError+0x140>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b11      	cmp	r3, #17
 8002cd8:	d002      	beq.n	8002ce0 <I2C_ITError+0xd8>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b21      	cmp	r3, #33	@ 0x21
 8002cde:	d133      	bne.n	8002d48 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cee:	d107      	bne.n	8002d00 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cfe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fdd1 	bl	80018ac <HAL_DMA_GetState>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d017      	beq.n	8002d40 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	4a33      	ldr	r2, [pc, #204]	@ (8002de4 <I2C_ITError+0x1dc>)
 8002d16:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fd80 	bl	800182a <HAL_DMA_Abort_IT>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d04d      	beq.n	8002dcc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d3e:	e045      	b.n	8002dcc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f851 	bl	8002de8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d46:	e041      	b.n	8002dcc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d039      	beq.n	8002dc4 <I2C_ITError+0x1bc>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b12      	cmp	r3, #18
 8002d54:	d002      	beq.n	8002d5c <I2C_ITError+0x154>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b22      	cmp	r3, #34	@ 0x22
 8002d5a:	d133      	bne.n	8002dc4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d6a:	d107      	bne.n	8002d7c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fd93 	bl	80018ac <HAL_DMA_GetState>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d017      	beq.n	8002dbc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	4a14      	ldr	r2, [pc, #80]	@ (8002de4 <I2C_ITError+0x1dc>)
 8002d92:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fd42 	bl	800182a <HAL_DMA_Abort_IT>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d011      	beq.n	8002dd0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002db6:	4610      	mov	r0, r2
 8002db8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dba:	e009      	b.n	8002dd0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f813 	bl	8002de8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dc2:	e005      	b.n	8002dd0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f80f 	bl	8002de8 <I2C_TreatErrorCallback>
  }
}
 8002dca:	e002      	b.n	8002dd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dd0:	bf00      	nop
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	ffff0000 	.word	0xffff0000
 8002de0:	080024e7 	.word	0x080024e7
 8002de4:	08002e7f 	.word	0x08002e7f

08002de8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b60      	cmp	r3, #96	@ 0x60
 8002dfa:	d10e      	bne.n	8002e1a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fb5d 	bl	80024d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e18:	e009      	b.n	8002e2e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff fb48 	bl	80024be <HAL_I2C_ErrorCallback>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d103      	bne.n	8002e54 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d007      	beq.n	8002e72 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	619a      	str	r2, [r3, #24]
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e98:	2200      	movs	r2, #0
 8002e9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f7ff ff9b 	bl	8002de8 <I2C_TreatErrorCallback>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	603b      	str	r3, [r7, #0]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eca:	e03b      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	6839      	ldr	r1, [r7, #0]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f961 	bl	8003198 <I2C_IsErrorOccurred>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e041      	b.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d02d      	beq.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7fe fb5e 	bl	80015a8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d302      	bcc.n	8002efe <I2C_WaitOnFlagUntilTimeout+0x44>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d122      	bne.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4013      	ands	r3, r2
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d113      	bne.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f20:	f043 0220 	orr.w	r2, r3, #32
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e00f      	b.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d0b4      	beq.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f78:	e033      	b.n	8002fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f90a 	bl	8003198 <I2C_IsErrorOccurred>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e031      	b.n	8002ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d025      	beq.n	8002fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fb07 	bl	80015a8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11a      	bne.n	8002fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d013      	beq.n	8002fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d1c4      	bne.n	8002f7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003006:	e02f      	b.n	8003068 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f8c3 	bl	8003198 <I2C_IsErrorOccurred>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e02d      	b.n	8003078 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301c:	f7fe fac4 	bl	80015a8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	429a      	cmp	r2, r3
 800302a:	d302      	bcc.n	8003032 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11a      	bne.n	8003068 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b20      	cmp	r3, #32
 800303e:	d013      	beq.n	8003068 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e007      	b.n	8003078 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b20      	cmp	r3, #32
 8003074:	d1c8      	bne.n	8003008 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003090:	e071      	b.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f87e 	bl	8003198 <I2C_IsErrorOccurred>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d13b      	bne.n	800312c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d138      	bne.n	800312c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d105      	bne.n	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d121      	bne.n	8003126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2210      	movs	r2, #16
 80030e8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2204      	movs	r2, #4
 80030ee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2220      	movs	r2, #32
 80030f6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003104:	400b      	ands	r3, r1
 8003106:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
 8003124:	e002      	b.n	800312c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800312c:	f7fe fa3c 	bl	80015a8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d119      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d116      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d00f      	beq.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d002      	beq.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d083      	beq.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800318a:	7dfb      	ldrb	r3, [r7, #23]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	fe00e800 	.word	0xfe00e800

08003198 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d068      	beq.n	8003296 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2210      	movs	r2, #16
 80031ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031cc:	e049      	b.n	8003262 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d045      	beq.n	8003262 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031d6:	f7fe f9e7 	bl	80015a8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <I2C_IsErrorOccurred+0x54>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d13a      	bne.n	8003262 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800320e:	d121      	bne.n	8003254 <I2C_IsErrorOccurred+0xbc>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003216:	d01d      	beq.n	8003254 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b20      	cmp	r3, #32
 800321c:	d01a      	beq.n	8003254 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800322c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800322e:	f7fe f9bb 	bl	80015a8 <HAL_GetTick>
 8003232:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003234:	e00e      	b.n	8003254 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003236:	f7fe f9b7 	bl	80015a8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b19      	cmp	r3, #25
 8003242:	d907      	bls.n	8003254 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003252:	e006      	b.n	8003262 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b20      	cmp	r3, #32
 8003260:	d1e9      	bne.n	8003236 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b20      	cmp	r3, #32
 800326e:	d003      	beq.n	8003278 <I2C_IsErrorOccurred+0xe0>
 8003270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0aa      	beq.n	80031ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2220      	movs	r2, #32
 8003286:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01c      	beq.n	8003346 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fd92 	bl	8002e36 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <I2C_IsErrorOccurred+0x1bc>)
 800331e:	400b      	ands	r3, r1
 8003320:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800334a:	4618      	mov	r0, r3
 800334c:	3728      	adds	r7, #40	@ 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	fe00e800 	.word	0xfe00e800

08003358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	4613      	mov	r3, r2
 8003368:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003370:	7a7b      	ldrb	r3, [r7, #9]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003378:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	4313      	orrs	r3, r2
 8003382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003386:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	0d5b      	lsrs	r3, r3, #21
 8003392:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003396:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <I2C_TransferConfig+0x60>)
 8003398:	430b      	orrs	r3, r1
 800339a:	43db      	mvns	r3, r3
 800339c:	ea02 0103 	and.w	r1, r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	03ff63ff 	.word	0x03ff63ff

080033bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00f      	beq.n	80033f6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80033dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033ea:	2b28      	cmp	r3, #40	@ 0x28
 80033ec:	d003      	beq.n	80033f6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80033f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00f      	beq.n	8003420 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003406:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003414:	2b28      	cmp	r3, #40	@ 0x28
 8003416:	d003      	beq.n	8003420 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800341e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003420:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003424:	2b00      	cmp	r3, #0
 8003426:	da03      	bge.n	8003430 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800342e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	2b10      	cmp	r3, #16
 8003434:	d103      	bne.n	800343e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800343c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	2b20      	cmp	r3, #32
 8003442:	d103      	bne.n	800344c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f043 0320 	orr.w	r3, r3, #32
 800344a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	2b40      	cmp	r3, #64	@ 0x40
 8003450:	d103      	bne.n	800345a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003458:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43da      	mvns	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b20      	cmp	r3, #32
 800348c:	d138      	bne.n	8003500 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003498:	2302      	movs	r3, #2
 800349a:	e032      	b.n	8003502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6819      	ldr	r1, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
  }
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b20      	cmp	r3, #32
 8003522:	d139      	bne.n	8003598 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800352e:	2302      	movs	r3, #2
 8003530:	e033      	b.n	800359a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2224      	movs	r2, #36	@ 0x24
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003560:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035ac:	4b04      	ldr	r3, [pc, #16]	@ (80035c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40007000 	.word	0x40007000

080035c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d2:	d130      	bne.n	8003636 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e0:	d038      	beq.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035e2:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003668 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2232      	movs	r2, #50	@ 0x32
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0c9b      	lsrs	r3, r3, #18
 8003604:	3301      	adds	r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003608:	e002      	b.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3b01      	subs	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003610:	4b14      	ldr	r3, [pc, #80]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361c:	d102      	bne.n	8003624 <HAL_PWREx_ControlVoltageScaling+0x60>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f2      	bne.n	800360a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003630:	d110      	bne.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003636:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003642:	d007      	beq.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003644:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800364c:	4a05      	ldr	r2, [pc, #20]	@ (8003664 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003652:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40007000 	.word	0x40007000
 8003668:	20000004 	.word	0x20000004
 800366c:	431bde83 	.word	0x431bde83

08003670 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f000 bc02 	b.w	8003e88 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003684:	4b96      	ldr	r3, [pc, #600]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368e:	4b94      	ldr	r3, [pc, #592]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80e4 	beq.w	800386e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <HAL_RCC_OscConfig+0x4c>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	f040 808b 	bne.w	80037ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	f040 8087 	bne.w	80037ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036bc:	4b88      	ldr	r3, [pc, #544]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_OscConfig+0x64>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e3d9      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	4b81      	ldr	r3, [pc, #516]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <HAL_RCC_OscConfig+0x7e>
 80036e4:	4b7e      	ldr	r3, [pc, #504]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ec:	e005      	b.n	80036fa <HAL_RCC_OscConfig+0x8a>
 80036ee:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80036f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d223      	bcs.n	8003746 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fd54 	bl	80041b0 <RCC_SetFlashLatencyFromMSIRange>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e3ba      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003712:	4b73      	ldr	r3, [pc, #460]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a72      	ldr	r2, [pc, #456]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b70      	ldr	r3, [pc, #448]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	496d      	ldr	r1, [pc, #436]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003730:	4b6b      	ldr	r3, [pc, #428]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	4968      	ldr	r1, [pc, #416]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
 8003744:	e025      	b.n	8003792 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003746:	4b66      	ldr	r3, [pc, #408]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a65      	ldr	r2, [pc, #404]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b63      	ldr	r3, [pc, #396]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4960      	ldr	r1, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003764:	4b5e      	ldr	r3, [pc, #376]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	495b      	ldr	r1, [pc, #364]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fd14 	bl	80041b0 <RCC_SetFlashLatencyFromMSIRange>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e37a      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003792:	f000 fc81 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b51      	ldr	r3, [pc, #324]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4950      	ldr	r1, [pc, #320]	@ (80038e4 <HAL_RCC_OscConfig+0x274>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	fa22 f303 	lsr.w	r3, r2, r3
 80037ae:	4a4e      	ldr	r2, [pc, #312]	@ (80038e8 <HAL_RCC_OscConfig+0x278>)
 80037b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037b2:	4b4e      	ldr	r3, [pc, #312]	@ (80038ec <HAL_RCC_OscConfig+0x27c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fea6 	bl	8001508 <HAL_InitTick>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d052      	beq.n	800386c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	e35e      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d032      	beq.n	8003838 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037d2:	4b43      	ldr	r3, [pc, #268]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a42      	ldr	r2, [pc, #264]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037de:	f7fd fee3 	bl	80015a8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e6:	f7fd fedf 	bl	80015a8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e347      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037f8:	4b39      	ldr	r3, [pc, #228]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a35      	ldr	r2, [pc, #212]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800380a:	f043 0308 	orr.w	r3, r3, #8
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b33      	ldr	r3, [pc, #204]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4930      	ldr	r1, [pc, #192]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003822:	4b2f      	ldr	r3, [pc, #188]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	492b      	ldr	r1, [pc, #172]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
 8003836:	e01a      	b.n	800386e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003838:	4b29      	ldr	r3, [pc, #164]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a28      	ldr	r2, [pc, #160]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003844:	f7fd feb0 	bl	80015a8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384c:	f7fd feac 	bl	80015a8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e314      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800385e:	4b20      	ldr	r3, [pc, #128]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x1dc>
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800386c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d073      	beq.n	8003962 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x21c>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d10e      	bne.n	80038a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b03      	cmp	r3, #3
 800388a:	d10b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d063      	beq.n	8003960 <HAL_RCC_OscConfig+0x2f0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d15f      	bne.n	8003960 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e2f1      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x24c>
 80038ae:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a0b      	ldr	r2, [pc, #44]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e025      	b.n	8003908 <HAL_RCC_OscConfig+0x298>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c4:	d114      	bne.n	80038f0 <HAL_RCC_OscConfig+0x280>
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a05      	ldr	r2, [pc, #20]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a02      	ldr	r2, [pc, #8]	@ (80038e0 <HAL_RCC_OscConfig+0x270>)
 80038d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e013      	b.n	8003908 <HAL_RCC_OscConfig+0x298>
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08004958 	.word	0x08004958
 80038e8:	20000004 	.word	0x20000004
 80038ec:	20000008 	.word	0x20000008
 80038f0:	4ba0      	ldr	r3, [pc, #640]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a9f      	ldr	r2, [pc, #636]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b9d      	ldr	r3, [pc, #628]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a9c      	ldr	r2, [pc, #624]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fe4a 	bl	80015a8 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7fd fe46 	bl	80015a8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	@ 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e2ae      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800392a:	4b92      	ldr	r3, [pc, #584]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x2a8>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd fe36 	bl	80015a8 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003940:	f7fd fe32 	bl	80015a8 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	@ 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e29a      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003952:	4b88      	ldr	r3, [pc, #544]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x2d0>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d060      	beq.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d005      	beq.n	8003980 <HAL_RCC_OscConfig+0x310>
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d119      	bne.n	80039ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d116      	bne.n	80039ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003980:	4b7c      	ldr	r3, [pc, #496]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x328>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e277      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003998:	4b76      	ldr	r3, [pc, #472]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	4973      	ldr	r1, [pc, #460]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ac:	e040      	b.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d023      	beq.n	80039fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fd fdf1 	bl	80015a8 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fd fded 	bl	80015a8 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e255      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039dc:	4b65      	ldr	r3, [pc, #404]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e8:	4b62      	ldr	r3, [pc, #392]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	495f      	ldr	r1, [pc, #380]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]
 80039fc:	e018      	b.n	8003a30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5c      	ldr	r2, [pc, #368]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fdcd 	bl	80015a8 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fd fdc9 	bl	80015a8 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e231      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a24:	4b53      	ldr	r3, [pc, #332]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1f0      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d03c      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a44:	4b4b      	ldr	r3, [pc, #300]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fd fda8 	bl	80015a8 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fd fda4 	bl	80015a8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e20c      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a6e:	4b41      	ldr	r3, [pc, #260]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ef      	beq.n	8003a5c <HAL_RCC_OscConfig+0x3ec>
 8003a7c:	e01b      	b.n	8003ab6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a84:	4a3b      	ldr	r2, [pc, #236]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fd8b 	bl	80015a8 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fd fd87 	bl	80015a8 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e1ef      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aa8:	4b32      	ldr	r3, [pc, #200]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1ef      	bne.n	8003a96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a6 	beq.w	8003c10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10d      	bne.n	8003af0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad4:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	4a26      	ldr	r2, [pc, #152]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae0:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aec:	2301      	movs	r3, #1
 8003aee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af0:	4b21      	ldr	r3, [pc, #132]	@ (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d118      	bne.n	8003b2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	@ (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b08:	f7fd fd4e 	bl	80015a8 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fd fd4a 	bl	80015a8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1b2      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <HAL_RCC_OscConfig+0x508>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d108      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4d8>
 8003b36:	4b0f      	ldr	r3, [pc, #60]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b46:	e029      	b.n	8003b9c <HAL_RCC_OscConfig+0x52c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d115      	bne.n	8003b7c <HAL_RCC_OscConfig+0x50c>
 8003b50:	4b08      	ldr	r3, [pc, #32]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	4a07      	ldr	r2, [pc, #28]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b60:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b66:	4a03      	ldr	r2, [pc, #12]	@ (8003b74 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b70:	e014      	b.n	8003b9c <HAL_RCC_OscConfig+0x52c>
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	4b9a      	ldr	r3, [pc, #616]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	4a99      	ldr	r2, [pc, #612]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b8c:	4b96      	ldr	r3, [pc, #600]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b92:	4a95      	ldr	r2, [pc, #596]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d016      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fd00 	bl	80015a8 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bac:	f7fd fcfc 	bl	80015a8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e162      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc2:	4b89      	ldr	r3, [pc, #548]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ed      	beq.n	8003bac <HAL_RCC_OscConfig+0x53c>
 8003bd0:	e015      	b.n	8003bfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd fce9 	bl	80015a8 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fd fce5 	bl	80015a8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e14b      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bf0:	4b7d      	ldr	r3, [pc, #500]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1ed      	bne.n	8003bda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfe:	7ffb      	ldrb	r3, [r7, #31]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c04:	4b78      	ldr	r3, [pc, #480]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c08:	4a77      	ldr	r2, [pc, #476]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d03c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01c      	beq.n	8003c5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c24:	4b70      	ldr	r3, [pc, #448]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c2a:	4a6f      	ldr	r2, [pc, #444]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd fcb8 	bl	80015a8 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c3c:	f7fd fcb4 	bl	80015a8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e11c      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c4e:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ef      	beq.n	8003c3c <HAL_RCC_OscConfig+0x5cc>
 8003c5c:	e01b      	b.n	8003c96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c5e:	4b62      	ldr	r3, [pc, #392]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c64:	4a60      	ldr	r2, [pc, #384]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fd fc9b 	bl	80015a8 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c76:	f7fd fc97 	bl	80015a8 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0ff      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c88:	4b57      	ldr	r3, [pc, #348]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ef      	bne.n	8003c76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80f3 	beq.w	8003e86 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f040 80c9 	bne.w	8003e3c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003caa:	4b4f      	ldr	r3, [pc, #316]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0203 	and.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d12c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d123      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d11b      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d113      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d109      	bne.n	8003d18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	3b01      	subs	r3, #1
 8003d12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d06b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b0c      	cmp	r3, #12
 8003d1c:	d062      	beq.n	8003de4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d1e:	4b32      	ldr	r3, [pc, #200]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e0ac      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2d      	ldr	r2, [pc, #180]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d3a:	f7fd fc35 	bl	80015a8 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fd fc31 	bl	80015a8 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e099      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d60:	4b21      	ldr	r3, [pc, #132]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	4b21      	ldr	r3, [pc, #132]	@ (8003dec <HAL_RCC_OscConfig+0x77c>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d70:	3a01      	subs	r2, #1
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	4311      	orrs	r1, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d7a:	0212      	lsls	r2, r2, #8
 8003d7c:	4311      	orrs	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d82:	0852      	lsrs	r2, r2, #1
 8003d84:	3a01      	subs	r2, #1
 8003d86:	0552      	lsls	r2, r2, #21
 8003d88:	4311      	orrs	r1, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d8e:	0852      	lsrs	r2, r2, #1
 8003d90:	3a01      	subs	r2, #1
 8003d92:	0652      	lsls	r2, r2, #25
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d9a:	06d2      	lsls	r2, r2, #27
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	4912      	ldr	r1, [pc, #72]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003da4:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0f      	ldr	r2, [pc, #60]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db0:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a0c      	ldr	r2, [pc, #48]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003db6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dbc:	f7fd fbf4 	bl	80015a8 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fd fbf0 	bl	80015a8 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e058      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd6:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <HAL_RCC_OscConfig+0x778>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003de2:	e050      	b.n	8003e86 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e04f      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
 8003de8:	40021000 	.word	0x40021000
 8003dec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df0:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d144      	bne.n	8003e86 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dfc:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a23      	ldr	r2, [pc, #140]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e08:	4b21      	ldr	r3, [pc, #132]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e14:	f7fd fbc8 	bl	80015a8 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd fbc4 	bl	80015a8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e02c      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x7ac>
 8003e3a:	e024      	b.n	8003e86 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d01f      	beq.n	8003e82 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a12      	ldr	r2, [pc, #72]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fbab 	bl	80015a8 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fd fba7 	bl	80015a8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e00f      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e68:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e74:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	4905      	ldr	r1, [pc, #20]	@ (8003e90 <HAL_RCC_OscConfig+0x820>)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	@ (8003e94 <HAL_RCC_OscConfig+0x824>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60cb      	str	r3, [r1, #12]
 8003e80:	e001      	b.n	8003e86 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	feeefffc 	.word	0xfeeefffc

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0e7      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b75      	ldr	r3, [pc, #468]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d910      	bls.n	8003edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b72      	ldr	r3, [pc, #456]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4970      	ldr	r1, [pc, #448]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b6e      	ldr	r3, [pc, #440]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0cf      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	4b66      	ldr	r3, [pc, #408]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d908      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b63      	ldr	r3, [pc, #396]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4960      	ldr	r1, [pc, #384]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04c      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d121      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0a6      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d115      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e09a      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e08e      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e086      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b46      	ldr	r3, [pc, #280]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4943      	ldr	r1, [pc, #268]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fd fb12 	bl	80015a8 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fd fb0e 	bl	80015a8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e06e      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d208      	bcs.n	8003fde <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	492b      	ldr	r1, [pc, #172]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fde:	4b29      	ldr	r3, [pc, #164]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d210      	bcs.n	800400e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fec:	4b25      	ldr	r3, [pc, #148]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 0207 	bic.w	r2, r3, #7
 8003ff4:	4923      	ldr	r1, [pc, #140]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffc:	4b21      	ldr	r3, [pc, #132]	@ (8004084 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e036      	b.n	800407c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4918      	ldr	r1, [pc, #96]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004038:	4b13      	ldr	r3, [pc, #76]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4910      	ldr	r1, [pc, #64]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800404c:	f000 f824 	bl	8004098 <HAL_RCC_GetSysClockFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	490b      	ldr	r1, [pc, #44]	@ (800408c <HAL_RCC_ClockConfig+0x1f4>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <HAL_RCC_ClockConfig+0x1f8>)
 800406a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800406c:	4b09      	ldr	r3, [pc, #36]	@ (8004094 <HAL_RCC_ClockConfig+0x1fc>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7fd fa49 	bl	8001508 <HAL_InitTick>
 8004076:	4603      	mov	r3, r0
 8004078:	72fb      	strb	r3, [r7, #11]

  return status;
 800407a:	7afb      	ldrb	r3, [r7, #11]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40022000 	.word	0x40022000
 8004088:	40021000 	.word	0x40021000
 800408c:	08004958 	.word	0x08004958
 8004090:	20000004 	.word	0x20000004
 8004094:	20000008 	.word	0x20000008

08004098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	@ 0x24
 800409c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a6:	4b3e      	ldr	r3, [pc, #248]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b0:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0303 	and.w	r3, r3, #3
 80040b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0x34>
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d121      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d11e      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040cc:	4b34      	ldr	r3, [pc, #208]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040d8:	4b31      	ldr	r3, [pc, #196]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e005      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040e8:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040f4:	4a2b      	ldr	r2, [pc, #172]	@ (80041a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10d      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d102      	bne.n	8004116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004110:	4b25      	ldr	r3, [pc, #148]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e004      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d101      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800411c:	4b23      	ldr	r3, [pc, #140]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x114>)
 800411e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d134      	bne.n	8004190 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004126:	4b1e      	ldr	r3, [pc, #120]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0xa6>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d003      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0xac>
 800413c:	e005      	b.n	800414a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800413e:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004140:	617b      	str	r3, [r7, #20]
      break;
 8004142:	e005      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004144:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004146:	617b      	str	r3, [r7, #20]
      break;
 8004148:	e002      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	617b      	str	r3, [r7, #20]
      break;
 800414e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004150:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	3301      	adds	r3, #1
 800415c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800415e:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	fb03 f202 	mul.w	r2, r3, r2
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004176:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	0e5b      	lsrs	r3, r3, #25
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	3301      	adds	r3, #1
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004190:	69bb      	ldr	r3, [r7, #24]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	@ 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08004968 	.word	0x08004968
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	007a1200 	.word	0x007a1200

080041b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041c8:	f7ff f9ee 	bl	80035a8 <HAL_PWREx_GetVoltageRange>
 80041cc:	6178      	str	r0, [r7, #20]
 80041ce:	e014      	b.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d0:	4b25      	ldr	r3, [pc, #148]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d4:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041da:	6593      	str	r3, [r2, #88]	@ 0x58
 80041dc:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041e8:	f7ff f9de 	bl	80035a8 <HAL_PWREx_GetVoltageRange>
 80041ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004200:	d10b      	bne.n	800421a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b80      	cmp	r3, #128	@ 0x80
 8004206:	d919      	bls.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2ba0      	cmp	r3, #160	@ 0xa0
 800420c:	d902      	bls.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800420e:	2302      	movs	r3, #2
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e013      	b.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004214:	2301      	movs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e010      	b.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b80      	cmp	r3, #128	@ 0x80
 800421e:	d902      	bls.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004220:	2303      	movs	r3, #3
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e00a      	b.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b80      	cmp	r3, #128	@ 0x80
 800422a:	d102      	bne.n	8004232 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800422c:	2302      	movs	r3, #2
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	e004      	b.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b70      	cmp	r3, #112	@ 0x70
 8004236:	d101      	bne.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004238:	2301      	movs	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800423c:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 0207 	bic.w	r2, r3, #7
 8004244:	4909      	ldr	r1, [pc, #36]	@ (800426c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800424c:	4b07      	ldr	r3, [pc, #28]	@ (800426c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	429a      	cmp	r2, r3
 8004258:	d001      	beq.n	800425e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000
 800426c:	40022000 	.word	0x40022000

08004270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004278:	2300      	movs	r3, #0
 800427a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800427c:	2300      	movs	r3, #0
 800427e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004288:	2b00      	cmp	r3, #0
 800428a:	d031      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004294:	d01a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004296:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800429a:	d814      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042a4:	d10f      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80042a6:	4b5d      	ldr	r3, [pc, #372]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4a5c      	ldr	r2, [pc, #368]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b2:	e00c      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa22 	bl	8004704 <RCCEx_PLLSAI1_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	74fb      	strb	r3, [r7, #19]
      break;
 80042ca:	e000      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042d4:	4b51      	ldr	r3, [pc, #324]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	494e      	ldr	r1, [pc, #312]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042ea:	e001      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 809e 	beq.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004302:	4b46      	ldr	r3, [pc, #280]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004318:	4b40      	ldr	r3, [pc, #256]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431c:	4a3f      	ldr	r2, [pc, #252]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004322:	6593      	str	r3, [r2, #88]	@ 0x58
 8004324:	4b3d      	ldr	r3, [pc, #244]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004330:	2301      	movs	r3, #1
 8004332:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004334:	4b3a      	ldr	r3, [pc, #232]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a39      	ldr	r2, [pc, #228]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800433a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004340:	f7fd f932 	bl	80015a8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004346:	e009      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004348:	f7fd f92e 	bl	80015a8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d902      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	74fb      	strb	r3, [r7, #19]
        break;
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800435c:	4b30      	ldr	r3, [pc, #192]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ef      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d15a      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800436e:	4b2b      	ldr	r3, [pc, #172]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004378:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01e      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	429a      	cmp	r2, r3
 8004388:	d019      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800438a:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004394:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004396:	4b21      	ldr	r3, [pc, #132]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800439e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043a6:	4b1d      	ldr	r3, [pc, #116]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ac:	4a1b      	ldr	r2, [pc, #108]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043b6:	4a19      	ldr	r2, [pc, #100]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d016      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fd f8ee 	bl	80015a8 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ce:	e00b      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fd f8ea 	bl	80015a8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d902      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	74fb      	strb	r3, [r7, #19]
            break;
 80043e6:	e006      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e8:	4b0c      	ldr	r3, [pc, #48]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ec      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fc:	4b07      	ldr	r3, [pc, #28]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004402:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440a:	4904      	ldr	r1, [pc, #16]	@ (800441c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004412:	e009      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
 8004418:	e006      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004428:	7c7b      	ldrb	r3, [r7, #17]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4b8d      	ldr	r3, [pc, #564]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004432:	4a8c      	ldr	r2, [pc, #560]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004438:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004446:	4b87      	ldr	r3, [pc, #540]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444c:	f023 0203 	bic.w	r2, r3, #3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4983      	ldr	r1, [pc, #524]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004468:	4b7e      	ldr	r3, [pc, #504]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	f023 020c 	bic.w	r2, r3, #12
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	497b      	ldr	r1, [pc, #492]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800448a:	4b76      	ldr	r3, [pc, #472]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	4972      	ldr	r1, [pc, #456]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	496a      	ldr	r1, [pc, #424]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ce:	4b65      	ldr	r3, [pc, #404]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044dc:	4961      	ldr	r1, [pc, #388]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f0:	4b5c      	ldr	r3, [pc, #368]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	4959      	ldr	r1, [pc, #356]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004512:	4b54      	ldr	r3, [pc, #336]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004520:	4950      	ldr	r1, [pc, #320]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004534:	4b4b      	ldr	r3, [pc, #300]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004542:	4948      	ldr	r1, [pc, #288]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004556:	4b43      	ldr	r3, [pc, #268]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	493f      	ldr	r1, [pc, #252]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d028      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004578:	4b3a      	ldr	r3, [pc, #232]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004586:	4937      	ldr	r1, [pc, #220]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004596:	d106      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004598:	4b32      	ldr	r3, [pc, #200]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a31      	ldr	r2, [pc, #196]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800459e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045a2:	60d3      	str	r3, [r2, #12]
 80045a4:	e011      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045ae:	d10c      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f8a4 	bl	8004704 <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d6:	4b23      	ldr	r3, [pc, #140]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e4:	491f      	ldr	r1, [pc, #124]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045f4:	d106      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80045fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004600:	60d3      	str	r3, [r2, #12]
 8004602:	e011      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800460c:	d10c      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	2101      	movs	r1, #1
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f875 	bl	8004704 <RCCEx_PLLSAI1_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800461e:	7cfb      	ldrb	r3, [r7, #19]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004624:	7cfb      	ldrb	r3, [r7, #19]
 8004626:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d02b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004642:	4908      	ldr	r1, [pc, #32]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004652:	d109      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004654:	4b03      	ldr	r3, [pc, #12]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a02      	ldr	r2, [pc, #8]	@ (8004664 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800465e:	60d3      	str	r3, [r2, #12]
 8004660:	e014      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004670:	d10c      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	2101      	movs	r1, #1
 8004678:	4618      	mov	r0, r3
 800467a:	f000 f843 	bl	8004704 <RCCEx_PLLSAI1_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01c      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004698:	4b19      	ldr	r3, [pc, #100]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	4916      	ldr	r1, [pc, #88]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3304      	adds	r3, #4
 80046bc:	2102      	movs	r1, #2
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f820 	bl	8004704 <RCCEx_PLLSAI1_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046c8:	7cfb      	ldrb	r3, [r7, #19]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80046ce:	7cfb      	ldrb	r3, [r7, #19]
 80046d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046de:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ec:	4904      	ldr	r1, [pc, #16]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000

08004704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004712:	4b74      	ldr	r3, [pc, #464]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d018      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800471e:	4b71      	ldr	r3, [pc, #452]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0203 	and.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d10d      	bne.n	800474a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
       ||
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004736:	4b6b      	ldr	r3, [pc, #428]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
       ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d047      	beq.n	80047da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	e044      	b.n	80047da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b03      	cmp	r3, #3
 8004756:	d018      	beq.n	800478a <RCCEx_PLLSAI1_Config+0x86>
 8004758:	2b03      	cmp	r3, #3
 800475a:	d825      	bhi.n	80047a8 <RCCEx_PLLSAI1_Config+0xa4>
 800475c:	2b01      	cmp	r3, #1
 800475e:	d002      	beq.n	8004766 <RCCEx_PLLSAI1_Config+0x62>
 8004760:	2b02      	cmp	r3, #2
 8004762:	d009      	beq.n	8004778 <RCCEx_PLLSAI1_Config+0x74>
 8004764:	e020      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004766:	4b5f      	ldr	r3, [pc, #380]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d11d      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004776:	e01a      	b.n	80047ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004778:	4b5a      	ldr	r3, [pc, #360]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004780:	2b00      	cmp	r3, #0
 8004782:	d116      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004788:	e013      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800478a:	4b56      	ldr	r3, [pc, #344]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10f      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004796:	4b53      	ldr	r3, [pc, #332]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047a6:	e006      	b.n	80047b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      break;
 80047ac:	e004      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10d      	bne.n	80047da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047be:	4b49      	ldr	r3, [pc, #292]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	430b      	orrs	r3, r1
 80047d4:	4943      	ldr	r1, [pc, #268]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d17c      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047e0:	4b40      	ldr	r3, [pc, #256]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3f      	ldr	r2, [pc, #252]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ec:	f7fc fedc 	bl	80015a8 <HAL_GetTick>
 80047f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047f2:	e009      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047f4:	f7fc fed8 	bl	80015a8 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d902      	bls.n	8004808 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	73fb      	strb	r3, [r7, #15]
        break;
 8004806:	e005      	b.n	8004814 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004808:	4b36      	ldr	r3, [pc, #216]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1ef      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d15f      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d110      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004820:	4b30      	ldr	r3, [pc, #192]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004828:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6892      	ldr	r2, [r2, #8]
 8004830:	0211      	lsls	r1, r2, #8
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68d2      	ldr	r2, [r2, #12]
 8004836:	06d2      	lsls	r2, r2, #27
 8004838:	430a      	orrs	r2, r1
 800483a:	492a      	ldr	r1, [pc, #168]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	610b      	str	r3, [r1, #16]
 8004840:	e027      	b.n	8004892 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d112      	bne.n	800486e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004848:	4b26      	ldr	r3, [pc, #152]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004850:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	0211      	lsls	r1, r2, #8
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6912      	ldr	r2, [r2, #16]
 800485e:	0852      	lsrs	r2, r2, #1
 8004860:	3a01      	subs	r2, #1
 8004862:	0552      	lsls	r2, r2, #21
 8004864:	430a      	orrs	r2, r1
 8004866:	491f      	ldr	r1, [pc, #124]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004868:	4313      	orrs	r3, r2
 800486a:	610b      	str	r3, [r1, #16]
 800486c:	e011      	b.n	8004892 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800486e:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004876:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6892      	ldr	r2, [r2, #8]
 800487e:	0211      	lsls	r1, r2, #8
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6952      	ldr	r2, [r2, #20]
 8004884:	0852      	lsrs	r2, r2, #1
 8004886:	3a01      	subs	r2, #1
 8004888:	0652      	lsls	r2, r2, #25
 800488a:	430a      	orrs	r2, r1
 800488c:	4915      	ldr	r1, [pc, #84]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004892:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a13      	ldr	r2, [pc, #76]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004898:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800489c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fc fe83 	bl	80015a8 <HAL_GetTick>
 80048a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048a4:	e009      	b.n	80048ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a6:	f7fc fe7f 	bl	80015a8 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d902      	bls.n	80048ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	73fb      	strb	r3, [r7, #15]
          break;
 80048b8:	e005      	b.n	80048c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ba:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0ef      	beq.n	80048a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	4903      	ldr	r1, [pc, #12]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048da:	7bfb      	ldrb	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000

080048e8 <memset>:
 80048e8:	4402      	add	r2, r0
 80048ea:	4603      	mov	r3, r0
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <memset+0xa>
 80048f0:	4770      	bx	lr
 80048f2:	f803 1b01 	strb.w	r1, [r3], #1
 80048f6:	e7f9      	b.n	80048ec <memset+0x4>

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004934 <__libc_init_array+0x3c>)
 80048fe:	1b64      	subs	r4, r4, r5
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2600      	movs	r6, #0
 8004904:	42a6      	cmp	r6, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4d0b      	ldr	r5, [pc, #44]	@ (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	@ (800493c <__libc_init_array+0x44>)
 800490c:	f000 f818 	bl	8004940 <_init>
 8004910:	1b64      	subs	r4, r4, r5
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2600      	movs	r6, #0
 8004916:	42a6      	cmp	r6, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004920:	4798      	blx	r3
 8004922:	3601      	adds	r6, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f855 3b04 	ldr.w	r3, [r5], #4
 800492a:	4798      	blx	r3
 800492c:	3601      	adds	r6, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	08004998 	.word	0x08004998
 8004934:	08004998 	.word	0x08004998
 8004938:	08004998 	.word	0x08004998
 800493c:	0800499c 	.word	0x0800499c

08004940 <_init>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr

0800494c <_fini>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	bf00      	nop
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr
