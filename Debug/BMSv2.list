
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ddc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004f68  08004f68  00005f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa8  08004fa8  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004fa8  08004fa8  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fa8  08004fa8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa8  08004fa8  00005fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fac  08004fac  00005fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004fb0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  08004fc0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004fc0  0000616c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eba3  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ade  00000000  00000000  00014be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000176c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092e  00000000  00000000  00018318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233e4  00000000  00000000  00018c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c3d  00000000  00000000  0003c02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6bd  00000000  00000000  0004dc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118324  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f4  00000000  00000000  00118368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011b45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004f50 	.word	0x08004f50

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004f50 	.word	0x08004f50

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b590      	push	{r4, r7, lr}
 80001ce:	b0bb      	sub	sp, #236	@ 0xec
 80001d0:	af36      	add	r7, sp, #216	@ 0xd8
 80001d2:	6078      	str	r0, [r7, #4]
    BMS_1.bq_i2c = i2c;
 80001d4:	4a58      	ldr	r2, [pc, #352]	@ (8000338 <BQ_Init+0x16c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]
    if(i2c == &hi2c1){
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a57      	ldr	r2, [pc, #348]	@ (800033c <BQ_Init+0x170>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d10b      	bne.n	80001fa <BQ_Init+0x2e>
    	__HAL_RCC_I2C1_CLK_ENABLE();
 80001e2:	4b57      	ldr	r3, [pc, #348]	@ (8000340 <BQ_Init+0x174>)
 80001e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001e6:	4a56      	ldr	r2, [pc, #344]	@ (8000340 <BQ_Init+0x174>)
 80001e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80001ee:	4b54      	ldr	r3, [pc, #336]	@ (8000340 <BQ_Init+0x174>)
 80001f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]

//    ("[BQ] Started", 12);
//    if (USE_SCANNER == 1)
//    {
#ifdef USE_SCANNER
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001fa:	4b52      	ldr	r3, [pc, #328]	@ (8000344 <BQ_Init+0x178>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	b299      	uxth	r1, r3
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	2203      	movs	r2, #3
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f002 fac6 	bl	8002798 <HAL_I2C_IsDeviceReady>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
	while (ret != HAL_OK)
 8000210:	e012      	b.n	8000238 <BQ_Init+0x6c>
	{
//            ("[BQ] device not founded", 23);
		ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 8000212:	4b4c      	ldr	r3, [pc, #304]	@ (8000344 <BQ_Init+0x178>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	b299      	uxth	r1, r3
 800021a:	2364      	movs	r3, #100	@ 0x64
 800021c:	2203      	movs	r2, #3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f002 faba 	bl	8002798 <HAL_I2C_IsDeviceReady>
 8000224:	4603      	mov	r3, r0
 8000226:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022c:	f001 fcc2 	bl	8001bb4 <HAL_Delay>
	#ifdef debug
		if(ret == HAL_ERROR){
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d100      	bne.n	8000238 <BQ_Init+0x6c>
			__asm("nop");
 8000236:	bf00      	nop
	while (ret != HAL_OK)
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1e9      	bne.n	8000212 <BQ_Init+0x46>
#endif
//    }

    

    HAL_Delay(1500);
 800023e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000242:	f001 fcb7 	bl	8001bb4 <HAL_Delay>
    BQAction_UpdateData(&BMS_1);
 8000246:	483c      	ldr	r0, [pc, #240]	@ (8000338 <BQ_Init+0x16c>)
 8000248:	f000 fca4 	bl	8000b94 <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS_1);
 800024c:	4c3a      	ldr	r4, [pc, #232]	@ (8000338 <BQ_Init+0x16c>)
 800024e:	4668      	mov	r0, sp
 8000250:	f104 0310 	add.w	r3, r4, #16
 8000254:	22d4      	movs	r2, #212	@ 0xd4
 8000256:	4619      	mov	r1, r3
 8000258:	f004 fe6c 	bl	8004f34 <memcpy>
 800025c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000260:	f000 fc36 	bl	8000ad0 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS_1, false);
 8000264:	4c34      	ldr	r4, [pc, #208]	@ (8000338 <BQ_Init+0x16c>)
 8000266:	2300      	movs	r3, #0
 8000268:	9335      	str	r3, [sp, #212]	@ 0xd4
 800026a:	4668      	mov	r0, sp
 800026c:	f104 0310 	add.w	r3, r4, #16
 8000270:	22d4      	movs	r2, #212	@ 0xd4
 8000272:	4619      	mov	r1, r3
 8000274:	f004 fe5e 	bl	8004f34 <memcpy>
 8000278:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800027c:	f000 f9c4 	bl	8000608 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS_1, false);
 8000280:	4c2d      	ldr	r4, [pc, #180]	@ (8000338 <BQ_Init+0x16c>)
 8000282:	2300      	movs	r3, #0
 8000284:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000286:	4668      	mov	r0, sp
 8000288:	f104 0310 	add.w	r3, r4, #16
 800028c:	22d4      	movs	r2, #212	@ 0xd4
 800028e:	4619      	mov	r1, r3
 8000290:	f004 fe50 	bl	8004f34 <memcpy>
 8000294:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000298:	f000 f9e4 	bl	8000664 <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS_1, false);
 800029c:	4c26      	ldr	r4, [pc, #152]	@ (8000338 <BQ_Init+0x16c>)
 800029e:	2300      	movs	r3, #0
 80002a0:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002a2:	4668      	mov	r0, sp
 80002a4:	f104 0310 	add.w	r3, r4, #16
 80002a8:	22d4      	movs	r2, #212	@ 0xd4
 80002aa:	4619      	mov	r1, r3
 80002ac:	f004 fe42 	bl	8004f34 <memcpy>
 80002b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002b4:	f000 fa04 	bl	80006c0 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS_1, true);
 80002b8:	4c1f      	ldr	r4, [pc, #124]	@ (8000338 <BQ_Init+0x16c>)
 80002ba:	2301      	movs	r3, #1
 80002bc:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002be:	4668      	mov	r0, sp
 80002c0:	f104 0310 	add.w	r3, r4, #16
 80002c4:	22d4      	movs	r2, #212	@ 0xd4
 80002c6:	4619      	mov	r1, r3
 80002c8:	f004 fe34 	bl	8004f34 <memcpy>
 80002cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002d0:	f000 fa24 	bl	800071c <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS_1, true);
 80002d4:	4c18      	ldr	r4, [pc, #96]	@ (8000338 <BQ_Init+0x16c>)
 80002d6:	2301      	movs	r3, #1
 80002d8:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002da:	4668      	mov	r0, sp
 80002dc:	f104 0310 	add.w	r3, r4, #16
 80002e0:	22d4      	movs	r2, #212	@ 0xd4
 80002e2:	4619      	mov	r1, r3
 80002e4:	f004 fe26 	bl	8004f34 <memcpy>
 80002e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002ec:	f000 fa44 	bl	8000778 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS_1, true);
 80002f0:	4c11      	ldr	r4, [pc, #68]	@ (8000338 <BQ_Init+0x16c>)
 80002f2:	2301      	movs	r3, #1
 80002f4:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002f6:	4668      	mov	r0, sp
 80002f8:	f104 0310 	add.w	r3, r4, #16
 80002fc:	22d4      	movs	r2, #212	@ 0xd4
 80002fe:	4619      	mov	r1, r3
 8000300:	f004 fe18 	bl	8004f34 <memcpy>
 8000304:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000308:	f000 fa64 	bl	80007d4 <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS_1, false);
 800030c:	4c0a      	ldr	r4, [pc, #40]	@ (8000338 <BQ_Init+0x16c>)
 800030e:	2300      	movs	r3, #0
 8000310:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000312:	4668      	mov	r0, sp
 8000314:	f104 0310 	add.w	r3, r4, #16
 8000318:	22d4      	movs	r2, #212	@ 0xd4
 800031a:	4619      	mov	r1, r3
 800031c:	f004 fe0a 	bl	8004f34 <memcpy>
 8000320:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000324:	f000 f94c 	bl	80005c0 <BQAction_SetLed>

    BQAction_UpdateData(&BMS_1);
 8000328:	4803      	ldr	r0, [pc, #12]	@ (8000338 <BQ_Init+0x16c>)
 800032a:	f000 fc33 	bl	8000b94 <BQAction_UpdateData>
    //BQ_ForceUpdateFlash();

    //BQ_BoundaryCellVoltage voltages = BQ_GetBoundaryCellVoltage();

//    ("[BQ] initialized", 16);
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	bf00      	nop
 8000338:	2000002c 	.word	0x2000002c
 800033c:	20000110 	.word	0x20000110
 8000340:	40021000 	.word	0x40021000
 8000344:	20000000 	.word	0x20000000

08000348 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data BMS, uint16_t command)
{
 8000348:	b084      	sub	sp, #16
 800034a:	b580      	push	{r7, lr}
 800034c:	b084      	sub	sp, #16
 800034e:	af02      	add	r7, sp, #8
 8000350:	f107 0c10 	add.w	ip, r7, #16
 8000354:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000358:	2344      	movs	r3, #68	@ 0x44
 800035a:	713b      	strb	r3, [r7, #4]
 800035c:	2302      	movs	r3, #2
 800035e:	717b      	strb	r3, [r7, #5]
 8000360:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000364:	b2db      	uxtb	r3, r3
 8000366:	71bb      	strb	r3, [r7, #6]
 8000368:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 800036c:	0a1b      	lsrs	r3, r3, #8
 800036e:	b29b      	uxth	r3, r3
 8000370:	b2db      	uxtb	r3, r3
 8000372:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000374:	6938      	ldr	r0, [r7, #16]
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <BQ_WriteMABlockCommand+0x50>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	b299      	uxth	r1, r3
 800037e:	1d3a      	adds	r2, r7, #4
 8000380:	2364      	movs	r3, #100	@ 0x64
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2304      	movs	r3, #4
 8000386:	f001 fff9 	bl	800237c <HAL_I2C_Master_Transmit>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000394:	b004      	add	sp, #16
 8000396:	4770      	bx	lr
 8000398:	20000000 	.word	0x20000000

0800039c <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 800039c:	b084      	sub	sp, #16
 800039e:	b580      	push	{r7, lr}
 80003a0:	b08e      	sub	sp, #56	@ 0x38
 80003a2:	af02      	add	r7, sp, #8
 80003a4:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 80003a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80003ac:	2344      	movs	r3, #68	@ 0x44
 80003ae:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80003b2:	2302      	movs	r3, #2
 80003b4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80003b8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80003c2:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80003c6:	0a1b      	lsrs	r3, r3, #8
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80003d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80003d2:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <BQ_ReadMABlockCommand+0xd8>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	b299      	uxth	r1, r3
 80003da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80003de:	2364      	movs	r3, #100	@ 0x64
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	2304      	movs	r3, #4
 80003e4:	f001 ffca 	bl	800237c <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 80003e8:	2344      	movs	r3, #68	@ 0x44
 80003ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80003ee:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80003f2:	3302      	adds	r3, #2
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 80003fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80003fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000474 <BQ_ReadMABlockCommand+0xd8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	b299      	uxth	r1, r3
 8000404:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000408:	2364      	movs	r3, #100	@ 0x64
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2302      	movs	r3, #2
 800040e:	f001 ffb5 	bl	800237c <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	221f      	movs	r2, #31
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f004 fd5d 	bl	8004edc <memset>
    HAL_I2C_Master_Receive(BMS.bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 8000422:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <BQ_ReadMABlockCommand+0xd8>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	b299      	uxth	r1, r3
 800042c:	463a      	mov	r2, r7
 800042e:	2364      	movs	r3, #100	@ 0x64
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2323      	movs	r3, #35	@ 0x23
 8000434:	f002 f8ba 	bl	80025ac <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000438:	2300      	movs	r3, #0
 800043a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800043c:	e00d      	b.n	800045a <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 800043e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000440:	1cda      	adds	r2, r3, #3
 8000442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000444:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8000448:	440b      	add	r3, r1
 800044a:	3230      	adds	r2, #48	@ 0x30
 800044c:	443a      	add	r2, r7
 800044e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000452:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000456:	3301      	adds	r3, #1
 8000458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800045a:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 800045e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000460:	429a      	cmp	r2, r3
 8000462:	dbec      	blt.n	800043e <BQ_ReadMABlockCommand+0xa2>
    }
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3730      	adds	r7, #48	@ 0x30
 800046a:	46bd      	mov	sp, r7
 800046c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000470:	b004      	add	sp, #16
 8000472:	4770      	bx	lr
 8000474:	20000000 	.word	0x20000000

08000478 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data BMS, uint16_t command)
{
 8000478:	b084      	sub	sp, #16
 800047a:	b580      	push	{r7, lr}
 800047c:	b0ba      	sub	sp, #232	@ 0xe8
 800047e:	af38      	add	r7, sp, #224	@ 0xe0
 8000480:	f107 0c10 	add.w	ip, r7, #16
 8000484:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 8000488:	2302      	movs	r3, #2
 800048a:	9337      	str	r3, [sp, #220]	@ 0xdc
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000490:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000494:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000496:	4668      	mov	r0, sp
 8000498:	f107 0320 	add.w	r3, r7, #32
 800049c:	22d4      	movs	r2, #212	@ 0xd4
 800049e:	4619      	mov	r1, r3
 80004a0:	f004 fd48 	bl	8004f34 <memcpy>
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004aa:	f7ff ff77 	bl	800039c <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	80fb      	strh	r3, [r7, #6]

    result = result | buf[0];
 80004b2:	793b      	ldrb	r3, [r7, #4]
 80004b4:	461a      	mov	r2, r3
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	80fb      	strh	r3, [r7, #6]
    result = result | (buf[1] << 8);
 80004bc:	797b      	ldrb	r3, [r7, #5]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	b21a      	sxth	r2, r3
 80004c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	80fb      	strh	r3, [r7, #6]

    return result;
 80004cc:	88fb      	ldrh	r3, [r7, #6]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004d8:	b004      	add	sp, #16
 80004da:	4770      	bx	lr

080004dc <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data BMS, uint16_t command)
{
 80004dc:	b084      	sub	sp, #16
 80004de:	b580      	push	{r7, lr}
 80004e0:	b0ba      	sub	sp, #232	@ 0xe8
 80004e2:	af38      	add	r7, sp, #224	@ 0xe0
 80004e4:	f107 0c10 	add.w	ip, r7, #16
 80004e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80004ec:	2304      	movs	r3, #4
 80004ee:	9337      	str	r3, [sp, #220]	@ 0xdc
 80004f0:	463b      	mov	r3, r7
 80004f2:	9336      	str	r3, [sp, #216]	@ 0xd8
 80004f4:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 80004f8:	9335      	str	r3, [sp, #212]	@ 0xd4
 80004fa:	4668      	mov	r0, sp
 80004fc:	f107 0320 	add.w	r3, r7, #32
 8000500:	22d4      	movs	r2, #212	@ 0xd4
 8000502:	4619      	mov	r1, r3
 8000504:	f004 fd16 	bl	8004f34 <memcpy>
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800050e:	f7ff ff45 	bl	800039c <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]

    result = result | (buf[0]);
 8000516:	783b      	ldrb	r3, [r7, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
    result = result | (buf[1] << 8);
 8000520:	787b      	ldrb	r3, [r7, #1]
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4313      	orrs	r3, r2
 8000528:	607b      	str	r3, [r7, #4]
    result = result | (buf[2] << 16);
 800052a:	78bb      	ldrb	r3, [r7, #2]
 800052c:	041b      	lsls	r3, r3, #16
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
    result = result | (buf[3] << 24);
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	061b      	lsls	r3, r3, #24
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	607b      	str	r3, [r7, #4]

    return result;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800054a:	b004      	add	sp, #16
 800054c:	4770      	bx	lr

0800054e <BQ_ReadCommandAsLInt>:

uint32_t BQ_ReadCommandAsLInt(BQ_data BMS, uint16_t command){
 800054e:	b084      	sub	sp, #16
 8000550:	b580      	push	{r7, lr}
 8000552:	b0ba      	sub	sp, #232	@ 0xe8
 8000554:	af38      	add	r7, sp, #224	@ 0xe0
 8000556:	f107 0c10 	add.w	ip, r7, #16
 800055a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buf[4];

	    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 800055e:	2304      	movs	r3, #4
 8000560:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000562:	463b      	mov	r3, r7
 8000564:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000566:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 800056a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800056c:	4668      	mov	r0, sp
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	22d4      	movs	r2, #212	@ 0xd4
 8000574:	4619      	mov	r1, r3
 8000576:	f004 fcdd 	bl	8004f34 <memcpy>
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000580:	f7ff ff0c 	bl	800039c <BQ_ReadMABlockCommand>

	    uint32_t result = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]

	    result = result | (buf[3]);
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4313      	orrs	r3, r2
 8000590:	607b      	str	r3, [r7, #4]
	    result = result | (buf[2] << 8);
 8000592:	78bb      	ldrb	r3, [r7, #2]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
	    result = result | (buf[1] << 16);
 800059c:	787b      	ldrb	r3, [r7, #1]
 800059e:	041b      	lsls	r3, r3, #16
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	607b      	str	r3, [r7, #4]
	    result = result | (buf[0] << 24);
 80005a6:	783b      	ldrb	r3, [r7, #0]
 80005a8:	061b      	lsls	r3, r3, #24
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	607b      	str	r3, [r7, #4]

	    return result;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data BMS, bool active)
{
 80005c0:	b084      	sub	sp, #16
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b0b6      	sub	sp, #216	@ 0xd8
 80005c6:	af36      	add	r7, sp, #216	@ 0xd8
 80005c8:	f107 0c08 	add.w	ip, r7, #8
 80005cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BMS.BQ_opStatus.bits.led != active)
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f897 20ec 	ldrb.w	r2, [r7, #236]	@ 0xec
 80005dc:	429a      	cmp	r2, r3
 80005de:	d00d      	beq.n	80005fc <BQAction_SetLed+0x3c>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 80005e0:	232b      	movs	r3, #43	@ 0x2b
 80005e2:	9335      	str	r3, [sp, #212]	@ 0xd4
 80005e4:	4668      	mov	r0, sp
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	22d4      	movs	r2, #212	@ 0xd4
 80005ec:	4619      	mov	r1, r3
 80005ee:	f004 fca1 	bl	8004f34 <memcpy>
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005f8:	f7ff fea6 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000604:	b004      	add	sp, #16
 8000606:	4770      	bx	lr

08000608 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data BMS, bool active)
{
 8000608:	b084      	sub	sp, #16
 800060a:	b580      	push	{r7, lr}
 800060c:	b0b6      	sub	sp, #216	@ 0xd8
 800060e:	af36      	add	r7, sp, #216	@ 0xd8
 8000610:	f107 0c08 	add.w	ip, r7, #8
 8000614:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingAllFetEnabled(BMS) != active)
 8000618:	4668      	mov	r0, sp
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	22d4      	movs	r2, #212	@ 0xd4
 8000620:	4619      	mov	r1, r3
 8000622:	f004 fc87 	bl	8004f34 <memcpy>
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062c:	f000 fdfe 	bl	800122c <BQ_IsManufacturingAllFetEnabled>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000638:	4293      	cmp	r3, r2
 800063a:	d00d      	beq.n	8000658 <BQAction_SetManufacturingAllFet+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 800063c:	2322      	movs	r3, #34	@ 0x22
 800063e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000640:	4668      	mov	r0, sp
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	22d4      	movs	r2, #212	@ 0xd4
 8000648:	4619      	mov	r1, r3
 800064a:	f004 fc73 	bl	8004f34 <memcpy>
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000654:	f7ff fe78 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000660:	b004      	add	sp, #16
 8000662:	4770      	bx	lr

08000664 <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data BMS, bool active)
{
 8000664:	b084      	sub	sp, #16
 8000666:	b580      	push	{r7, lr}
 8000668:	b0b6      	sub	sp, #216	@ 0xd8
 800066a:	af36      	add	r7, sp, #216	@ 0xd8
 800066c:	f107 0c08 	add.w	ip, r7, #8
 8000670:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingFuseEnabled(BMS) != active)
 8000674:	4668      	mov	r0, sp
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	22d4      	movs	r2, #212	@ 0xd4
 800067c:	4619      	mov	r1, r3
 800067e:	f004 fc59 	bl	8004f34 <memcpy>
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000688:	f000 fe09 	bl	800129e <BQ_IsManufacturingFuseEnabled>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000694:	4293      	cmp	r3, r2
 8000696:	d00d      	beq.n	80006b4 <BQAction_SetManufacturingFuse+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 8000698:	2326      	movs	r3, #38	@ 0x26
 800069a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800069c:	4668      	mov	r0, sp
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	22d4      	movs	r2, #212	@ 0xd4
 80006a4:	4619      	mov	r1, r3
 80006a6:	f004 fc45 	bl	8004f34 <memcpy>
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006b0:	f7ff fe4a 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006bc:	b004      	add	sp, #16
 80006be:	4770      	bx	lr

080006c0 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data BMS, bool active)
{
 80006c0:	b084      	sub	sp, #16
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b0b6      	sub	sp, #216	@ 0xd8
 80006c6:	af36      	add	r7, sp, #216	@ 0xd8
 80006c8:	f107 0c08 	add.w	ip, r7, #8
 80006cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingCalibrationEnabled(BMS) != active)
 80006d0:	4668      	mov	r0, sp
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	22d4      	movs	r2, #212	@ 0xd4
 80006d8:	4619      	mov	r1, r3
 80006da:	f004 fc2b 	bl	8004f34 <memcpy>
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e4:	f000 fe01 	bl	80012ea <BQ_IsManufacturingCalibrationEnabled>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d00d      	beq.n	8000710 <BQAction_SetCalibration+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80006f4:	232d      	movs	r3, #45	@ 0x2d
 80006f6:	9335      	str	r3, [sp, #212]	@ 0xd4
 80006f8:	4668      	mov	r0, sp
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	22d4      	movs	r2, #212	@ 0xd4
 8000700:	4619      	mov	r1, r3
 8000702:	f004 fc17 	bl	8004f34 <memcpy>
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070c:	f7ff fe1c 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000718:	b004      	add	sp, #16
 800071a:	4770      	bx	lr

0800071c <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data BMS, bool active)
{
 800071c:	b084      	sub	sp, #16
 800071e:	b580      	push	{r7, lr}
 8000720:	b0b6      	sub	sp, #216	@ 0xd8
 8000722:	af36      	add	r7, sp, #216	@ 0xd8
 8000724:	f107 0c08 	add.w	ip, r7, #8
 8000728:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingGaugingEnabled(BMS) != active)
 800072c:	4668      	mov	r0, sp
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	22d4      	movs	r2, #212	@ 0xd4
 8000734:	4619      	mov	r1, r3
 8000736:	f004 fbfd 	bl	8004f34 <memcpy>
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000740:	f000 fd61 	bl	8001206 <BQ_IsManufacturingGaugingEnabled>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 800074c:	4293      	cmp	r3, r2
 800074e:	d00d      	beq.n	800076c <BQAction_SetManufacturingGauging+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 8000750:	2321      	movs	r3, #33	@ 0x21
 8000752:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000754:	4668      	mov	r0, sp
 8000756:	f107 0318 	add.w	r3, r7, #24
 800075a:	22d4      	movs	r2, #212	@ 0xd4
 800075c:	4619      	mov	r1, r3
 800075e:	f004 fbe9 	bl	8004f34 <memcpy>
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000768:	f7ff fdee 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data BMS, bool active)
{
 8000778:	b084      	sub	sp, #16
 800077a:	b580      	push	{r7, lr}
 800077c:	b0b6      	sub	sp, #216	@ 0xd8
 800077e:	af36      	add	r7, sp, #216	@ 0xd8
 8000780:	f107 0c08 	add.w	ip, r7, #8
 8000784:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingPermanentFailureEnabled(BMS) != active)
 8000788:	4668      	mov	r0, sp
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	22d4      	movs	r2, #212	@ 0xd4
 8000790:	4619      	mov	r1, r3
 8000792:	f004 fbcf 	bl	8004f34 <memcpy>
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800079c:	f000 fd6c 	bl	8001278 <BQ_IsManufacturingPermanentFailureEnabled>
 80007a0:	4603      	mov	r3, r0
 80007a2:	461a      	mov	r2, r3
 80007a4:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d00d      	beq.n	80007c8 <BQAction_SetManufacturingPF+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 80007ac:	2324      	movs	r3, #36	@ 0x24
 80007ae:	9335      	str	r3, [sp, #212]	@ 0xd4
 80007b0:	4668      	mov	r0, sp
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	22d4      	movs	r2, #212	@ 0xd4
 80007b8:	4619      	mov	r1, r3
 80007ba:	f004 fbbb 	bl	8004f34 <memcpy>
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c4:	f7ff fdc0 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007d0:	b004      	add	sp, #16
 80007d2:	4770      	bx	lr

080007d4 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data BMS, bool active)
{
 80007d4:	b084      	sub	sp, #16
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b0b6      	sub	sp, #216	@ 0xd8
 80007da:	af36      	add	r7, sp, #216	@ 0xd8
 80007dc:	f107 0c08 	add.w	ip, r7, #8
 80007e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingLifetimeEnabled(BMS) != active)
 80007e4:	4668      	mov	r0, sp
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	22d4      	movs	r2, #212	@ 0xd4
 80007ec:	4619      	mov	r1, r3
 80007ee:	f004 fba1 	bl	8004f34 <memcpy>
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f8:	f000 fd2b 	bl	8001252 <BQ_IsManufacturingLifetimeEnabled>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000804:	4293      	cmp	r3, r2
 8000806:	d00d      	beq.n	8000824 <BQAction_SetManufacturingLF+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000808:	2323      	movs	r3, #35	@ 0x23
 800080a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800080c:	4668      	mov	r0, sp
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	22d4      	movs	r2, #212	@ 0xd4
 8000814:	4619      	mov	r1, r3
 8000816:	f004 fb8d 	bl	8004f34 <memcpy>
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000820:	f7ff fd92 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800082c:	b004      	add	sp, #16
 800082e:	4770      	bx	lr

08000830 <BQAction_EnableDischarging>:
/**
 * @brief enable discharge fet and disable the rest
 * @param none
 */
bool BQAction_EnableDischarging(BQ_data BMS)
{
 8000830:	b084      	sub	sp, #16
 8000832:	b580      	push	{r7, lr}
 8000834:	b0b6      	sub	sp, #216	@ 0xd8
 8000836:	af36      	add	r7, sp, #216	@ 0xd8
 8000838:	f107 0c08 	add.w	ip, r7, #8
 800083c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_GetChargeMode(BMS) == DISCHARGE){
 8000840:	4668      	mov	r0, sp
 8000842:	f107 0318 	add.w	r3, r7, #24
 8000846:	22d4      	movs	r2, #212	@ 0xd4
 8000848:	4619      	mov	r1, r3
 800084a:	f004 fb73 	bl	8004f34 <memcpy>
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000854:	f000 fc20 	bl	8001098 <BQ_GetChargeMode>
 8000858:	4603      	mov	r3, r0
 800085a:	2b02      	cmp	r3, #2
 800085c:	d101      	bne.n	8000862 <BQAction_EnableDischarging+0x32>
        return false;
 800085e:	2300      	movs	r3, #0
 8000860:	e0a9      	b.n	80009b6 <BQAction_EnableDischarging+0x186>
    }

    // turn off unused fets
    if (BQ_IsChargeFetTestEnabled(BMS)){
 8000862:	4668      	mov	r0, sp
 8000864:	f107 0318 	add.w	r3, r7, #24
 8000868:	22d4      	movs	r2, #212	@ 0xd4
 800086a:	4619      	mov	r1, r3
 800086c:	f004 fb62 	bl	8004f34 <memcpy>
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000876:	f000 fca0 	bl	80011ba <BQ_IsChargeFetTestEnabled>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00d      	beq.n	800089c <BQAction_EnableDischarging+0x6c>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000880:	231f      	movs	r3, #31
 8000882:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000884:	4668      	mov	r0, sp
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	22d4      	movs	r2, #212	@ 0xd4
 800088c:	4619      	mov	r1, r3
 800088e:	f004 fb51 	bl	8004f34 <memcpy>
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000898:	f7ff fd56 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 800089c:	4668      	mov	r0, sp
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	22d4      	movs	r2, #212	@ 0xd4
 80008a4:	4619      	mov	r1, r3
 80008a6:	f004 fb45 	bl	8004f34 <memcpy>
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b0:	f000 fd08 	bl	80012c4 <BQ_IsPreDischargeFetTestEnabled>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00d      	beq.n	80008d6 <BQAction_EnableDischarging+0xa6>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 80008ba:	231c      	movs	r3, #28
 80008bc:	9335      	str	r3, [sp, #212]	@ 0xd4
 80008be:	4668      	mov	r0, sp
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	22d4      	movs	r2, #212	@ 0xd4
 80008c6:	4619      	mov	r1, r3
 80008c8:	f004 fb34 	bl	8004f34 <memcpy>
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d2:	f7ff fd39 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 80008d6:	4668      	mov	r0, sp
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	22d4      	movs	r2, #212	@ 0xd4
 80008de:	4619      	mov	r1, r3
 80008e0:	f004 fb28 	bl	8004f34 <memcpy>
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ea:	f000 fc53 	bl	8001194 <BQ_IsPreChargeFetTestEnabled>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00d      	beq.n	8000910 <BQAction_EnableDischarging+0xe0>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 80008f4:	231e      	movs	r3, #30
 80008f6:	9335      	str	r3, [sp, #212]	@ 0xd4
 80008f8:	4668      	mov	r0, sp
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	22d4      	movs	r2, #212	@ 0xd4
 8000900:	4619      	mov	r1, r3
 8000902:	f004 fb17 	bl	8004f34 <memcpy>
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800090c:	f7ff fd1c 	bl	8000348 <BQ_WriteMABlockCommand>
    }

    // turn on discharge
    if (!BQ_IsDischargeFetTestEnabled(BMS)){
 8000910:	4668      	mov	r0, sp
 8000912:	f107 0318 	add.w	r3, r7, #24
 8000916:	22d4      	movs	r2, #212	@ 0xd4
 8000918:	4619      	mov	r1, r3
 800091a:	f004 fb0b 	bl	8004f34 <memcpy>
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000924:	f000 fc5c 	bl	80011e0 <BQ_IsDischargeFetTestEnabled>
 8000928:	4603      	mov	r3, r0
 800092a:	f083 0301 	eor.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00d      	beq.n	8000950 <BQAction_EnableDischarging+0x120>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000934:	2320      	movs	r3, #32
 8000936:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000938:	4668      	mov	r0, sp
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	22d4      	movs	r2, #212	@ 0xd4
 8000940:	4619      	mov	r1, r3
 8000942:	f004 faf7 	bl	8004f34 <memcpy>
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800094c:	f7ff fcfc 	bl	8000348 <BQ_WriteMABlockCommand>
    }

    HAL_Delay(1500);
 8000950:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000954:	f001 f92e 	bl	8001bb4 <HAL_Delay>

    if (BQ_GetChargeMode(BMS) != CHARGE){
 8000958:	4668      	mov	r0, sp
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	22d4      	movs	r2, #212	@ 0xd4
 8000960:	4619      	mov	r1, r3
 8000962:	f004 fae7 	bl	8004f34 <memcpy>
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096c:	f000 fb94 	bl	8001098 <BQ_GetChargeMode>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d001      	beq.n	800097a <BQAction_EnableDischarging+0x14a>
        return true;
 8000976:	2301      	movs	r3, #1
 8000978:	e01d      	b.n	80009b6 <BQAction_EnableDischarging+0x186>
    }else{
        // turn off discharge
        if (BQ_IsDischargeFetTestEnabled(BMS)){
 800097a:	4668      	mov	r0, sp
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	22d4      	movs	r2, #212	@ 0xd4
 8000982:	4619      	mov	r1, r3
 8000984:	f004 fad6 	bl	8004f34 <memcpy>
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800098e:	f000 fc27 	bl	80011e0 <BQ_IsDischargeFetTestEnabled>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00d      	beq.n	80009b4 <BQAction_EnableDischarging+0x184>
            BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000998:	2320      	movs	r3, #32
 800099a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800099c:	4668      	mov	r0, sp
 800099e:	f107 0318 	add.w	r3, r7, #24
 80009a2:	22d4      	movs	r2, #212	@ 0xd4
 80009a4:	4619      	mov	r1, r3
 80009a6:	f004 fac5 	bl	8004f34 <memcpy>
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009b0:	f7ff fcca 	bl	8000348 <BQ_WriteMABlockCommand>
        }
        return false;
 80009b4:	2300      	movs	r3, #0
    }
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009be:	b004      	add	sp, #16
 80009c0:	4770      	bx	lr

080009c2 <BQAction_DisableFets>:
/**
 * @brief disable all fets
 * @param none
 */
bool BQAction_DisableFets(BQ_data BMS)
{
 80009c2:	b084      	sub	sp, #16
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0b6      	sub	sp, #216	@ 0xd8
 80009c8:	af36      	add	r7, sp, #216	@ 0xd8
 80009ca:	f107 0c08 	add.w	ip, r7, #8
 80009ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQAction_UpdateOpStatus(&BMS);
 80009d2:	f107 0008 	add.w	r0, r7, #8
 80009d6:	f000 f9b1 	bl	8000d3c <BQAction_UpdateOpStatus>
    if (BQ_IsChargeFetTestEnabled(BMS)){
 80009da:	4668      	mov	r0, sp
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	22d4      	movs	r2, #212	@ 0xd4
 80009e2:	4619      	mov	r1, r3
 80009e4:	f004 faa6 	bl	8004f34 <memcpy>
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009ee:	f000 fbe4 	bl	80011ba <BQ_IsChargeFetTestEnabled>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00d      	beq.n	8000a14 <BQAction_DisableFets+0x52>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 80009f8:	231f      	movs	r3, #31
 80009fa:	9335      	str	r3, [sp, #212]	@ 0xd4
 80009fc:	4668      	mov	r0, sp
 80009fe:	f107 0318 	add.w	r3, r7, #24
 8000a02:	22d4      	movs	r2, #212	@ 0xd4
 8000a04:	4619      	mov	r1, r3
 8000a06:	f004 fa95 	bl	8004f34 <memcpy>
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a10:	f7ff fc9a 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsDischargeFetTestEnabled(BMS)){
 8000a14:	4668      	mov	r0, sp
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	22d4      	movs	r2, #212	@ 0xd4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f004 fa89 	bl	8004f34 <memcpy>
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a28:	f000 fbda 	bl	80011e0 <BQ_IsDischargeFetTestEnabled>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00d      	beq.n	8000a4e <BQAction_DisableFets+0x8c>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000a32:	2320      	movs	r3, #32
 8000a34:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000a36:	4668      	mov	r0, sp
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	22d4      	movs	r2, #212	@ 0xd4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f004 fa78 	bl	8004f34 <memcpy>
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a4a:	f7ff fc7d 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 8000a4e:	4668      	mov	r0, sp
 8000a50:	f107 0318 	add.w	r3, r7, #24
 8000a54:	22d4      	movs	r2, #212	@ 0xd4
 8000a56:	4619      	mov	r1, r3
 8000a58:	f004 fa6c 	bl	8004f34 <memcpy>
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a62:	f000 fb97 	bl	8001194 <BQ_IsPreChargeFetTestEnabled>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00d      	beq.n	8000a88 <BQAction_DisableFets+0xc6>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 8000a6c:	231e      	movs	r3, #30
 8000a6e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000a70:	4668      	mov	r0, sp
 8000a72:	f107 0318 	add.w	r3, r7, #24
 8000a76:	22d4      	movs	r2, #212	@ 0xd4
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f004 fa5b 	bl	8004f34 <memcpy>
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a84:	f7ff fc60 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 8000a88:	4668      	mov	r0, sp
 8000a8a:	f107 0318 	add.w	r3, r7, #24
 8000a8e:	22d4      	movs	r2, #212	@ 0xd4
 8000a90:	4619      	mov	r1, r3
 8000a92:	f004 fa4f 	bl	8004f34 <memcpy>
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a9c:	f000 fc12 	bl	80012c4 <BQ_IsPreDischargeFetTestEnabled>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00d      	beq.n	8000ac2 <BQAction_DisableFets+0x100>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000aa6:	231c      	movs	r3, #28
 8000aa8:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000aaa:	4668      	mov	r0, sp
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	22d4      	movs	r2, #212	@ 0xd4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f004 fa3e 	bl	8004f34 <memcpy>
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abe:	f7ff fc43 	bl	8000348 <BQ_WriteMABlockCommand>
    }

    return true;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000acc:	b004      	add	sp, #16
 8000ace:	4770      	bx	lr

08000ad0 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data BMS)
{
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b0b8      	sub	sp, #224	@ 0xe0
 8000ad6:	af36      	add	r7, sp, #216	@ 0xd8
 8000ad8:	f107 0c10 	add.w	ip, r7, #16
 8000adc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//    bool isSealed = false;

    BQAction_UpdateOpStatus(&BMS);
 8000ae0:	f107 0010 	add.w	r0, r7, #16
 8000ae4:	f000 f92a 	bl	8000d3c <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode(BMS);
 8000ae8:	4668      	mov	r0, sp
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	22d4      	movs	r2, #212	@ 0xd4
 8000af0:	4619      	mov	r1, r3
 8000af2:	f004 fa1f 	bl	8004f34 <memcpy>
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afc:	f000 fa94 	bl	8001028 <BQ_GetSecurityMode>
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000b04:	e037      	b.n	8000b76 <BQAction_TryUnsealedDevice+0xa6>
    {
//        isSealed = true;
//        ("[BQ] Security mode - Sealed", 27);

        BQ_WriteMABlockCommand(BMS, 0x0414);
 8000b06:	f240 4314 	movw	r3, #1044	@ 0x414
 8000b0a:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000b0c:	4668      	mov	r0, sp
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	22d4      	movs	r2, #212	@ 0xd4
 8000b14:	4619      	mov	r1, r3
 8000b16:	f004 fa0d 	bl	8004f34 <memcpy>
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b20:	f7ff fc12 	bl	8000348 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000b24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b28:	f001 f844 	bl	8001bb4 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 8000b2c:	f243 6372 	movw	r3, #13938	@ 0x3672
 8000b30:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000b32:	4668      	mov	r0, sp
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	22d4      	movs	r2, #212	@ 0xd4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f004 f9fa 	bl	8004f34 <memcpy>
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b46:	f7ff fbff 	bl	8000348 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 8000b4a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b4e:	f001 f831 	bl	8001bb4 <HAL_Delay>
        BQAction_UpdateOpStatus(&BMS);
 8000b52:	f107 0010 	add.w	r0, r7, #16
 8000b56:	f000 f8f1 	bl	8000d3c <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode(BMS);
 8000b5a:	4668      	mov	r0, sp
 8000b5c:	f107 0320 	add.w	r3, r7, #32
 8000b60:	22d4      	movs	r2, #212	@ 0xd4
 8000b62:	4619      	mov	r1, r3
 8000b64:	f004 f9e6 	bl	8004f34 <memcpy>
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b6e:	f000 fa5b 	bl	8001028 <BQ_GetSecurityMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d0c4      	beq.n	8000b06 <BQAction_TryUnsealedDevice+0x36>
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d0c1      	beq.n	8000b06 <BQAction_TryUnsealedDevice+0x36>
    // print only if the device was previously sealeded
//    if (isSealed){
//        ("[BQ] successfully unsealed", 27);
//    }

}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b8e:	b004      	add	sp, #16
 8000b90:	4770      	bx	lr
	...

08000b94 <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b0c5      	sub	sp, #276	@ 0x114
 8000b98:	af3c      	add	r7, sp, #240	@ 0xf0
 8000b9a:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort((*BMS), BQ40Z80_MFA_MANUFACTURING_STATUS);
 8000b9c:	687c      	ldr	r4, [r7, #4]
 8000b9e:	2357      	movs	r3, #87	@ 0x57
 8000ba0:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000ba2:	4668      	mov	r0, sp
 8000ba4:	f104 0310 	add.w	r3, r4, #16
 8000ba8:	22d4      	movs	r2, #212	@ 0xd4
 8000baa:	4619      	mov	r1, r3
 8000bac:	f004 f9c2 	bl	8004f34 <memcpy>
 8000bb0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bb4:	f7ff fc60 	bl	8000478 <BQ_ReadCommandAsShort>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	83fb      	strh	r3, [r7, #30]
    uint32_t chargeStatus = BQ_ReadCommandAsInt((*BMS), BQ40Z80_MFA_CHARGING_STATUS);
 8000bbc:	687c      	ldr	r4, [r7, #4]
 8000bbe:	2355      	movs	r3, #85	@ 0x55
 8000bc0:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000bc2:	4668      	mov	r0, sp
 8000bc4:	f104 0310 	add.w	r3, r4, #16
 8000bc8:	22d4      	movs	r2, #212	@ 0xd4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f004 f9b2 	bl	8004f34 <memcpy>
 8000bd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bd4:	f7ff fc82 	bl	80004dc <BQ_ReadCommandAsInt>
 8000bd8:	61b8      	str	r0, [r7, #24]
    uint32_t operationStatus = BQ_ReadCommandAsLInt((*BMS), BQ40Z80_MFA_OPERATION_STATUS);
 8000bda:	687c      	ldr	r4, [r7, #4]
 8000bdc:	2354      	movs	r3, #84	@ 0x54
 8000bde:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000be0:	4668      	mov	r0, sp
 8000be2:	f104 0310 	add.w	r3, r4, #16
 8000be6:	22d4      	movs	r2, #212	@ 0xd4
 8000be8:	4619      	mov	r1, r3
 8000bea:	f004 f9a3 	bl	8004f34 <memcpy>
 8000bee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bf2:	f7ff fcac 	bl	800054e <BQ_ReadCommandAsLInt>
 8000bf6:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all= operationStatus;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	605a      	str	r2, [r3, #4]
    uint32_t gaugStatus = BQ_ReadCommandAsInt((*BMS), BQ40Z80_MFA_GAUGING_STATUS);
 8000bfe:	687c      	ldr	r4, [r7, #4]
 8000c00:	2356      	movs	r3, #86	@ 0x56
 8000c02:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000c04:	4668      	mov	r0, sp
 8000c06:	f104 0310 	add.w	r3, r4, #16
 8000c0a:	22d4      	movs	r2, #212	@ 0xd4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f004 f991 	bl	8004f34 <memcpy>
 8000c12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c16:	f7ff fc61 	bl	80004dc <BQ_ReadCommandAsInt>
 8000c1a:	6138      	str	r0, [r7, #16]

    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a41      	ldr	r2, [pc, #260]	@ (8000d28 <BQAction_UpdateData+0x194>)
 8000c22:	7811      	ldrb	r1, [r2, #0]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fcc2 	bl	80015b0 <I2CHelper_ReadRegisterAsShort>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	81fb      	strh	r3, [r7, #14]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a3c      	ldr	r2, [pc, #240]	@ (8000d28 <BQAction_UpdateData+0x194>)
 8000c36:	7811      	ldrb	r1, [r2, #0]
 8000c38:	2216      	movs	r2, #22
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcb8 	bl	80015b0 <I2CHelper_ReadRegisterAsShort>
 8000c40:	4603      	mov	r3, r0
 8000c42:	81bb      	strh	r3, [r7, #12]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a37      	ldr	r2, [pc, #220]	@ (8000d28 <BQAction_UpdateData+0x194>)
 8000c4a:	7811      	ldrb	r1, [r2, #0]
 8000c4c:	2248      	movs	r2, #72	@ 0x48
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fcd3 	bl	80015fa <I2CHelper_ReadRegisterAsChar>
 8000c54:	4603      	mov	r3, r0
 8000c56:	72fb      	strb	r3, [r7, #11]

    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000c58:	687c      	ldr	r4, [r7, #4]
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000c5e:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <BQAction_UpdateData+0x198>)
 8000c60:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000c62:	2371      	movs	r3, #113	@ 0x71
 8000c64:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000c66:	4668      	mov	r0, sp
 8000c68:	f104 0310 	add.w	r3, r4, #16
 8000c6c:	22d4      	movs	r2, #212	@ 0xd4
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f004 f960 	bl	8004f34 <memcpy>
 8000c74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c78:	f7ff fb90 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2, 16);
 8000c7c:	687c      	ldr	r4, [r7, #4]
 8000c7e:	2310      	movs	r3, #16
 8000c80:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000c82:	4b2b      	ldr	r3, [pc, #172]	@ (8000d30 <BQAction_UpdateData+0x19c>)
 8000c84:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000c86:	2372      	movs	r3, #114	@ 0x72
 8000c88:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000c8a:	4668      	mov	r0, sp
 8000c8c:	f104 0310 	add.w	r3, r4, #16
 8000c90:	22d4      	movs	r2, #212	@ 0xd4
 8000c92:	4619      	mov	r1, r3
 8000c94:	f004 f94e 	bl	8004f34 <memcpy>
 8000c98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c9c:	f7ff fb7e 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
 8000ca0:	687c      	ldr	r4, [r7, #4]
 8000ca2:	2312      	movs	r3, #18
 8000ca4:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <BQAction_UpdateData+0x1a0>)
 8000ca8:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000caa:	237b      	movs	r3, #123	@ 0x7b
 8000cac:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000cae:	4668      	mov	r0, sp
 8000cb0:	f104 0310 	add.w	r3, r4, #16
 8000cb4:	22d4      	movs	r2, #212	@ 0xd4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f004 f93c 	bl	8004f34 <memcpy>
 8000cbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cc0:	f7ff fb6c 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal, 32);
 8000cc4:	687c      	ldr	r4, [r7, #4]
 8000cc6:	2320      	movs	r3, #32
 8000cc8:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000cca:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <BQAction_UpdateData+0x1a4>)
 8000ccc:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000cce:	f24f 0381 	movw	r3, #61569	@ 0xf081
 8000cd2:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000cd4:	4668      	mov	r0, sp
 8000cd6:	f104 0310 	add.w	r3, r4, #16
 8000cda:	22d4      	movs	r2, #212	@ 0xd4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f004 f929 	bl	8004f34 <memcpy>
 8000ce2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ce6:	f7ff fb59 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags((*BMS), operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 8000cea:	687c      	ldr	r4, [r7, #4]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	933b      	str	r3, [sp, #236]	@ 0xec
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	933a      	str	r3, [sp, #232]	@ 0xe8
 8000cf4:	8bfb      	ldrh	r3, [r7, #30]
 8000cf6:	9339      	str	r3, [sp, #228]	@ 0xe4
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	9338      	str	r3, [sp, #224]	@ 0xe0
 8000cfc:	89bb      	ldrh	r3, [r7, #12]
 8000cfe:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000d00:	89fb      	ldrh	r3, [r7, #14]
 8000d02:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000d08:	4668      	mov	r0, sp
 8000d0a:	f104 0310 	add.w	r3, r4, #16
 8000d0e:	22d4      	movs	r2, #212	@ 0xd4
 8000d10:	4619      	mov	r1, r3
 8000d12:	f004 f90f 	bl	8004f34 <memcpy>
 8000d16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d1a:	f000 f88b 	bl	8000e34 <BQ_ParseAllFlags>
}
 8000d1e:	bf00      	nop
 8000d20:	3724      	adds	r7, #36	@ 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	200000ac 	.word	0x200000ac
 8000d30:	200000cc 	.word	0x200000cc
 8000d34:	200000dc 	.word	0x200000dc
 8000d38:	200000ee 	.word	0x200000ee

08000d3c <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b0bb      	sub	sp, #236	@ 0xec
 8000d40:	af38      	add	r7, sp, #224	@ 0xe0
 8000d42:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000d44:	687c      	ldr	r4, [r7, #4]
 8000d46:	2320      	movs	r3, #32
 8000d48:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <BQAction_UpdateOpStatus+0x94>)
 8000d4c:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000d4e:	2371      	movs	r3, #113	@ 0x71
 8000d50:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000d52:	4668      	mov	r0, sp
 8000d54:	f104 0310 	add.w	r3, r4, #16
 8000d58:	22d4      	movs	r2, #212	@ 0xd4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f004 f8ea 	bl	8004f34 <memcpy>
 8000d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d64:	f7ff fb1a 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ParseOperationStatus(BMS, BQ_ReadCommandAsLInt((*BMS), BQ40Z80_MFA_OPERATION_STATUS));
 8000d68:	687c      	ldr	r4, [r7, #4]
 8000d6a:	2354      	movs	r3, #84	@ 0x54
 8000d6c:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000d6e:	4668      	mov	r0, sp
 8000d70:	f104 0310 	add.w	r3, r4, #16
 8000d74:	22d4      	movs	r2, #212	@ 0xd4
 8000d76:	4619      	mov	r1, r3
 8000d78:	f004 f8dc 	bl	8004f34 <memcpy>
 8000d7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d80:	f7ff fbe5 	bl	800054e <BQ_ReadCommandAsLInt>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4619      	mov	r1, r3
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f8c1 	bl	8000f10 <BQ_ParseOperationStatus>
    BQ_ParseManufacturingStatus((*BMS), BQ_ReadCommandAsShort((*BMS), BQ40Z80_MFA_MANUFACTURING_STATUS));
 8000d8e:	687c      	ldr	r4, [r7, #4]
 8000d90:	2357      	movs	r3, #87	@ 0x57
 8000d92:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000d94:	4668      	mov	r0, sp
 8000d96:	f104 0310 	add.w	r3, r4, #16
 8000d9a:	22d4      	movs	r2, #212	@ 0xd4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f004 f8c9 	bl	8004f34 <memcpy>
 8000da2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000da6:	f7ff fb67 	bl	8000478 <BQ_ReadCommandAsShort>
 8000daa:	4603      	mov	r3, r0
 8000dac:	687c      	ldr	r4, [r7, #4]
 8000dae:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000db0:	4668      	mov	r0, sp
 8000db2:	f104 0310 	add.w	r3, r4, #16
 8000db6:	22d4      	movs	r2, #212	@ 0xd4
 8000db8:	4619      	mov	r1, r3
 8000dba:	f004 f8bb 	bl	8004f34 <memcpy>
 8000dbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dc2:	f000 f907 	bl	8000fd4 <BQ_ParseManufacturingStatus>
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000ac 	.word	0x200000ac

08000dd4 <decimalToBinary>:
 * @param value decimal value
 * @param array array to write
 * @param count array size
 */
void decimalToBinary(uint32_t value, uint8_t *array, uint8_t count)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	4613      	mov	r3, r2
 8000de0:	71fb      	strb	r3, [r7, #7]
	uint8_t currentCount = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000de6:	e00e      	b.n	8000e06 <decimalToBinary+0x32>
	{
		array[currentCount] = value % 2;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	440b      	add	r3, r1
 8000df2:	f002 0201 	and.w	r2, r2, #1
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	701a      	strb	r2, [r3, #0]
		value /= 2;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	085b      	lsrs	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
		currentCount++;
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	3301      	adds	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1ed      	bne.n	8000de8 <decimalToBinary+0x14>
	}

	while (currentCount < count)
 8000e0c:	e007      	b.n	8000e1e <decimalToBinary+0x4a>
	{
		array[currentCount] = 0;
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	4413      	add	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
		currentCount++;
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
	while (currentCount < count)
 8000e1e:	7dfa      	ldrb	r2, [r7, #23]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d3f3      	bcc.n	8000e0e <decimalToBinary+0x3a>
	}
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	371c      	adds	r7, #28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <BQ_ParseAllFlags>:
					  uint16_t batteryMode,
					  uint8_t gpio,
					  uint16_t manStatus,
					  uint32_t chargeStatus,
					  uint32_t gaugStatus)
{
 8000e34:	b084      	sub	sp, #16
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b0b6      	sub	sp, #216	@ 0xd8
 8000e3a:	af36      	add	r7, sp, #216	@ 0xd8
 8000e3c:	f107 0c08 	add.w	ip, r7, #8
 8000e40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	BQ_ParseOperationStatus(&BMS, opStatus);
 8000e44:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8000e48:	f107 0008 	add.w	r0, r7, #8
 8000e4c:	f000 f860 	bl	8000f10 <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(BMS, chargeStatus);
 8000e50:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000e54:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000e56:	4668      	mov	r0, sp
 8000e58:	f107 0318 	add.w	r3, r7, #24
 8000e5c:	22d4      	movs	r2, #212	@ 0xd4
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f004 f868 	bl	8004f34 <memcpy>
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6a:	f000 f85f 	bl	8000f2c <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(BMS, gaugStatus);
 8000e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e72:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000e74:	4668      	mov	r0, sp
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	22d4      	movs	r2, #212	@ 0xd4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f004 f859 	bl	8004f34 <memcpy>
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e88:	f000 f865 	bl	8000f56 <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(BMS, batteryStatus);
 8000e8c:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8000e90:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000e92:	4668      	mov	r0, sp
 8000e94:	f107 0318 	add.w	r3, r7, #24
 8000e98:	22d4      	movs	r2, #212	@ 0xd4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f004 f84a 	bl	8004f34 <memcpy>
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea6:	f000 f86b 	bl	8000f80 <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(BMS, manStatus);
 8000eaa:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8000eae:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000eb0:	4668      	mov	r0, sp
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	22d4      	movs	r2, #212	@ 0xd4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f004 f83b 	bl	8004f34 <memcpy>
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ec4:	f000 f886 	bl	8000fd4 <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(BMS, batteryMode);
 8000ec8:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000ecc:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000ece:	4668      	mov	r0, sp
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	22d4      	movs	r2, #212	@ 0xd4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f004 f82c 	bl	8004f34 <memcpy>
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee2:	f000 f862 	bl	8000faa <BQ_ParseBatteryMode>
	BQ_ParseGpio(BMS, gpio);
 8000ee6:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8000eea:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000eec:	4668      	mov	r0, sp
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	22d4      	movs	r2, #212	@ 0xd4
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f004 f81d 	bl	8004f34 <memcpy>
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f00:	f000 f87d 	bl	8000ffe <BQ_ParseGpio>
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f0c:	b004      	add	sp, #16
 8000f0e:	4770      	bx	lr

08000f10 <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(BQ_data* BMS, uint32_t raw)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_opStatus
	//	decimalToBinary(raw, BMS.BQ_opStatus, 32);
	BMS->BQ_opStatus.all = raw;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(BQ_data BMS, uint32_t raw)
{
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	f107 0c08 	add.w	ip, r7, #8
 8000f36:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_chargeStatus
	decimalToBinary(raw, BMS.BQ_chargeStatus, 32);
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	2220      	movs	r2, #32
 8000f40:	4619      	mov	r1, r3
 8000f42:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000f46:	f7ff ff45 	bl	8000dd4 <decimalToBinary>
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f52:	b004      	add	sp, #16
 8000f54:	4770      	bx	lr

08000f56 <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(BQ_data BMS, uint32_t raw)
{
 8000f56:	b084      	sub	sp, #16
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	f107 0c08 	add.w	ip, r7, #8
 8000f60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_gaugeStatus
	decimalToBinary(raw, BMS.BQ_gaugeStatus, 32);
 8000f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f68:	2220      	movs	r2, #32
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000f70:	f7ff ff30 	bl	8000dd4 <decimalToBinary>
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f7c:	b004      	add	sp, #16
 8000f7e:	4770      	bx	lr

08000f80 <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(BQ_data BMS, uint16_t raw)
{
 8000f80:	b084      	sub	sp, #16
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	f107 0c08 	add.w	ip, r7, #8
 8000f8a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_batteryStatus
	decimalToBinary(raw, BMS.BQ_batteryStatus, 16);
 8000f8e:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000f92:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000f96:	2210      	movs	r2, #16
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff1b 	bl	8000dd4 <decimalToBinary>
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fa6:	b004      	add	sp, #16
 8000fa8:	4770      	bx	lr

08000faa <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(BQ_data BMS, uint16_t raw)
{
 8000faa:	b084      	sub	sp, #16
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	f107 0c08 	add.w	ip, r7, #8
 8000fb4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_batteryMode
	decimalToBinary(raw, BMS.BQ_batteryMode, 16);
 8000fb8:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000fbc:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff06 	bl	8000dd4 <decimalToBinary>
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd0:	b004      	add	sp, #16
 8000fd2:	4770      	bx	lr

08000fd4 <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(BQ_data BMS, uint16_t raw)
{
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	f107 0c08 	add.w	ip, r7, #8
 8000fde:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	decimalToBinary(raw, BMS.BQ_manufacturingStatus, 16);
 8000fe2:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000fe6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000fea:	2210      	movs	r2, #16
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fef1 	bl	8000dd4 <decimalToBinary>
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ffa:	b004      	add	sp, #16
 8000ffc:	4770      	bx	lr

08000ffe <BQ_ParseGpio>:

void BQ_ParseGpio(BQ_data BMS, uint8_t raw)
{
 8000ffe:	b084      	sub	sp, #16
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
 8001004:	f107 0c08 	add.w	ip, r7, #8
 8001008:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_gpio
	decimalToBinary(raw, BMS.BQ_gpio, 8);
 800100c:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001010:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001014:	2208      	movs	r2, #8
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fedc 	bl	8000dd4 <decimalToBinary>
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001024:	b004      	add	sp, #16
 8001026:	4770      	bx	lr

08001028 <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(BQ_data BMS)
{
 8001028:	b084      	sub	sp, #16
 800102a:	b490      	push	{r4, r7}
 800102c:	af00      	add	r7, sp, #0
 800102e:	f107 0408 	add.w	r4, r7, #8
 8001032:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (BMS.BQ_opStatus.bits.sec1 && BMS.BQ_opStatus.bits.sec0){
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <BQ_GetSecurityMode+0x2a>
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <BQ_GetSecurityMode+0x2a>
        return SEALED;//11
 800104e:	2300      	movs	r3, #0
 8001050:	e01c      	b.n	800108c <BQ_GetSecurityMode+0x64>
    }else if (BMS.BQ_opStatus.bits.sec1 && !BMS.BQ_opStatus.bits.sec0){
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <BQ_GetSecurityMode+0x46>
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <BQ_GetSecurityMode+0x46>
        return UNSEALED;//10
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <BQ_GetSecurityMode+0x64>
    }else if (!BMS.BQ_opStatus.bits.sec1 && BMS.BQ_opStatus.bits.sec0){
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d107      	bne.n	800108a <BQ_GetSecurityMode+0x62>
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <BQ_GetSecurityMode+0x62>
        return FULL_ACCESS;//01
 8001086:	2302      	movs	r3, #2
 8001088:	e000      	b.n	800108c <BQ_GetSecurityMode+0x64>
    }else{
        return RESERVED;//00
 800108a:	2303      	movs	r3, #3
    }
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bc90      	pop	{r4, r7}
 8001092:	b004      	add	sp, #16
 8001094:	4770      	bx	lr
	...

08001098 <BQ_GetChargeMode>:
/**
 * @brief get charge from BQ_opStatus
 * @return CHARGE, DISCHARGE or RELAX
 */
CHARGE_MODE BQ_GetChargeMode(BQ_data BMS)
{
 8001098:	b084      	sub	sp, #16
 800109a:	b580      	push	{r7, lr}
 800109c:	b0b8      	sub	sp, #224	@ 0xe0
 800109e:	af36      	add	r7, sp, #216	@ 0xd8
 80010a0:	f107 0c10 	add.w	ip, r7, #16
 80010a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQAction_UpdateOpStatus(&BMS);
 80010a8:	f107 0010 	add.w	r0, r7, #16
 80010ac:	f7ff fe46 	bl	8000d3c <BQAction_UpdateOpStatus>
    uint16_t packVoltage = BMS.BQ_daStatus1[10] | (BMS.BQ_daStatus1[11] << 8);
 80010b0:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	80fb      	strh	r3, [r7, #6]
    uint16_t current = I2CHelper_ReadRegisterAsShort(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4a32      	ldr	r2, [pc, #200]	@ (8001190 <BQ_GetChargeMode+0xf8>)
 80010c8:	7811      	ldrb	r1, [r2, #0]
 80010ca:	220a      	movs	r2, #10
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fa6f 	bl	80015b0 <I2CHelper_ReadRegisterAsShort>
 80010d2:	4603      	mov	r3, r0
 80010d4:	80bb      	strh	r3, [r7, #4]

    if (packVoltage > 1000 && BMS.BQ_opStatus.bits.chg && BMS.BQ_opStatus.bits.pchg && BQ_IsChargeFetTestEnabled(BMS) && current > 0 && current < 30000){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010dc:	d924      	bls.n	8001128 <BQ_GetChargeMode+0x90>
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d01e      	beq.n	8001128 <BQ_GetChargeMode+0x90>
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d018      	beq.n	8001128 <BQ_GetChargeMode+0x90>
 80010f6:	4668      	mov	r0, sp
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	22d4      	movs	r2, #212	@ 0xd4
 80010fe:	4619      	mov	r1, r3
 8001100:	f003 ff18 	bl	8004f34 <memcpy>
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110a:	f000 f856 	bl	80011ba <BQ_IsChargeFetTestEnabled>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d009      	beq.n	8001128 <BQ_GetChargeMode+0x90>
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <BQ_GetChargeMode+0x90>
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001120:	4293      	cmp	r3, r2
 8001122:	d801      	bhi.n	8001128 <BQ_GetChargeMode+0x90>
        return CHARGE;
 8001124:	2301      	movs	r3, #1
 8001126:	e02c      	b.n	8001182 <BQ_GetChargeMode+0xea>
    }else if (packVoltage > 1000 && BMS.BQ_opStatus.bits.xdsg && BMS.BQ_opStatus.bits.dsg && BQ_IsDischargeFetTestEnabled(BMS) && 65535 - current > 0 && current > 30000){
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800112e:	d927      	bls.n	8001180 <BQ_GetChargeMode+0xe8>
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d021      	beq.n	8001180 <BQ_GetChargeMode+0xe8>
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d01b      	beq.n	8001180 <BQ_GetChargeMode+0xe8>
 8001148:	4668      	mov	r0, sp
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	22d4      	movs	r2, #212	@ 0xd4
 8001150:	4619      	mov	r1, r3
 8001152:	f003 feef 	bl	8004f34 <memcpy>
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115c:	f000 f840 	bl	80011e0 <BQ_IsDischargeFetTestEnabled>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00c      	beq.n	8001180 <BQ_GetChargeMode+0xe8>
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800116c:	33ff      	adds	r3, #255	@ 0xff
 800116e:	2b00      	cmp	r3, #0
 8001170:	dd06      	ble.n	8001180 <BQ_GetChargeMode+0xe8>
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001178:	4293      	cmp	r3, r2
 800117a:	d901      	bls.n	8001180 <BQ_GetChargeMode+0xe8>
        return DISCHARGE;
 800117c:	2302      	movs	r3, #2
 800117e:	e000      	b.n	8001182 <BQ_GetChargeMode+0xea>
    }else{
        return RELAX;
 8001180:	2300      	movs	r3, #0
    }
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800118c:	b004      	add	sp, #16
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000

08001194 <BQ_IsPreChargeFetTestEnabled>:
//{
//    return BMS.BQ_opStatus.bits.led;
//}

bool BQ_IsPreChargeFetTestEnabled(BQ_data BMS)
{
 8001194:	b084      	sub	sp, #16
 8001196:	b490      	push	{r4, r7}
 8001198:	af00      	add	r7, sp, #0
 800119a:	f107 0408 	add.w	r4, r7, #8
 800119e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[0];
 80011a2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	2300      	moveq	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc90      	pop	{r4, r7}
 80011b6:	b004      	add	sp, #16
 80011b8:	4770      	bx	lr

080011ba <BQ_IsChargeFetTestEnabled>:

bool BQ_IsChargeFetTestEnabled(BQ_data BMS)
{
 80011ba:	b084      	sub	sp, #16
 80011bc:	b490      	push	{r4, r7}
 80011be:	af00      	add	r7, sp, #0
 80011c0:	f107 0408 	add.w	r4, r7, #8
 80011c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[1];
 80011c8:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bf14      	ite	ne
 80011d0:	2301      	movne	r3, #1
 80011d2:	2300      	moveq	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc90      	pop	{r4, r7}
 80011dc:	b004      	add	sp, #16
 80011de:	4770      	bx	lr

080011e0 <BQ_IsDischargeFetTestEnabled>:

bool BQ_IsDischargeFetTestEnabled(BQ_data BMS)
{
 80011e0:	b084      	sub	sp, #16
 80011e2:	b490      	push	{r4, r7}
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	f107 0408 	add.w	r4, r7, #8
 80011ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[2];
 80011ee:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc90      	pop	{r4, r7}
 8001202:	b004      	add	sp, #16
 8001204:	4770      	bx	lr

08001206 <BQ_IsManufacturingGaugingEnabled>:

bool BQ_IsManufacturingGaugingEnabled(BQ_data BMS)
{
 8001206:	b084      	sub	sp, #16
 8001208:	b490      	push	{r4, r7}
 800120a:	af00      	add	r7, sp, #0
 800120c:	f107 0408 	add.w	r4, r7, #8
 8001210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[3];
 8001214:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf14      	ite	ne
 800121c:	2301      	movne	r3, #1
 800121e:	2300      	moveq	r3, #0
 8001220:	b2db      	uxtb	r3, r3
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc90      	pop	{r4, r7}
 8001228:	b004      	add	sp, #16
 800122a:	4770      	bx	lr

0800122c <BQ_IsManufacturingAllFetEnabled>:
/**
 * @brief function shows fet control
 * @return 0 if fet control enabled, 1 if fet control disabled
 */
bool BQ_IsManufacturingAllFetEnabled(BQ_data BMS)
{
 800122c:	b084      	sub	sp, #16
 800122e:	b490      	push	{r4, r7}
 8001230:	af00      	add	r7, sp, #0
 8001232:	f107 0408 	add.w	r4, r7, #8
 8001236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[4];
 800123a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	bc90      	pop	{r4, r7}
 800124e:	b004      	add	sp, #16
 8001250:	4770      	bx	lr

08001252 <BQ_IsManufacturingLifetimeEnabled>:

bool BQ_IsManufacturingLifetimeEnabled(BQ_data BMS)
{
 8001252:	b084      	sub	sp, #16
 8001254:	b490      	push	{r4, r7}
 8001256:	af00      	add	r7, sp, #0
 8001258:	f107 0408 	add.w	r4, r7, #8
 800125c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[5];
 8001260:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	bc90      	pop	{r4, r7}
 8001274:	b004      	add	sp, #16
 8001276:	4770      	bx	lr

08001278 <BQ_IsManufacturingPermanentFailureEnabled>:

bool BQ_IsManufacturingPermanentFailureEnabled(BQ_data BMS)
{
 8001278:	b084      	sub	sp, #16
 800127a:	b490      	push	{r4, r7}
 800127c:	af00      	add	r7, sp, #0
 800127e:	f107 0408 	add.w	r4, r7, #8
 8001282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[6];
 8001286:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc90      	pop	{r4, r7}
 800129a:	b004      	add	sp, #16
 800129c:	4770      	bx	lr

0800129e <BQ_IsManufacturingFuseEnabled>:

bool BQ_IsManufacturingFuseEnabled(BQ_data BMS)
{
 800129e:	b084      	sub	sp, #16
 80012a0:	b490      	push	{r4, r7}
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	f107 0408 	add.w	r4, r7, #8
 80012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[8];
 80012ac:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc90      	pop	{r4, r7}
 80012c0:	b004      	add	sp, #16
 80012c2:	4770      	bx	lr

080012c4 <BQ_IsPreDischargeFetTestEnabled>:

bool BQ_IsPreDischargeFetTestEnabled(BQ_data BMS)
{
 80012c4:	b084      	sub	sp, #16
 80012c6:	b490      	push	{r4, r7}
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	f107 0408 	add.w	r4, r7, #8
 80012ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[13];
 80012d2:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc90      	pop	{r4, r7}
 80012e6:	b004      	add	sp, #16
 80012e8:	4770      	bx	lr

080012ea <BQ_IsManufacturingCalibrationEnabled>:

bool BQ_IsManufacturingCalibrationEnabled(BQ_data BMS)
{
 80012ea:	b084      	sub	sp, #16
 80012ec:	b490      	push	{r4, r7}
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	f107 0408 	add.w	r4, r7, #8
 80012f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[15];
 80012f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc90      	pop	{r4, r7}
 800130c:	b004      	add	sp, #16
 800130e:	4770      	bx	lr

08001310 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b49      	ldr	r3, [pc, #292]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a48      	ldr	r2, [pc, #288]	@ (800144c <MX_GPIO_Init+0x13c>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b46      	ldr	r3, [pc, #280]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b43      	ldr	r3, [pc, #268]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a42      	ldr	r2, [pc, #264]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b40      	ldr	r3, [pc, #256]	@ (800144c <MX_GPIO_Init+0x13c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a3c      	ldr	r2, [pc, #240]	@ (800144c <MX_GPIO_Init+0x13c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b3a      	ldr	r3, [pc, #232]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b37      	ldr	r3, [pc, #220]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a36      	ldr	r2, [pc, #216]	@ (800144c <MX_GPIO_Init+0x13c>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b34      	ldr	r3, [pc, #208]	@ (800144c <MX_GPIO_Init+0x13c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	21b0      	movs	r1, #176	@ 0xb0
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f000 ff0f 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001398:	482d      	ldr	r0, [pc, #180]	@ (8001450 <MX_GPIO_Init+0x140>)
 800139a:	f000 ff09 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4827      	ldr	r0, [pc, #156]	@ (8001454 <MX_GPIO_Init+0x144>)
 80013b6:	f000 fd81 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ca:	2307      	movs	r3, #7
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d8:	f000 fd70 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80013dc:	23b0      	movs	r3, #176	@ 0xb0
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f6:	f000 fd61 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80013fa:	2340      	movs	r3, #64	@ 0x40
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001402:	2301      	movs	r3, #1
 8001404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001410:	f000 fd54 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4808      	ldr	r0, [pc, #32]	@ (8001450 <MX_GPIO_Init+0x140>)
 800142e:	f000 fd45 	bl	8001ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	210c      	movs	r1, #12
 8001436:	2028      	movs	r0, #40	@ 0x28
 8001438:	f000 fcbb 	bl	8001db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	@ 0x28
 800143e:	f000 fcd4 	bl	8001dea <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800

08001458 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_I2C1_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <MX_I2C1_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_I2C1_Init+0x74>)
 8001464:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <MX_I2C1_Init+0x7c>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_I2C1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_I2C1_Init+0x74>)
 8001470:	2201      	movs	r2, #1
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_I2C1_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_I2C1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <MX_I2C1_Init+0x74>)
 8001494:	f000 fed6 	bl	8002244 <HAL_I2C_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800149e:	f000 fa5a 	bl	8001956 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a2:	2100      	movs	r1, #0
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <MX_I2C1_Init+0x74>)
 80014a6:	f002 fae1 	bl	8003a6c <HAL_I2CEx_ConfigAnalogFilter>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 fa51 	bl	8001956 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014b4:	2100      	movs	r1, #0
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_I2C1_Init+0x74>)
 80014b8:	f002 fb23 	bl	8003b02 <HAL_I2CEx_ConfigDigitalFilter>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 fa48 	bl	8001956 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000110 	.word	0x20000110
 80014d0:	40005400 	.word	0x40005400
 80014d4:	10909cec 	.word	0x10909cec

080014d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0a2      	sub	sp, #136	@ 0x88
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2260      	movs	r2, #96	@ 0x60
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fcef 	bl	8004edc <memset>
  if(i2cHandle->Instance==I2C1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a28      	ldr	r2, [pc, #160]	@ (80015a4 <HAL_I2C_MspInit+0xcc>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d148      	bne.n	800159a <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001508:	2340      	movs	r3, #64	@ 0x40
 800150a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800150c:	2300      	movs	r3, #0
 800150e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f003 f9a5 	bl	8004864 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001520:	f000 fa19 	bl	8001956 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_I2C_MspInit+0xd0>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001528:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <HAL_I2C_MspInit+0xd0>)
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <HAL_I2C_MspInit+0xd0>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800153c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001540:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001542:	2312      	movs	r3, #18
 8001544:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001546:	2301      	movs	r3, #1
 8001548:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800155a:	4619      	mov	r1, r3
 800155c:	4813      	ldr	r0, [pc, #76]	@ (80015ac <HAL_I2C_MspInit+0xd4>)
 800155e:	f000 fcad 	bl	8001ebc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_I2C_MspInit+0xd0>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	4a10      	ldr	r2, [pc, #64]	@ (80015a8 <HAL_I2C_MspInit+0xd0>)
 8001568:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800156c:	6593      	str	r3, [r2, #88]	@ 0x58
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_I2C_MspInit+0xd0>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	210a      	movs	r1, #10
 800157e:	201f      	movs	r0, #31
 8001580:	f000 fc17 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001584:	201f      	movs	r0, #31
 8001586:	f000 fc30 	bl	8001dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2109      	movs	r1, #9
 800158e:	2020      	movs	r0, #32
 8001590:	f000 fc0f 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001594:	2020      	movs	r0, #32
 8001596:	f000 fc28 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800159a:	bf00      	nop
 800159c:	3788      	adds	r7, #136	@ 0x88
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40005400 	.word	0x40005400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000400 	.word	0x48000400

080015b0 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
 80015bc:	4613      	mov	r3, r2
 80015be:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	78ba      	ldrb	r2, [r7, #2]
 80015c6:	78f9      	ldrb	r1, [r7, #3]
 80015c8:	2002      	movs	r0, #2
 80015ca:	9000      	str	r0, [sp, #0]
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f82a 	bl	8001626 <I2CHelper_ReadRegister>
	uint16_t result = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 80015d6:	7b3b      	ldrb	r3, [r7, #12]
 80015d8:	461a      	mov	r2, r3
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	4313      	orrs	r3, r2
 80015de:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	81fb      	strh	r3, [r7, #14]

	return result;
 80015f0:	89fb      	ldrh	r3, [r7, #14]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af02      	add	r7, sp, #8
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
 8001606:	4613      	mov	r3, r2
 8001608:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	78ba      	ldrb	r2, [r7, #2]
 8001610:	78f9      	ldrb	r1, [r7, #3]
 8001612:	2001      	movs	r0, #1
 8001614:	9000      	str	r0, [sp, #0]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f805 	bl	8001626 <I2CHelper_ReadRegister>

	return buf[0];
 800161c:	7b3b      	ldrb	r3, [r7, #12]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af02      	add	r7, sp, #8
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	72fb      	strb	r3, [r7, #11]
 8001634:	4613      	mov	r3, r2
 8001636:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8001638:	7afb      	ldrb	r3, [r7, #11]
 800163a:	b29b      	uxth	r3, r3
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b299      	uxth	r1, r3
 8001640:	f107 020a 	add.w	r2, r7, #10
 8001644:	2364      	movs	r3, #100	@ 0x64
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fe96 	bl	800237c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	b29b      	uxth	r3, r3
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b299      	uxth	r1, r3
 8001658:	7e3b      	ldrb	r3, [r7, #24]
 800165a:	b29b      	uxth	r3, r3
 800165c:	2264      	movs	r2, #100	@ 0x64
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 ffa2 	bl	80025ac <HAL_I2C_Master_Receive>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001680:	d113      	bne.n	80016aa <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f083 0301 	eor.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x44>)
 800169e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80016a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x48>)
 80016a6:	f000 fd9b 	bl	80021e0 <HAL_GPIO_TogglePin>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000164 	.word	0x20000164
 80016b8:	48000400 	.word	0x48000400

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b0c3      	sub	sp, #268	@ 0x10c
 80016c0:	af38      	add	r7, sp, #224	@ 0xe0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f000 f9fb 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c6:	f000 f8f5 	bl	80018b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ca:	f7ff fe21 	bl	8001310 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016ce:	f7ff fec3 	bl	8001458 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 80016d2:	4874      	ldr	r0, [pc, #464]	@ (80018a4 <main+0x1e8>)
 80016d4:	f000 fdb6 	bl	8002244 <HAL_I2C_Init>
  HAL_I2C_MspInit(&hi2c1);
 80016d8:	4872      	ldr	r0, [pc, #456]	@ (80018a4 <main+0x1e8>)
 80016da:	f7ff fefd 	bl	80014d8 <HAL_I2C_MspInit>
  status = false;
 80016de:	4b72      	ldr	r3, [pc, #456]	@ (80018a8 <main+0x1ec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t current = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t percentage[2] = {0};
 80016ec:	2300      	movs	r3, #0
 80016ee:	843b      	strh	r3, [r7, #32]
  uint16_t cells[6] = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f8c3 2003 	str.w	r2, [r3, #3]
  BQ_Init(&hi2c1);
 8001714:	4863      	ldr	r0, [pc, #396]	@ (80018a4 <main+0x1e8>)
 8001716:	f7fe fd59 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 800171a:	4c64      	ldr	r4, [pc, #400]	@ (80018ac <main+0x1f0>)
 800171c:	2306      	movs	r3, #6
 800171e:	9337      	str	r3, [sp, #220]	@ 0xdc
 8001720:	463b      	mov	r3, r7
 8001722:	9336      	str	r3, [sp, #216]	@ 0xd8
 8001724:	2302      	movs	r3, #2
 8001726:	9335      	str	r3, [sp, #212]	@ 0xd4
 8001728:	4668      	mov	r0, sp
 800172a:	f104 0310 	add.w	r3, r4, #16
 800172e:	22d4      	movs	r2, #212	@ 0xd4
 8001730:	4619      	mov	r1, r3
 8001732:	f003 fbff 	bl	8004f34 <memcpy>
 8001736:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800173a:	f7fe fe2f 	bl	800039c <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 800173e:	20c8      	movs	r0, #200	@ 0xc8
 8001740:	f000 fa38 	bl	8001bb4 <HAL_Delay>
	  BQAction_UpdateData(&BMS_1);
 8001744:	4859      	ldr	r0, [pc, #356]	@ (80018ac <main+0x1f0>)
 8001746:	f7ff fa25 	bl	8000b94 <BQAction_UpdateData>
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_DA_STATUS_2, 16);
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_OUTPUT_CADC_CAL, BQ_outCal, 32);
	  voltage = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 800174a:	4b58      	ldr	r3, [pc, #352]	@ (80018ac <main+0x1f0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a58      	ldr	r2, [pc, #352]	@ (80018b0 <main+0x1f4>)
 8001750:	7811      	ldrb	r1, [r2, #0]
 8001752:	2209      	movs	r2, #9
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff2b 	bl	80015b0 <I2CHelper_ReadRegisterAsShort>
 800175a:	4603      	mov	r3, r0
 800175c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  current = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);//TODO fix 1A = -400
 800175e:	4b53      	ldr	r3, [pc, #332]	@ (80018ac <main+0x1f0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a53      	ldr	r2, [pc, #332]	@ (80018b0 <main+0x1f4>)
 8001764:	7811      	ldrb	r1, [r2, #0]
 8001766:	220a      	movs	r2, #10
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff21 	bl	80015b0 <I2CHelper_ReadRegisterAsShort>
 800176e:	4603      	mov	r3, r0
 8001770:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  percentage[0] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 8001772:	4b4e      	ldr	r3, [pc, #312]	@ (80018ac <main+0x1f0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a4e      	ldr	r2, [pc, #312]	@ (80018b0 <main+0x1f4>)
 8001778:	7811      	ldrb	r1, [r2, #0]
 800177a:	220d      	movs	r2, #13
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff3c 	bl	80015fa <I2CHelper_ReadRegisterAsChar>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 3020 	strb.w	r3, [r7, #32]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 8001788:	4b48      	ldr	r3, [pc, #288]	@ (80018ac <main+0x1f0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a48      	ldr	r2, [pc, #288]	@ (80018b0 <main+0x1f4>)
 800178e:	7811      	ldrb	r1, [r2, #0]
 8001790:	220e      	movs	r2, #14
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ff31 	bl	80015fa <I2CHelper_ReadRegisterAsChar>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1[0] | (BMS_1.BQ_daStatus1[1] << 8);
 800179e:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <main+0x1f0>)
 80017a0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <main+0x1f0>)
 80017a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	82bb      	strh	r3, [r7, #20]
	  cells[1] = BMS_1.BQ_daStatus1[2] | (BMS_1.BQ_daStatus1[3] << 8);
 80017b8:	4b3c      	ldr	r3, [pc, #240]	@ (80018ac <main+0x1f0>)
 80017ba:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80017be:	b21a      	sxth	r2, r3
 80017c0:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <main+0x1f0>)
 80017c2:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	82fb      	strh	r3, [r7, #22]
	  cells[2] = BMS_1.BQ_daStatus1[4] | (BMS_1.BQ_daStatus1[5] << 8);
 80017d2:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <main+0x1f0>)
 80017d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80017d8:	b21a      	sxth	r2, r3
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <main+0x1f0>)
 80017dc:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	833b      	strh	r3, [r7, #24]
	  cells[3] = BMS_1.BQ_daStatus1[6] | (BMS_1.BQ_daStatus1[7] << 8);
 80017ec:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <main+0x1f0>)
 80017ee:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	4b2d      	ldr	r3, [pc, #180]	@ (80018ac <main+0x1f0>)
 80017f6:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	b21b      	sxth	r3, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	837b      	strh	r3, [r7, #26]
	  cells[4] = BMS_1.BQ_daStatus3[0] | (BMS_1.BQ_daStatus3[1] << 8);
 8001806:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <main+0x1f0>)
 8001808:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <main+0x1f0>)
 8001810:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b21b      	sxth	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b21b      	sxth	r3, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	83bb      	strh	r3, [r7, #28]
	  cells[5] = BMS_1.BQ_daStatus3[6] | (BMS_1.BQ_daStatus3[7] << 8);
 8001820:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <main+0x1f0>)
 8001822:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8001826:	b21a      	sxth	r2, r3
 8001828:	4b20      	ldr	r3, [pc, #128]	@ (80018ac <main+0x1f0>)
 800182a:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21b      	sxth	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b21b      	sxth	r3, r3
 8001836:	b29b      	uxth	r3, r3
 8001838:	83fb      	strh	r3, [r7, #30]

	  // -----toggle fets--------
	  if(status){
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <main+0x1ec>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00c      	beq.n	800185c <main+0x1a0>
		  BQAction_EnableDischarging(BMS_1);
 8001842:	4c1a      	ldr	r4, [pc, #104]	@ (80018ac <main+0x1f0>)
 8001844:	4668      	mov	r0, sp
 8001846:	f104 0310 	add.w	r3, r4, #16
 800184a:	22d4      	movs	r2, #212	@ 0xd4
 800184c:	4619      	mov	r1, r3
 800184e:	f003 fb71 	bl	8004f34 <memcpy>
 8001852:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001856:	f7fe ffeb 	bl	8000830 <BQAction_EnableDischarging>
 800185a:	e00b      	b.n	8001874 <main+0x1b8>
	  }else{
		  BQAction_DisableFets(BMS_1);
 800185c:	4c13      	ldr	r4, [pc, #76]	@ (80018ac <main+0x1f0>)
 800185e:	4668      	mov	r0, sp
 8001860:	f104 0310 	add.w	r3, r4, #16
 8001864:	22d4      	movs	r2, #212	@ 0xd4
 8001866:	4619      	mov	r1, r3
 8001868:	f003 fb64 	bl	8004f34 <memcpy>
 800186c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001870:	f7ff f8a7 	bl	80009c2 <BQAction_DisableFets>
	  }
	  fun[0] = BMS_1.BQ_opStatus.bits.pdsg;
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <main+0x1f0>)
 8001876:	79db      	ldrb	r3, [r3, #7]
 8001878:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	bf14      	ite	ne
 8001882:	2301      	movne	r3, #1
 8001884:	2300      	moveq	r3, #0
 8001886:	b2db      	uxtb	r3, r3
 8001888:	733b      	strb	r3, [r7, #12]
	  fun[1] = BMS_1.BQ_opStatus.bits.xdsg;
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <main+0x1f0>)
 800188c:	799b      	ldrb	r3, [r3, #6]
 800188e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	737b      	strb	r3, [r7, #13]
	  HAL_Delay(200);
 80018a0:	e74d      	b.n	800173e <main+0x82>
 80018a2:	bf00      	nop
 80018a4:	20000110 	.word	0x20000110
 80018a8:	20000164 	.word	0x20000164
 80018ac:	2000002c 	.word	0x2000002c
 80018b0:	20000000 	.word	0x20000000

080018b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b096      	sub	sp, #88	@ 0x58
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2244      	movs	r2, #68	@ 0x44
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fb0a 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	463b      	mov	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80018d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018da:	f002 f96d 	bl	8003bb8 <HAL_PWREx_ControlVoltageScaling>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80018e4:	f000 f837 	bl	8001956 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018e8:	2302      	movs	r3, #2
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f2:	2310      	movs	r3, #16
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fa:	2302      	movs	r3, #2
 80018fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001902:	230a      	movs	r3, #10
 8001904:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001906:	2307      	movs	r3, #7
 8001908:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4618      	mov	r0, r3
 8001918:	f002 f9a4 	bl	8003c64 <HAL_RCC_OscConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001922:	f000 f818 	bl	8001956 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001926:	230f      	movs	r3, #15
 8001928:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192a:	2303      	movs	r3, #3
 800192c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	2104      	movs	r1, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fda4 	bl	800448c <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800194a:	f000 f804 	bl	8001956 <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3758      	adds	r7, #88	@ 0x58
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800195a:	b672      	cpsid	i
}
 800195c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800195e:	bf00      	nop
 8001960:	e7fd      	b.n	800195e <Error_Handler+0x8>
	...

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <HAL_MspInit+0x44>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196e:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <HAL_MspInit+0x44>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6613      	str	r3, [r2, #96]	@ 0x60
 8001976:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_MspInit+0x44>)
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_MspInit+0x44>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_MspInit+0x44>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6593      	str	r3, [r2, #88]	@ 0x58
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_MspInit+0x44>)
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f000 f8b7 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <I2C1_EV_IRQHandler+0x10>)
 8001a12:	f000 ffad 	bl	8002970 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000110 	.word	0x20000110

08001a20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <I2C1_ER_IRQHandler+0x10>)
 8001a26:	f000 ffbd 	bl	80029a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000110 	.word	0x20000110

08001a34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a3c:	f000 fbea 	bl	8002214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a6c:	f7ff ffea 	bl	8001a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a72:	490d      	ldr	r1, [pc, #52]	@ (8001aa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a74:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <LoopForever+0xe>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a88:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab4 <LoopForever+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a96:	f003 fa29 	bl	8004eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9a:	f7ff fe0f 	bl	80016bc <main>

08001a9e <LoopForever>:

LoopForever:
    b LoopForever
 8001a9e:	e7fe      	b.n	8001a9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001aac:	08004fb0 	.word	0x08004fb0
  ldr r2, =_sbss
 8001ab0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ab4:	2000016c 	.word	0x2000016c

08001ab8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC1_IRQHandler>
	...

08001abc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_Init+0x3c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0b      	ldr	r2, [pc, #44]	@ (8001af8 <HAL_Init+0x3c>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f000 f962 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f000 f80f 	bl	8001afc <HAL_InitTick>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	e001      	b.n	8001aee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aea:	f7ff ff3b 	bl	8001964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40022000 	.word	0x40022000

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <HAL_InitTick+0x6c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d023      	beq.n	8001b58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b10:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_InitTick+0x70>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <HAL_InitTick+0x6c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f96d 	bl	8001e06 <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d809      	bhi.n	8001b4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 f937 	bl	8001db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b44:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_InitTick+0x74>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e007      	b.n	8001b5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e004      	b.n	8001b5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e001      	b.n	8001b5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000000c 	.word	0x2000000c
 8001b6c:	20000004 	.word	0x20000004
 8001b70:	20000008 	.word	0x20000008

08001b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_IncTick+0x20>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a04      	ldr	r2, [pc, #16]	@ (8001b98 <HAL_IncTick+0x24>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	20000168 	.word	0x20000168

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000168 	.word	0x20000168

08001bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff ffee 	bl	8001b9c <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d005      	beq.n	8001bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_Delay+0x44>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bda:	bf00      	nop
 8001bdc:	f7ff ffde 	bl	8001b9c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f7      	bhi.n	8001bdc <HAL_Delay+0x28>
  {
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000000c 	.word	0x2000000c

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4907      	ldr	r1, [pc, #28]	@ (8001c98 <__NVIC_EnableIRQ+0x38>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff8e 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff29 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff3e 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff8e 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5d 	bl	8001c9c <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff31 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa2 	bl	8001d58 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d005      	beq.n	8001e42 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	e029      	b.n	8001e96 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 020e 	bic.w	r2, r2, #14
 8001e50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f003 021c 	and.w	r2, r3, #28
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2101      	movs	r1, #1
 8001e70:	fa01 f202 	lsl.w	r2, r1, r2
 8001e74:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
    }
  }
  return status;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001eae:	b2db      	uxtb	r3, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	e154      	b.n	8002176 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8146 	beq.w	8002170 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d005      	beq.n	8001efc <HAL_GPIO_Init+0x40>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d130      	bne.n	8001f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f32:	2201      	movs	r2, #1
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 0201 	and.w	r2, r3, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d017      	beq.n	8001f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d123      	bne.n	8001fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	08da      	lsrs	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3208      	adds	r2, #8
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a0 	beq.w	8002170 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002030:	4b58      	ldr	r3, [pc, #352]	@ (8002194 <HAL_GPIO_Init+0x2d8>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002034:	4a57      	ldr	r2, [pc, #348]	@ (8002194 <HAL_GPIO_Init+0x2d8>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6613      	str	r3, [r2, #96]	@ 0x60
 800203c:	4b55      	ldr	r3, [pc, #340]	@ (8002194 <HAL_GPIO_Init+0x2d8>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002048:	4a53      	ldr	r2, [pc, #332]	@ (8002198 <HAL_GPIO_Init+0x2dc>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002072:	d019      	beq.n	80020a8 <HAL_GPIO_Init+0x1ec>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a49      	ldr	r2, [pc, #292]	@ (800219c <HAL_GPIO_Init+0x2e0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_GPIO_Init+0x1e8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a48      	ldr	r2, [pc, #288]	@ (80021a0 <HAL_GPIO_Init+0x2e4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00d      	beq.n	80020a0 <HAL_GPIO_Init+0x1e4>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a47      	ldr	r2, [pc, #284]	@ (80021a4 <HAL_GPIO_Init+0x2e8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x1e0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a46      	ldr	r2, [pc, #280]	@ (80021a8 <HAL_GPIO_Init+0x2ec>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_GPIO_Init+0x1dc>
 8002094:	2304      	movs	r3, #4
 8002096:	e008      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 8002098:	2307      	movs	r3, #7
 800209a:	e006      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 800209c:	2303      	movs	r3, #3
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1ee>
 80020a8:	2300      	movs	r3, #0
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ba:	4937      	ldr	r1, [pc, #220]	@ (8002198 <HAL_GPIO_Init+0x2dc>)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c8:	4b38      	ldr	r3, [pc, #224]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ec:	4a2f      	ldr	r2, [pc, #188]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020f2:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002116:	4a25      	ldr	r2, [pc, #148]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800211c:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002140:	4a1a      	ldr	r2, [pc, #104]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800216a:	4a10      	ldr	r2, [pc, #64]	@ (80021ac <HAL_GPIO_Init+0x2f0>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	f47f aea3 	bne.w	8001ecc <HAL_GPIO_Init+0x10>
  }
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40021000 	.word	0x40021000
 8002198:	40010000 	.word	0x40010000
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800
 80021a4:	48000c00 	.word	0x48000c00
 80021a8:	48001000 	.word	0x48001000
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43d9      	mvns	r1, r3
 80021fe:	887b      	ldrh	r3, [r7, #2]
 8002200:	400b      	ands	r3, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800221e:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fa1c 	bl	8001670 <HAL_GPIO_EXTI_Callback>
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010400 	.word	0x40010400

08002244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e08d      	b.n	8002372 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff f934 	bl	80014d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	@ 0x24
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002294:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	e006      	b.n	80022cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80022ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d108      	bne.n	80022e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	e007      	b.n	80022f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002308:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002318:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69d9      	ldr	r1, [r3, #28]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	817b      	strh	r3, [r7, #10]
 800238c:	4613      	mov	r3, r2
 800238e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	f040 80fd 	bne.w	8002598 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x30>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0f6      	b.n	800259a <HAL_I2C_Master_Transmit+0x21e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b4:	f7ff fbf2 	bl	8001b9c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f001 f871 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0e1      	b.n	800259a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	@ 0x21
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2210      	movs	r2, #16
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	893a      	ldrh	r2, [r7, #8]
 80023f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2bff      	cmp	r3, #255	@ 0xff
 8002406:	d906      	bls.n	8002416 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	22ff      	movs	r2, #255	@ 0xff
 800240c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800240e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e007      	b.n	8002426 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002424:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	2b00      	cmp	r3, #0
 800242c:	d024      	beq.n	8002478 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	b2da      	uxtb	r2, r3
 8002468:	8979      	ldrh	r1, [r7, #10]
 800246a:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <HAL_I2C_Master_Transmit+0x228>)
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f001 fa6b 	bl	800394c <I2C_TransferConfig>
 8002476:	e066      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	4b48      	ldr	r3, [pc, #288]	@ (80025a4 <HAL_I2C_Master_Transmit+0x228>)
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f001 fa60 	bl	800394c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800248c:	e05b      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f001 f864 	bl	8003560 <I2C_WaitOnTXISFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e07b      	b.n	800259a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d034      	beq.n	8002546 <HAL_I2C_Master_Transmit+0x1ca>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d130      	bne.n	8002546 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	2200      	movs	r2, #0
 80024ec:	2180      	movs	r1, #128	@ 0x80
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 ffdd 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e04d      	b.n	800259a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	2bff      	cmp	r3, #255	@ 0xff
 8002506:	d90e      	bls.n	8002526 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	22ff      	movs	r2, #255	@ 0xff
 800250c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	b2da      	uxtb	r2, r3
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	2300      	movs	r3, #0
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f001 fa14 	bl	800394c <I2C_TransferConfig>
 8002524:	e00f      	b.n	8002546 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002534:	b2da      	uxtb	r2, r3
 8002536:	8979      	ldrh	r1, [r7, #10]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f001 fa03 	bl	800394c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d19e      	bne.n	800248e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f001 f84a 	bl	80035ee <I2C_WaitOnSTOPFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e01a      	b.n	800259a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2220      	movs	r2, #32
 800256a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_I2C_Master_Transmit+0x22c>)
 8002578:	400b      	ands	r3, r1
 800257a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	80002000 	.word	0x80002000
 80025a8:	fe00e800 	.word	0xfe00e800

080025ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	461a      	mov	r2, r3
 80025b8:	460b      	mov	r3, r1
 80025ba:	817b      	strh	r3, [r7, #10]
 80025bc:	4613      	mov	r3, r2
 80025be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	f040 80db 	bne.w	8002784 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <HAL_I2C_Master_Receive+0x30>
 80025d8:	2302      	movs	r3, #2
 80025da:	e0d4      	b.n	8002786 <HAL_I2C_Master_Receive+0x1da>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e4:	f7ff fada 	bl	8001b9c <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2319      	movs	r3, #25
 80025f0:	2201      	movs	r2, #1
 80025f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 ff59 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0bf      	b.n	8002786 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2222      	movs	r2, #34	@ 0x22
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2210      	movs	r2, #16
 8002612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	893a      	ldrh	r2, [r7, #8]
 8002626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	2bff      	cmp	r3, #255	@ 0xff
 8002636:	d90e      	bls.n	8002656 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002642:	b2da      	uxtb	r2, r3
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	4b52      	ldr	r3, [pc, #328]	@ (8002790 <HAL_I2C_Master_Receive+0x1e4>)
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f001 f97c 	bl	800394c <I2C_TransferConfig>
 8002654:	e06d      	b.n	8002732 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002664:	b2da      	uxtb	r2, r3
 8002666:	8979      	ldrh	r1, [r7, #10]
 8002668:	4b49      	ldr	r3, [pc, #292]	@ (8002790 <HAL_I2C_Master_Receive+0x1e4>)
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f001 f96b 	bl	800394c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002676:	e05c      	b.n	8002732 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	6a39      	ldr	r1, [r7, #32]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 fff9 	bl	8003674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e07c      	b.n	8002786 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d034      	beq.n	8002732 <HAL_I2C_Master_Receive+0x186>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d130      	bne.n	8002732 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2200      	movs	r2, #0
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fee7 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e04d      	b.n	8002786 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2bff      	cmp	r3, #255	@ 0xff
 80026f2:	d90e      	bls.n	8002712 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	22ff      	movs	r2, #255	@ 0xff
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	8979      	ldrh	r1, [r7, #10]
 8002702:	2300      	movs	r3, #0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f001 f91e 	bl	800394c <I2C_TransferConfig>
 8002710:	e00f      	b.n	8002732 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002720:	b2da      	uxtb	r2, r3
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	2300      	movs	r3, #0
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f001 f90d 	bl	800394c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d19d      	bne.n	8002678 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	6a39      	ldr	r1, [r7, #32]
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 ff54 	bl	80035ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e01a      	b.n	8002786 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2220      	movs	r2, #32
 8002756:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_I2C_Master_Receive+0x1e8>)
 8002764:	400b      	ands	r3, r1
 8002766:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	80002400 	.word	0x80002400
 8002794:	fe00e800 	.word	0xfe00e800

08002798 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	460b      	mov	r3, r1
 80027a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 80d6 	bne.w	8002966 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0cc      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_I2C_IsDeviceReady+0x44>
 80027d8:	2302      	movs	r3, #2
 80027da:	e0c5      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2224      	movs	r2, #36	@ 0x24
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_I2C_IsDeviceReady+0x72>
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002804:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002808:	e006      	b.n	8002818 <HAL_I2C_IsDeviceReady+0x80>
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002810:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002814:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800281e:	f7ff f9bd 	bl	8001b9c <HAL_GetTick>
 8002822:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b20      	cmp	r3, #32
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b10      	cmp	r3, #16
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002850:	e034      	b.n	80028bc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d01a      	beq.n	8002890 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7ff f99f 	bl	8001b9c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <HAL_I2C_IsDeviceReady+0xd8>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10f      	bne.n	8002890 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e06b      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028bc:	7ffb      	ldrb	r3, [r7, #31]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <HAL_I2C_IsDeviceReady+0x130>
 80028c2:	7fbb      	ldrb	r3, [r7, #30]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0c4      	beq.n	8002852 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d01a      	beq.n	800290c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2200      	movs	r2, #0
 80028de:	2120      	movs	r1, #32
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fde4 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e03b      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2220      	movs	r2, #32
 80028f6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e02d      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	2120      	movs	r1, #32
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fdc9 	bl	80034ae <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e020      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2220      	movs	r2, #32
 8002934:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	3301      	adds	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	f63f af56 	bhi.w	80027f2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f043 0220 	orr.w	r2, r3, #32
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
  }
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00f      	beq.n	80029e6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00f      	beq.n	8002a10 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f043 0208 	orr.w	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a38:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 030b 	and.w	r3, r3, #11
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fbd5 	bl	80031fc <I2C_ITError>
  }
}
 8002a52:	bf00      	nop
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b086      	sub	sp, #24
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <I2C_Slave_ISR_IT+0x24>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e0e2      	b.n	8002cc4 <I2C_Slave_ISR_IT+0x1ea>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d004      	beq.n	8002b24 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b1a:	6939      	ldr	r1, [r7, #16]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f9b5 	bl	8002e8c <I2C_ITSlaveCplt>
 8002b22:	e0ca      	b.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04b      	beq.n	8002bc6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d046      	beq.n	8002bc6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d128      	bne.n	8002b94 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b28      	cmp	r3, #40	@ 0x28
 8002b4c:	d108      	bne.n	8002b60 <I2C_Slave_ISR_IT+0x86>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b54:	d104      	bne.n	8002b60 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b56:	6939      	ldr	r1, [r7, #16]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 fafb 	bl	8003154 <I2C_ITListenCplt>
 8002b5e:	e031      	b.n	8002bc4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b29      	cmp	r3, #41	@ 0x29
 8002b6a:	d10e      	bne.n	8002b8a <I2C_Slave_ISR_IT+0xb0>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b72:	d00a      	beq.n	8002b8a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fc54 	bl	800342a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f926 	bl	8002dd4 <I2C_ITSlaveSeqCplt>
 8002b88:	e01c      	b.n	8002bc4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b92:	e08f      	b.n	8002cb4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba0:	f043 0204 	orr.w	r2, r3, #4
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <I2C_Slave_ISR_IT+0xdc>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb4:	d17e      	bne.n	8002cb4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	4619      	mov	r1, r3
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fb1d 	bl	80031fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002bc2:	e077      	b.n	8002cb4 <I2C_Slave_ISR_IT+0x1da>
 8002bc4:	e076      	b.n	8002cb4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d02f      	beq.n	8002c30 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02a      	beq.n	8002c30 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d018      	beq.n	8002c16 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d14b      	bne.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c26:	d047      	beq.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f8d3 	bl	8002dd4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c2e:	e043      	b.n	8002cb8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c44:	6939      	ldr	r1, [r7, #16]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f840 	bl	8002ccc <I2C_ITAddrCplt>
 8002c4c:	e035      	b.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d030      	beq.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d02b      	beq.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002c9c:	e00d      	b.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ca4:	d002      	beq.n	8002cac <I2C_Slave_ISR_IT+0x1d2>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f891 	bl	8002dd4 <I2C_ITSlaveSeqCplt>
 8002cb2:	e002      	b.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002cb4:	bf00      	nop
 8002cb6:	e000      	b.n	8002cba <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002cb8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ce2:	2b28      	cmp	r3, #40	@ 0x28
 8002ce4:	d16a      	bne.n	8002dbc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d04:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d12:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d20:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d138      	bne.n	8002d9c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	09db      	lsrs	r3, r3, #7
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	89bb      	ldrh	r3, [r7, #12]
 8002d32:	4053      	eors	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f003 0306 	and.w	r3, r3, #6
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d11c      	bne.n	8002d78 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d13b      	bne.n	8002dcc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2208      	movs	r2, #8
 8002d60:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d6a:	89ba      	ldrh	r2, [r7, #12]
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fe86 	bl	8002a82 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d76:	e029      	b.n	8002dcc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d78:	893b      	ldrh	r3, [r7, #8]
 8002d7a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fe15 	bl	80039b0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d8e:	89ba      	ldrh	r2, [r7, #12]
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff fe74 	bl	8002a82 <HAL_I2C_AddrCallback>
}
 8002d9a:	e017      	b.n	8002dcc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fe05 	bl	80039b0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dae:	89ba      	ldrh	r2, [r7, #12]
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff fe64 	bl	8002a82 <HAL_I2C_AddrCallback>
}
 8002dba:	e007      	b.n	8002dcc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002dcc:	bf00      	nop
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e00c      	b.n	8002e22 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b29      	cmp	r3, #41	@ 0x29
 8002e2c:	d112      	bne.n	8002e54 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2228      	movs	r2, #40	@ 0x28
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2221      	movs	r2, #33	@ 0x21
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fdb6 	bl	80039b0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fe04 	bl	8002a5a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e52:	e017      	b.n	8002e84 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e5e:	d111      	bne.n	8002e84 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2228      	movs	r2, #40	@ 0x28
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2222      	movs	r2, #34	@ 0x22
 8002e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e6e:	2102      	movs	r1, #2
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fd9d 	bl	80039b0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fdf5 	bl	8002a6e <HAL_I2C_SlaveRxCpltCallback>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eae:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
 8002eba:	2b21      	cmp	r3, #33	@ 0x21
 8002ebc:	d002      	beq.n	8002ec4 <I2C_ITSlaveCplt+0x38>
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	2b29      	cmp	r3, #41	@ 0x29
 8002ec2:	d108      	bne.n	8002ed6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ec4:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fd71 	bl	80039b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2221      	movs	r2, #33	@ 0x21
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ed4:	e019      	b.n	8002f0a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	2b22      	cmp	r3, #34	@ 0x22
 8002eda:	d002      	beq.n	8002ee2 <I2C_ITSlaveCplt+0x56>
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ee0:	d108      	bne.n	8002ef4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ee2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fd62 	bl	80039b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2222      	movs	r2, #34	@ 0x22
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef2:	e00a      	b.n	8002f0a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
 8002ef6:	2b28      	cmp	r3, #40	@ 0x28
 8002ef8:	d107      	bne.n	8002f0a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002efa:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fd56 	bl	80039b0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f18:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b89      	ldr	r3, [pc, #548]	@ (800314c <I2C_ITSlaveCplt+0x2c0>)
 8002f26:	400b      	ands	r3, r1
 8002f28:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa7d 	bl	800342a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f48:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01f      	beq.n	8002f92 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f60:	e017      	b.n	8002f92 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f7a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00c      	beq.n	8002fde <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fec:	f043 0204 	orr.w	r2, r3, #4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d049      	beq.n	8003092 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003004:	2b00      	cmp	r3, #0
 8003006:	d044      	beq.n	8003092 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d128      	bne.n	8003064 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b28      	cmp	r3, #40	@ 0x28
 800301c:	d108      	bne.n	8003030 <I2C_ITSlaveCplt+0x1a4>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003024:	d104      	bne.n	8003030 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003026:	6979      	ldr	r1, [r7, #20]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f893 	bl	8003154 <I2C_ITListenCplt>
 800302e:	e030      	b.n	8003092 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b29      	cmp	r3, #41	@ 0x29
 800303a:	d10e      	bne.n	800305a <I2C_ITSlaveCplt+0x1ce>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003042:	d00a      	beq.n	800305a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2210      	movs	r2, #16
 800304a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9ec 	bl	800342a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff febe 	bl	8002dd4 <I2C_ITSlaveSeqCplt>
 8003058:	e01b      	b.n	8003092 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2210      	movs	r2, #16
 8003060:	61da      	str	r2, [r3, #28]
 8003062:	e016      	b.n	8003092 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2210      	movs	r2, #16
 800306a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003070:	f043 0204 	orr.w	r2, r3, #4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <I2C_ITSlaveCplt+0x1fa>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003084:	d105      	bne.n	8003092 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8b5 	bl	80031fc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d010      	beq.n	80030ca <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8a4 	bl	80031fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b28      	cmp	r3, #40	@ 0x28
 80030be:	d141      	bne.n	8003144 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030c0:	6979      	ldr	r1, [r7, #20]
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f846 	bl	8003154 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030c8:	e03c      	b.n	8003144 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030d2:	d014      	beq.n	80030fe <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fe7d 	bl	8002dd4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <I2C_ITSlaveCplt+0x2c4>)
 80030de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fcd1 	bl	8002a9e <HAL_I2C_ListenCpltCallback>
}
 80030fc:	e022      	b.n	8003144 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b22      	cmp	r3, #34	@ 0x22
 8003108:	d10e      	bne.n	8003128 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fca4 	bl	8002a6e <HAL_I2C_SlaveRxCpltCallback>
}
 8003126:	e00d      	b.n	8003144 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fc8b 	bl	8002a5a <HAL_I2C_SlaveTxCpltCallback>
}
 8003144:	bf00      	nop
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	fe00e800 	.word	0xfe00e800
 8003150:	ffff0000 	.word	0xffff0000

08003154 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a25      	ldr	r2, [pc, #148]	@ (80031f8 <I2C_ITListenCplt+0xa4>)
 8003162:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d022      	beq.n	80031d0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d012      	beq.n	80031d0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	f043 0204 	orr.w	r2, r3, #4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031d0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fbeb 	bl	80039b0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2210      	movs	r2, #16
 80031e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fc57 	bl	8002a9e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	ffff0000 	.word	0xffff0000

080031fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a6d      	ldr	r2, [pc, #436]	@ (80033d0 <I2C_ITError+0x1d4>)
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b28      	cmp	r3, #40	@ 0x28
 8003232:	d005      	beq.n	8003240 <I2C_ITError+0x44>
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b29      	cmp	r3, #41	@ 0x29
 8003238:	d002      	beq.n	8003240 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b2a      	cmp	r3, #42	@ 0x2a
 800323e:	d10b      	bne.n	8003258 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003240:	2103      	movs	r1, #3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fbb4 	bl	80039b0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2228      	movs	r2, #40	@ 0x28
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a60      	ldr	r2, [pc, #384]	@ (80033d4 <I2C_ITError+0x1d8>)
 8003254:	635a      	str	r2, [r3, #52]	@ 0x34
 8003256:	e030      	b.n	80032ba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003258:	f248 0103 	movw	r1, #32771	@ 0x8003
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fba7 	bl	80039b0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f8e1 	bl	800342a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b60      	cmp	r3, #96	@ 0x60
 8003272:	d01f      	beq.n	80032b4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b20      	cmp	r3, #32
 8003288:	d114      	bne.n	80032b4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d109      	bne.n	80032ac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2220      	movs	r2, #32
 80032b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d039      	beq.n	800333c <I2C_ITError+0x140>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b11      	cmp	r3, #17
 80032cc:	d002      	beq.n	80032d4 <I2C_ITError+0xd8>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b21      	cmp	r3, #33	@ 0x21
 80032d2:	d133      	bne.n	800333c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032e2:	d107      	bne.n	80032f4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fdd1 	bl	8001ea0 <HAL_DMA_GetState>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d017      	beq.n	8003334 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	4a33      	ldr	r2, [pc, #204]	@ (80033d8 <I2C_ITError+0x1dc>)
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fd80 	bl	8001e1e <HAL_DMA_Abort_IT>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d04d      	beq.n	80033c0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800332e:	4610      	mov	r0, r2
 8003330:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003332:	e045      	b.n	80033c0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f851 	bl	80033dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800333a:	e041      	b.n	80033c0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d039      	beq.n	80033b8 <I2C_ITError+0x1bc>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b12      	cmp	r3, #18
 8003348:	d002      	beq.n	8003350 <I2C_ITError+0x154>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b22      	cmp	r3, #34	@ 0x22
 800334e:	d133      	bne.n	80033b8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800335a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335e:	d107      	bne.n	8003370 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800336e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fd93 	bl	8001ea0 <HAL_DMA_GetState>
 800337a:	4603      	mov	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d017      	beq.n	80033b0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <I2C_ITError+0x1dc>)
 8003386:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003394:	4618      	mov	r0, r3
 8003396:	f7fe fd42 	bl	8001e1e <HAL_DMA_Abort_IT>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d011      	beq.n	80033c4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033aa:	4610      	mov	r0, r2
 80033ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ae:	e009      	b.n	80033c4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f813 	bl	80033dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033b6:	e005      	b.n	80033c4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f80f 	bl	80033dc <I2C_TreatErrorCallback>
  }
}
 80033be:	e002      	b.n	80033c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033c4:	bf00      	nop
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	ffff0000 	.word	0xffff0000
 80033d4:	08002adb 	.word	0x08002adb
 80033d8:	08003473 	.word	0x08003473

080033dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b60      	cmp	r3, #96	@ 0x60
 80033ee:	d10e      	bne.n	800340e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fb5d 	bl	8002ac6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800340c:	e009      	b.n	8003422 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fb48 	bl	8002ab2 <HAL_I2C_ErrorCallback>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d103      	bne.n	8003448 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d007      	beq.n	8003466 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	619a      	str	r2, [r3, #24]
  }
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	2200      	movs	r2, #0
 800348e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	2200      	movs	r2, #0
 800349e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ff9b 	bl	80033dc <I2C_TreatErrorCallback>
}
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	603b      	str	r3, [r7, #0]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034be:	e03b      	b.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f961 	bl	800378c <I2C_IsErrorOccurred>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e041      	b.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d02d      	beq.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034dc:	f7fe fb5e 	bl	8001b9c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d302      	bcc.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d122      	bne.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	429a      	cmp	r2, r3
 800350e:	d113      	bne.n	8003538 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e00f      	b.n	8003558 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	429a      	cmp	r2, r3
 8003554:	d0b4      	beq.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800356c:	e033      	b.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f90a 	bl	800378c <I2C_IsErrorOccurred>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e031      	b.n	80035e6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d025      	beq.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7fe fb07 	bl	8001b9c <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11a      	bne.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d013      	beq.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e007      	b.n	80035e6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d1c4      	bne.n	800356e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035fa:	e02f      	b.n	800365c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f8c3 	bl	800378c <I2C_IsErrorOccurred>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e02d      	b.n	800366c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fe fac4 	bl	8001b9c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11a      	bne.n	800365c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b20      	cmp	r3, #32
 8003632:	d013      	beq.n	800365c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e007      	b.n	800366c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b20      	cmp	r3, #32
 8003668:	d1c8      	bne.n	80035fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003684:	e071      	b.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f87e 	bl	800378c <I2C_IsErrorOccurred>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d13b      	bne.n	8003720 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d138      	bne.n	8003720 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d105      	bne.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d121      	bne.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2210      	movs	r2, #16
 80036dc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2204      	movs	r2, #4
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2220      	movs	r2, #32
 80036ea:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80036f8:	400b      	ands	r3, r1
 80036fa:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
 8003718:	e002      	b.n	8003720 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003720:	f7fe fa3c 	bl	8001b9c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d302      	bcc.n	8003736 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d119      	bne.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d116      	bne.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00f      	beq.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d002      	beq.n	800377e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d083      	beq.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	fe00e800 	.word	0xfe00e800

0800378c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	@ 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d068      	beq.n	800388a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2210      	movs	r2, #16
 80037be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c0:	e049      	b.n	8003856 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d045      	beq.n	8003856 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037ca:	f7fe f9e7 	bl	8001b9c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d302      	bcc.n	80037e0 <I2C_IsErrorOccurred+0x54>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d13a      	bne.n	8003856 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003802:	d121      	bne.n	8003848 <I2C_IsErrorOccurred+0xbc>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380a:	d01d      	beq.n	8003848 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	2b20      	cmp	r3, #32
 8003810:	d01a      	beq.n	8003848 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003820:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003822:	f7fe f9bb 	bl	8001b9c <HAL_GetTick>
 8003826:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003828:	e00e      	b.n	8003848 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800382a:	f7fe f9b7 	bl	8001b9c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b19      	cmp	r3, #25
 8003836:	d907      	bls.n	8003848 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f043 0320 	orr.w	r3, r3, #32
 800383e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003846:	e006      	b.n	8003856 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d1e9      	bne.n	800382a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b20      	cmp	r3, #32
 8003862:	d003      	beq.n	800386c <I2C_IsErrorOccurred+0xe0>
 8003864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0aa      	beq.n	80037c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800386c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003870:	2b00      	cmp	r3, #0
 8003872:	d103      	bne.n	800387c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2220      	movs	r2, #32
 800387a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	f043 0304 	orr.w	r3, r3, #4
 8003882:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f043 0308 	orr.w	r3, r3, #8
 80038c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f043 0302 	orr.w	r3, r3, #2
 80038e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01c      	beq.n	800393a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fd92 	bl	800342a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b0d      	ldr	r3, [pc, #52]	@ (8003948 <I2C_IsErrorOccurred+0x1bc>)
 8003912:	400b      	ands	r3, r1
 8003914:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800393a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800393e:	4618      	mov	r0, r3
 8003940:	3728      	adds	r7, #40	@ 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	fe00e800 	.word	0xfe00e800

0800394c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	4613      	mov	r3, r2
 800395c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003964:	7a7b      	ldrb	r3, [r7, #9]
 8003966:	041b      	lsls	r3, r3, #16
 8003968:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800396c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	4313      	orrs	r3, r2
 8003976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800397a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	0d5b      	lsrs	r3, r3, #21
 8003986:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800398a:	4b08      	ldr	r3, [pc, #32]	@ (80039ac <I2C_TransferConfig+0x60>)
 800398c:	430b      	orrs	r3, r1
 800398e:	43db      	mvns	r3, r3
 8003990:	ea02 0103 	and.w	r1, r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	03ff63ff 	.word	0x03ff63ff

080039b0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039c0:	887b      	ldrh	r3, [r7, #2]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00f      	beq.n	80039ea <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80039d0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039de:	2b28      	cmp	r3, #40	@ 0x28
 80039e0:	d003      	beq.n	80039ea <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80039e8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00f      	beq.n	8003a14 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80039fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a08:	2b28      	cmp	r3, #40	@ 0x28
 8003a0a:	d003      	beq.n	8003a14 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003a12:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	da03      	bge.n	8003a24 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a24:	887b      	ldrh	r3, [r7, #2]
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d103      	bne.n	8003a32 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d103      	bne.n	8003a40 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f043 0320 	orr.w	r3, r3, #32
 8003a3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	2b40      	cmp	r3, #64	@ 0x40
 8003a44:	d103      	bne.n	8003a4e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6819      	ldr	r1, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43da      	mvns	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d138      	bne.n	8003af4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e032      	b.n	8003af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	@ 0x24
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003abe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e000      	b.n	8003af6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
  }
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d139      	bne.n	8003b8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e033      	b.n	8003b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2224      	movs	r2, #36	@ 0x24
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ba0:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40007000 	.word	0x40007000

08003bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc6:	d130      	bne.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc8:	4b23      	ldr	r3, [pc, #140]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bd4:	d038      	beq.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bde:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003be4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003be6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2232      	movs	r2, #50	@ 0x32
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	0c9b      	lsrs	r3, r3, #18
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bfc:	e002      	b.n	8003c04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c04:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c10:	d102      	bne.n	8003c18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1f2      	bne.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c18:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c24:	d110      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e00f      	b.n	8003c4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c36:	d007      	beq.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c38:	4b07      	ldr	r3, [pc, #28]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c40:	4a05      	ldr	r2, [pc, #20]	@ (8003c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	20000004 	.word	0x20000004
 8003c60:	431bde83 	.word	0x431bde83

08003c64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f000 bc02 	b.w	800447c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c78:	4b96      	ldr	r3, [pc, #600]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c82:	4b94      	ldr	r3, [pc, #592]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0310 	and.w	r3, r3, #16
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80e4 	beq.w	8003e62 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x4c>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	f040 808b 	bne.w	8003dbe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	f040 8087 	bne.w	8003dbe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cb0:	4b88      	ldr	r3, [pc, #544]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x64>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e3d9      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	4b81      	ldr	r3, [pc, #516]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x7e>
 8003cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ce0:	e005      	b.n	8003cee <HAL_RCC_OscConfig+0x8a>
 8003ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d223      	bcs.n	8003d3a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fd54 	bl	80047a4 <RCC_SetFlashLatencyFromMSIRange>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e3ba      	b.n	800447c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d06:	4b73      	ldr	r3, [pc, #460]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a72      	ldr	r2, [pc, #456]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	f043 0308 	orr.w	r3, r3, #8
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	496d      	ldr	r1, [pc, #436]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d24:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	4968      	ldr	r1, [pc, #416]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	e025      	b.n	8003d86 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d3a:	4b66      	ldr	r3, [pc, #408]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a65      	ldr	r2, [pc, #404]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d40:	f043 0308 	orr.w	r3, r3, #8
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b63      	ldr	r3, [pc, #396]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4960      	ldr	r1, [pc, #384]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d58:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	495b      	ldr	r1, [pc, #364]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fd14 	bl	80047a4 <RCC_SetFlashLatencyFromMSIRange>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e37a      	b.n	800447c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d86:	f000 fc81 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	4b51      	ldr	r3, [pc, #324]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	4950      	ldr	r1, [pc, #320]	@ (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003d98:	5ccb      	ldrb	r3, [r1, r3]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	4a4e      	ldr	r2, [pc, #312]	@ (8003edc <HAL_RCC_OscConfig+0x278>)
 8003da4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003da6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee0 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd fea6 	bl	8001afc <HAL_InitTick>
 8003db0:	4603      	mov	r3, r0
 8003db2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d052      	beq.n	8003e60 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	e35e      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d032      	beq.n	8003e2c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dc6:	4b43      	ldr	r3, [pc, #268]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a42      	ldr	r2, [pc, #264]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fee3 	bl	8001b9c <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dda:	f7fd fedf 	bl	8001b9c <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e347      	b.n	800447c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dec:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df8:	4b36      	ldr	r3, [pc, #216]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a35      	ldr	r2, [pc, #212]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	f043 0308 	orr.w	r3, r3, #8
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b33      	ldr	r3, [pc, #204]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4930      	ldr	r1, [pc, #192]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e16:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	492b      	ldr	r1, [pc, #172]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
 8003e2a:	e01a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e2c:	4b29      	ldr	r3, [pc, #164]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a28      	ldr	r2, [pc, #160]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e38:	f7fd feb0 	bl	8001b9c <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e40:	f7fd feac 	bl	8001b9c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e314      	b.n	800447c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e52:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x1dc>
 8003e5e:	e000      	b.n	8003e62 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d073      	beq.n	8003f56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_OscConfig+0x21c>
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b0c      	cmp	r3, #12
 8003e78:	d10e      	bne.n	8003e98 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d10b      	bne.n	8003e98 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e80:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d063      	beq.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d15f      	bne.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e2f1      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea0:	d106      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x24c>
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	e025      	b.n	8003efc <HAL_RCC_OscConfig+0x298>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eb8:	d114      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x280>
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a05      	ldr	r2, [pc, #20]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a02      	ldr	r2, [pc, #8]	@ (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e013      	b.n	8003efc <HAL_RCC_OscConfig+0x298>
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08004f68 	.word	0x08004f68
 8003edc:	20000004 	.word	0x20000004
 8003ee0:	20000008 	.word	0x20000008
 8003ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a9f      	ldr	r2, [pc, #636]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	4b9d      	ldr	r3, [pc, #628]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a9c      	ldr	r2, [pc, #624]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d013      	beq.n	8003f2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fd fe4a 	bl	8001b9c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fd fe46 	bl	8001b9c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	@ 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e2ae      	b.n	800447c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1e:	4b92      	ldr	r3, [pc, #584]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x2a8>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fe36 	bl	8001b9c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f34:	f7fd fe32 	bl	8001b9c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b64      	cmp	r3, #100	@ 0x64
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e29a      	b.n	800447c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f46:	4b88      	ldr	r3, [pc, #544]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x2d0>
 8003f52:	e000      	b.n	8003f56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d060      	beq.n	8004024 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_OscConfig+0x310>
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d119      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d116      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f74:	4b7c      	ldr	r3, [pc, #496]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_OscConfig+0x328>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e277      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8c:	4b76      	ldr	r3, [pc, #472]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	061b      	lsls	r3, r3, #24
 8003f9a:	4973      	ldr	r1, [pc, #460]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa0:	e040      	b.n	8004024 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d023      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003faa:	4b6f      	ldr	r3, [pc, #444]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6e      	ldr	r2, [pc, #440]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd fdf1 	bl	8001b9c <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fbe:	f7fd fded 	bl	8001b9c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e255      	b.n	800447c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd0:	4b65      	ldr	r3, [pc, #404]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fdc:	4b62      	ldr	r3, [pc, #392]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	495f      	ldr	r1, [pc, #380]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
 8003ff0:	e018      	b.n	8004024 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fdcd 	bl	8001b9c <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004006:	f7fd fdc9 	bl	8001b9c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e231      	b.n	800447c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004018:	4b53      	ldr	r3, [pc, #332]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f0      	bne.n	8004006 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d03c      	beq.n	80040aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01c      	beq.n	8004072 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004038:	4b4b      	ldr	r3, [pc, #300]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 800403a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800403e:	4a4a      	ldr	r2, [pc, #296]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd fda8 	bl	8001b9c <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd fda4 	bl	8001b9c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e20c      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004062:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8004064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ef      	beq.n	8004050 <HAL_RCC_OscConfig+0x3ec>
 8004070:	e01b      	b.n	80040aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004072:	4b3d      	ldr	r3, [pc, #244]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8004074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004078:	4a3b      	ldr	r2, [pc, #236]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fd fd8b 	bl	8001b9c <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408a:	f7fd fd87 	bl	8001b9c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1ef      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800409c:	4b32      	ldr	r3, [pc, #200]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ef      	bne.n	800408a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80a6 	beq.w	8004204 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b8:	2300      	movs	r3, #0
 80040ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c8:	4b27      	ldr	r3, [pc, #156]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040cc:	4a26      	ldr	r2, [pc, #152]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d4:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e0:	2301      	movs	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e4:	4b21      	ldr	r3, [pc, #132]	@ (800416c <HAL_RCC_OscConfig+0x508>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d118      	bne.n	8004122 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f0:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <HAL_RCC_OscConfig+0x508>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	@ (800416c <HAL_RCC_OscConfig+0x508>)
 80040f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fc:	f7fd fd4e 	bl	8001b9c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004104:	f7fd fd4a 	bl	8001b9c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1b2      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004116:	4b15      	ldr	r3, [pc, #84]	@ (800416c <HAL_RCC_OscConfig+0x508>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d108      	bne.n	800413c <HAL_RCC_OscConfig+0x4d8>
 800412a:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004130:	4a0d      	ldr	r2, [pc, #52]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800413a:	e029      	b.n	8004190 <HAL_RCC_OscConfig+0x52c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d115      	bne.n	8004170 <HAL_RCC_OscConfig+0x50c>
 8004144:	4b08      	ldr	r3, [pc, #32]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414a:	4a07      	ldr	r2, [pc, #28]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004154:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	4a03      	ldr	r2, [pc, #12]	@ (8004168 <HAL_RCC_OscConfig+0x504>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004164:	e014      	b.n	8004190 <HAL_RCC_OscConfig+0x52c>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
 800416c:	40007000 	.word	0x40007000
 8004170:	4b9a      	ldr	r3, [pc, #616]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004176:	4a99      	ldr	r2, [pc, #612]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004180:	4b96      	ldr	r3, [pc, #600]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	4a95      	ldr	r2, [pc, #596]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d016      	beq.n	80041c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fd fd00 	bl	8001b9c <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fd fcfc 	bl	8001b9c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e162      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	4b89      	ldr	r3, [pc, #548]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ed      	beq.n	80041a0 <HAL_RCC_OscConfig+0x53c>
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c6:	f7fd fce9 	bl	8001b9c <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041cc:	e00a      	b.n	80041e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd fce5 	bl	8001b9c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041dc:	4293      	cmp	r3, r2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e14b      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e4:	4b7d      	ldr	r3, [pc, #500]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ed      	bne.n	80041ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f2:	7ffb      	ldrb	r3, [r7, #31]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f8:	4b78      	ldr	r3, [pc, #480]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	4a77      	ldr	r2, [pc, #476]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004202:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d03c      	beq.n	800428a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01c      	beq.n	8004252 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004218:	4b70      	ldr	r3, [pc, #448]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 800421a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800421e:	4a6f      	ldr	r2, [pc, #444]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fd fcb8 	bl	8001b9c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004230:	f7fd fcb4 	bl	8001b9c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e11c      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004242:	4b66      	ldr	r3, [pc, #408]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004244:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ef      	beq.n	8004230 <HAL_RCC_OscConfig+0x5cc>
 8004250:	e01b      	b.n	800428a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004252:	4b62      	ldr	r3, [pc, #392]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004258:	4a60      	ldr	r2, [pc, #384]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004262:	f7fd fc9b 	bl	8001b9c <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800426a:	f7fd fc97 	bl	8001b9c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e0ff      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800427c:	4b57      	ldr	r3, [pc, #348]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 800427e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1ef      	bne.n	800426a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80f3 	beq.w	800447a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	2b02      	cmp	r3, #2
 800429a:	f040 80c9 	bne.w	8004430 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800429e:	4b4f      	ldr	r3, [pc, #316]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0203 	and.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d12c      	bne.n	800430c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	3b01      	subs	r3, #1
 80042be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d123      	bne.n	800430c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d11b      	bne.n	800430c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d113      	bne.n	800430c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	3b01      	subs	r3, #1
 80042f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d109      	bne.n	800430c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	3b01      	subs	r3, #1
 8004306:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d06b      	beq.n	80043e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d062      	beq.n	80043d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004312:	4b32      	ldr	r3, [pc, #200]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0ac      	b.n	800447c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004322:	4b2e      	ldr	r3, [pc, #184]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2d      	ldr	r2, [pc, #180]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800432c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800432e:	f7fd fc35 	bl	8001b9c <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004336:	f7fd fc31 	bl	8001b9c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e099      	b.n	800447c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004348:	4b24      	ldr	r3, [pc, #144]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004354:	4b21      	ldr	r3, [pc, #132]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	4b21      	ldr	r3, [pc, #132]	@ (80043e0 <HAL_RCC_OscConfig+0x77c>)
 800435a:	4013      	ands	r3, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004364:	3a01      	subs	r2, #1
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	4311      	orrs	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800436e:	0212      	lsls	r2, r2, #8
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004376:	0852      	lsrs	r2, r2, #1
 8004378:	3a01      	subs	r2, #1
 800437a:	0552      	lsls	r2, r2, #21
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	3a01      	subs	r2, #1
 8004386:	0652      	lsls	r2, r2, #25
 8004388:	4311      	orrs	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800438e:	06d2      	lsls	r2, r2, #27
 8004390:	430a      	orrs	r2, r1
 8004392:	4912      	ldr	r1, [pc, #72]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 8004394:	4313      	orrs	r3, r2
 8004396:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004398:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0f      	ldr	r2, [pc, #60]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 800439e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043a4:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a0c      	ldr	r2, [pc, #48]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80043aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043b0:	f7fd fbf4 	bl	8001b9c <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fd fbf0 	bl	8001b9c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e058      	b.n	800447c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ca:	4b04      	ldr	r3, [pc, #16]	@ (80043dc <HAL_RCC_OscConfig+0x778>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0f0      	beq.n	80043b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043d6:	e050      	b.n	800447a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e04f      	b.n	800447c <HAL_RCC_OscConfig+0x818>
 80043dc:	40021000 	.word	0x40021000
 80043e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e4:	4b27      	ldr	r3, [pc, #156]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d144      	bne.n	800447a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043f0:	4b24      	ldr	r3, [pc, #144]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a23      	ldr	r2, [pc, #140]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043fc:	4b21      	ldr	r3, [pc, #132]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a20      	ldr	r2, [pc, #128]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004406:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004408:	f7fd fbc8 	bl	8001b9c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fbc4 	bl	8001b9c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e02c      	b.n	800447c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	4b18      	ldr	r3, [pc, #96]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x7ac>
 800442e:	e024      	b.n	800447a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d01f      	beq.n	8004476 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004436:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a12      	ldr	r2, [pc, #72]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 800443c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fd fbab 	bl	8001b9c <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444a:	f7fd fba7 	bl	8001b9c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e00f      	b.n	800447c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445c:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004468:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	4905      	ldr	r1, [pc, #20]	@ (8004484 <HAL_RCC_OscConfig+0x820>)
 800446e:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_RCC_OscConfig+0x824>)
 8004470:	4013      	ands	r3, r2
 8004472:	60cb      	str	r3, [r1, #12]
 8004474:	e001      	b.n	800447a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	feeefffc 	.word	0xfeeefffc

0800448c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0e7      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a0:	4b75      	ldr	r3, [pc, #468]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d910      	bls.n	80044d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b72      	ldr	r3, [pc, #456]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 0207 	bic.w	r2, r3, #7
 80044b6:	4970      	ldr	r1, [pc, #448]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b6e      	ldr	r3, [pc, #440]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0cf      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d010      	beq.n	80044fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	4b66      	ldr	r3, [pc, #408]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d908      	bls.n	80044fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b63      	ldr	r3, [pc, #396]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4960      	ldr	r1, [pc, #384]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04c      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004512:	4b5a      	ldr	r3, [pc, #360]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d121      	bne.n	8004562 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e0a6      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452a:	4b54      	ldr	r3, [pc, #336]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d115      	bne.n	8004562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e09a      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004542:	4b4e      	ldr	r3, [pc, #312]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e08e      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004552:	4b4a      	ldr	r3, [pc, #296]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e086      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b46      	ldr	r3, [pc, #280]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4943      	ldr	r1, [pc, #268]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004574:	f7fd fb12 	bl	8001b9c <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fd fb0e 	bl	8001b9c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e06e      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b3a      	ldr	r3, [pc, #232]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d010      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	4b31      	ldr	r3, [pc, #196]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045bc:	429a      	cmp	r2, r3
 80045be:	d208      	bcs.n	80045d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b2e      	ldr	r3, [pc, #184]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	492b      	ldr	r1, [pc, #172]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d2:	4b29      	ldr	r3, [pc, #164]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d210      	bcs.n	8004602 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e0:	4b25      	ldr	r3, [pc, #148]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 0207 	bic.w	r2, r3, #7
 80045e8:	4923      	ldr	r1, [pc, #140]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f0:	4b21      	ldr	r3, [pc, #132]	@ (8004678 <HAL_RCC_ClockConfig+0x1ec>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e036      	b.n	8004670 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800460e:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4918      	ldr	r1, [pc, #96]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462c:	4b13      	ldr	r3, [pc, #76]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4910      	ldr	r1, [pc, #64]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004640:	f000 f824 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8004644:	4602      	mov	r2, r0
 8004646:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	490b      	ldr	r1, [pc, #44]	@ (8004680 <HAL_RCC_ClockConfig+0x1f4>)
 8004652:	5ccb      	ldrb	r3, [r1, r3]
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	4a09      	ldr	r2, [pc, #36]	@ (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 800465e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004660:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCC_ClockConfig+0x1fc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fd fa49 	bl	8001afc <HAL_InitTick>
 800466a:	4603      	mov	r3, r0
 800466c:	72fb      	strb	r3, [r7, #11]

  return status;
 800466e:	7afb      	ldrb	r3, [r7, #11]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40022000 	.word	0x40022000
 800467c:	40021000 	.word	0x40021000
 8004680:	08004f68 	.word	0x08004f68
 8004684:	20000004 	.word	0x20000004
 8004688:	20000008 	.word	0x20000008

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	@ 0x24
 8004690:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800469a:	4b3e      	ldr	r3, [pc, #248]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x34>
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d121      	bne.n	80046fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d11e      	bne.n	80046fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046c0:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046cc:	4b31      	ldr	r3, [pc, #196]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d2:	0a1b      	lsrs	r3, r3, #8
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e005      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	091b      	lsrs	r3, r3, #4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10d      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b04      	cmp	r3, #4
 8004702:	d102      	bne.n	800470a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004704:	4b25      	ldr	r3, [pc, #148]	@ (800479c <HAL_RCC_GetSysClockFreq+0x110>)
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e004      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d101      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004710:	4b23      	ldr	r3, [pc, #140]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004712:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d134      	bne.n	8004784 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800471a:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d003      	beq.n	8004732 <HAL_RCC_GetSysClockFreq+0xa6>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d003      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0xac>
 8004730:	e005      	b.n	800473e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004732:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <HAL_RCC_GetSysClockFreq+0x110>)
 8004734:	617b      	str	r3, [r7, #20]
      break;
 8004736:	e005      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004738:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800473a:	617b      	str	r3, [r7, #20]
      break;
 800473c:	e002      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	617b      	str	r3, [r7, #20]
      break;
 8004742:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004744:	4b13      	ldr	r3, [pc, #76]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	3301      	adds	r3, #1
 8004750:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004752:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	fb03 f202 	mul.w	r2, r3, r2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800476a:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x108>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	0e5b      	lsrs	r3, r3, #25
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	3301      	adds	r3, #1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004784:	69bb      	ldr	r3, [r7, #24]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3724      	adds	r7, #36	@ 0x24
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	08004f78 	.word	0x08004f78
 800479c:	00f42400 	.word	0x00f42400
 80047a0:	007a1200 	.word	0x007a1200

080047a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047b0:	4b2a      	ldr	r3, [pc, #168]	@ (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047bc:	f7ff f9ee 	bl	8003b9c <HAL_PWREx_GetVoltageRange>
 80047c0:	6178      	str	r0, [r7, #20]
 80047c2:	e014      	b.n	80047ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c8:	4a24      	ldr	r2, [pc, #144]	@ (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d0:	4b22      	ldr	r3, [pc, #136]	@ (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047dc:	f7ff f9de 	bl	8003b9c <HAL_PWREx_GetVoltageRange>
 80047e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	4a1d      	ldr	r2, [pc, #116]	@ (800485c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f4:	d10b      	bne.n	800480e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b80      	cmp	r3, #128	@ 0x80
 80047fa:	d919      	bls.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004800:	d902      	bls.n	8004808 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004802:	2302      	movs	r3, #2
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e013      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004808:	2301      	movs	r3, #1
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e010      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b80      	cmp	r3, #128	@ 0x80
 8004812:	d902      	bls.n	800481a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004814:	2303      	movs	r3, #3
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e00a      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b80      	cmp	r3, #128	@ 0x80
 800481e:	d102      	bne.n	8004826 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004820:	2302      	movs	r3, #2
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	e004      	b.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b70      	cmp	r3, #112	@ 0x70
 800482a:	d101      	bne.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800482c:	2301      	movs	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004830:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 0207 	bic.w	r2, r3, #7
 8004838:	4909      	ldr	r1, [pc, #36]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004840:	4b07      	ldr	r3, [pc, #28]	@ (8004860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	429a      	cmp	r2, r3
 800484c:	d001      	beq.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40021000 	.word	0x40021000
 8004860:	40022000 	.word	0x40022000

08004864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800486c:	2300      	movs	r3, #0
 800486e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004870:	2300      	movs	r3, #0
 8004872:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487c:	2b00      	cmp	r3, #0
 800487e:	d031      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004884:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004888:	d01a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800488a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800488e:	d814      	bhi.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004894:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004898:	d10f      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800489a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4a5c      	ldr	r2, [pc, #368]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048a6:	e00c      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fa22 	bl	8004cf8 <RCCEx_PLLSAI1_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	74fb      	strb	r3, [r7, #19]
      break;
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80048c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048c8:	4b51      	ldr	r3, [pc, #324]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	494e      	ldr	r1, [pc, #312]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048de:	e001      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 809e 	beq.w	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048f6:	4b46      	ldr	r3, [pc, #280]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004906:	2300      	movs	r3, #0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00d      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800490c:	4b40      	ldr	r3, [pc, #256]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004910:	4a3f      	ldr	r2, [pc, #252]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004916:	6593      	str	r3, [r2, #88]	@ 0x58
 8004918:	4b3d      	ldr	r3, [pc, #244]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800491a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004924:	2301      	movs	r3, #1
 8004926:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004928:	4b3a      	ldr	r3, [pc, #232]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a39      	ldr	r2, [pc, #228]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800492e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004934:	f7fd f932 	bl	8001b9c <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800493a:	e009      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493c:	f7fd f92e 	bl	8001b9c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d902      	bls.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	74fb      	strb	r3, [r7, #19]
        break;
 800494e:	e005      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004950:	4b30      	ldr	r3, [pc, #192]	@ (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ef      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d15a      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004962:	4b2b      	ldr	r3, [pc, #172]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004968:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01e      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	429a      	cmp	r2, r3
 800497c:	d019      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800497e:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004988:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800498a:	4b21      	ldr	r3, [pc, #132]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004990:	4a1f      	ldr	r2, [pc, #124]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004996:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800499a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049aa:	4a19      	ldr	r2, [pc, #100]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d016      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fd f8ee 	bl	8001b9c <HAL_GetTick>
 80049c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c2:	e00b      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c4:	f7fd f8ea 	bl	8001b9c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d902      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	74fb      	strb	r3, [r7, #19]
            break;
 80049da:	e006      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ec      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80049ea:	7cfb      	ldrb	r3, [r7, #19]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f0:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fe:	4904      	ldr	r1, [pc, #16]	@ (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a06:	e009      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a08:	7cfb      	ldrb	r3, [r7, #19]
 8004a0a:	74bb      	strb	r3, [r7, #18]
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1c:	7c7b      	ldrb	r3, [r7, #17]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a22:	4b8d      	ldr	r3, [pc, #564]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a26:	4a8c      	ldr	r2, [pc, #560]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a3a:	4b87      	ldr	r3, [pc, #540]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a40:	f023 0203 	bic.w	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4983      	ldr	r1, [pc, #524]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a5c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a62:	f023 020c 	bic.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	497b      	ldr	r1, [pc, #492]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a7e:	4b76      	ldr	r3, [pc, #472]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	4972      	ldr	r1, [pc, #456]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aa0:	4b6d      	ldr	r3, [pc, #436]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aae:	496a      	ldr	r1, [pc, #424]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ac2:	4b65      	ldr	r3, [pc, #404]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	4961      	ldr	r1, [pc, #388]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ae4:	4b5c      	ldr	r3, [pc, #368]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	4959      	ldr	r1, [pc, #356]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b06:	4b54      	ldr	r3, [pc, #336]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b14:	4950      	ldr	r1, [pc, #320]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b28:	4b4b      	ldr	r3, [pc, #300]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	4948      	ldr	r1, [pc, #288]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b4a:	4b43      	ldr	r3, [pc, #268]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b58:	493f      	ldr	r1, [pc, #252]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d028      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7a:	4937      	ldr	r1, [pc, #220]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b8c:	4b32      	ldr	r3, [pc, #200]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	4a31      	ldr	r2, [pc, #196]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b96:	60d3      	str	r3, [r2, #12]
 8004b98:	e011      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	2101      	movs	r1, #1
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f8a4 	bl	8004cf8 <RCCEx_PLLSAI1_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bb4:	7cfb      	ldrb	r3, [r7, #19]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d028      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bca:	4b23      	ldr	r3, [pc, #140]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd8:	491f      	ldr	r1, [pc, #124]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bea:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4a1a      	ldr	r2, [pc, #104]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bf4:	60d3      	str	r3, [r2, #12]
 8004bf6:	e011      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f875 	bl	8004cf8 <RCCEx_PLLSAI1_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c12:	7cfb      	ldrb	r3, [r7, #19]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004c18:	7cfb      	ldrb	r3, [r7, #19]
 8004c1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02b      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	4908      	ldr	r1, [pc, #32]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c46:	d109      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b03      	ldr	r3, [pc, #12]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a02      	ldr	r2, [pc, #8]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
 8004c54:	e014      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f843 	bl	8004cf8 <RCCEx_PLLSAI1_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01c      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c8c:	4b19      	ldr	r3, [pc, #100]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9a:	4916      	ldr	r1, [pc, #88]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004caa:	d10c      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f820 	bl	8004cf8 <RCCEx_PLLSAI1_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cd2:	4b08      	ldr	r3, [pc, #32]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	4904      	ldr	r1, [pc, #16]	@ (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ce8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000

08004cf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d06:	4b74      	ldr	r3, [pc, #464]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d12:	4b71      	ldr	r3, [pc, #452]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0203 	and.w	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d10d      	bne.n	8004d3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
       ||
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d2a:	4b6b      	ldr	r3, [pc, #428]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
       ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d047      	beq.n	8004dce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
 8004d42:	e044      	b.n	8004dce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d018      	beq.n	8004d7e <RCCEx_PLLSAI1_Config+0x86>
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d825      	bhi.n	8004d9c <RCCEx_PLLSAI1_Config+0xa4>
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d002      	beq.n	8004d5a <RCCEx_PLLSAI1_Config+0x62>
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d009      	beq.n	8004d6c <RCCEx_PLLSAI1_Config+0x74>
 8004d58:	e020      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11d      	bne.n	8004da2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6a:	e01a      	b.n	8004da2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d116      	bne.n	8004da6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7c:	e013      	b.n	8004da6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d7e:	4b56      	ldr	r3, [pc, #344]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d8a:	4b53      	ldr	r3, [pc, #332]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d9a:	e006      	b.n	8004daa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e004      	b.n	8004dac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004da2:	bf00      	nop
 8004da4:	e002      	b.n	8004dac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004daa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004db2:	4b49      	ldr	r3, [pc, #292]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	4943      	ldr	r1, [pc, #268]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d17c      	bne.n	8004ece <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004dd4:	4b40      	ldr	r3, [pc, #256]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de0:	f7fc fedc 	bl	8001b9c <HAL_GetTick>
 8004de4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004de6:	e009      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004de8:	f7fc fed8 	bl	8001b9c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d902      	bls.n	8004dfc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dfa:	e005      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dfc:	4b36      	ldr	r3, [pc, #216]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ef      	bne.n	8004de8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d15f      	bne.n	8004ece <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d110      	bne.n	8004e36 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e14:	4b30      	ldr	r3, [pc, #192]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004e1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6892      	ldr	r2, [r2, #8]
 8004e24:	0211      	lsls	r1, r2, #8
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68d2      	ldr	r2, [r2, #12]
 8004e2a:	06d2      	lsls	r2, r2, #27
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	492a      	ldr	r1, [pc, #168]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	610b      	str	r3, [r1, #16]
 8004e34:	e027      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d112      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e3c:	4b26      	ldr	r3, [pc, #152]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6892      	ldr	r2, [r2, #8]
 8004e4c:	0211      	lsls	r1, r2, #8
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6912      	ldr	r2, [r2, #16]
 8004e52:	0852      	lsrs	r2, r2, #1
 8004e54:	3a01      	subs	r2, #1
 8004e56:	0552      	lsls	r2, r2, #21
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	491f      	ldr	r1, [pc, #124]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	610b      	str	r3, [r1, #16]
 8004e60:	e011      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e62:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6892      	ldr	r2, [r2, #8]
 8004e72:	0211      	lsls	r1, r2, #8
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6952      	ldr	r2, [r2, #20]
 8004e78:	0852      	lsrs	r2, r2, #1
 8004e7a:	3a01      	subs	r2, #1
 8004e7c:	0652      	lsls	r2, r2, #25
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	4915      	ldr	r1, [pc, #84]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e86:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a13      	ldr	r2, [pc, #76]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fc fe83 	bl	8001b9c <HAL_GetTick>
 8004e96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e98:	e009      	b.n	8004eae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e9a:	f7fc fe7f 	bl	8001b9c <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d902      	bls.n	8004eae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	73fb      	strb	r3, [r7, #15]
          break;
 8004eac:	e005      	b.n	8004eba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ef      	beq.n	8004e9a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4903      	ldr	r1, [pc, #12]	@ (8004ed8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40021000 	.word	0x40021000

08004edc <memset>:
 8004edc:	4402      	add	r2, r0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <__libc_init_array>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4d0d      	ldr	r5, [pc, #52]	@ (8004f24 <__libc_init_array+0x38>)
 8004ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8004f28 <__libc_init_array+0x3c>)
 8004ef2:	1b64      	subs	r4, r4, r5
 8004ef4:	10a4      	asrs	r4, r4, #2
 8004ef6:	2600      	movs	r6, #0
 8004ef8:	42a6      	cmp	r6, r4
 8004efa:	d109      	bne.n	8004f10 <__libc_init_array+0x24>
 8004efc:	4d0b      	ldr	r5, [pc, #44]	@ (8004f2c <__libc_init_array+0x40>)
 8004efe:	4c0c      	ldr	r4, [pc, #48]	@ (8004f30 <__libc_init_array+0x44>)
 8004f00:	f000 f826 	bl	8004f50 <_init>
 8004f04:	1b64      	subs	r4, r4, r5
 8004f06:	10a4      	asrs	r4, r4, #2
 8004f08:	2600      	movs	r6, #0
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	d105      	bne.n	8004f1a <__libc_init_array+0x2e>
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f14:	4798      	blx	r3
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7ee      	b.n	8004ef8 <__libc_init_array+0xc>
 8004f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1e:	4798      	blx	r3
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7f2      	b.n	8004f0a <__libc_init_array+0x1e>
 8004f24:	08004fa8 	.word	0x08004fa8
 8004f28:	08004fa8 	.word	0x08004fa8
 8004f2c:	08004fa8 	.word	0x08004fa8
 8004f30:	08004fac 	.word	0x08004fac

08004f34 <memcpy>:
 8004f34:	440a      	add	r2, r1
 8004f36:	4291      	cmp	r1, r2
 8004f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f3c:	d100      	bne.n	8004f40 <memcpy+0xc>
 8004f3e:	4770      	bx	lr
 8004f40:	b510      	push	{r4, lr}
 8004f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	d1f9      	bne.n	8004f42 <memcpy+0xe>
 8004f4e:	bd10      	pop	{r4, pc}

08004f50 <_init>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr

08004f5c <_fini>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr
