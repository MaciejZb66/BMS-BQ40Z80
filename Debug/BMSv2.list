
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004454  08004454  00005454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004494  08004494  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004494  08004494  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004494  08004494  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004494  08004494  00005494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004498  08004498  00005498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800449c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000010  080044ac  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080044ac  00006180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf18  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002720  00000000  00000000  00012f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00015678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000956  00000000  00000000  000162e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d51  00000000  00000000  00016c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f64  00000000  00000000  0003998f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca6da  00000000  00000000  0004a8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114fcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  00115010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00118040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800443c 	.word	0x0800443c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	0800443c 	.word	0x0800443c

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
//    bq_i2c = i2c;
    if(i2c == &hi2c1){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a2d      	ldr	r2, [pc, #180]	@ (800028c <BQ_Init+0xc0>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d10b      	bne.n	80001f4 <BQ_Init+0x28>
    	__HAL_RCC_I2C1_CLK_ENABLE();
 80001dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000290 <BQ_Init+0xc4>)
 80001de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000290 <BQ_Init+0xc4>)
 80001e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80001e8:	4b29      	ldr	r3, [pc, #164]	@ (8000290 <BQ_Init+0xc4>)
 80001ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f0:	60bb      	str	r3, [r7, #8]
 80001f2:	68bb      	ldr	r3, [r7, #8]
    }
//    ("[BQ] Started", 12);
//    if (USE_SCANNER == 1)
//    {
#ifdef USE_SCANNER
        HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001f4:	4b27      	ldr	r3, [pc, #156]	@ (8000294 <BQ_Init+0xc8>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	b299      	uxth	r1, r3
 80001fc:	2364      	movs	r3, #100	@ 0x64
 80001fe:	2203      	movs	r2, #3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f001 fd4d 	bl	8001ca0 <HAL_I2C_IsDeviceReady>
 8000206:	4603      	mov	r3, r0
 8000208:	73fb      	strb	r3, [r7, #15]
        while (ret != HAL_OK)
 800020a:	e00e      	b.n	800022a <BQ_Init+0x5e>
        {
//            ("[BQ] device not founded", 23);
            ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 800020c:	4b21      	ldr	r3, [pc, #132]	@ (8000294 <BQ_Init+0xc8>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	005b      	lsls	r3, r3, #1
 8000212:	b299      	uxth	r1, r3
 8000214:	2364      	movs	r3, #100	@ 0x64
 8000216:	2203      	movs	r2, #3
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f001 fd41 	bl	8001ca0 <HAL_I2C_IsDeviceReady>
 800021e:	4603      	mov	r3, r0
 8000220:	73fb      	strb	r3, [r7, #15]
            HAL_Delay(1000);
 8000222:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000226:	f000 ff7b 	bl	8001120 <HAL_Delay>
        while (ret != HAL_OK)
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d1ed      	bne.n	800020c <BQ_Init+0x40>
#endif
//    }

    

    HAL_Delay(1500);
 8000230:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000234:	f000 ff74 	bl	8001120 <HAL_Delay>
    BQAction_UpdateData(i2c);
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f9c7 	bl	80005cc <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(i2c);
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f000 f994 	bl	800056c <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(i2c, false);
 8000244:	2100      	movs	r1, #0
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f000 f912 	bl	8000470 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(i2c, false);
 800024c:	2100      	movs	r1, #0
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f000 f923 	bl	800049a <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(i2c, false);
 8000254:	2100      	movs	r1, #0
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 f934 	bl	80004c4 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(i2c, true);
 800025c:	2101      	movs	r1, #1
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f000 f945 	bl	80004ee <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(i2c, true);
 8000264:	2101      	movs	r1, #1
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f000 f956 	bl	8000518 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(i2c, true);
 800026c:	2101      	movs	r1, #1
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f000 f967 	bl	8000542 <BQAction_SetManufacturingLF>
    BQAction_SetLed(i2c, false);
 8000274:	2100      	movs	r1, #0
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f000 f8e5 	bl	8000446 <BQAction_SetLed>

    BQAction_UpdateData(i2c);
 800027c:	6878      	ldr	r0, [r7, #4]
 800027e:	f000 f9a5 	bl	80005cc <BQAction_UpdateData>
    //BQ_ForceUpdateFlash();

    //BQ_BoundaryCellVoltage voltages = BQ_GetBoundaryCellVoltage();

//    ("[BQ] initialized", 16);
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000128 	.word	0x20000128
 8000290:	40021000 	.word	0x40021000
 8000294:	20000000 	.word	0x20000000

08000298 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(I2C_HandleTypeDef *bq_i2c, uint16_t command)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af02      	add	r7, sp, #8
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002a4:	2344      	movs	r3, #68	@ 0x44
 80002a6:	733b      	strb	r3, [r7, #12]
 80002a8:	2302      	movs	r3, #2
 80002aa:	737b      	strb	r3, [r7, #13]
 80002ac:	887b      	ldrh	r3, [r7, #2]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	73bb      	strb	r3, [r7, #14]
 80002b2:	887b      	ldrh	r3, [r7, #2]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <BQ_WriteMABlockCommand+0x44>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	b299      	uxth	r1, r3
 80002c4:	f107 020c 	add.w	r2, r7, #12
 80002c8:	2364      	movs	r3, #100	@ 0x64
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2304      	movs	r3, #4
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f001 fad8 	bl	8001884 <HAL_I2C_Master_Transmit>
}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000000 	.word	0x20000000

080002e0 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(I2C_HandleTypeDef *bq_i2c, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b092      	sub	sp, #72	@ 0x48
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	607a      	str	r2, [r7, #4]
 80002ea:	461a      	mov	r2, r3
 80002ec:	460b      	mov	r3, r1
 80002ee:	817b      	strh	r3, [r7, #10]
 80002f0:	4613      	mov	r3, r2
 80002f2:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002f4:	2344      	movs	r3, #68	@ 0x44
 80002f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002fa:	2302      	movs	r3, #2
 80002fc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000300:	897b      	ldrh	r3, [r7, #10]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8000308:	897b      	ldrh	r3, [r7, #10]
 800030a:	0a1b      	lsrs	r3, r3, #8
 800030c:	b29b      	uxth	r3, r3
 800030e:	b2db      	uxtb	r3, r3
 8000310:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000314:	4b26      	ldr	r3, [pc, #152]	@ (80003b0 <BQ_ReadMABlockCommand+0xd0>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	b299      	uxth	r1, r3
 800031c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000320:	2364      	movs	r3, #100	@ 0x64
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2304      	movs	r3, #4
 8000326:	68f8      	ldr	r0, [r7, #12]
 8000328:	f001 faac 	bl	8001884 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 800032c:	2344      	movs	r3, #68	@ 0x44
 800032e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000332:	7a7b      	ldrb	r3, [r7, #9]
 8000334:	3302      	adds	r3, #2
 8000336:	b2db      	uxtb	r3, r3
 8000338:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 800033c:	4b1c      	ldr	r3, [pc, #112]	@ (80003b0 <BQ_ReadMABlockCommand+0xd0>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	b299      	uxth	r1, r3
 8000344:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000348:	2364      	movs	r3, #100	@ 0x64
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2302      	movs	r3, #2
 800034e:	68f8      	ldr	r0, [r7, #12]
 8000350:	f001 fa98 	bl	8001884 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
 8000358:	f107 0314 	add.w	r3, r7, #20
 800035c:	221f      	movs	r2, #31
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f004 f83f 	bl	80043e4 <memset>
    HAL_I2C_Master_Receive(bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <BQ_ReadMABlockCommand+0xd0>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	005b      	lsls	r3, r3, #1
 800036c:	b299      	uxth	r1, r3
 800036e:	f107 0210 	add.w	r2, r7, #16
 8000372:	2364      	movs	r3, #100	@ 0x64
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2323      	movs	r3, #35	@ 0x23
 8000378:	68f8      	ldr	r0, [r7, #12]
 800037a:	f001 fb9b 	bl	8001ab4 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 800037e:	2300      	movs	r3, #0
 8000380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000382:	e00c      	b.n	800039e <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000386:	1cda      	adds	r2, r3, #3
 8000388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800038a:	6879      	ldr	r1, [r7, #4]
 800038c:	440b      	add	r3, r1
 800038e:	3240      	adds	r2, #64	@ 0x40
 8000390:	443a      	add	r2, r7
 8000392:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000396:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800039a:	3301      	adds	r3, #1
 800039c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800039e:	7a7b      	ldrb	r3, [r7, #9]
 80003a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80003a2:	429a      	cmp	r2, r3
 80003a4:	dbee      	blt.n	8000384 <BQ_ReadMABlockCommand+0xa4>
    }
}
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	3740      	adds	r7, #64	@ 0x40
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000000 	.word	0x20000000

080003b4 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(I2C_HandleTypeDef *bq_i2c, uint16_t command)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	460b      	mov	r3, r1
 80003be:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(bq_i2c, command, buf, 2);
 80003c0:	f107 020c 	add.w	r2, r7, #12
 80003c4:	8879      	ldrh	r1, [r7, #2]
 80003c6:	2302      	movs	r3, #2
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ff89 	bl	80002e0 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003d2:	7b3b      	ldrb	r3, [r7, #12]
 80003d4:	461a      	mov	r2, r3
 80003d6:	89fb      	ldrh	r3, [r7, #14]
 80003d8:	4313      	orrs	r3, r2
 80003da:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003dc:	7b7b      	ldrb	r3, [r7, #13]
 80003de:	021b      	lsls	r3, r3, #8
 80003e0:	b21a      	sxth	r2, r3
 80003e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	b21b      	sxth	r3, r3
 80003ea:	81fb      	strh	r3, [r7, #14]

    return result;
 80003ec:	89fb      	ldrh	r3, [r7, #14]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(I2C_HandleTypeDef *bq_i2c, uint16_t command)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b084      	sub	sp, #16
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	460b      	mov	r3, r1
 8000400:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(bq_i2c, command, buf, 4);
 8000402:	f107 0208 	add.w	r2, r7, #8
 8000406:	8879      	ldrh	r1, [r7, #2]
 8000408:	2304      	movs	r3, #4
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ff68 	bl	80002e0 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 8000414:	7a3b      	ldrb	r3, [r7, #8]
 8000416:	461a      	mov	r2, r3
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	4313      	orrs	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 800041e:	7a7b      	ldrb	r3, [r7, #9]
 8000420:	021b      	lsls	r3, r3, #8
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	4313      	orrs	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000428:	7abb      	ldrb	r3, [r7, #10]
 800042a:	041b      	lsls	r3, r3, #16
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	4313      	orrs	r3, r2
 8000430:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	061b      	lsls	r3, r3, #24
 8000436:	68fa      	ldr	r2, [r7, #12]
 8000438:	4313      	orrs	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]

    return result;
 800043c:	68fb      	ldr	r3, [r7, #12]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(I2C_HandleTypeDef *bq_i2c, bool active)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	460b      	mov	r3, r1
 8000450:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsLedEnabled() != active)
 8000452:	f000 fa9d 	bl	8000990 <BQ_IsLedEnabled>
 8000456:	4603      	mov	r3, r0
 8000458:	461a      	mov	r2, r3
 800045a:	78fb      	ldrb	r3, [r7, #3]
 800045c:	4293      	cmp	r3, r2
 800045e:	d003      	beq.n	8000468 <BQAction_SetLed+0x22>
    {
        BQ_WriteMABlockCommand(bq_i2c, BQ40Z80_MFA_LED_TOGGLE);
 8000460:	212b      	movs	r1, #43	@ 0x2b
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ff18 	bl	8000298 <BQ_WriteMABlockCommand>
    }
}
 8000468:	bf00      	nop
 800046a:	3708      	adds	r7, #8
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(I2C_HandleTypeDef *bq_i2c, bool active)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	460b      	mov	r3, r1
 800047a:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingAllFetEnabled() != active)
 800047c:	f000 fa38 	bl	80008f0 <BQ_IsManufacturingAllFetEnabled>
 8000480:	4603      	mov	r3, r0
 8000482:	461a      	mov	r2, r3
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	4293      	cmp	r3, r2
 8000488:	d003      	beq.n	8000492 <BQAction_SetManufacturingAllFet+0x22>
    {
        BQ_WriteMABlockCommand(bq_i2c, BQ40Z80_MFA_FET_CONTROL);
 800048a:	2122      	movs	r1, #34	@ 0x22
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ff03 	bl	8000298 <BQ_WriteMABlockCommand>
    }
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(I2C_HandleTypeDef *bq_i2c, bool active)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	460b      	mov	r3, r1
 80004a4:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingFuseEnabled() != active)
 80004a6:	f000 fa13 	bl	80008d0 <BQ_IsManufacturingFuseEnabled>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d003      	beq.n	80004bc <BQAction_SetManufacturingFuse+0x22>
    {
        BQ_WriteMABlockCommand(bq_i2c, BQ40Z80_MFA_FUSE);
 80004b4:	2126      	movs	r1, #38	@ 0x26
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff feee 	bl	8000298 <BQ_WriteMABlockCommand>
    }
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(I2C_HandleTypeDef *bq_i2c, bool active)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingCalibrationEnabled() != active)
 80004d0:	f000 fa2e 	bl	8000930 <BQ_IsManufacturingCalibrationEnabled>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461a      	mov	r2, r3
 80004d8:	78fb      	ldrb	r3, [r7, #3]
 80004da:	4293      	cmp	r3, r2
 80004dc:	d003      	beq.n	80004e6 <BQAction_SetCalibration+0x22>
    {
        BQ_WriteMABlockCommand(bq_i2c, BQ40Z80_MFA_CALIBRATION_MODE);
 80004de:	212d      	movs	r1, #45	@ 0x2d
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff fed9 	bl	8000298 <BQ_WriteMABlockCommand>
    }
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(I2C_HandleTypeDef *bq_i2c, bool active)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b082      	sub	sp, #8
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	460b      	mov	r3, r1
 80004f8:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingGaugingEnabled() != active)
 80004fa:	f000 fa09 	bl	8000910 <BQ_IsManufacturingGaugingEnabled>
 80004fe:	4603      	mov	r3, r0
 8000500:	461a      	mov	r2, r3
 8000502:	78fb      	ldrb	r3, [r7, #3]
 8000504:	4293      	cmp	r3, r2
 8000506:	d003      	beq.n	8000510 <BQAction_SetManufacturingGauging+0x22>
    {
        BQ_WriteMABlockCommand(bq_i2c, BQ40Z80_MFA_GAUGING);
 8000508:	2121      	movs	r1, #33	@ 0x21
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff fec4 	bl	8000298 <BQ_WriteMABlockCommand>
    }
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(I2C_HandleTypeDef *bq_i2c, bool active)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingPermanentFailureEnabled() != active)
 8000524:	f000 fa14 	bl	8000950 <BQ_IsManufacturingPermanentFailureEnabled>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	4293      	cmp	r3, r2
 8000530:	d003      	beq.n	800053a <BQAction_SetManufacturingPF+0x22>
    {
        BQ_WriteMABlockCommand(bq_i2c, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000532:	2124      	movs	r1, #36	@ 0x24
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff feaf 	bl	8000298 <BQ_WriteMABlockCommand>
    }
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(I2C_HandleTypeDef *bq_i2c, bool active)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	460b      	mov	r3, r1
 800054c:	70fb      	strb	r3, [r7, #3]
    if (BQ_IsManufacturingLifetimeEnabled() != active)
 800054e:	f000 fa0f 	bl	8000970 <BQ_IsManufacturingLifetimeEnabled>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	4293      	cmp	r3, r2
 800055a:	d003      	beq.n	8000564 <BQAction_SetManufacturingLF+0x22>
    {
        BQ_WriteMABlockCommand(bq_i2c, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 800055c:	2123      	movs	r1, #35	@ 0x23
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff fe9a 	bl	8000298 <BQ_WriteMABlockCommand>
    }
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(I2C_HandleTypeDef *bq_i2c)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
//    bool isSealed = false;

    BQAction_UpdateOpStatus(bq_i2c);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f000 f891 	bl	800069c <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode();
 800057a:	f000 f981 	bl	8000880 <BQ_GetSecurityMode>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000582:	e018      	b.n	80005b6 <BQAction_TryUnsealedDevice+0x4a>
    {
//        isSealed = true;
//        ("[BQ] Security mode - Sealed", 27);

        BQ_WriteMABlockCommand(bq_i2c, 0x0414);
 8000584:	f240 4114 	movw	r1, #1044	@ 0x414
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff fe85 	bl	8000298 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 800058e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000592:	f000 fdc5 	bl	8001120 <HAL_Delay>
        BQ_WriteMABlockCommand(bq_i2c, 0x3672);
 8000596:	f243 6172 	movw	r1, #13938	@ 0x3672
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f7ff fe7c 	bl	8000298 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 80005a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005a4:	f000 fdbc 	bl	8001120 <HAL_Delay>

        BQAction_UpdateOpStatus(bq_i2c);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f877 	bl	800069c <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode();
 80005ae:	f000 f967 	bl	8000880 <BQ_GetSecurityMode>
 80005b2:	4603      	mov	r3, r0
 80005b4:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e3      	beq.n	8000584 <BQAction_TryUnsealedDevice+0x18>
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d0e0      	beq.n	8000584 <BQAction_TryUnsealedDevice+0x18>
    // print only if the device was previously sealeded
//    if (isSealed){
//        ("[BQ] successfully unsealed", 27);
//    }

}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(I2C_HandleTypeDef *bq_i2c)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	@ 0x30
 80005d0:	af04      	add	r7, sp, #16
 80005d2:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(bq_i2c, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80005d4:	2157      	movs	r1, #87	@ 0x57
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff feec 	bl	80003b4 <BQ_ReadCommandAsShort>
 80005dc:	4603      	mov	r3, r0
 80005de:	83fb      	strh	r3, [r7, #30]
    uint32_t chargeStatus = BQ_ReadCommandAsInt(bq_i2c, BQ40Z80_MFA_CHARGING_STATUS);
 80005e0:	2155      	movs	r1, #85	@ 0x55
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ff07 	bl	80003f6 <BQ_ReadCommandAsInt>
 80005e8:	61b8      	str	r0, [r7, #24]
    uint32_t operationStatus = BQ_ReadCommandAsInt(bq_i2c, BQ40Z80_MFA_OPERATION_STATUS);
 80005ea:	2154      	movs	r1, #84	@ 0x54
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff ff02 	bl	80003f6 <BQ_ReadCommandAsInt>
 80005f2:	6178      	str	r0, [r7, #20]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(bq_i2c, BQ40Z80_MFA_GAUGING_STATUS);
 80005f4:	2156      	movs	r1, #86	@ 0x56
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fefd 	bl	80003f6 <BQ_ReadCommandAsInt>
 80005fc:	6138      	str	r0, [r7, #16]

    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode);
 80005fe:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <BQAction_UpdateData+0xbc>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2203      	movs	r2, #3
 8000604:	4619      	mov	r1, r3
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fb1a 	bl	8000c40 <I2CHelper_ReadRegisterAsShort>
 800060c:	4603      	mov	r3, r0
 800060e:	81fb      	strh	r3, [r7, #14]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <BQAction_UpdateData+0xbc>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2216      	movs	r2, #22
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 fb11 	bl	8000c40 <I2CHelper_ReadRegisterAsShort>
 800061e:	4603      	mov	r3, r0
 8000620:	81bb      	strh	r3, [r7, #12]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <BQAction_UpdateData+0xbc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2248      	movs	r2, #72	@ 0x48
 8000628:	4619      	mov	r1, r3
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 fb2d 	bl	8000c8a <I2CHelper_ReadRegisterAsChar>
 8000630:	4603      	mov	r3, r0
 8000632:	72fb      	strb	r3, [r7, #11]

    BQ_ReadMABlockCommand(bq_i2c, BQ40Z80_MFA_DA_STATUS_1, BQ_daStatus1, 32);
 8000634:	2320      	movs	r3, #32
 8000636:	4a15      	ldr	r2, [pc, #84]	@ (800068c <BQAction_UpdateData+0xc0>)
 8000638:	2171      	movs	r1, #113	@ 0x71
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff fe50 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(bq_i2c, BQ40Z80_MFA_DA_STATUS_2, BQ_daStatus2, 16);
 8000640:	2310      	movs	r3, #16
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <BQAction_UpdateData+0xc4>)
 8000644:	2172      	movs	r1, #114	@ 0x72
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff fe4a 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(bq_i2c, BQ40Z80_MFA_DA_STATUS_3, BQ_daStatus3, 18);
 800064c:	2312      	movs	r3, #18
 800064e:	4a11      	ldr	r2, [pc, #68]	@ (8000694 <BQAction_UpdateData+0xc8>)
 8000650:	217b      	movs	r1, #123	@ 0x7b
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff fe44 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(bq_i2c, BQ40Z80_MFA_OUTPUT_CADC_CAL, BQ_outCal, 32);
 8000658:	2320      	movs	r3, #32
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <BQAction_UpdateData+0xcc>)
 800065c:	f24f 0181 	movw	r1, #61569	@ 0xf081
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fe3d 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags(operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 8000666:	7af8      	ldrb	r0, [r7, #11]
 8000668:	89ba      	ldrh	r2, [r7, #12]
 800066a:	89f9      	ldrh	r1, [r7, #14]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	9302      	str	r3, [sp, #8]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	8bfb      	ldrh	r3, [r7, #30]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4603      	mov	r3, r0
 800067a:	6978      	ldr	r0, [r7, #20]
 800067c:	f000 f85e 	bl	800073c <BQ_ParseAllFlags>
}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	200000c4 	.word	0x200000c4
 8000690:	200000e4 	.word	0x200000e4
 8000694:	200000f4 	.word	0x200000f4
 8000698:	20000108 	.word	0x20000108

0800069c <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(I2C_HandleTypeDef *bq_i2c)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(bq_i2c, BQ40Z80_MFA_DA_STATUS_1, BQ_daStatus1, 32);
 80006a4:	2320      	movs	r3, #32
 80006a6:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <BQAction_UpdateOpStatus+0x3c>)
 80006a8:	2171      	movs	r1, #113	@ 0x71
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff fe18 	bl	80002e0 <BQ_ReadMABlockCommand>
    BQ_ParseOperationStatus(BQ_ReadCommandAsInt(bq_i2c, BQ40Z80_MFA_OPERATION_STATUS));
 80006b0:	2154      	movs	r1, #84	@ 0x54
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fe9f 	bl	80003f6 <BQ_ReadCommandAsInt>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f868 	bl	8000790 <BQ_ParseOperationStatus>
    BQ_ParseManufacturingStatus(BQ_ReadCommandAsShort(bq_i2c, BQ40Z80_MFA_MANUFACTURING_STATUS));
 80006c0:	2157      	movs	r1, #87	@ 0x57
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff fe76 	bl	80003b4 <BQ_ReadCommandAsShort>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f8b4 	bl	8000838 <BQ_ParseManufacturingStatus>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000c4 	.word	0x200000c4

080006dc <decimalToBinary>:
 * @param value decimal value
 * @param array array to write
 * @param count array size
 */
void decimalToBinary(uint32_t value, uint8_t *array, uint8_t count)
{
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	4613      	mov	r3, r2
 80006e8:	71fb      	strb	r3, [r7, #7]
	uint8_t currentCount = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 80006ee:	e00e      	b.n	800070e <decimalToBinary+0x32>
	{
		array[currentCount] = value % 2;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	440b      	add	r3, r1
 80006fa:	f002 0201 	and.w	r2, r2, #1
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	701a      	strb	r2, [r3, #0]
		value /= 2;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
		currentCount++;
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	3301      	adds	r3, #1
 800070c:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1ed      	bne.n	80006f0 <decimalToBinary+0x14>
	}

	while (currentCount < count)
 8000714:	e007      	b.n	8000726 <decimalToBinary+0x4a>
	{
		array[currentCount] = 0;
 8000716:	7dfb      	ldrb	r3, [r7, #23]
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	4413      	add	r3, r2
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
		currentCount++;
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	3301      	adds	r3, #1
 8000724:	75fb      	strb	r3, [r7, #23]
	while (currentCount < count)
 8000726:	7dfa      	ldrb	r2, [r7, #23]
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	429a      	cmp	r2, r3
 800072c:	d3f3      	bcc.n	8000716 <decimalToBinary+0x3a>
	}
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	371c      	adds	r7, #28
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <BQ_ParseAllFlags>:
					  uint16_t batteryMode,
					  uint8_t gpio,
					  uint16_t manStatus,
					  uint32_t chargeStatus,
					  uint32_t gaugStatus)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	4608      	mov	r0, r1
 8000746:	4611      	mov	r1, r2
 8000748:	461a      	mov	r2, r3
 800074a:	4603      	mov	r3, r0
 800074c:	817b      	strh	r3, [r7, #10]
 800074e:	460b      	mov	r3, r1
 8000750:	813b      	strh	r3, [r7, #8]
 8000752:	4613      	mov	r3, r2
 8000754:	71fb      	strb	r3, [r7, #7]
	BQ_ParseOperationStatus(opStatus);
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 f81a 	bl	8000790 <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(chargeStatus);
 800075c:	69f8      	ldr	r0, [r7, #28]
 800075e:	f000 f827 	bl	80007b0 <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(gaugStatus);
 8000762:	6a38      	ldr	r0, [r7, #32]
 8000764:	f000 f834 	bl	80007d0 <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(batteryStatus);
 8000768:	897b      	ldrh	r3, [r7, #10]
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f840 	bl	80007f0 <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(manStatus);
 8000770:	8b3b      	ldrh	r3, [r7, #24]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f860 	bl	8000838 <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(batteryMode);
 8000778:	893b      	ldrh	r3, [r7, #8]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f84a 	bl	8000814 <BQ_ParseBatteryMode>
	BQ_ParseGpio(gpio);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f86a 	bl	800085c <BQ_ParseGpio>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(uint32_t raw)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_opStatus
	decimalToBinary(raw, BQ_opStatus, 32);
 8000798:	2220      	movs	r2, #32
 800079a:	4904      	ldr	r1, [pc, #16]	@ (80007ac <BQ_ParseOperationStatus+0x1c>)
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff9d 	bl	80006dc <decimalToBinary>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000002c 	.word	0x2000002c

080007b0 <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(uint32_t raw)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_chargeStatus
	decimalToBinary(raw, BQ_chargeStatus, 32);
 80007b8:	2220      	movs	r2, #32
 80007ba:	4904      	ldr	r1, [pc, #16]	@ (80007cc <BQ_ParseChargeStatus+0x1c>)
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff8d 	bl	80006dc <decimalToBinary>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000004c 	.word	0x2000004c

080007d0 <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(uint32_t raw)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	//convert to binary array and save in BQ_gaugeStatus
	decimalToBinary(raw, BQ_gaugeStatus, 32);
 80007d8:	2220      	movs	r2, #32
 80007da:	4904      	ldr	r1, [pc, #16]	@ (80007ec <BQ_ParseGaugeStatus+0x1c>)
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff7d 	bl	80006dc <decimalToBinary>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000006c 	.word	0x2000006c

080007f0 <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(uint16_t raw)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
	//convert to binary array and save in BQ_batteryStatus
	decimalToBinary(raw, BQ_batteryStatus, 16);
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	2210      	movs	r2, #16
 80007fe:	4904      	ldr	r1, [pc, #16]	@ (8000810 <BQ_ParseBatteryStatus+0x20>)
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff6b 	bl	80006dc <decimalToBinary>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000008c 	.word	0x2000008c

08000814 <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(uint16_t raw)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	//convert to binary array and save in BQ_batteryMode
	decimalToBinary(raw, BQ_batteryMode, 16);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	2210      	movs	r2, #16
 8000822:	4904      	ldr	r1, [pc, #16]	@ (8000834 <BQ_ParseBatteryMode+0x20>)
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff59 	bl	80006dc <decimalToBinary>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000009c 	.word	0x2000009c

08000838 <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(uint16_t raw)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
	decimalToBinary(raw, BQ_manufacturingStatus, 16);
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	2210      	movs	r2, #16
 8000846:	4904      	ldr	r1, [pc, #16]	@ (8000858 <BQ_ParseManufacturingStatus+0x20>)
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff47 	bl	80006dc <decimalToBinary>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000ac 	.word	0x200000ac

0800085c <BQ_ParseGpio>:

void BQ_ParseGpio(uint8_t raw)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	//convert to binary array and save in BQ_gpio
	decimalToBinary(raw, BQ_gpio, 8);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2208      	movs	r2, #8
 800086a:	4904      	ldr	r1, [pc, #16]	@ (800087c <BQ_ParseGpio+0x20>)
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff35 	bl	80006dc <decimalToBinary>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000bc 	.word	0x200000bc

08000880 <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
    if (BQ_opStatus[9] && BQ_opStatus[8]){
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <BQ_GetSecurityMode+0x4c>)
 8000886:	7a5b      	ldrb	r3, [r3, #9]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d005      	beq.n	8000898 <BQ_GetSecurityMode+0x18>
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <BQ_GetSecurityMode+0x4c>)
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <BQ_GetSecurityMode+0x18>
        return SEALED;//11
 8000894:	2300      	movs	r3, #0
 8000896:	e014      	b.n	80008c2 <BQ_GetSecurityMode+0x42>
    }else if (BQ_opStatus[9] && !BQ_opStatus[8]){
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <BQ_GetSecurityMode+0x4c>)
 800089a:	7a5b      	ldrb	r3, [r3, #9]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <BQ_GetSecurityMode+0x2c>
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <BQ_GetSecurityMode+0x4c>)
 80008a2:	7a1b      	ldrb	r3, [r3, #8]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <BQ_GetSecurityMode+0x2c>
        return UNSEALED;//10
 80008a8:	2301      	movs	r3, #1
 80008aa:	e00a      	b.n	80008c2 <BQ_GetSecurityMode+0x42>
    }else if (!BQ_opStatus[9] && BQ_opStatus[8]){
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <BQ_GetSecurityMode+0x4c>)
 80008ae:	7a5b      	ldrb	r3, [r3, #9]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d105      	bne.n	80008c0 <BQ_GetSecurityMode+0x40>
 80008b4:	4b05      	ldr	r3, [pc, #20]	@ (80008cc <BQ_GetSecurityMode+0x4c>)
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <BQ_GetSecurityMode+0x40>
        return FULL_ACCESS;//01
 80008bc:	2302      	movs	r3, #2
 80008be:	e000      	b.n	80008c2 <BQ_GetSecurityMode+0x42>
    }else{
        return RESERVED;//00
 80008c0:	2303      	movs	r3, #3
    }
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	2000002c 	.word	0x2000002c

080008d0 <BQ_IsManufacturingFuseEnabled>:
}



bool BQ_IsManufacturingFuseEnabled(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[8];
 80008d4:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <BQ_IsManufacturingFuseEnabled+0x1c>)
 80008d6:	7a1b      	ldrb	r3, [r3, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	bf14      	ite	ne
 80008dc:	2301      	movne	r3, #1
 80008de:	2300      	moveq	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	200000ac 	.word	0x200000ac

080008f0 <BQ_IsManufacturingAllFetEnabled>:
/**
 * @brief function shows fet control
 * @return 0 if fet control enabled, 1 if fet control disabled
 */
bool BQ_IsManufacturingAllFetEnabled(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[4];
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <BQ_IsManufacturingAllFetEnabled+0x1c>)
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2db      	uxtb	r3, r3
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	200000ac 	.word	0x200000ac

08000910 <BQ_IsManufacturingGaugingEnabled>:

bool BQ_IsManufacturingGaugingEnabled(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[3];
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <BQ_IsManufacturingGaugingEnabled+0x1c>)
 8000916:	78db      	ldrb	r3, [r3, #3]
 8000918:	2b00      	cmp	r3, #0
 800091a:	bf14      	ite	ne
 800091c:	2301      	movne	r3, #1
 800091e:	2300      	moveq	r3, #0
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	200000ac 	.word	0x200000ac

08000930 <BQ_IsManufacturingCalibrationEnabled>:

bool BQ_IsManufacturingCalibrationEnabled(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[15];
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <BQ_IsManufacturingCalibrationEnabled+0x1c>)
 8000936:	7bdb      	ldrb	r3, [r3, #15]
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	200000ac 	.word	0x200000ac

08000950 <BQ_IsManufacturingPermanentFailureEnabled>:

bool BQ_IsManufacturingPermanentFailureEnabled(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[6];
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <BQ_IsManufacturingPermanentFailureEnabled+0x1c>)
 8000956:	799b      	ldrb	r3, [r3, #6]
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf14      	ite	ne
 800095c:	2301      	movne	r3, #1
 800095e:	2300      	moveq	r3, #0
 8000960:	b2db      	uxtb	r3, r3
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	200000ac 	.word	0x200000ac

08000970 <BQ_IsManufacturingLifetimeEnabled>:

bool BQ_IsManufacturingLifetimeEnabled(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
    return BQ_manufacturingStatus[5];
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <BQ_IsManufacturingLifetimeEnabled+0x1c>)
 8000976:	795b      	ldrb	r3, [r3, #5]
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	200000ac 	.word	0x200000ac

08000990 <BQ_IsLedEnabled>:

bool BQ_IsLedEnabled(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
    return BQ_opStatus[17];
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <BQ_IsLedEnabled+0x1c>)
 8000996:	7c5b      	ldrb	r3, [r3, #17]
 8000998:	2b00      	cmp	r3, #0
 800099a:	bf14      	ite	ne
 800099c:	2301      	movne	r3, #1
 800099e:	2300      	moveq	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	2000002c 	.word	0x2000002c

080009b0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b45      	ldr	r3, [pc, #276]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a44      	ldr	r2, [pc, #272]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b42      	ldr	r3, [pc, #264]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	4b3f      	ldr	r3, [pc, #252]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	4a3e      	ldr	r2, [pc, #248]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ea:	4b3c      	ldr	r3, [pc, #240]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a38      	ldr	r2, [pc, #224]	@ (8000adc <MX_GPIO_Init+0x12c>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <MX_GPIO_Init+0x12c>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <MX_GPIO_Init+0x12c>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a32      	ldr	r2, [pc, #200]	@ (8000adc <MX_GPIO_Init+0x12c>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <MX_GPIO_Init+0x12c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	21b0      	movs	r1, #176	@ 0xb0
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f000 fe75 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a38:	4829      	ldr	r0, [pc, #164]	@ (8000ae0 <MX_GPIO_Init+0x130>)
 8000a3a:	f000 fe6f 	bl	800171c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4823      	ldr	r0, [pc, #140]	@ (8000ae4 <MX_GPIO_Init+0x134>)
 8000a56:	f000 fce7 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f000 fcd6 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a7c:	23b0      	movs	r3, #176	@ 0xb0
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f000 fcc7 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a9a:	2340      	movs	r3, #64	@ 0x40
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab0:	f000 fcba 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <MX_GPIO_Init+0x130>)
 8000ace:	f000 fcab 	bl	8001428 <HAL_GPIO_Init>

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400
 8000ae4:	48000800 	.word	0x48000800

08000ae8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	@ (8000b60 <MX_I2C1_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <MX_I2C1_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b24:	f000 fe12 	bl	800174c <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 f9d0 	bl	8000ed2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b36:	f002 fa1d 	bl	8002f74 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 f9c7 	bl	8000ed2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_I2C1_Init+0x74>)
 8000b48:	f002 fa5f 	bl	800300a <HAL_I2CEx_ConfigDigitalFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 f9be 	bl	8000ed2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000128 	.word	0x20000128
 8000b60:	40005400 	.word	0x40005400
 8000b64:	10909cec 	.word	0x10909cec

08000b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0a2      	sub	sp, #136	@ 0x88
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2260      	movs	r2, #96	@ 0x60
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fc2b 	bl	80043e4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a28      	ldr	r2, [pc, #160]	@ (8000c34 <HAL_I2C_MspInit+0xcc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d148      	bne.n	8000c2a <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b98:	2340      	movs	r3, #64	@ 0x40
 8000b9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 f8e1 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bb0:	f000 f98f 	bl	8000ed2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bcc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bd0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be0:	2304      	movs	r3, #4
 8000be2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000bea:	4619      	mov	r1, r3
 8000bec:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <HAL_I2C_MspInit+0xd4>)
 8000bee:	f000 fc1b 	bl	8001428 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210a      	movs	r1, #10
 8000c0e:	201f      	movs	r0, #31
 8000c10:	f000 fb85 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c14:	201f      	movs	r0, #31
 8000c16:	f000 fb9e 	bl	8001356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2109      	movs	r1, #9
 8000c1e:	2020      	movs	r0, #32
 8000c20:	f000 fb7d 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c24:	2020      	movs	r0, #32
 8000c26:	f000 fb96 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3788      	adds	r7, #136	@ 0x88
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400

08000c40 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	78ba      	ldrb	r2, [r7, #2]
 8000c56:	78f9      	ldrb	r1, [r7, #3]
 8000c58:	2002      	movs	r0, #2
 8000c5a:	9000      	str	r0, [sp, #0]
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f82a 	bl	8000cb6 <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000c66:	7b3b      	ldrb	r3, [r7, #12]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000c70:	7b7b      	ldrb	r3, [r7, #13]
 8000c72:	021b      	lsls	r3, r3, #8
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	81fb      	strh	r3, [r7, #14]

	return result;
 8000c80:	89fb      	ldrh	r3, [r7, #14]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af02      	add	r7, sp, #8
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	460b      	mov	r3, r1
 8000c94:	70fb      	strb	r3, [r7, #3]
 8000c96:	4613      	mov	r3, r2
 8000c98:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	78ba      	ldrb	r2, [r7, #2]
 8000ca0:	78f9      	ldrb	r1, [r7, #3]
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	9000      	str	r0, [sp, #0]
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f805 	bl	8000cb6 <I2CHelper_ReadRegister>

	return buf[0];
 8000cac:	7b3b      	ldrb	r3, [r7, #12]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af02      	add	r7, sp, #8
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	72fb      	strb	r3, [r7, #11]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	b299      	uxth	r1, r3
 8000cd0:	f107 020a 	add.w	r2, r7, #10
 8000cd4:	2364      	movs	r3, #100	@ 0x64
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f000 fdd2 	bl	8001884 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	7e3b      	ldrb	r3, [r7, #24]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	2264      	movs	r2, #100	@ 0x64
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 fede 	bl	8001ab4 <HAL_I2C_Master_Receive>
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f000 f98f 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f891 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f7ff fe4f 	bl	80009b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d12:	f7ff fee9 	bl	8000ae8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 8000d16:	4842      	ldr	r0, [pc, #264]	@ (8000e20 <main+0x120>)
 8000d18:	f000 fd18 	bl	800174c <HAL_I2C_Init>
  HAL_I2C_MspInit(&hi2c1);
 8000d1c:	4840      	ldr	r0, [pc, #256]	@ (8000e20 <main+0x120>)
 8000d1e:	f7ff ff23 	bl	8000b68 <HAL_I2C_MspInit>
  uint16_t voltage = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	82fb      	strh	r3, [r7, #22]
  uint16_t current = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	82bb      	strh	r3, [r7, #20]
  uint8_t percentage[2];
  uint16_t cells[6];
  BQ_Init(&hi2c1);
 8000d2a:	483d      	ldr	r0, [pc, #244]	@ (8000e20 <main+0x120>)
 8000d2c:	f7ff fa4e 	bl	80001cc <BQ_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8000d30:	2064      	movs	r0, #100	@ 0x64
 8000d32:	f000 f9f5 	bl	8001120 <HAL_Delay>

	  BQ_ReadMABlockCommand(&hi2c1, BQ40Z80_MFA_DA_STATUS_1, BQ_daStatus1, 32);
 8000d36:	2320      	movs	r3, #32
 8000d38:	4a3a      	ldr	r2, [pc, #232]	@ (8000e24 <main+0x124>)
 8000d3a:	2171      	movs	r1, #113	@ 0x71
 8000d3c:	4838      	ldr	r0, [pc, #224]	@ (8000e20 <main+0x120>)
 8000d3e:	f7ff facf 	bl	80002e0 <BQ_ReadMABlockCommand>
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_DA_STATUS_2, 16);
	  BQ_ReadMABlockCommand(&hi2c1, BQ40Z80_MFA_DA_STATUS_3, BQ_daStatus3, 18);
 8000d42:	2312      	movs	r3, #18
 8000d44:	4a38      	ldr	r2, [pc, #224]	@ (8000e28 <main+0x128>)
 8000d46:	217b      	movs	r1, #123	@ 0x7b
 8000d48:	4835      	ldr	r0, [pc, #212]	@ (8000e20 <main+0x120>)
 8000d4a:	f7ff fac9 	bl	80002e0 <BQ_ReadMABlockCommand>
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_OUTPUT_CADC_CAL, BQ_outCal, 32);
	  voltage = I2CHelper_ReadRegisterAsShort(&hi2c1, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 8000d4e:	4b37      	ldr	r3, [pc, #220]	@ (8000e2c <main+0x12c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2209      	movs	r2, #9
 8000d54:	4619      	mov	r1, r3
 8000d56:	4832      	ldr	r0, [pc, #200]	@ (8000e20 <main+0x120>)
 8000d58:	f7ff ff72 	bl	8000c40 <I2CHelper_ReadRegisterAsShort>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	82fb      	strh	r3, [r7, #22]
	  current = I2CHelper_ReadRegisterAsShort(&hi2c1, bq_deviceAddress, BQ40Z80_SBS_Current);
 8000d60:	4b32      	ldr	r3, [pc, #200]	@ (8000e2c <main+0x12c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	220a      	movs	r2, #10
 8000d66:	4619      	mov	r1, r3
 8000d68:	482d      	ldr	r0, [pc, #180]	@ (8000e20 <main+0x120>)
 8000d6a:	f7ff ff69 	bl	8000c40 <I2CHelper_ReadRegisterAsShort>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	82bb      	strh	r3, [r7, #20]
	  percentage[0] = I2CHelper_ReadRegisterAsChar(&hi2c1, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 8000d72:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <main+0x12c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	220d      	movs	r2, #13
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4829      	ldr	r0, [pc, #164]	@ (8000e20 <main+0x120>)
 8000d7c:	f7ff ff85 	bl	8000c8a <I2CHelper_ReadRegisterAsChar>
 8000d80:	4603      	mov	r3, r0
 8000d82:	743b      	strb	r3, [r7, #16]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(&hi2c1, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 8000d84:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <main+0x12c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	220e      	movs	r2, #14
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4824      	ldr	r0, [pc, #144]	@ (8000e20 <main+0x120>)
 8000d8e:	f7ff ff7c 	bl	8000c8a <I2CHelper_ReadRegisterAsChar>
 8000d92:	4603      	mov	r3, r0
 8000d94:	747b      	strb	r3, [r7, #17]
	  // -----separated cells-----
	  cells[0] = BQ_daStatus1[0] | (BQ_daStatus1[1] << 8);
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <main+0x124>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <main+0x124>)
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	4313      	orrs	r3, r2
 8000da6:	b21b      	sxth	r3, r3
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	80bb      	strh	r3, [r7, #4]
	  cells[1] = BQ_daStatus1[2] | (BQ_daStatus1[3] << 8);
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <main+0x124>)
 8000dae:	789b      	ldrb	r3, [r3, #2]
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <main+0x124>)
 8000db4:	78db      	ldrb	r3, [r3, #3]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	80fb      	strh	r3, [r7, #6]
	  cells[2] = BQ_daStatus1[4] | (BQ_daStatus1[5] << 8);
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <main+0x124>)
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	b21a      	sxth	r2, r3
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <main+0x124>)
 8000dca:	795b      	ldrb	r3, [r3, #5]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	813b      	strh	r3, [r7, #8]
	  cells[3] = BQ_daStatus1[6] | (BQ_daStatus1[7] << 8);
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <main+0x124>)
 8000dda:	799b      	ldrb	r3, [r3, #6]
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <main+0x124>)
 8000de0:	79db      	ldrb	r3, [r3, #7]
 8000de2:	021b      	lsls	r3, r3, #8
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	817b      	strh	r3, [r7, #10]
	  cells[4] = BQ_daStatus3[0] | (BQ_daStatus3[1] << 8);
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <main+0x128>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <main+0x128>)
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	021b      	lsls	r3, r3, #8
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	81bb      	strh	r3, [r7, #12]
	  cells[5] = BQ_daStatus3[6] | (BQ_daStatus3[7] << 8);
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <main+0x128>)
 8000e06:	799b      	ldrb	r3, [r3, #6]
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <main+0x128>)
 8000e0c:	79db      	ldrb	r3, [r3, #7]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	81fb      	strh	r3, [r7, #14]
	  HAL_Delay(100);
 8000e1a:	bf00      	nop
 8000e1c:	e788      	b.n	8000d30 <main+0x30>
 8000e1e:	bf00      	nop
 8000e20:	20000128 	.word	0x20000128
 8000e24:	200000c4 	.word	0x200000c4
 8000e28:	200000f4 	.word	0x200000f4
 8000e2c:	20000000 	.word	0x20000000

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b096      	sub	sp, #88	@ 0x58
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2244      	movs	r2, #68	@ 0x44
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fad0 	bl	80043e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e56:	f002 f933 	bl	80030c0 <HAL_PWREx_ControlVoltageScaling>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e60:	f000 f837 	bl	8000ed2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e64:	2302      	movs	r3, #2
 8000e66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e76:	2302      	movs	r3, #2
 8000e78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e7e:	230a      	movs	r3, #10
 8000e80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e82:	2307      	movs	r3, #7
 8000e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 f96a 	bl	800316c <HAL_RCC_OscConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e9e:	f000 f818 	bl	8000ed2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fd6a 	bl	8003994 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ec6:	f000 f804 	bl	8000ed2 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3758      	adds	r7, #88	@ 0x58
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed6:	b672      	cpsid	i
}
 8000ed8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eda:	bf00      	nop
 8000edc:	e7fd      	b.n	8000eda <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <HAL_MspInit+0x44>)
 8000ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eea:	4a0e      	ldr	r2, [pc, #56]	@ (8000f24 <HAL_MspInit+0x44>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <HAL_MspInit+0x44>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f02:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <HAL_MspInit+0x44>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <NMI_Handler+0x4>

08000f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <MemManage_Handler+0x4>

08000f40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7e:	f000 f8af 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <I2C1_EV_IRQHandler+0x10>)
 8000f8e:	f000 ff73 	bl	8001e78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000128 	.word	0x20000128

08000f9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <I2C1_ER_IRQHandler+0x10>)
 8000fa2:	f000 ff83 	bl	8001eac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000128 	.word	0x20000128

08000fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800100c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd8:	f7ff ffea 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <LoopForever+0xe>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8001020 <LoopForever+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f003 f9f7 	bl	80043f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001006:	f7ff fe7b 	bl	8000d00 <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001018:	0800449c 	.word	0x0800449c
  ldr r2, =_sbss
 800101c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001020:	20000180 	.word	0x20000180

08001024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>
	...

08001028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_Init+0x3c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0b      	ldr	r2, [pc, #44]	@ (8001064 <HAL_Init+0x3c>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f962 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f80f 	bl	8001068 <HAL_InitTick>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	e001      	b.n	800105a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001056:	f7ff ff43 	bl	8000ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <HAL_InitTick+0x6c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d023      	beq.n	80010c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_InitTick+0x70>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <HAL_InitTick+0x6c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f96d 	bl	8001372 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10f      	bne.n	80010be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d809      	bhi.n	80010b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f937 	bl	800131e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b0:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <HAL_InitTick+0x74>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e007      	b.n	80010c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e004      	b.n	80010c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e001      	b.n	80010c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	20000004 	.word	0x20000004
 80010dc:	20000008 	.word	0x20000008

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	2000000c 	.word	0x2000000c
 8001104:	2000017c 	.word	0x2000017c

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000017c 	.word	0x2000017c

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000000c 	.word	0x2000000c

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	@ (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff3e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff31 	bl	80011cc <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d005      	beq.n	80013ae <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2204      	movs	r2, #4
 80013a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e029      	b.n	8001402 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020e 	bic.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	f003 021c 	and.w	r2, r3, #28
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	4798      	blx	r3
    }
  }
  return status;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800141a:	b2db      	uxtb	r3, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	e154      	b.n	80016e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8146 	beq.w	80016dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d005      	beq.n	8001468 <HAL_GPIO_Init+0x40>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 0201 	and.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d017      	beq.n	8001506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d123      	bne.n	800155a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	6939      	ldr	r1, [r7, #16]
 8001556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0203 	and.w	r2, r3, #3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80a0 	beq.w	80016dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159c:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_GPIO_Init+0x2d8>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a0:	4a57      	ldr	r2, [pc, #348]	@ (8001700 <HAL_GPIO_Init+0x2d8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a8:	4b55      	ldr	r3, [pc, #340]	@ (8001700 <HAL_GPIO_Init+0x2d8>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b4:	4a53      	ldr	r2, [pc, #332]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015de:	d019      	beq.n	8001614 <HAL_GPIO_Init+0x1ec>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a49      	ldr	r2, [pc, #292]	@ (8001708 <HAL_GPIO_Init+0x2e0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d013      	beq.n	8001610 <HAL_GPIO_Init+0x1e8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a48      	ldr	r2, [pc, #288]	@ (800170c <HAL_GPIO_Init+0x2e4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d00d      	beq.n	800160c <HAL_GPIO_Init+0x1e4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a47      	ldr	r2, [pc, #284]	@ (8001710 <HAL_GPIO_Init+0x2e8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d007      	beq.n	8001608 <HAL_GPIO_Init+0x1e0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a46      	ldr	r2, [pc, #280]	@ (8001714 <HAL_GPIO_Init+0x2ec>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_GPIO_Init+0x1dc>
 8001600:	2304      	movs	r3, #4
 8001602:	e008      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001604:	2307      	movs	r3, #7
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001608:	2303      	movs	r3, #3
 800160a:	e004      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 800160c:	2302      	movs	r3, #2
 800160e:	e002      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001610:	2301      	movs	r3, #1
 8001612:	e000      	b.n	8001616 <HAL_GPIO_Init+0x1ee>
 8001614:	2300      	movs	r3, #0
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	f002 0203 	and.w	r2, r2, #3
 800161c:	0092      	lsls	r2, r2, #2
 800161e:	4093      	lsls	r3, r2
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001626:	4937      	ldr	r1, [pc, #220]	@ (8001704 <HAL_GPIO_Init+0x2dc>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	3302      	adds	r3, #2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001634:	4b38      	ldr	r3, [pc, #224]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001658:	4a2f      	ldr	r2, [pc, #188]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800165e:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001682:	4a25      	ldr	r2, [pc, #148]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016d6:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <HAL_GPIO_Init+0x2f0>)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3301      	adds	r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f aea3 	bne.w	8001438 <HAL_GPIO_Init+0x10>
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000
 8001708:	48000400 	.word	0x48000400
 800170c:	48000800 	.word	0x48000800
 8001710:	48000c00 	.word	0x48000c00
 8001714:	48001000 	.word	0x48001000
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
 8001728:	4613      	mov	r3, r2
 800172a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001738:	e002      	b.n	8001740 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e08d      	b.n	800187a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d106      	bne.n	8001778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff f9f8 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	@ 0x24
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0201 	bic.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800179c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	e006      	b.n	80017d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d108      	bne.n	80017ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	e007      	b.n	80017fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800180c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69d9      	ldr	r1, [r3, #28]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af02      	add	r7, sp, #8
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	460b      	mov	r3, r1
 8001892:	817b      	strh	r3, [r7, #10]
 8001894:	4613      	mov	r3, r2
 8001896:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	f040 80fd 	bne.w	8001aa0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_I2C_Master_Transmit+0x30>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e0f6      	b.n	8001aa2 <HAL_I2C_Master_Transmit+0x21e>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018bc:	f7ff fc24 	bl	8001108 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2319      	movs	r3, #25
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f001 f871 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0e1      	b.n	8001aa2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2221      	movs	r2, #33	@ 0x21
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2210      	movs	r2, #16
 80018ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	893a      	ldrh	r2, [r7, #8]
 80018fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	2bff      	cmp	r3, #255	@ 0xff
 800190e:	d906      	bls.n	800191e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	22ff      	movs	r2, #255	@ 0xff
 8001914:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001916:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e007      	b.n	800192e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001928:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800192c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001932:	2b00      	cmp	r3, #0
 8001934:	d024      	beq.n	8001980 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195e:	3b01      	subs	r3, #1
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	8979      	ldrh	r1, [r7, #10]
 8001972:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <HAL_I2C_Master_Transmit+0x228>)
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f001 fa6b 	bl	8002e54 <I2C_TransferConfig>
 800197e:	e066      	b.n	8001a4e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001984:	b2da      	uxtb	r2, r3
 8001986:	8979      	ldrh	r1, [r7, #10]
 8001988:	4b48      	ldr	r3, [pc, #288]	@ (8001aac <HAL_I2C_Master_Transmit+0x228>)
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f001 fa60 	bl	8002e54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001994:	e05b      	b.n	8001a4e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f001 f864 	bl	8002a68 <I2C_WaitOnTXISFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e07b      	b.n	8001aa2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019de:	b29b      	uxth	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d034      	beq.n	8001a4e <HAL_I2C_Master_Transmit+0x1ca>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d130      	bne.n	8001a4e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	2200      	movs	r2, #0
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 ffdd 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e04d      	b.n	8001aa2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2bff      	cmp	r3, #255	@ 0xff
 8001a0e:	d90e      	bls.n	8001a2e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	22ff      	movs	r2, #255	@ 0xff
 8001a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	8979      	ldrh	r1, [r7, #10]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f001 fa14 	bl	8002e54 <I2C_TransferConfig>
 8001a2c:	e00f      	b.n	8001a4e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	8979      	ldrh	r1, [r7, #10]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f001 fa03 	bl	8002e54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d19e      	bne.n	8001996 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	6a39      	ldr	r1, [r7, #32]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f001 f84a 	bl	8002af6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e01a      	b.n	8001aa2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2220      	movs	r2, #32
 8001a72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6859      	ldr	r1, [r3, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_I2C_Master_Transmit+0x22c>)
 8001a80:	400b      	ands	r3, r1
 8001a82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	80002000 	.word	0x80002000
 8001ab0:	fe00e800 	.word	0xfe00e800

08001ab4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	817b      	strh	r3, [r7, #10]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	f040 80db 	bne.w	8001c8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2C_Master_Receive+0x30>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0d4      	b.n	8001c8e <HAL_I2C_Master_Receive+0x1da>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aec:	f7ff fb0c 	bl	8001108 <HAL_GetTick>
 8001af0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2319      	movs	r3, #25
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 ff59 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0bf      	b.n	8001c8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2222      	movs	r2, #34	@ 0x22
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	893a      	ldrh	r2, [r7, #8]
 8001b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2bff      	cmp	r3, #255	@ 0xff
 8001b3e:	d90e      	bls.n	8001b5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	8979      	ldrh	r1, [r7, #10]
 8001b4e:	4b52      	ldr	r3, [pc, #328]	@ (8001c98 <HAL_I2C_Master_Receive+0x1e4>)
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f001 f97c 	bl	8002e54 <I2C_TransferConfig>
 8001b5c:	e06d      	b.n	8001c3a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	8979      	ldrh	r1, [r7, #10]
 8001b70:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <HAL_I2C_Master_Receive+0x1e4>)
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f001 f96b 	bl	8002e54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b7e:	e05c      	b.n	8001c3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	6a39      	ldr	r1, [r7, #32]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fff9 	bl	8002b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e07c      	b.n	8001c8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d034      	beq.n	8001c3a <HAL_I2C_Master_Receive+0x186>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d130      	bne.n	8001c3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	2200      	movs	r2, #0
 8001be0:	2180      	movs	r1, #128	@ 0x80
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fee7 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e04d      	b.n	8001c8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2bff      	cmp	r3, #255	@ 0xff
 8001bfa:	d90e      	bls.n	8001c1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	22ff      	movs	r2, #255	@ 0xff
 8001c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	8979      	ldrh	r1, [r7, #10]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f001 f91e 	bl	8002e54 <I2C_TransferConfig>
 8001c18:	e00f      	b.n	8001c3a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	8979      	ldrh	r1, [r7, #10]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f001 f90d 	bl	8002e54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d19d      	bne.n	8001b80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	6a39      	ldr	r1, [r7, #32]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 ff54 	bl	8002af6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e01a      	b.n	8001c8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6859      	ldr	r1, [r3, #4]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <HAL_I2C_Master_Receive+0x1e8>)
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	80002400 	.word	0x80002400
 8001c9c:	fe00e800 	.word	0xfe00e800

08001ca0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	f040 80d6 	bne.w	8001e6e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0cc      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2C_IsDeviceReady+0x44>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0c5      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x1d0>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2224      	movs	r2, #36	@ 0x24
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d107      	bne.n	8001d12 <HAL_I2C_IsDeviceReady+0x72>
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d10:	e006      	b.n	8001d20 <HAL_I2C_IsDeviceReady+0x80>
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d1c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff f9ef 	bl	8001108 <HAL_GetTick>
 8001d2a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d58:	e034      	b.n	8001dc4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d01a      	beq.n	8001d98 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7ff f9d1 	bl	8001108 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <HAL_I2C_IsDeviceReady+0xd8>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10f      	bne.n	8001d98 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e06b      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001dc4:	7ffb      	ldrb	r3, [r7, #31]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_I2C_IsDeviceReady+0x130>
 8001dca:	7fbb      	ldrb	r3, [r7, #30]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0c4      	beq.n	8001d5a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d01a      	beq.n	8001e14 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	2120      	movs	r1, #32
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 fde4 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e03b      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	e02d      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fdc9 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e020      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2210      	movs	r2, #16
 8001e34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f63f af56 	bhi.w	8001cfa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2220      	movs	r2, #32
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	68f9      	ldr	r1, [r7, #12]
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	4798      	blx	r3
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00f      	beq.n	8001eee <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00f      	beq.n	8001f18 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	f043 0208 	orr.w	r2, r3, #8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f16:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00f      	beq.n	8001f42 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f30:	f043 0202 	orr.w	r2, r3, #2
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f40:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 030b 	and.w	r3, r3, #11
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fbd5 	bl	8002704 <I2C_ITError>
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	70fb      	strb	r3, [r7, #3]
 8001f96:	4613      	mov	r3, r2
 8001f98:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <I2C_Slave_ISR_IT+0x24>
 8002002:	2302      	movs	r3, #2
 8002004:	e0e2      	b.n	80021cc <I2C_Slave_ISR_IT+0x1ea>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002022:	6939      	ldr	r1, [r7, #16]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f9b5 	bl	8002394 <I2C_ITSlaveCplt>
 800202a:	e0ca      	b.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04b      	beq.n	80020ce <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800203c:	2b00      	cmp	r3, #0
 800203e:	d046      	beq.n	80020ce <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d128      	bne.n	800209c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b28      	cmp	r3, #40	@ 0x28
 8002054:	d108      	bne.n	8002068 <I2C_Slave_ISR_IT+0x86>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800205c:	d104      	bne.n	8002068 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800205e:	6939      	ldr	r1, [r7, #16]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fafb 	bl	800265c <I2C_ITListenCplt>
 8002066:	e031      	b.n	80020cc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b29      	cmp	r3, #41	@ 0x29
 8002072:	d10e      	bne.n	8002092 <I2C_Slave_ISR_IT+0xb0>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800207a:	d00a      	beq.n	8002092 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2210      	movs	r2, #16
 8002082:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fc54 	bl	8002932 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f926 	bl	80022dc <I2C_ITSlaveSeqCplt>
 8002090:	e01c      	b.n	80020cc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2210      	movs	r2, #16
 8002098:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800209a:	e08f      	b.n	80021bc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2210      	movs	r2, #16
 80020a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <I2C_Slave_ISR_IT+0xdc>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020bc:	d17e      	bne.n	80021bc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c2:	4619      	mov	r1, r3
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fb1d 	bl	8002704 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020ca:	e077      	b.n	80021bc <I2C_Slave_ISR_IT+0x1da>
 80020cc:	e076      	b.n	80021bc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02f      	beq.n	8002138 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d02a      	beq.n	8002138 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d018      	beq.n	800211e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d14b      	bne.n	80021c0 <I2C_Slave_ISR_IT+0x1de>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800212e:	d047      	beq.n	80021c0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f8d3 	bl	80022dc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002136:	e043      	b.n	80021c0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002148:	2b00      	cmp	r3, #0
 800214a:	d004      	beq.n	8002156 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800214c:	6939      	ldr	r1, [r7, #16]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f840 	bl	80021d4 <I2C_ITAddrCplt>
 8002154:	e035      	b.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d030      	beq.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02b      	beq.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80021a4:	e00d      	b.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ac:	d002      	beq.n	80021b4 <I2C_Slave_ISR_IT+0x1d2>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d106      	bne.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f891 	bl	80022dc <I2C_ITSlaveSeqCplt>
 80021ba:	e002      	b.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80021c0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021ea:	2b28      	cmp	r3, #40	@ 0x28
 80021ec:	d16a      	bne.n	80022c4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	0c1b      	lsrs	r3, r3, #16
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	b29b      	uxth	r3, r3
 8002208:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800220c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	b29b      	uxth	r3, r3
 8002224:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002228:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d138      	bne.n	80022a4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	09db      	lsrs	r3, r3, #7
 8002236:	b29a      	uxth	r2, r3
 8002238:	89bb      	ldrh	r3, [r7, #12]
 800223a:	4053      	eors	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	f003 0306 	and.w	r3, r3, #6
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11c      	bne.n	8002280 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002246:	897b      	ldrh	r3, [r7, #10]
 8002248:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002258:	2b02      	cmp	r3, #2
 800225a:	d13b      	bne.n	80022d4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2208      	movs	r2, #8
 8002268:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002272:	89ba      	ldrh	r2, [r7, #12]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fe86 	bl	8001f8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800227e:	e029      	b.n	80022d4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002280:	893b      	ldrh	r3, [r7, #8]
 8002282:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fe15 	bl	8002eb8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002296:	89ba      	ldrh	r2, [r7, #12]
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fe74 	bl	8001f8a <HAL_I2C_AddrCallback>
}
 80022a2:	e017      	b.n	80022d4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fe05 	bl	8002eb8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022b6:	89ba      	ldrh	r2, [r7, #12]
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fe64 	bl	8001f8a <HAL_I2C_AddrCallback>
}
 80022c2:	e007      	b.n	80022d4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2208      	movs	r2, #8
 80022ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00c      	b.n	800232a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002328:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b29      	cmp	r3, #41	@ 0x29
 8002334:	d112      	bne.n	800235c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2228      	movs	r2, #40	@ 0x28
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2221      	movs	r2, #33	@ 0x21
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002344:	2101      	movs	r1, #1
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fdb6 	bl	8002eb8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fe04 	bl	8001f62 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800235a:	e017      	b.n	800238c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b2a      	cmp	r3, #42	@ 0x2a
 8002366:	d111      	bne.n	800238c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2228      	movs	r2, #40	@ 0x28
 800236c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2222      	movs	r2, #34	@ 0x22
 8002374:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002376:	2102      	movs	r1, #2
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fd9d 	bl	8002eb8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fdf5 	bl	8001f76 <HAL_I2C_SlaveRxCpltCallback>
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2220      	movs	r2, #32
 80023be:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	2b21      	cmp	r3, #33	@ 0x21
 80023c4:	d002      	beq.n	80023cc <I2C_ITSlaveCplt+0x38>
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	2b29      	cmp	r3, #41	@ 0x29
 80023ca:	d108      	bne.n	80023de <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023cc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fd71 	bl	8002eb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2221      	movs	r2, #33	@ 0x21
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
 80023dc:	e019      	b.n	8002412 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	2b22      	cmp	r3, #34	@ 0x22
 80023e2:	d002      	beq.n	80023ea <I2C_ITSlaveCplt+0x56>
 80023e4:	7afb      	ldrb	r3, [r7, #11]
 80023e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80023e8:	d108      	bne.n	80023fc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023ea:	f248 0102 	movw	r1, #32770	@ 0x8002
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fd62 	bl	8002eb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2222      	movs	r2, #34	@ 0x22
 80023f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80023fa:	e00a      	b.n	8002412 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	2b28      	cmp	r3, #40	@ 0x28
 8002400:	d107      	bne.n	8002412 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002402:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fd56 	bl	8002eb8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002420:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b89      	ldr	r3, [pc, #548]	@ (8002654 <I2C_ITSlaveCplt+0x2c0>)
 800242e:	400b      	ands	r3, r1
 8002430:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa7d 	bl	8002932 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d013      	beq.n	800246a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002450:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01f      	beq.n	800249a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002468:	e017      	b.n	800249a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002482:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	b29a      	uxth	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f023 0304 	bic.w	r3, r3, #4
 80024aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f4:	f043 0204 	orr.w	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d049      	beq.n	800259a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800250c:	2b00      	cmp	r3, #0
 800250e:	d044      	beq.n	800259a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d128      	bne.n	800256c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b28      	cmp	r3, #40	@ 0x28
 8002524:	d108      	bne.n	8002538 <I2C_ITSlaveCplt+0x1a4>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800252c:	d104      	bne.n	8002538 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800252e:	6979      	ldr	r1, [r7, #20]
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f893 	bl	800265c <I2C_ITListenCplt>
 8002536:	e030      	b.n	800259a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b29      	cmp	r3, #41	@ 0x29
 8002542:	d10e      	bne.n	8002562 <I2C_ITSlaveCplt+0x1ce>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800254a:	d00a      	beq.n	8002562 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f9ec 	bl	8002932 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff febe 	bl	80022dc <I2C_ITSlaveSeqCplt>
 8002560:	e01b      	b.n	800259a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2210      	movs	r2, #16
 8002568:	61da      	str	r2, [r3, #28]
 800256a:	e016      	b.n	800259a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2210      	movs	r2, #16
 8002572:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <I2C_ITSlaveCplt+0x1fa>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800258c:	d105      	bne.n	800259a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f8b5 	bl	8002704 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8a4 	bl	8002704 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b28      	cmp	r3, #40	@ 0x28
 80025c6:	d141      	bne.n	800264c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80025c8:	6979      	ldr	r1, [r7, #20]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f846 	bl	800265c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025d0:	e03c      	b.n	800264c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025da:	d014      	beq.n	8002606 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fe7d 	bl	80022dc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <I2C_ITSlaveCplt+0x2c4>)
 80025e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fcd1 	bl	8001fa6 <HAL_I2C_ListenCpltCallback>
}
 8002604:	e022      	b.n	800264c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b22      	cmp	r3, #34	@ 0x22
 8002610:	d10e      	bne.n	8002630 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fca4 	bl	8001f76 <HAL_I2C_SlaveRxCpltCallback>
}
 800262e:	e00d      	b.n	800264c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fc8b 	bl	8001f62 <HAL_I2C_SlaveTxCpltCallback>
}
 800264c:	bf00      	nop
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	fe00e800 	.word	0xfe00e800
 8002658:	ffff0000 	.word	0xffff0000

0800265c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a25      	ldr	r2, [pc, #148]	@ (8002700 <I2C_ITListenCplt+0xa4>)
 800266a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d022      	beq.n	80026d8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d012      	beq.n	80026d8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026d8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fbeb 	bl	8002eb8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2210      	movs	r2, #16
 80026e8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fc57 	bl	8001fa6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	ffff0000 	.word	0xffff0000

08002704 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002714:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a6d      	ldr	r2, [pc, #436]	@ (80028d8 <I2C_ITError+0x1d4>)
 8002722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b28      	cmp	r3, #40	@ 0x28
 800273a:	d005      	beq.n	8002748 <I2C_ITError+0x44>
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b29      	cmp	r3, #41	@ 0x29
 8002740:	d002      	beq.n	8002748 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	2b2a      	cmp	r3, #42	@ 0x2a
 8002746:	d10b      	bne.n	8002760 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002748:	2103      	movs	r1, #3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fbb4 	bl	8002eb8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2228      	movs	r2, #40	@ 0x28
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a60      	ldr	r2, [pc, #384]	@ (80028dc <I2C_ITError+0x1d8>)
 800275c:	635a      	str	r2, [r3, #52]	@ 0x34
 800275e:	e030      	b.n	80027c2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002760:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fba7 	bl	8002eb8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8e1 	bl	8002932 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b60      	cmp	r3, #96	@ 0x60
 800277a:	d01f      	beq.n	80027bc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b20      	cmp	r3, #32
 8002790:	d114      	bne.n	80027bc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b10      	cmp	r3, #16
 800279e:	d109      	bne.n	80027b4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2210      	movs	r2, #16
 80027a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ac:	f043 0204 	orr.w	r2, r3, #4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2220      	movs	r2, #32
 80027ba:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d039      	beq.n	8002844 <I2C_ITError+0x140>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b11      	cmp	r3, #17
 80027d4:	d002      	beq.n	80027dc <I2C_ITError+0xd8>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b21      	cmp	r3, #33	@ 0x21
 80027da:	d133      	bne.n	8002844 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027ea:	d107      	bne.n	80027fc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fe03 	bl	800140c <HAL_DMA_GetState>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d017      	beq.n	800283c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	4a33      	ldr	r2, [pc, #204]	@ (80028e0 <I2C_ITError+0x1dc>)
 8002812:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fdb2 	bl	800138a <HAL_DMA_Abort_IT>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d04d      	beq.n	80028c8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002836:	4610      	mov	r0, r2
 8002838:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800283a:	e045      	b.n	80028c8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f851 	bl	80028e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002842:	e041      	b.n	80028c8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	2b00      	cmp	r3, #0
 800284a:	d039      	beq.n	80028c0 <I2C_ITError+0x1bc>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b12      	cmp	r3, #18
 8002850:	d002      	beq.n	8002858 <I2C_ITError+0x154>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b22      	cmp	r3, #34	@ 0x22
 8002856:	d133      	bne.n	80028c0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002862:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002866:	d107      	bne.n	8002878 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002876:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fdc5 	bl	800140c <HAL_DMA_GetState>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d017      	beq.n	80028b8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <I2C_ITError+0x1dc>)
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fd74 	bl	800138a <HAL_DMA_Abort_IT>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d011      	beq.n	80028cc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028b2:	4610      	mov	r0, r2
 80028b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028b6:	e009      	b.n	80028cc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f813 	bl	80028e4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028be:	e005      	b.n	80028cc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f80f 	bl	80028e4 <I2C_TreatErrorCallback>
  }
}
 80028c6:	e002      	b.n	80028ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028c8:	bf00      	nop
 80028ca:	e000      	b.n	80028ce <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028cc:	bf00      	nop
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	ffff0000 	.word	0xffff0000
 80028dc:	08001fe3 	.word	0x08001fe3
 80028e0:	0800297b 	.word	0x0800297b

080028e4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b60      	cmp	r3, #96	@ 0x60
 80028f6:	d10e      	bne.n	8002916 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fb5d 	bl	8001fce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002914:	e009      	b.n	800292a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fb48 	bl	8001fba <HAL_I2C_ErrorCallback>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d103      	bne.n	8002950 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2200      	movs	r2, #0
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d007      	beq.n	800296e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f042 0201 	orr.w	r2, r2, #1
 800296c:	619a      	str	r2, [r3, #24]
  }
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002994:	2200      	movs	r2, #0
 8002996:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a4:	2200      	movs	r2, #0
 80029a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ff9b 	bl	80028e4 <I2C_TreatErrorCallback>
}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c6:	e03b      	b.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f961 	bl	8002c94 <I2C_IsErrorOccurred>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e041      	b.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d02d      	beq.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e4:	f7fe fb90 	bl	8001108 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d302      	bcc.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x44>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d122      	bne.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d113      	bne.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e00f      	b.n	8002a60 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	bf0c      	ite	eq
 8002a50:	2301      	moveq	r3, #1
 8002a52:	2300      	movne	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d0b4      	beq.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a74:	e033      	b.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f90a 	bl	8002c94 <I2C_IsErrorOccurred>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e031      	b.n	8002aee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d025      	beq.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe fb39 	bl	8001108 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11a      	bne.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d013      	beq.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e007      	b.n	8002aee <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d1c4      	bne.n	8002a76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b02:	e02f      	b.n	8002b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f8c3 	bl	8002c94 <I2C_IsErrorOccurred>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e02d      	b.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	f7fe faf6 	bl	8001108 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d302      	bcc.n	8002b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11a      	bne.n	8002b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d013      	beq.n	8002b64 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d1c8      	bne.n	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b8c:	e071      	b.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f87e 	bl	8002c94 <I2C_IsErrorOccurred>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d13b      	bne.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d138      	bne.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d105      	bne.n	8002bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d121      	bne.n	8002c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2210      	movs	r2, #16
 8002be4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2204      	movs	r2, #4
 8002bea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002c00:	400b      	ands	r3, r1
 8002c02:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
 8002c20:	e002      	b.n	8002c28 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002c28:	f7fe fa6e 	bl	8001108 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d302      	bcc.n	8002c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d119      	bne.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d00f      	beq.n	8002c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d002      	beq.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d083      	beq.n	8002b8e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	fe00e800 	.word	0xfe00e800

08002c94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	@ 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d068      	beq.n	8002d92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc8:	e049      	b.n	8002d5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd0:	d045      	beq.n	8002d5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe fa19 	bl	8001108 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_IsErrorOccurred+0x54>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d13a      	bne.n	8002d5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d0a:	d121      	bne.n	8002d50 <I2C_IsErrorOccurred+0xbc>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d12:	d01d      	beq.n	8002d50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d14:	7cfb      	ldrb	r3, [r7, #19]
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	d01a      	beq.n	8002d50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d2a:	f7fe f9ed 	bl	8001108 <HAL_GetTick>
 8002d2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d30:	e00e      	b.n	8002d50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d32:	f7fe f9e9 	bl	8001108 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b19      	cmp	r3, #25
 8002d3e:	d907      	bls.n	8002d50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d4e:	e006      	b.n	8002d5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d1e9      	bne.n	8002d32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d003      	beq.n	8002d74 <I2C_IsErrorOccurred+0xe0>
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0aa      	beq.n	8002cca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2220      	movs	r2, #32
 8002d82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002db4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f043 0308 	orr.w	r3, r3, #8
 8002dcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	f043 0302 	orr.w	r3, r3, #2
 8002dee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002df8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01c      	beq.n	8002e42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7ff fd92 	bl	8002932 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <I2C_IsErrorOccurred+0x1bc>)
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3728      	adds	r7, #40	@ 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	fe00e800 	.word	0xfe00e800

08002e54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	817b      	strh	r3, [r7, #10]
 8002e62:	4613      	mov	r3, r2
 8002e64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e6c:	7a7b      	ldrb	r3, [r7, #9]
 8002e6e:	041b      	lsls	r3, r3, #16
 8002e70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	0d5b      	lsrs	r3, r3, #21
 8002e8e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <I2C_TransferConfig+0x60>)
 8002e94:	430b      	orrs	r3, r1
 8002e96:	43db      	mvns	r3, r3
 8002e98:	ea02 0103 	and.w	r1, r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	03ff63ff 	.word	0x03ff63ff

08002eb8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ec8:	887b      	ldrh	r3, [r7, #2]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00f      	beq.n	8002ef2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002ed8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ee6:	2b28      	cmp	r3, #40	@ 0x28
 8002ee8:	d003      	beq.n	8002ef2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002ef0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002f02:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f10:	2b28      	cmp	r3, #40	@ 0x28
 8002f12:	d003      	beq.n	8002f1c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da03      	bge.n	8002f2c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002f2a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002f2c:	887b      	ldrh	r3, [r7, #2]
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d103      	bne.n	8002f3a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d103      	bne.n	8002f48 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f043 0320 	orr.w	r3, r3, #32
 8002f46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d103      	bne.n	8002f56 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d138      	bne.n	8002ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e032      	b.n	8002ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2224      	movs	r2, #36	@ 0x24
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0201 	orr.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e000      	b.n	8002ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
  }
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b20      	cmp	r3, #32
 800301e:	d139      	bne.n	8003094 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800302a:	2302      	movs	r3, #2
 800302c:	e033      	b.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2224      	movs	r2, #36	@ 0x24
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800305c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030a8:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <HAL_PWREx_GetVoltageRange+0x18>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40007000 	.word	0x40007000

080030c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ce:	d130      	bne.n	8003132 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d0:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030dc:	d038      	beq.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030de:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2232      	movs	r2, #50	@ 0x32
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003168 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9b      	lsrs	r3, r3, #18
 8003100:	3301      	adds	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003104:	e002      	b.n	800310c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3b01      	subs	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310c:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003118:	d102      	bne.n	8003120 <HAL_PWREx_ControlVoltageScaling+0x60>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f2      	bne.n	8003106 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800312c:	d110      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e00f      	b.n	8003152 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003132:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313e:	d007      	beq.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003140:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003148:	4a05      	ldr	r2, [pc, #20]	@ (8003160 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800314e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40007000 	.word	0x40007000
 8003164:	20000004 	.word	0x20000004
 8003168:	431bde83 	.word	0x431bde83

0800316c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f000 bc02 	b.w	8003984 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003180:	4b96      	ldr	r3, [pc, #600]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318a:	4b94      	ldr	r3, [pc, #592]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80e4 	beq.w	800336a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_RCC_OscConfig+0x4c>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	f040 808b 	bne.w	80032c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 8087 	bne.w	80032c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b8:	4b88      	ldr	r3, [pc, #544]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_OscConfig+0x64>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e3d9      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	4b81      	ldr	r3, [pc, #516]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_RCC_OscConfig+0x7e>
 80031e0:	4b7e      	ldr	r3, [pc, #504]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e8:	e005      	b.n	80031f6 <HAL_RCC_OscConfig+0x8a>
 80031ea:	4b7c      	ldr	r3, [pc, #496]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80031ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d223      	bcs.n	8003242 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fd54 	bl	8003cac <RCC_SetFlashLatencyFromMSIRange>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e3ba      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320e:	4b73      	ldr	r3, [pc, #460]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a72      	ldr	r2, [pc, #456]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b70      	ldr	r3, [pc, #448]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	496d      	ldr	r1, [pc, #436]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322c:	4b6b      	ldr	r3, [pc, #428]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	4968      	ldr	r1, [pc, #416]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
 8003240:	e025      	b.n	800328e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003242:	4b66      	ldr	r3, [pc, #408]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a65      	ldr	r2, [pc, #404]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b63      	ldr	r3, [pc, #396]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4960      	ldr	r1, [pc, #384]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003260:	4b5e      	ldr	r3, [pc, #376]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	495b      	ldr	r1, [pc, #364]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fd14 	bl	8003cac <RCC_SetFlashLatencyFromMSIRange>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e37a      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800328e:	f000 fc81 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003292:	4602      	mov	r2, r0
 8003294:	4b51      	ldr	r3, [pc, #324]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	4950      	ldr	r1, [pc, #320]	@ (80033e0 <HAL_RCC_OscConfig+0x274>)
 80032a0:	5ccb      	ldrb	r3, [r1, r3]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	4a4e      	ldr	r2, [pc, #312]	@ (80033e4 <HAL_RCC_OscConfig+0x278>)
 80032ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032ae:	4b4e      	ldr	r3, [pc, #312]	@ (80033e8 <HAL_RCC_OscConfig+0x27c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fed8 	bl	8001068 <HAL_InitTick>
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d052      	beq.n	8003368 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	e35e      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d032      	beq.n	8003334 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032ce:	4b43      	ldr	r3, [pc, #268]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a42      	ldr	r2, [pc, #264]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032da:	f7fd ff15 	bl	8001108 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e2:	f7fd ff11 	bl	8001108 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e347      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f4:	4b39      	ldr	r3, [pc, #228]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003300:	4b36      	ldr	r3, [pc, #216]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a35      	ldr	r2, [pc, #212]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003306:	f043 0308 	orr.w	r3, r3, #8
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b33      	ldr	r3, [pc, #204]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4930      	ldr	r1, [pc, #192]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800331e:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	492b      	ldr	r1, [pc, #172]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
 8003332:	e01a      	b.n	800336a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003334:	4b29      	ldr	r3, [pc, #164]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a28      	ldr	r2, [pc, #160]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003340:	f7fd fee2 	bl	8001108 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003348:	f7fd fede 	bl	8001108 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e314      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800335a:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1dc>
 8003366:	e000      	b.n	800336a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d073      	beq.n	800345e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d005      	beq.n	8003388 <HAL_RCC_OscConfig+0x21c>
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d10e      	bne.n	80033a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d063      	beq.n	800345c <HAL_RCC_OscConfig+0x2f0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d15f      	bne.n	800345c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e2f1      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x24c>
 80033aa:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a0b      	ldr	r2, [pc, #44]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e025      	b.n	8003404 <HAL_RCC_OscConfig+0x298>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c0:	d114      	bne.n	80033ec <HAL_RCC_OscConfig+0x280>
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a05      	ldr	r2, [pc, #20]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a02      	ldr	r2, [pc, #8]	@ (80033dc <HAL_RCC_OscConfig+0x270>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e013      	b.n	8003404 <HAL_RCC_OscConfig+0x298>
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08004454 	.word	0x08004454
 80033e4:	20000004 	.word	0x20000004
 80033e8:	20000008 	.word	0x20000008
 80033ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd fe7c 	bl	8001108 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fd fe78 	bl	8001108 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	@ 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e2ae      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003426:	4b92      	ldr	r3, [pc, #584]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x2a8>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fd fe68 	bl	8001108 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fd fe64 	bl	8001108 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e29a      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x2d0>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d060      	beq.n	800352c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d005      	beq.n	800347c <HAL_RCC_OscConfig+0x310>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d119      	bne.n	80034aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d116      	bne.n	80034aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347c:	4b7c      	ldr	r3, [pc, #496]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x328>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e277      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b76      	ldr	r3, [pc, #472]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	4973      	ldr	r1, [pc, #460]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a8:	e040      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d023      	beq.n	80034fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd fe23 	bl	8001108 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fd fe1f 	bl	8001108 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e255      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d8:	4b65      	ldr	r3, [pc, #404]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b62      	ldr	r3, [pc, #392]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	495f      	ldr	r1, [pc, #380]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	e018      	b.n	800352c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fd fdff 	bl	8001108 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350e:	f7fd fdfb 	bl	8001108 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e231      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003520:	4b53      	ldr	r3, [pc, #332]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f0      	bne.n	800350e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d03c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003540:	4b4b      	ldr	r3, [pc, #300]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003546:	4a4a      	ldr	r2, [pc, #296]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd fdda 	bl	8001108 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7fd fdd6 	bl	8001108 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e20c      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356a:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 800356c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <HAL_RCC_OscConfig+0x3ec>
 8003578:	e01b      	b.n	80035b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b3d      	ldr	r3, [pc, #244]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 800357c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003580:	4a3b      	ldr	r2, [pc, #236]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fd fdbd 	bl	8001108 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fd fdb9 	bl	8001108 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e1ef      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a4:	4b32      	ldr	r3, [pc, #200]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ef      	bne.n	8003592 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80a6 	beq.w	800370c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b27      	ldr	r3, [pc, #156]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d4:	4a26      	ldr	r2, [pc, #152]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	@ 0x58
 80035dc:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <HAL_RCC_OscConfig+0x508>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d118      	bne.n	800362a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <HAL_RCC_OscConfig+0x508>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003674 <HAL_RCC_OscConfig+0x508>)
 80035fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003602:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003604:	f7fd fd80 	bl	8001108 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fd fd7c 	bl	8001108 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1b2      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361e:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_RCC_OscConfig+0x508>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <HAL_RCC_OscConfig+0x4d8>
 8003632:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003642:	e029      	b.n	8003698 <HAL_RCC_OscConfig+0x52c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d115      	bne.n	8003678 <HAL_RCC_OscConfig+0x50c>
 800364c:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003652:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800365c:	4b04      	ldr	r3, [pc, #16]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003662:	4a03      	ldr	r2, [pc, #12]	@ (8003670 <HAL_RCC_OscConfig+0x504>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800366c:	e014      	b.n	8003698 <HAL_RCC_OscConfig+0x52c>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	4b9a      	ldr	r3, [pc, #616]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	4a99      	ldr	r2, [pc, #612]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003688:	4b96      	ldr	r3, [pc, #600]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	4a95      	ldr	r2, [pc, #596]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fd fd32 	bl	8001108 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fd fd2e 	bl	8001108 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e162      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036be:	4b89      	ldr	r3, [pc, #548]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ed      	beq.n	80036a8 <HAL_RCC_OscConfig+0x53c>
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fd fd1b 	bl	8001108 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fd fd17 	bl	8001108 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e14b      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ec:	4b7d      	ldr	r3, [pc, #500]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ed      	bne.n	80036d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b78      	ldr	r3, [pc, #480]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003704:	4a77      	ldr	r2, [pc, #476]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d03c      	beq.n	8003792 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01c      	beq.n	800375a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003720:	4b70      	ldr	r3, [pc, #448]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003726:	4a6f      	ldr	r2, [pc, #444]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fcea 	bl	8001108 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003738:	f7fd fce6 	bl	8001108 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e11c      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374a:	4b66      	ldr	r3, [pc, #408]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800374c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <HAL_RCC_OscConfig+0x5cc>
 8003758:	e01b      	b.n	8003792 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800375a:	4b62      	ldr	r3, [pc, #392]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800375c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003760:	4a60      	ldr	r2, [pc, #384]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fd fccd 	bl	8001108 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003772:	f7fd fcc9 	bl	8001108 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0ff      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003784:	4b57      	ldr	r3, [pc, #348]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ef      	bne.n	8003772 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80f3 	beq.w	8003982 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	f040 80c9 	bne.w	8003938 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037a6:	4b4f      	ldr	r3, [pc, #316]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d12c      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c4:	3b01      	subs	r3, #1
 80037c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d123      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d11b      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d113      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	3b01      	subs	r3, #1
 80037fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d109      	bne.n	8003814 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d06b      	beq.n	80038ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d062      	beq.n	80038e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800381a:	4b32      	ldr	r3, [pc, #200]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0ac      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800382a:	4b2e      	ldr	r3, [pc, #184]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2d      	ldr	r2, [pc, #180]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003830:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003834:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003836:	f7fd fc67 	bl	8001108 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383e:	f7fd fc63 	bl	8001108 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e099      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003850:	4b24      	ldr	r3, [pc, #144]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f0      	bne.n	800383e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800385c:	4b21      	ldr	r3, [pc, #132]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	4b21      	ldr	r3, [pc, #132]	@ (80038e8 <HAL_RCC_OscConfig+0x77c>)
 8003862:	4013      	ands	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800386c:	3a01      	subs	r2, #1
 800386e:	0112      	lsls	r2, r2, #4
 8003870:	4311      	orrs	r1, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003876:	0212      	lsls	r2, r2, #8
 8003878:	4311      	orrs	r1, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	3a01      	subs	r2, #1
 8003882:	0552      	lsls	r2, r2, #21
 8003884:	4311      	orrs	r1, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800388a:	0852      	lsrs	r2, r2, #1
 800388c:	3a01      	subs	r2, #1
 800388e:	0652      	lsls	r2, r2, #25
 8003890:	4311      	orrs	r1, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003896:	06d2      	lsls	r2, r2, #27
 8003898:	430a      	orrs	r2, r1
 800389a:	4912      	ldr	r1, [pc, #72]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038a0:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80038a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038ac:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80038b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b8:	f7fd fc26 	bl	8001108 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd fc22 	bl	8001108 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e058      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <HAL_RCC_OscConfig+0x778>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038de:	e050      	b.n	8003982 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e04f      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
 80038e4:	40021000 	.word	0x40021000
 80038e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ec:	4b27      	ldr	r3, [pc, #156]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d144      	bne.n	8003982 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f8:	4b24      	ldr	r3, [pc, #144]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a23      	ldr	r2, [pc, #140]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003902:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003904:	4b21      	ldr	r3, [pc, #132]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a20      	ldr	r2, [pc, #128]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 800390a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800390e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003910:	f7fd fbfa 	bl	8001108 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fd fbf6 	bl	8001108 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e02c      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	4b18      	ldr	r3, [pc, #96]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x7ac>
 8003936:	e024      	b.n	8003982 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d01f      	beq.n	800397e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b13      	ldr	r3, [pc, #76]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a12      	ldr	r2, [pc, #72]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 8003944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fd fbdd 	bl	8001108 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003952:	f7fd fbd9 	bl	8001108 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e00f      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f0      	bne.n	8003952 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003970:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	4905      	ldr	r1, [pc, #20]	@ (800398c <HAL_RCC_OscConfig+0x820>)
 8003976:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_RCC_OscConfig+0x824>)
 8003978:	4013      	ands	r3, r2
 800397a:	60cb      	str	r3, [r1, #12]
 800397c:	e001      	b.n	8003982 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3720      	adds	r7, #32
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000
 8003990:	feeefffc 	.word	0xfeeefffc

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0e7      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b75      	ldr	r3, [pc, #468]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d910      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b72      	ldr	r3, [pc, #456]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	4970      	ldr	r1, [pc, #448]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0cf      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d908      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b63      	ldr	r3, [pc, #396]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4960      	ldr	r1, [pc, #384]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d04c      	beq.n	8003aac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1a:	4b5a      	ldr	r3, [pc, #360]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d121      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0a6      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	4b54      	ldr	r3, [pc, #336]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d115      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e09a      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e08e      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e086      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b46      	ldr	r3, [pc, #280]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4943      	ldr	r1, [pc, #268]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fb44 	bl	8001108 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fd fb40 	bl	8001108 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e06e      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d010      	beq.n	8003ada <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	4b31      	ldr	r3, [pc, #196]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d208      	bcs.n	8003ada <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	492b      	ldr	r1, [pc, #172]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ada:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d210      	bcs.n	8003b0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae8:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 0207 	bic.w	r2, r3, #7
 8003af0:	4923      	ldr	r1, [pc, #140]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af8:	4b21      	ldr	r3, [pc, #132]	@ (8003b80 <HAL_RCC_ClockConfig+0x1ec>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e036      	b.n	8003b78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b16:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4918      	ldr	r1, [pc, #96]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b34:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4910      	ldr	r1, [pc, #64]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b48:	f000 f824 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	490b      	ldr	r1, [pc, #44]	@ (8003b88 <HAL_RCC_ClockConfig+0x1f4>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <HAL_RCC_ClockConfig+0x1f8>)
 8003b66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_ClockConfig+0x1fc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd fa7b 	bl	8001068 <HAL_InitTick>
 8003b72:	4603      	mov	r3, r0
 8003b74:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40022000 	.word	0x40022000
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08004454 	.word	0x08004454
 8003b8c:	20000004 	.word	0x20000004
 8003b90:	20000008 	.word	0x20000008

08003b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	@ 0x24
 8003b98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bac:	4b3b      	ldr	r3, [pc, #236]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d121      	bne.n	8003c06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d11e      	bne.n	8003c06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc8:	4b34      	ldr	r3, [pc, #208]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bd4:	4b31      	ldr	r3, [pc, #196]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e005      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003be4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c0c:	4b25      	ldr	r3, [pc, #148]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	e004      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c18:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b0c      	cmp	r3, #12
 8003c20:	d134      	bne.n	8003c8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0xa6>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d003      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0xac>
 8003c38:	e005      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c3c:	617b      	str	r3, [r7, #20]
      break;
 8003c3e:	e005      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c40:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c42:	617b      	str	r3, [r7, #20]
      break;
 8003c44:	e002      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	617b      	str	r3, [r7, #20]
      break;
 8003c4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c4c:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	3301      	adds	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c5a:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	0a1b      	lsrs	r3, r3, #8
 8003c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	fb03 f202 	mul.w	r2, r3, r2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c72:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	0e5b      	lsrs	r3, r3, #25
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3724      	adds	r7, #36	@ 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	08004464 	.word	0x08004464
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	007a1200 	.word	0x007a1200

08003cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cc4:	f7ff f9ee 	bl	80030a4 <HAL_PWREx_GetVoltageRange>
 8003cc8:	6178      	str	r0, [r7, #20]
 8003cca:	e014      	b.n	8003cf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ccc:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cd8:	4b22      	ldr	r3, [pc, #136]	@ (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ce4:	f7ff f9de 	bl	80030a4 <HAL_PWREx_GetVoltageRange>
 8003ce8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cea:	4b1e      	ldr	r3, [pc, #120]	@ (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	4a1d      	ldr	r2, [pc, #116]	@ (8003d64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfc:	d10b      	bne.n	8003d16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b80      	cmp	r3, #128	@ 0x80
 8003d02:	d919      	bls.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d08:	d902      	bls.n	8003d10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	e013      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d10:	2301      	movs	r3, #1
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	e010      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b80      	cmp	r3, #128	@ 0x80
 8003d1a:	d902      	bls.n	8003d22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	e00a      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b80      	cmp	r3, #128	@ 0x80
 8003d26:	d102      	bne.n	8003d2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d28:	2302      	movs	r3, #2
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	e004      	b.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b70      	cmp	r3, #112	@ 0x70
 8003d32:	d101      	bne.n	8003d38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d34:	2301      	movs	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 0207 	bic.w	r2, r3, #7
 8003d40:	4909      	ldr	r1, [pc, #36]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d48:	4b07      	ldr	r3, [pc, #28]	@ (8003d68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d001      	beq.n	8003d5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40022000 	.word	0x40022000

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d74:	2300      	movs	r3, #0
 8003d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d031      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d90:	d01a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d96:	d814      	bhi.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d009      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003da0:	d10f      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003da2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	4a5c      	ldr	r2, [pc, #368]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dae:	e00c      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fa22 	bl	8004200 <RCCEx_PLLSAI1_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	74fb      	strb	r3, [r7, #19]
      break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dca:	7cfb      	ldrb	r3, [r7, #19]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dd0:	4b51      	ldr	r3, [pc, #324]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	494e      	ldr	r1, [pc, #312]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003de6:	e001      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 809e 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dfe:	4b46      	ldr	r3, [pc, #280]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	4b40      	ldr	r3, [pc, #256]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e18:	4a3f      	ldr	r2, [pc, #252]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e20:	4b3d      	ldr	r3, [pc, #244]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e30:	4b3a      	ldr	r3, [pc, #232]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a39      	ldr	r2, [pc, #228]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e3c:	f7fd f964 	bl	8001108 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e42:	e009      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e44:	f7fd f960 	bl	8001108 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d902      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	74fb      	strb	r3, [r7, #19]
        break;
 8003e56:	e005      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e58:	4b30      	ldr	r3, [pc, #192]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ef      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d15a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01e      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d019      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e86:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e98:	4a1f      	ldr	r2, [pc, #124]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eb2:	4a19      	ldr	r2, [pc, #100]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d016      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd f920 	bl	8001108 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eca:	e00b      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fd f91c 	bl	8001108 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d902      	bls.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	74fb      	strb	r3, [r7, #19]
            break;
 8003ee2:	e006      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0ec      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef8:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	4904      	ldr	r1, [pc, #16]	@ (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f0e:	e009      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	74bb      	strb	r3, [r7, #18]
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f24:	7c7b      	ldrb	r3, [r7, #17]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	4a8c      	ldr	r2, [pc, #560]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f42:	4b87      	ldr	r3, [pc, #540]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f48:	f023 0203 	bic.w	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	4983      	ldr	r1, [pc, #524]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f64:	4b7e      	ldr	r3, [pc, #504]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	f023 020c 	bic.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	497b      	ldr	r1, [pc, #492]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f86:	4b76      	ldr	r3, [pc, #472]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	4972      	ldr	r1, [pc, #456]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa8:	4b6d      	ldr	r3, [pc, #436]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	496a      	ldr	r1, [pc, #424]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fca:	4b65      	ldr	r3, [pc, #404]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd8:	4961      	ldr	r1, [pc, #388]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fec:	4b5c      	ldr	r3, [pc, #368]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	4959      	ldr	r1, [pc, #356]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800400e:	4b54      	ldr	r3, [pc, #336]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401c:	4950      	ldr	r1, [pc, #320]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004030:	4b4b      	ldr	r3, [pc, #300]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	4948      	ldr	r1, [pc, #288]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004052:	4b43      	ldr	r3, [pc, #268]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004060:	493f      	ldr	r1, [pc, #252]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d028      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004074:	4b3a      	ldr	r3, [pc, #232]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004082:	4937      	ldr	r1, [pc, #220]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004092:	d106      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004094:	4b32      	ldr	r3, [pc, #200]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4a31      	ldr	r2, [pc, #196]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800409a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409e:	60d3      	str	r3, [r2, #12]
 80040a0:	e011      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	2101      	movs	r1, #1
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f8a4 	bl	8004200 <RCCEx_PLLSAI1_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d028      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e0:	491f      	ldr	r1, [pc, #124]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f0:	d106      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fc:	60d3      	str	r3, [r2, #12]
 80040fe:	e011      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004104:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004108:	d10c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3304      	adds	r3, #4
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f875 	bl	8004200 <RCCEx_PLLSAI1_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800411a:	7cfb      	ldrb	r3, [r7, #19]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413e:	4908      	ldr	r1, [pc, #32]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800414a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800414e:	d109      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004150:	4b03      	ldr	r3, [pc, #12]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a02      	ldr	r2, [pc, #8]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800415a:	60d3      	str	r3, [r2, #12]
 800415c:	e014      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800415e:	bf00      	nop
 8004160:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004168:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800416c:	d10c      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f843 	bl	8004200 <RCCEx_PLLSAI1_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01c      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004194:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a2:	4916      	ldr	r1, [pc, #88]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041b2:	d10c      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	2102      	movs	r1, #2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f820 	bl	8004200 <RCCEx_PLLSAI1_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041da:	4b08      	ldr	r3, [pc, #32]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e8:	4904      	ldr	r1, [pc, #16]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000

08004200 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800420e:	4b74      	ldr	r3, [pc, #464]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d018      	beq.n	800424c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800421a:	4b71      	ldr	r3, [pc, #452]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0203 	and.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d10d      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
       ||
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004232:	4b6b      	ldr	r3, [pc, #428]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
       ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d047      	beq.n	80042d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	73fb      	strb	r3, [r7, #15]
 800424a:	e044      	b.n	80042d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b03      	cmp	r3, #3
 8004252:	d018      	beq.n	8004286 <RCCEx_PLLSAI1_Config+0x86>
 8004254:	2b03      	cmp	r3, #3
 8004256:	d825      	bhi.n	80042a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004258:	2b01      	cmp	r3, #1
 800425a:	d002      	beq.n	8004262 <RCCEx_PLLSAI1_Config+0x62>
 800425c:	2b02      	cmp	r3, #2
 800425e:	d009      	beq.n	8004274 <RCCEx_PLLSAI1_Config+0x74>
 8004260:	e020      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004262:	4b5f      	ldr	r3, [pc, #380]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11d      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004272:	e01a      	b.n	80042aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004274:	4b5a      	ldr	r3, [pc, #360]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d116      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004284:	e013      	b.n	80042ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004286:	4b56      	ldr	r3, [pc, #344]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004292:	4b53      	ldr	r3, [pc, #332]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042a2:	e006      	b.n	80042b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      break;
 80042a8:	e004      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10d      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ba:	4b49      	ldr	r3, [pc, #292]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	430b      	orrs	r3, r1
 80042d0:	4943      	ldr	r1, [pc, #268]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d17c      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042dc:	4b40      	ldr	r3, [pc, #256]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a3f      	ldr	r2, [pc, #252]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e8:	f7fc ff0e 	bl	8001108 <HAL_GetTick>
 80042ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ee:	e009      	b.n	8004304 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f0:	f7fc ff0a 	bl	8001108 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d902      	bls.n	8004304 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	73fb      	strb	r3, [r7, #15]
        break;
 8004302:	e005      	b.n	8004310 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004304:	4b36      	ldr	r3, [pc, #216]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ef      	bne.n	80042f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d15f      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d110      	bne.n	800433e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800431c:	4b30      	ldr	r3, [pc, #192]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004324:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6892      	ldr	r2, [r2, #8]
 800432c:	0211      	lsls	r1, r2, #8
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68d2      	ldr	r2, [r2, #12]
 8004332:	06d2      	lsls	r2, r2, #27
 8004334:	430a      	orrs	r2, r1
 8004336:	492a      	ldr	r1, [pc, #168]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004338:	4313      	orrs	r3, r2
 800433a:	610b      	str	r3, [r1, #16]
 800433c:	e027      	b.n	800438e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d112      	bne.n	800436a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004344:	4b26      	ldr	r3, [pc, #152]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800434c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	0211      	lsls	r1, r2, #8
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6912      	ldr	r2, [r2, #16]
 800435a:	0852      	lsrs	r2, r2, #1
 800435c:	3a01      	subs	r2, #1
 800435e:	0552      	lsls	r2, r2, #21
 8004360:	430a      	orrs	r2, r1
 8004362:	491f      	ldr	r1, [pc, #124]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	610b      	str	r3, [r1, #16]
 8004368:	e011      	b.n	800438e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436a:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004372:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6892      	ldr	r2, [r2, #8]
 800437a:	0211      	lsls	r1, r2, #8
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6952      	ldr	r2, [r2, #20]
 8004380:	0852      	lsrs	r2, r2, #1
 8004382:	3a01      	subs	r2, #1
 8004384:	0652      	lsls	r2, r2, #25
 8004386:	430a      	orrs	r2, r1
 8004388:	4915      	ldr	r1, [pc, #84]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800438e:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004394:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004398:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fc feb5 	bl	8001108 <HAL_GetTick>
 800439e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043a0:	e009      	b.n	80043b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043a2:	f7fc feb1 	bl	8001108 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d902      	bls.n	80043b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	73fb      	strb	r3, [r7, #15]
          break;
 80043b4:	e005      	b.n	80043c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b6:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ef      	beq.n	80043a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	4903      	ldr	r1, [pc, #12]	@ (80043e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000

080043e4 <memset>:
 80043e4:	4402      	add	r2, r0
 80043e6:	4603      	mov	r3, r0
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d100      	bne.n	80043ee <memset+0xa>
 80043ec:	4770      	bx	lr
 80043ee:	f803 1b01 	strb.w	r1, [r3], #1
 80043f2:	e7f9      	b.n	80043e8 <memset+0x4>

080043f4 <__libc_init_array>:
 80043f4:	b570      	push	{r4, r5, r6, lr}
 80043f6:	4d0d      	ldr	r5, [pc, #52]	@ (800442c <__libc_init_array+0x38>)
 80043f8:	4c0d      	ldr	r4, [pc, #52]	@ (8004430 <__libc_init_array+0x3c>)
 80043fa:	1b64      	subs	r4, r4, r5
 80043fc:	10a4      	asrs	r4, r4, #2
 80043fe:	2600      	movs	r6, #0
 8004400:	42a6      	cmp	r6, r4
 8004402:	d109      	bne.n	8004418 <__libc_init_array+0x24>
 8004404:	4d0b      	ldr	r5, [pc, #44]	@ (8004434 <__libc_init_array+0x40>)
 8004406:	4c0c      	ldr	r4, [pc, #48]	@ (8004438 <__libc_init_array+0x44>)
 8004408:	f000 f818 	bl	800443c <_init>
 800440c:	1b64      	subs	r4, r4, r5
 800440e:	10a4      	asrs	r4, r4, #2
 8004410:	2600      	movs	r6, #0
 8004412:	42a6      	cmp	r6, r4
 8004414:	d105      	bne.n	8004422 <__libc_init_array+0x2e>
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	f855 3b04 	ldr.w	r3, [r5], #4
 800441c:	4798      	blx	r3
 800441e:	3601      	adds	r6, #1
 8004420:	e7ee      	b.n	8004400 <__libc_init_array+0xc>
 8004422:	f855 3b04 	ldr.w	r3, [r5], #4
 8004426:	4798      	blx	r3
 8004428:	3601      	adds	r6, #1
 800442a:	e7f2      	b.n	8004412 <__libc_init_array+0x1e>
 800442c:	08004494 	.word	0x08004494
 8004430:	08004494 	.word	0x08004494
 8004434:	08004494 	.word	0x08004494
 8004438:	08004498 	.word	0x08004498

0800443c <_init>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr

08004448 <_fini>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr
