
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000426c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080043f8  080043f8  000053f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004438  08004438  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004438  08004438  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004438  08004438  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004438  08004438  00005438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800443c  0800443c  0000543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004440  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800444c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800444c  00006104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010530  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bc  00000000  00000000  0001656c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00018d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089f  00000000  00000000  000198a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d62  00000000  00000000  0001a13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001060f  00000000  00000000  0003cea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca7f4  00000000  00000000  0004d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117ca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c60  00000000  00000000  00117ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080043e0 	.word	0x080043e0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080043e0 	.word	0x080043e0

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]

    BMS_1.bq_i2c = i2c;
 80001d4:	4a29      	ldr	r2, [pc, #164]	@ (800027c <BQ_Init+0xb0>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]
    BMS_1.bq_deviceAddress = Address;
 80001da:	4b28      	ldr	r3, [pc, #160]	@ (800027c <BQ_Init+0xb0>)
 80001dc:	2217      	movs	r2, #23
 80001de:	711a      	strb	r2, [r3, #4]
#ifdef USE_SCANNER
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, BMS_1.bq_deviceAddress, 3, 100);
 80001e0:	4b26      	ldr	r3, [pc, #152]	@ (800027c <BQ_Init+0xb0>)
 80001e2:	791b      	ldrb	r3, [r3, #4]
 80001e4:	4619      	mov	r1, r3
 80001e6:	2364      	movs	r3, #100	@ 0x64
 80001e8:	2203      	movs	r2, #3
 80001ea:	6878      	ldr	r0, [r7, #4]
 80001ec:	f001 fd2a 	bl	8001c44 <HAL_I2C_IsDeviceReady>
 80001f0:	4603      	mov	r3, r0
 80001f2:	73fb      	strb	r3, [r7, #15]
	while (ret != HAL_OK)
 80001f4:	e011      	b.n	800021a <BQ_Init+0x4e>
	{
//		I2CHelper_CheckAddress(&BMS_1);
		ret = HAL_I2C_IsDeviceReady(i2c, BMS_1.bq_deviceAddress, 3, 100);
 80001f6:	4b21      	ldr	r3, [pc, #132]	@ (800027c <BQ_Init+0xb0>)
 80001f8:	791b      	ldrb	r3, [r3, #4]
 80001fa:	4619      	mov	r1, r3
 80001fc:	2364      	movs	r3, #100	@ 0x64
 80001fe:	2203      	movs	r2, #3
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f001 fd1f 	bl	8001c44 <HAL_I2C_IsDeviceReady>
 8000206:	4603      	mov	r3, r0
 8000208:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(500);
 800020a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800020e:	f000 ff27 	bl	8001060 <HAL_Delay>
	#ifdef debug
		if(ret != HAL_OK){
 8000212:	7bfb      	ldrb	r3, [r7, #15]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d000      	beq.n	800021a <BQ_Init+0x4e>
			__asm("nop"); //insert breakpoint here
 8000218:	bf00      	nop
	while (ret != HAL_OK)
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d1ea      	bne.n	80001f6 <BQ_Init+0x2a>
		}
	#endif
	}
#endif

    HAL_Delay(1500);
 8000220:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000224:	f000 ff1c 	bl	8001060 <HAL_Delay>
    BQAction_UpdateData(&BMS_1);
 8000228:	4814      	ldr	r0, [pc, #80]	@ (800027c <BQ_Init+0xb0>)
 800022a:	f000 fa57 	bl	80006dc <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(&BMS_1);
 800022e:	4813      	ldr	r0, [pc, #76]	@ (800027c <BQ_Init+0xb0>)
 8000230:	f000 fa1f 	bl	8000672 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(&BMS_1, false);
 8000234:	2100      	movs	r1, #0
 8000236:	4811      	ldr	r0, [pc, #68]	@ (800027c <BQ_Init+0xb0>)
 8000238:	f000 f90b 	bl	8000452 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(&BMS_1, false);
 800023c:	2100      	movs	r1, #0
 800023e:	480f      	ldr	r0, [pc, #60]	@ (800027c <BQ_Init+0xb0>)
 8000240:	f000 f91d 	bl	800047e <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(&BMS_1, false);
 8000244:	2100      	movs	r1, #0
 8000246:	480d      	ldr	r0, [pc, #52]	@ (800027c <BQ_Init+0xb0>)
 8000248:	f000 f92f 	bl	80004aa <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(&BMS_1, true);
 800024c:	2101      	movs	r1, #1
 800024e:	480b      	ldr	r0, [pc, #44]	@ (800027c <BQ_Init+0xb0>)
 8000250:	f000 f941 	bl	80004d6 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(&BMS_1, true);
 8000254:	2101      	movs	r1, #1
 8000256:	4809      	ldr	r0, [pc, #36]	@ (800027c <BQ_Init+0xb0>)
 8000258:	f000 f953 	bl	8000502 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(&BMS_1, true);
 800025c:	2101      	movs	r1, #1
 800025e:	4807      	ldr	r0, [pc, #28]	@ (800027c <BQ_Init+0xb0>)
 8000260:	f000 f965 	bl	800052e <BQAction_SetManufacturingLF>
    BQAction_SetLed(&BMS_1, false);
 8000264:	2100      	movs	r1, #0
 8000266:	4805      	ldr	r0, [pc, #20]	@ (800027c <BQ_Init+0xb0>)
 8000268:	f000 f8dd 	bl	8000426 <BQAction_SetLed>

    BQAction_UpdateData(&BMS_1);
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <BQ_Init+0xb0>)
 800026e:	f000 fa35 	bl	80006dc <BQAction_UpdateData>
}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000007c 	.word	0x2000007c

08000280 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 800028c:	2344      	movs	r3, #68	@ 0x44
 800028e:	733b      	strb	r3, [r7, #12]
 8000290:	2302      	movs	r3, #2
 8000292:	737b      	strb	r3, [r7, #13]
 8000294:	887b      	ldrh	r3, [r7, #2]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	73bb      	strb	r3, [r7, #14]
 800029a:	887b      	ldrh	r3, [r7, #2]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	b29b      	uxth	r3, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	791b      	ldrb	r3, [r3, #4]
 80002ac:	4619      	mov	r1, r3
 80002ae:	f107 020c 	add.w	r2, r7, #12
 80002b2:	2364      	movs	r3, #100	@ 0x64
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2304      	movs	r3, #4
 80002b8:	f001 fab6 	bl	8001828 <HAL_I2C_Master_Transmit>
}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b092      	sub	sp, #72	@ 0x48
 80002c8:	af02      	add	r7, sp, #8
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	607a      	str	r2, [r7, #4]
 80002ce:	461a      	mov	r2, r3
 80002d0:	460b      	mov	r3, r1
 80002d2:	817b      	strh	r3, [r7, #10]
 80002d4:	4613      	mov	r3, r2
 80002d6:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002d8:	2344      	movs	r3, #68	@ 0x44
 80002da:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002de:	2302      	movs	r3, #2
 80002e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002e4:	897b      	ldrh	r3, [r7, #10]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002ec:	897b      	ldrh	r3, [r7, #10]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	4619      	mov	r1, r3
 8000302:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2304      	movs	r3, #4
 800030c:	f001 fa8c 	bl	8001828 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 8000310:	2344      	movs	r3, #68	@ 0x44
 8000312:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000316:	7a7b      	ldrb	r3, [r7, #9]
 8000318:	3302      	adds	r3, #2
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, addr, 2, 100);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	6818      	ldr	r0, [r3, #0]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	791b      	ldrb	r3, [r3, #4]
 8000328:	4619      	mov	r1, r3
 800032a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800032e:	2364      	movs	r3, #100	@ 0x64
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2302      	movs	r3, #2
 8000334:	f001 fa78 	bl	8001828 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000338:	2300      	movs	r3, #0
 800033a:	613b      	str	r3, [r7, #16]
 800033c:	f107 0314 	add.w	r3, r7, #20
 8000340:	221f      	movs	r2, #31
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f004 f81f 	bl	8004388 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress, result, 35, 100);
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	6818      	ldr	r0, [r3, #0]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	791b      	ldrb	r3, [r3, #4]
 8000352:	4619      	mov	r1, r3
 8000354:	f107 0210 	add.w	r2, r7, #16
 8000358:	2364      	movs	r3, #100	@ 0x64
 800035a:	9300      	str	r3, [sp, #0]
 800035c:	2323      	movs	r3, #35	@ 0x23
 800035e:	f001 fb7b 	bl	8001a58 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000362:	2300      	movs	r3, #0
 8000364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000366:	e00c      	b.n	8000382 <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800036a:	1cda      	adds	r2, r3, #3
 800036c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	440b      	add	r3, r1
 8000372:	3240      	adds	r2, #64	@ 0x40
 8000374:	443a      	add	r2, r7
 8000376:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 800037a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800037c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037e:	3301      	adds	r3, #1
 8000380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000382:	7a7b      	ldrb	r3, [r7, #9]
 8000384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000386:	429a      	cmp	r2, r3
 8000388:	dbee      	blt.n	8000368 <BQ_ReadMABlockCommand+0xa4>
    }
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3740      	adds	r7, #64	@ 0x40
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80003a0:	f107 020c 	add.w	r2, r7, #12
 80003a4:	8879      	ldrh	r1, [r7, #2]
 80003a6:	2302      	movs	r3, #2
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff8b 	bl	80002c4 <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003b2:	7b3b      	ldrb	r3, [r7, #12]
 80003b4:	461a      	mov	r2, r3
 80003b6:	89fb      	ldrh	r3, [r7, #14]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003bc:	7b7b      	ldrb	r3, [r7, #13]
 80003be:	021b      	lsls	r3, r3, #8
 80003c0:	b21a      	sxth	r2, r3
 80003c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003c6:	4313      	orrs	r3, r2
 80003c8:	b21b      	sxth	r3, r3
 80003ca:	81fb      	strh	r3, [r7, #14]

    return result;
 80003cc:	89fb      	ldrh	r3, [r7, #14]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b084      	sub	sp, #16
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	460b      	mov	r3, r1
 80003e0:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003e2:	f107 0208 	add.w	r2, r7, #8
 80003e6:	8879      	ldrh	r1, [r7, #2]
 80003e8:	2304      	movs	r3, #4
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f7ff ff6a 	bl	80002c4 <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 80003f4:	7a3b      	ldrb	r3, [r7, #8]
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 80003fe:	7a7b      	ldrb	r3, [r7, #9]
 8000400:	021b      	lsls	r3, r3, #8
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	4313      	orrs	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000408:	7abb      	ldrb	r3, [r7, #10]
 800040a:	041b      	lsls	r3, r3, #16
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4313      	orrs	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	061b      	lsls	r3, r3, #24
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4313      	orrs	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]

    return result;
 800041c:	68fb      	ldr	r3, [r7, #12]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	460b      	mov	r3, r1
 8000430:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	7a9b      	ldrb	r3, [r3, #10]
 8000436:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	78fa      	ldrb	r2, [r7, #3]
 800043e:	429a      	cmp	r2, r3
 8000440:	d003      	beq.n	800044a <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 8000442:	212b      	movs	r1, #43	@ 0x2b
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff1b 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b082      	sub	sp, #8
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
 800045a:	460b      	mov	r3, r1
 800045c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	7e1b      	ldrb	r3, [r3, #24]
 8000462:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000466:	b2db      	uxtb	r3, r3
 8000468:	78fa      	ldrb	r2, [r7, #3]
 800046a:	429a      	cmp	r2, r3
 800046c:	d003      	beq.n	8000476 <BQAction_SetManufacturingAllFet+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 800046e:	2122      	movs	r1, #34	@ 0x22
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f7ff ff05 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b082      	sub	sp, #8
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
 8000486:	460b      	mov	r3, r1
 8000488:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	7e5b      	ldrb	r3, [r3, #25]
 800048e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000492:	b2db      	uxtb	r3, r3
 8000494:	78fa      	ldrb	r2, [r7, #3]
 8000496:	429a      	cmp	r2, r3
 8000498:	d003      	beq.n	80004a2 <BQAction_SetManufacturingFuse+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 800049a:	2126      	movs	r1, #38	@ 0x26
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f7ff feef 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	460b      	mov	r3, r1
 80004b4:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	7e5b      	ldrb	r3, [r3, #25]
 80004ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	78fa      	ldrb	r2, [r7, #3]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d003      	beq.n	80004ce <BQAction_SetCalibration+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004c6:	212d      	movs	r1, #45	@ 0x2d
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f7ff fed9 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
 80004de:	460b      	mov	r3, r1
 80004e0:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	7e1b      	ldrb	r3, [r3, #24]
 80004e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	78fa      	ldrb	r2, [r7, #3]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d003      	beq.n	80004fa <BQAction_SetManufacturingGauging+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 80004f2:	2121      	movs	r1, #33	@ 0x21
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff fec3 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	460b      	mov	r3, r1
 800050c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	7e1b      	ldrb	r3, [r3, #24]
 8000512:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000516:	b2db      	uxtb	r3, r3
 8000518:	78fa      	ldrb	r2, [r7, #3]
 800051a:	429a      	cmp	r2, r3
 800051c:	d003      	beq.n	8000526 <BQAction_SetManufacturingPF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 800051e:	2124      	movs	r1, #36	@ 0x24
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff fead 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7e1b      	ldrb	r3, [r3, #24]
 800053e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000542:	b2db      	uxtb	r3, r3
 8000544:	78fa      	ldrb	r2, [r7, #3]
 8000546:	429a      	cmp	r2, r3
 8000548:	d003      	beq.n	8000552 <BQAction_SetManufacturingLF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 800054a:	2123      	movs	r1, #35	@ 0x23
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff fe97 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <BQAction_EnableDischarging>:
/**
 * @brief enable discharge fet and disable the rest
 * @param none
 */
bool BQAction_EnableDischarging(BQ_data* BMS)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b082      	sub	sp, #8
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
    if (BQ_GetChargeMode(BMS) == DISCHARGE){
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f942 	bl	80007ec <BQ_GetChargeMode>
 8000568:	4603      	mov	r3, r0
 800056a:	2b02      	cmp	r3, #2
 800056c:	d101      	bne.n	8000572 <BQAction_EnableDischarging+0x18>
        return false;
 800056e:	2300      	movs	r3, #0
 8000570:	e043      	b.n	80005fa <BQAction_EnableDischarging+0xa0>
    }

    // turn off unused fets
    if (BMS->BQ_manufacturingStatus.bits.chg){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7e1b      	ldrb	r3, [r3, #24]
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <BQAction_EnableDischarging+0x2e>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000580:	211f      	movs	r1, #31
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fe7c 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pdsg){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7e5b      	ldrb	r3, [r3, #25]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d003      	beq.n	800059e <BQAction_EnableDischarging+0x44>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000596:	211c      	movs	r1, #28
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff fe71 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pchg){
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7e1b      	ldrb	r3, [r3, #24]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d003      	beq.n	80005b4 <BQAction_EnableDischarging+0x5a>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 80005ac:	211e      	movs	r1, #30
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f7ff fe66 	bl	8000280 <BQ_WriteMABlockCommand>
    }

    // turn on discharge
    if (!BMS->BQ_manufacturingStatus.bits.dsg){
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7e1b      	ldrb	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <BQAction_EnableDischarging+0x70>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80005c2:	2120      	movs	r1, #32
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fe5b 	bl	8000280 <BQ_WriteMABlockCommand>
    }

    HAL_Delay(1500);
 80005ca:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005ce:	f000 fd47 	bl	8001060 <HAL_Delay>

    if (BQ_GetChargeMode(BMS) != CHARGE){
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f000 f90a 	bl	80007ec <BQ_GetChargeMode>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d001      	beq.n	80005e2 <BQAction_EnableDischarging+0x88>
        return true;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00b      	b.n	80005fa <BQAction_EnableDischarging+0xa0>
    }else{
        // turn off discharge
        if (BMS->BQ_manufacturingStatus.bits.dsg){
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7e1b      	ldrb	r3, [r3, #24]
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <BQAction_EnableDischarging+0x9e>
            BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80005f0:	2120      	movs	r1, #32
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff fe44 	bl	8000280 <BQ_WriteMABlockCommand>
        }
        return false;
 80005f8:	2300      	movs	r3, #0
    }
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <BQAction_DisableFets>:
/**
 * @brief disable all fets
 * @param none
 */
bool BQAction_DisableFets(BQ_data* BMS)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f8cc 	bl	80007a8 <BQAction_UpdateOpStatus>
    if (BMS->BQ_manufacturingStatus.bits.chg){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7e1b      	ldrb	r3, [r3, #24]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <BQAction_DisableFets+0x24>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 800061e:	211f      	movs	r1, #31
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff fe2d 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.dsg){
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7e1b      	ldrb	r3, [r3, #24]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <BQAction_DisableFets+0x3a>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000634:	2120      	movs	r1, #32
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f7ff fe22 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pchg){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7e1b      	ldrb	r3, [r3, #24]
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <BQAction_DisableFets+0x50>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 800064a:	211e      	movs	r1, #30
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff fe17 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pdsg){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7e5b      	ldrb	r3, [r3, #25]
 8000656:	f003 0320 	and.w	r3, r3, #32
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <BQAction_DisableFets+0x66>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000660:	211c      	movs	r1, #28
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff fe0c 	bl	8000280 <BQ_WriteMABlockCommand>
    }

    return true;
 8000668:	2301      	movs	r3, #1
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f894 	bl	80007a8 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode =  BMS->BQ_opStatus.bits.sec;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7a5b      	ldrb	r3, [r3, #9]
 8000684:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000688:	b2db      	uxtb	r3, r3
 800068a:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 800068c:	e01a      	b.n	80006c4 <BQAction_TryUnsealedDevice+0x52>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 800068e:	f240 4114 	movw	r1, #1044	@ 0x414
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff fdf4 	bl	8000280 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000698:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069c:	f000 fce0 	bl	8001060 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 80006a0:	f243 6172 	movw	r1, #13938	@ 0x3672
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fdeb 	bl	8000280 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 80006aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006ae:	f000 fcd7 	bl	8001060 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f000 f878 	bl	80007a8 <BQAction_UpdateOpStatus>
        securityMode = BMS->BQ_opStatus.bits.sec;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	7a5b      	ldrb	r3, [r3, #9]
 80006bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d0e1      	beq.n	800068e <BQAction_TryUnsealedDevice+0x1c>
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0de      	beq.n	800068e <BQAction_TryUnsealedDevice+0x1c>
    }
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006e4:	2157      	movs	r1, #87	@ 0x57
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff fe54 	bl	8000394 <BQ_ReadCommandAsShort>
 80006ec:	4603      	mov	r3, r0
 80006ee:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	8bfa      	ldrh	r2, [r7, #30]
 80006f4:	831a      	strh	r2, [r3, #24]
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80006f6:	2155      	movs	r1, #85	@ 0x55
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fe6c 	bl	80003d6 <BQ_ReadCommandAsInt>
 80006fe:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	69ba      	ldr	r2, [r7, #24]
 8000704:	60da      	str	r2, [r3, #12]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 8000706:	2154      	movs	r1, #84	@ 0x54
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fe64 	bl	80003d6 <BQ_ReadCommandAsInt>
 800070e:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	609a      	str	r2, [r3, #8]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000716:	2156      	movs	r1, #86	@ 0x56
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff fe5c 	bl	80003d6 <BQ_ReadCommandAsInt>
 800071e:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	611a      	str	r2, [r3, #16]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000726:	2103      	movs	r1, #3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 fa0d 	bl	8000b48 <I2CHelper_ReadRegisterAsShort>
 800072e:	4603      	mov	r3, r0
 8000730:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	89fa      	ldrh	r2, [r7, #14]
 8000736:	82da      	strh	r2, [r3, #22]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryStatus);
 8000738:	2116      	movs	r1, #22
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 fa04 	bl	8000b48 <I2CHelper_ReadRegisterAsShort>
 8000740:	4603      	mov	r3, r0
 8000742:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	89ba      	ldrh	r2, [r7, #12]
 8000748:	829a      	strh	r2, [r3, #20]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_GPIORead);
 800074a:	2148      	movs	r1, #72	@ 0x48
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 fa1c 	bl	8000b8a <I2CHelper_ReadRegisterAsChar>
 8000752:	4603      	mov	r3, r0
 8000754:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7afa      	ldrb	r2, [r7, #11]
 800075a:	769a      	strb	r2, [r3, #26]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1.all, 32);
 800075c:	2320      	movs	r3, #32
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <BQAction_UpdateData+0xbc>)
 8000760:	2171      	movs	r1, #113	@ 0x71
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff fdae 	bl	80002c4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2.all, 16);
 8000768:	2310      	movs	r3, #16
 800076a:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <BQAction_UpdateData+0xc0>)
 800076c:	2172      	movs	r1, #114	@ 0x72
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fda8 	bl	80002c4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3.all, 18);
 8000774:	2312      	movs	r3, #18
 8000776:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <BQAction_UpdateData+0xc4>)
 8000778:	217b      	movs	r1, #123	@ 0x7b
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fda2 	bl	80002c4 <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal.all, 32);
 8000780:	2320      	movs	r3, #32
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <BQAction_UpdateData+0xc8>)
 8000784:	f24f 0181 	movw	r1, #61569	@ 0xf081
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fd9b 	bl	80002c4 <BQ_ReadMABlockCommand>
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000098 	.word	0x20000098
 800079c:	200000b8 	.word	0x200000b8
 80007a0:	200000c8 	.word	0x200000c8
 80007a4:	200000da 	.word	0x200000da

080007a8 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1.all, 32);
 80007b0:	2320      	movs	r3, #32
 80007b2:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <BQAction_UpdateOpStatus+0x40>)
 80007b4:	2171      	movs	r1, #113	@ 0x71
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fd84 	bl	80002c4 <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80007bc:	2154      	movs	r1, #84	@ 0x54
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fe09 	bl	80003d6 <BQ_ReadCommandAsInt>
 80007c4:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	609a      	str	r2, [r3, #8]
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80007cc:	2157      	movs	r1, #87	@ 0x57
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff fde0 	bl	8000394 <BQ_ReadCommandAsShort>
 80007d4:	4603      	mov	r3, r0
 80007d6:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	897a      	ldrh	r2, [r7, #10]
 80007dc:	831a      	strh	r2, [r3, #24]
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000098 	.word	0x20000098

080007ec <BQ_GetChargeMode>:
/**
 * @brief get charge from BQ_opStatus
 * @return CHARGE, DISCHARGE or RELAX
 */
CHARGE_MODE BQ_GetChargeMode(BQ_data* BMS)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ffd7 	bl	80007a8 <BQAction_UpdateOpStatus>
    uint16_t packVoltage = BMS->BQ_daStatus1.sep.pack_voltage;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80007fe:	81fb      	strh	r3, [r7, #14]
    uint16_t current = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_Current);
 8000800:	210a      	movs	r1, #10
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f9a0 	bl	8000b48 <I2CHelper_ReadRegisterAsShort>
 8000808:	4603      	mov	r3, r0
 800080a:	81bb      	strh	r3, [r7, #12]

    if (packVoltage > 1000 && BMS->BQ_opStatus.bits.chg && BMS->BQ_opStatus.bits.pchg && BMS->BQ_manufacturingStatus.bits.chg && current > 0 && current < 30000){
 800080c:	89fb      	ldrh	r3, [r7, #14]
 800080e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000812:	d91e      	bls.n	8000852 <BQ_GetChargeMode+0x66>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7a1b      	ldrb	r3, [r3, #8]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d017      	beq.n	8000852 <BQ_GetChargeMode+0x66>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a1b      	ldrb	r3, [r3, #8]
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d010      	beq.n	8000852 <BQ_GetChargeMode+0x66>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7e1b      	ldrb	r3, [r3, #24]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d009      	beq.n	8000852 <BQ_GetChargeMode+0x66>
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d006      	beq.n	8000852 <BQ_GetChargeMode+0x66>
 8000844:	89bb      	ldrh	r3, [r7, #12]
 8000846:	f247 522f 	movw	r2, #29999	@ 0x752f
 800084a:	4293      	cmp	r3, r2
 800084c:	d801      	bhi.n	8000852 <BQ_GetChargeMode+0x66>
        return CHARGE;
 800084e:	2301      	movs	r3, #1
 8000850:	e026      	b.n	80008a0 <BQ_GetChargeMode+0xb4>
    }else if (packVoltage > 1000 && BMS->BQ_opStatus.bits.xdsg && BMS->BQ_opStatus.bits.dsg && BMS->BQ_manufacturingStatus.bits.dsg && 65535 - current > 0 && current > 30000){
 8000852:	89fb      	ldrh	r3, [r7, #14]
 8000854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000858:	d921      	bls.n	800089e <BQ_GetChargeMode+0xb2>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7a5b      	ldrb	r3, [r3, #9]
 800085e:	f003 0320 	and.w	r3, r3, #32
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d01a      	beq.n	800089e <BQ_GetChargeMode+0xb2>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7a1b      	ldrb	r3, [r3, #8]
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d013      	beq.n	800089e <BQ_GetChargeMode+0xb2>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7e1b      	ldrb	r3, [r3, #24]
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00c      	beq.n	800089e <BQ_GetChargeMode+0xb2>
 8000884:	89bb      	ldrh	r3, [r7, #12]
 8000886:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800088a:	33ff      	adds	r3, #255	@ 0xff
 800088c:	2b00      	cmp	r3, #0
 800088e:	dd06      	ble.n	800089e <BQ_GetChargeMode+0xb2>
 8000890:	89bb      	ldrh	r3, [r7, #12]
 8000892:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000896:	4293      	cmp	r3, r2
 8000898:	d901      	bls.n	800089e <BQ_GetChargeMode+0xb2>
        return DISCHARGE;
 800089a:	2302      	movs	r3, #2
 800089c:	e000      	b.n	80008a0 <BQ_GetChargeMode+0xb4>
    }else{
        return RELAX;
 800089e:	2300      	movs	r3, #0
    }
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	4a48      	ldr	r2, [pc, #288]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ca:	4b46      	ldr	r3, [pc, #280]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	4b43      	ldr	r3, [pc, #268]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	4a42      	ldr	r2, [pc, #264]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e2:	4b40      	ldr	r3, [pc, #256]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b3d      	ldr	r3, [pc, #244]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a3c      	ldr	r2, [pc, #240]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a36      	ldr	r2, [pc, #216]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <MX_GPIO_Init+0x13c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	21b0      	movs	r1, #176	@ 0xb0
 8000922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000926:	f000 fe99 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000930:	482d      	ldr	r0, [pc, #180]	@ (80009e8 <MX_GPIO_Init+0x140>)
 8000932:	f000 fe93 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4827      	ldr	r0, [pc, #156]	@ (80009ec <MX_GPIO_Init+0x144>)
 800094e:	f000 fd0b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000962:	2307      	movs	r3, #7
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000970:	f000 fcfa 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000974:	23b0      	movs	r3, #176	@ 0xb0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098e:	f000 fceb 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000992:	2340      	movs	r3, #64	@ 0x40
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f000 fcde 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4808      	ldr	r0, [pc, #32]	@ (80009e8 <MX_GPIO_Init+0x140>)
 80009c6:	f000 fccf 	bl	8001368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210c      	movs	r1, #12
 80009ce:	2028      	movs	r0, #40	@ 0x28
 80009d0:	f000 fc45 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d4:	2028      	movs	r0, #40	@ 0x28
 80009d6:	f000 fc5e 	bl	8001296 <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	@ 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	48000400 	.word	0x48000400
 80009ec:	48000800 	.word	0x48000800

080009f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f000 fe60 	bl	80016f0 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f9e4 	bl	8000e02 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f002 fa6b 	bl	8002f18 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f9db 	bl	8000e02 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f002 faad 	bl	8002fae <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f9d2 	bl	8000e02 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000028 	.word	0x20000028
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	10909cec 	.word	0x10909cec

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0a2      	sub	sp, #136	@ 0x88
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2260      	movs	r2, #96	@ 0x60
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 fc79 	bl	8004388 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a28      	ldr	r2, [pc, #160]	@ (8000b3c <HAL_I2C_MspInit+0xcc>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d148      	bne.n	8000b32 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aa0:	2340      	movs	r3, #64	@ 0x40
 8000aa2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 f92f 	bl	8003d10 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ab8:	f000 f9a3 	bl	8000e02 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	4b20      	ldr	r3, [pc, #128]	@ (8000b40 <HAL_I2C_MspInit+0xd0>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b40 <HAL_I2C_MspInit+0xd0>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b40 <HAL_I2C_MspInit+0xd0>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	f003 0302 	and.w	r3, r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ad4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ad8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000af2:	4619      	mov	r1, r3
 8000af4:	4813      	ldr	r0, [pc, #76]	@ (8000b44 <HAL_I2C_MspInit+0xd4>)
 8000af6:	f000 fc37 	bl	8001368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <HAL_I2C_MspInit+0xd0>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afe:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <HAL_I2C_MspInit+0xd0>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_I2C_MspInit+0xd0>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	210a      	movs	r1, #10
 8000b16:	201f      	movs	r0, #31
 8000b18:	f000 fba1 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b1c:	201f      	movs	r0, #31
 8000b1e:	f000 fbba 	bl	8001296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2109      	movs	r1, #9
 8000b26:	2020      	movs	r0, #32
 8000b28:	f000 fb99 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b2c:	2020      	movs	r0, #32
 8000b2e:	f000 fbb2 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b32:	bf00      	nop
 8000b34:	3788      	adds	r7, #136	@ 0x88
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400

08000b48 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(BQ_data* BMS, uint8_t address)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2];
	I2CHelper_ReadRegister(BMS, address, buf, 2);
 8000b54:	f107 020c 	add.w	r2, r7, #12
 8000b58:	78f9      	ldrb	r1, [r7, #3]
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f826 	bl	8000bae <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000b66:	7b3b      	ldrb	r3, [r7, #12]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000b70:	7b7b      	ldrb	r3, [r7, #13]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	81fb      	strh	r3, [r7, #14]

	return result;
 8000b80:	89fb      	ldrh	r3, [r7, #14]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(BQ_data* BMS, uint8_t address)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	460b      	mov	r3, r1
 8000b94:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[1];
	I2CHelper_ReadRegister(BMS, address, buf, 1);
 8000b96:	f107 020c 	add.w	r2, r7, #12
 8000b9a:	78f9      	ldrb	r1, [r7, #3]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f805 	bl	8000bae <I2CHelper_ReadRegister>

	return buf[0];
 8000ba4:	7b3b      	ldrb	r3, [r7, #12]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(BQ_data* BMS, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af02      	add	r7, sp, #8
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	460b      	mov	r3, r1
 8000bbc:	72fb      	strb	r3, [r7, #11]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, &address, 1, 100);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	791b      	ldrb	r3, [r3, #4]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f107 020b 	add.w	r2, r7, #11
 8000bd0:	2364      	movs	r3, #100	@ 0x64
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f000 fe27 	bl	8001828 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress,  receive_buffer, size, 100);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	4619      	mov	r1, r3
 8000be4:	7abb      	ldrb	r3, [r7, #10]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	2264      	movs	r2, #100	@ 0x64
 8000bea:	9200      	str	r2, [sp, #0]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	f000 ff33 	bl	8001a58 <HAL_I2C_Master_Receive>
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c0c:	d113      	bne.n	8000c36 <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf14      	ite	ne
 8000c16:	2301      	movne	r3, #1
 8000c18:	2300      	moveq	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c2a:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c32:	f000 fd2b 	bl	800168c <HAL_GPIO_TogglePin>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000fc 	.word	0x200000fc
 8000c44:	48000400 	.word	0x48000400

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 f98b 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f885 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f7ff fe27 	bl	80008a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c5a:	f7ff fec9 	bl	80009f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  status = false;
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <main+0x10c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t current = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t percentage[2] = {0};
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	843b      	strh	r3, [r7, #32]
  uint16_t cells[6] = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	f8c3 2003 	str.w	r2, [r3, #3]
  BQ_Init(&hi2c1);
 8000c94:	4830      	ldr	r0, [pc, #192]	@ (8000d58 <main+0x110>)
 8000c96:	f7ff fa99 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(&BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 8000c9a:	463a      	mov	r2, r7
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	482e      	ldr	r0, [pc, #184]	@ (8000d5c <main+0x114>)
 8000ca2:	f7ff fb0f 	bl	80002c4 <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 8000ca6:	20c8      	movs	r0, #200	@ 0xc8
 8000ca8:	f000 f9da 	bl	8001060 <HAL_Delay>
	  BQAction_UpdateData(&BMS_1);
 8000cac:	482b      	ldr	r0, [pc, #172]	@ (8000d5c <main+0x114>)
 8000cae:	f7ff fd15 	bl	80006dc <BQAction_UpdateData>
	  voltage = I2CHelper_ReadRegisterAsShort(&BMS_1, BQ40Z80_SBS_Voltage);//works 0x09
 8000cb2:	2109      	movs	r1, #9
 8000cb4:	4829      	ldr	r0, [pc, #164]	@ (8000d5c <main+0x114>)
 8000cb6:	f7ff ff47 	bl	8000b48 <I2CHelper_ReadRegisterAsShort>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  current = I2CHelper_ReadRegisterAsShort(&BMS_1, BQ40Z80_SBS_Current);//TODO fix 1A = -400
 8000cbe:	210a      	movs	r1, #10
 8000cc0:	4826      	ldr	r0, [pc, #152]	@ (8000d5c <main+0x114>)
 8000cc2:	f7ff ff41 	bl	8000b48 <I2CHelper_ReadRegisterAsShort>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  percentage[0] = I2CHelper_ReadRegisterAsChar(&BMS_1, BQ40Z80_SBS_RelativeStateOfCharge);
 8000cca:	210d      	movs	r1, #13
 8000ccc:	4823      	ldr	r0, [pc, #140]	@ (8000d5c <main+0x114>)
 8000cce:	f7ff ff5c 	bl	8000b8a <I2CHelper_ReadRegisterAsChar>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 3020 	strb.w	r3, [r7, #32]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(&BMS_1, BQ40Z80_SBS_AbsoluteStateOfCharge);
 8000cd8:	210e      	movs	r1, #14
 8000cda:	4820      	ldr	r0, [pc, #128]	@ (8000d5c <main+0x114>)
 8000cdc:	f7ff ff55 	bl	8000b8a <I2CHelper_ReadRegisterAsChar>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1.sep.cell_voltage_1;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <main+0x114>)
 8000ce8:	8b9b      	ldrh	r3, [r3, #28]
 8000cea:	82bb      	strh	r3, [r7, #20]
	  cells[1] = BMS_1.BQ_daStatus1.sep.cell_voltage_2;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <main+0x114>)
 8000cee:	8bdb      	ldrh	r3, [r3, #30]
 8000cf0:	82fb      	strh	r3, [r7, #22]
	  cells[2] = BMS_1.BQ_daStatus1.sep.cell_voltage_3;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <main+0x114>)
 8000cf4:	8c1b      	ldrh	r3, [r3, #32]
 8000cf6:	833b      	strh	r3, [r7, #24]
	  cells[3] = BMS_1.BQ_daStatus1.sep.cell_voltage_4;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <main+0x114>)
 8000cfa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000cfc:	837b      	strh	r3, [r7, #26]
	  cells[4] = BMS_1.BQ_daStatus3.sep.cell_voltage_5;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <main+0x114>)
 8000d00:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000d04:	83bb      	strh	r3, [r7, #28]
	  cells[5] = BMS_1.BQ_daStatus3.sep.cell_voltage_6;
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <main+0x114>)
 8000d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000d0c:	83fb      	strh	r3, [r7, #30]

	  // -----toggle fets--------
	  if(status){
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <main+0x10c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <main+0xd6>
		  BQAction_EnableDischarging(&BMS_1);
 8000d16:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <main+0x114>)
 8000d18:	f7ff fc1f 	bl	800055a <BQAction_EnableDischarging>
 8000d1c:	e002      	b.n	8000d24 <main+0xdc>
	  }else{
		  BQAction_DisableFets(&BMS_1);
 8000d1e:	480f      	ldr	r0, [pc, #60]	@ (8000d5c <main+0x114>)
 8000d20:	f7ff fc6f 	bl	8000602 <BQAction_DisableFets>
	  }
	  fun[0] = BMS_1.BQ_opStatus.bits.pdsg;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <main+0x114>)
 8000d26:	7a1b      	ldrb	r3, [r3, #8]
 8000d28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf14      	ite	ne
 8000d32:	2301      	movne	r3, #1
 8000d34:	2300      	moveq	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	733b      	strb	r3, [r7, #12]
	  fun[1] = BMS_1.BQ_opStatus.bits.xdsg;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <main+0x114>)
 8000d3c:	7a5b      	ldrb	r3, [r3, #9]
 8000d3e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	737b      	strb	r3, [r7, #13]
	  HAL_Delay(200);
 8000d50:	e7a9      	b.n	8000ca6 <main+0x5e>
 8000d52:	bf00      	nop
 8000d54:	200000fc 	.word	0x200000fc
 8000d58:	20000028 	.word	0x20000028
 8000d5c:	2000007c 	.word	0x2000007c

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b096      	sub	sp, #88	@ 0x58
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	2244      	movs	r2, #68	@ 0x44
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fb0a 	bl	8004388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d86:	f002 f96d 	bl	8003064 <HAL_PWREx_ControlVoltageScaling>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d90:	f000 f837 	bl	8000e02 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da6:	2302      	movs	r3, #2
 8000da8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dae:	230a      	movs	r3, #10
 8000db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 f9a4 	bl	8003110 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dce:	f000 f818 	bl	8000e02 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	2104      	movs	r1, #4
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 fda4 	bl	8003938 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000df6:	f000 f804 	bl	8000e02 <Error_Handler>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3758      	adds	r7, #88	@ 0x58
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e06:	b672      	cpsid	i
}
 8000e08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0a:	bf00      	nop
 8000e0c:	e7fd      	b.n	8000e0a <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e32:	4a08      	ldr	r2, [pc, #32]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 f8b7 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <I2C1_EV_IRQHandler+0x10>)
 8000ebe:	f000 ffad 	bl	8001e1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000028 	.word	0x20000028

08000ecc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <I2C1_ER_IRQHandler+0x10>)
 8000ed2:	f000 ffbd 	bl	8001e50 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000028 	.word	0x20000028

08000ee0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ee4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ee8:	f000 fbea 	bl	80016c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <SystemInit+0x20>)
 8000ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <SystemInit+0x20>)
 8000efc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f18:	f7ff ffea 	bl	8000ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopForever+0xe>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopForever+0x16>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f003 fa29 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f46:	f7ff fe7f 	bl	8000c48 <main>

08000f4a <LoopForever>:

LoopForever:
    b LoopForever
 8000f4a:	e7fe      	b.n	8000f4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f58:	08004440 	.word	0x08004440
  ldr r2, =_sbss
 8000f5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f60:	20000104 	.word	0x20000104

08000f64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <HAL_Init+0x3c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_Init+0x3c>)
 8000f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f000 f962 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f80f 	bl	8000fa8 <HAL_InitTick>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	71fb      	strb	r3, [r7, #7]
 8000f94:	e001      	b.n	8000f9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f96:	f7ff ff3b 	bl	8000e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_InitTick+0x6c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d023      	beq.n	8001004 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fbc:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <HAL_InitTick+0x70>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <HAL_InitTick+0x6c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f96d 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10f      	bne.n	8000ffe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d809      	bhi.n	8000ff8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 f937 	bl	800125e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <HAL_InitTick+0x74>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e007      	b.n	8001008 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e004      	b.n	8001008 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e001      	b.n	8001008 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000000 	.word	0x20000000
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	20000100 	.word	0x20000100

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000100 	.word	0x20000100

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	@ (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	@ (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	@ (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	@ (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d005      	beq.n	80012ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	e029      	b.n	8001342 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020e 	bic.w	r2, r2, #14
 80012fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f003 021c 	and.w	r2, r3, #28
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	2101      	movs	r1, #1
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	4798      	blx	r3
    }
  }
  return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800135a:	b2db      	uxtb	r3, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e154      	b.n	8001622 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8146 	beq.w	800161c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80a0 	beq.w	800161c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <HAL_GPIO_Init+0x2d8>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e0:	4a57      	ldr	r2, [pc, #348]	@ (8001640 <HAL_GPIO_Init+0x2d8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e8:	4b55      	ldr	r3, [pc, #340]	@ (8001640 <HAL_GPIO_Init+0x2d8>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a53      	ldr	r2, [pc, #332]	@ (8001644 <HAL_GPIO_Init+0x2dc>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800151e:	d019      	beq.n	8001554 <HAL_GPIO_Init+0x1ec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a49      	ldr	r2, [pc, #292]	@ (8001648 <HAL_GPIO_Init+0x2e0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1e8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a48      	ldr	r2, [pc, #288]	@ (800164c <HAL_GPIO_Init+0x2e4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a47      	ldr	r2, [pc, #284]	@ (8001650 <HAL_GPIO_Init+0x2e8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a46      	ldr	r2, [pc, #280]	@ (8001654 <HAL_GPIO_Init+0x2ec>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1dc>
 8001540:	2304      	movs	r3, #4
 8001542:	e008      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001544:	2307      	movs	r3, #7
 8001546:	e006      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001548:	2303      	movs	r3, #3
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 800154c:	2302      	movs	r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x1ee>
 8001554:	2300      	movs	r3, #0
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001566:	4937      	ldr	r1, [pc, #220]	@ (8001644 <HAL_GPIO_Init+0x2dc>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	4b38      	ldr	r3, [pc, #224]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001598:	4a2f      	ldr	r2, [pc, #188]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c2:	4a25      	ldr	r2, [pc, #148]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015f2:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <HAL_GPIO_Init+0x2f0>)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	f47f aea3 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	40010000 	.word	0x40010000
 8001648:	48000400 	.word	0x48000400
 800164c:	48000800 	.word	0x48000800
 8001650:	48000c00 	.word	0x48000c00
 8001654:	48001000 	.word	0x48001000
 8001658:	40010400 	.word	0x40010400

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001678:	e002      	b.n	8001680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4013      	ands	r3, r2
 80016a4:	041a      	lsls	r2, r3, #16
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43d9      	mvns	r1, r3
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	400b      	ands	r3, r1
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fa8c 	bl	8000bfc <HAL_GPIO_EXTI_Callback>
  }
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e08d      	b.n	800181e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff f9aa 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	@ 0x24
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001740:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001750:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	e006      	b.n	8001778 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001776:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d108      	bne.n	8001792 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	e007      	b.n	80017a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691a      	ldr	r2, [r3, #16]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69d9      	ldr	r1, [r3, #28]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	461a      	mov	r2, r3
 8001834:	460b      	mov	r3, r1
 8001836:	817b      	strh	r3, [r7, #10]
 8001838:	4613      	mov	r3, r2
 800183a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b20      	cmp	r3, #32
 8001846:	f040 80fd 	bne.w	8001a44 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <HAL_I2C_Master_Transmit+0x30>
 8001854:	2302      	movs	r3, #2
 8001856:	e0f6      	b.n	8001a46 <HAL_I2C_Master_Transmit+0x21e>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001860:	f7ff fbf2 	bl	8001048 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2319      	movs	r3, #25
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f001 f871 	bl	800295a <I2C_WaitOnFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0e1      	b.n	8001a46 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2221      	movs	r2, #33	@ 0x21
 8001886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2210      	movs	r2, #16
 800188e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	893a      	ldrh	r2, [r7, #8]
 80018a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2bff      	cmp	r3, #255	@ 0xff
 80018b2:	d906      	bls.n	80018c2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	22ff      	movs	r2, #255	@ 0xff
 80018b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80018ba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e007      	b.n	80018d2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80018cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018d0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d024      	beq.n	8001924 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	781a      	ldrb	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001902:	3b01      	subs	r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3301      	adds	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	8979      	ldrh	r1, [r7, #10]
 8001916:	4b4e      	ldr	r3, [pc, #312]	@ (8001a50 <HAL_I2C_Master_Transmit+0x228>)
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f001 fa6b 	bl	8002df8 <I2C_TransferConfig>
 8001922:	e066      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	b2da      	uxtb	r2, r3
 800192a:	8979      	ldrh	r1, [r7, #10]
 800192c:	4b48      	ldr	r3, [pc, #288]	@ (8001a50 <HAL_I2C_Master_Transmit+0x228>)
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f001 fa60 	bl	8002df8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001938:	e05b      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f001 f864 	bl	8002a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07b      	b.n	8001a46 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001976:	3b01      	subs	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001982:	b29b      	uxth	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d034      	beq.n	80019f2 <HAL_I2C_Master_Transmit+0x1ca>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	d130      	bne.n	80019f2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	2200      	movs	r2, #0
 8001998:	2180      	movs	r1, #128	@ 0x80
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 ffdd 	bl	800295a <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e04d      	b.n	8001a46 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	2bff      	cmp	r3, #255	@ 0xff
 80019b2:	d90e      	bls.n	80019d2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	22ff      	movs	r2, #255	@ 0xff
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	8979      	ldrh	r1, [r7, #10]
 80019c2:	2300      	movs	r3, #0
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f001 fa14 	bl	8002df8 <I2C_TransferConfig>
 80019d0:	e00f      	b.n	80019f2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	8979      	ldrh	r1, [r7, #10]
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f001 fa03 	bl	8002df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d19e      	bne.n	800193a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	6a39      	ldr	r1, [r7, #32]
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f001 f84a 	bl	8002a9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e01a      	b.n	8001a46 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2220      	movs	r2, #32
 8001a16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_I2C_Master_Transmit+0x22c>)
 8001a24:	400b      	ands	r3, r1
 8001a26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001a44:	2302      	movs	r3, #2
  }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	80002000 	.word	0x80002000
 8001a54:	fe00e800 	.word	0xfe00e800

08001a58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af02      	add	r7, sp, #8
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	461a      	mov	r2, r3
 8001a64:	460b      	mov	r3, r1
 8001a66:	817b      	strh	r3, [r7, #10]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	f040 80db 	bne.w	8001c30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_I2C_Master_Receive+0x30>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e0d4      	b.n	8001c32 <HAL_I2C_Master_Receive+0x1da>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a90:	f7ff fada 	bl	8001048 <HAL_GetTick>
 8001a94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 ff59 	bl	800295a <I2C_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0bf      	b.n	8001c32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2222      	movs	r2, #34	@ 0x22
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2210      	movs	r2, #16
 8001abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	893a      	ldrh	r2, [r7, #8]
 8001ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2bff      	cmp	r3, #255	@ 0xff
 8001ae2:	d90e      	bls.n	8001b02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	8979      	ldrh	r1, [r7, #10]
 8001af2:	4b52      	ldr	r3, [pc, #328]	@ (8001c3c <HAL_I2C_Master_Receive+0x1e4>)
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f001 f97c 	bl	8002df8 <I2C_TransferConfig>
 8001b00:	e06d      	b.n	8001bde <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	8979      	ldrh	r1, [r7, #10]
 8001b14:	4b49      	ldr	r3, [pc, #292]	@ (8001c3c <HAL_I2C_Master_Receive+0x1e4>)
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f001 f96b 	bl	8002df8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001b22:	e05c      	b.n	8001bde <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	6a39      	ldr	r1, [r7, #32]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fff9 	bl	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e07c      	b.n	8001c32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d034      	beq.n	8001bde <HAL_I2C_Master_Receive+0x186>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d130      	bne.n	8001bde <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	2200      	movs	r2, #0
 8001b84:	2180      	movs	r1, #128	@ 0x80
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fee7 	bl	800295a <I2C_WaitOnFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e04d      	b.n	8001c32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2bff      	cmp	r3, #255	@ 0xff
 8001b9e:	d90e      	bls.n	8001bbe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	22ff      	movs	r2, #255	@ 0xff
 8001ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f001 f91e 	bl	8002df8 <I2C_TransferConfig>
 8001bbc:	e00f      	b.n	8001bde <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	8979      	ldrh	r1, [r7, #10]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f001 f90d 	bl	8002df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d19d      	bne.n	8001b24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	6a39      	ldr	r1, [r7, #32]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 ff54 	bl	8002a9a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e01a      	b.n	8001c32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2220      	movs	r2, #32
 8001c02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_I2C_Master_Receive+0x1e8>)
 8001c10:	400b      	ands	r3, r1
 8001c12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
  }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	80002400 	.word	0x80002400
 8001c40:	fe00e800 	.word	0xfe00e800

08001c44 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af02      	add	r7, sp, #8
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	460b      	mov	r3, r1
 8001c52:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	f040 80d6 	bne.w	8001e12 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
 8001c78:	e0cc      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_I2C_IsDeviceReady+0x44>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e0c5      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x1d0>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2224      	movs	r2, #36	@ 0x24
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_I2C_IsDeviceReady+0x72>
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cb4:	e006      	b.n	8001cc4 <HAL_I2C_IsDeviceReady+0x80>
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff f9bd 	bl	8001048 <HAL_GetTick>
 8001cce:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b20      	cmp	r3, #32
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001cfc:	e034      	b.n	8001d68 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d01a      	beq.n	8001d3c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d06:	f7ff f99f 	bl	8001048 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d302      	bcc.n	8001d1c <HAL_I2C_IsDeviceReady+0xd8>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10f      	bne.n	8001d3c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e06b      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <HAL_I2C_IsDeviceReady+0x130>
 8001d6e:	7fbb      	ldrb	r3, [r7, #30]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0c4      	beq.n	8001cfe <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d01a      	beq.n	8001db8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2120      	movs	r1, #32
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fde4 	bl	800295a <I2C_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e03b      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2220      	movs	r2, #32
 8001da2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e02d      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2120      	movs	r1, #32
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fdc9 	bl	800295a <I2C_WaitOnFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e020      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2220      	movs	r2, #32
 8001de0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	f63f af56 	bhi.w	8001c9e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f043 0220 	orr.w	r2, r3, #32
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8001e12:	2302      	movs	r3, #2
  }
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00f      	beq.n	8001e92 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00f      	beq.n	8001ebc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	f043 0208 	orr.w	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00f      	beq.n	8001ee6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f043 0202 	orr.w	r2, r3, #2
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ee4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 030b 	and.w	r3, r3, #11
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001ef6:	68f9      	ldr	r1, [r7, #12]
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fbd5 	bl	80026a8 <I2C_ITError>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	70fb      	strb	r3, [r7, #3]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <I2C_Slave_ISR_IT+0x24>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e0e2      	b.n	8002170 <I2C_Slave_ISR_IT+0x1ea>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001fc6:	6939      	ldr	r1, [r7, #16]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f9b5 	bl	8002338 <I2C_ITSlaveCplt>
 8001fce:	e0ca      	b.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d04b      	beq.n	8002072 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d046      	beq.n	8002072 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d128      	bne.n	8002040 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b28      	cmp	r3, #40	@ 0x28
 8001ff8:	d108      	bne.n	800200c <I2C_Slave_ISR_IT+0x86>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002000:	d104      	bne.n	800200c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002002:	6939      	ldr	r1, [r7, #16]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fafb 	bl	8002600 <I2C_ITListenCplt>
 800200a:	e031      	b.n	8002070 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b29      	cmp	r3, #41	@ 0x29
 8002016:	d10e      	bne.n	8002036 <I2C_Slave_ISR_IT+0xb0>
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800201e:	d00a      	beq.n	8002036 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2210      	movs	r2, #16
 8002026:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fc54 	bl	80028d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f926 	bl	8002280 <I2C_ITSlaveSeqCplt>
 8002034:	e01c      	b.n	8002070 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2210      	movs	r2, #16
 800203c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800203e:	e08f      	b.n	8002160 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2210      	movs	r2, #16
 8002046:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <I2C_Slave_ISR_IT+0xdc>
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002060:	d17e      	bne.n	8002160 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	4619      	mov	r1, r3
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 fb1d 	bl	80026a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800206e:	e077      	b.n	8002160 <I2C_Slave_ISR_IT+0x1da>
 8002070:	e076      	b.n	8002160 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d02f      	beq.n	80020dc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002082:	2b00      	cmp	r3, #0
 8002084:	d02a      	beq.n	80020dc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d018      	beq.n	80020c2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d14b      	bne.n	8002164 <I2C_Slave_ISR_IT+0x1de>
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020d2:	d047      	beq.n	8002164 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f8d3 	bl	8002280 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80020da:	e043      	b.n	8002164 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80020f0:	6939      	ldr	r1, [r7, #16]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 f840 	bl	8002178 <I2C_ITAddrCplt>
 80020f8:	e035      	b.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d030      	beq.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02b      	beq.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d018      	beq.n	800214a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002148:	e00d      	b.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d002      	beq.n	8002158 <I2C_Slave_ISR_IT+0x1d2>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f891 	bl	8002280 <I2C_ITSlaveSeqCplt>
 800215e:	e002      	b.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002164:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800218e:	2b28      	cmp	r3, #40	@ 0x28
 8002190:	d16a      	bne.n	8002268 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80021b0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021be:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80021cc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d138      	bne.n	8002248 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80021d6:	897b      	ldrh	r3, [r7, #10]
 80021d8:	09db      	lsrs	r3, r3, #7
 80021da:	b29a      	uxth	r2, r3
 80021dc:	89bb      	ldrh	r3, [r7, #12]
 80021de:	4053      	eors	r3, r2
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f003 0306 	and.w	r3, r3, #6
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d11c      	bne.n	8002224 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d13b      	bne.n	8002278 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2208      	movs	r2, #8
 800220c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002216:	89ba      	ldrh	r2, [r7, #12]
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff fe86 	bl	8001f2e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002222:	e029      	b.n	8002278 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002224:	893b      	ldrh	r3, [r7, #8]
 8002226:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002228:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fe15 	bl	8002e5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800223a:	89ba      	ldrh	r2, [r7, #12]
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fe74 	bl	8001f2e <HAL_I2C_AddrCallback>
}
 8002246:	e017      	b.n	8002278 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002248:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fe05 	bl	8002e5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800225a:	89ba      	ldrh	r2, [r7, #12]
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fe64 	bl	8001f2e <HAL_I2C_AddrCallback>
}
 8002266:	e007      	b.n	8002278 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d008      	beq.n	80022b4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e00c      	b.n	80022ce <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b29      	cmp	r3, #41	@ 0x29
 80022d8:	d112      	bne.n	8002300 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2228      	movs	r2, #40	@ 0x28
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2221      	movs	r2, #33	@ 0x21
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022e8:	2101      	movs	r1, #1
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fdb6 	bl	8002e5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fe04 	bl	8001f06 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022fe:	e017      	b.n	8002330 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b2a      	cmp	r3, #42	@ 0x2a
 800230a:	d111      	bne.n	8002330 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2228      	movs	r2, #40	@ 0x28
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2222      	movs	r2, #34	@ 0x22
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800231a:	2102      	movs	r1, #2
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fd9d 	bl	8002e5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fdf5 	bl	8001f1a <HAL_I2C_SlaveRxCpltCallback>
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002352:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800235a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2220      	movs	r2, #32
 8002362:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002364:	7afb      	ldrb	r3, [r7, #11]
 8002366:	2b21      	cmp	r3, #33	@ 0x21
 8002368:	d002      	beq.n	8002370 <I2C_ITSlaveCplt+0x38>
 800236a:	7afb      	ldrb	r3, [r7, #11]
 800236c:	2b29      	cmp	r3, #41	@ 0x29
 800236e:	d108      	bne.n	8002382 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002370:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fd71 	bl	8002e5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2221      	movs	r2, #33	@ 0x21
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002380:	e019      	b.n	80023b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002382:	7afb      	ldrb	r3, [r7, #11]
 8002384:	2b22      	cmp	r3, #34	@ 0x22
 8002386:	d002      	beq.n	800238e <I2C_ITSlaveCplt+0x56>
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	2b2a      	cmp	r3, #42	@ 0x2a
 800238c:	d108      	bne.n	80023a0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800238e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fd62 	bl	8002e5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2222      	movs	r2, #34	@ 0x22
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
 800239e:	e00a      	b.n	80023b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80023a0:	7afb      	ldrb	r3, [r7, #11]
 80023a2:	2b28      	cmp	r3, #40	@ 0x28
 80023a4:	d107      	bne.n	80023b6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80023a6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fd56 	bl	8002e5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b89      	ldr	r3, [pc, #548]	@ (80025f8 <I2C_ITSlaveCplt+0x2c0>)
 80023d2:	400b      	ands	r3, r1
 80023d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa7d 	bl	80028d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d013      	beq.n	800240e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80023f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01f      	beq.n	800243e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	b29a      	uxth	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800240c:	e017      	b.n	800243e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d012      	beq.n	800243e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002426:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	f043 0204 	orr.w	r2, r3, #4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d049      	beq.n	800253e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d044      	beq.n	800253e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d128      	bne.n	8002510 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b28      	cmp	r3, #40	@ 0x28
 80024c8:	d108      	bne.n	80024dc <I2C_ITSlaveCplt+0x1a4>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024d0:	d104      	bne.n	80024dc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024d2:	6979      	ldr	r1, [r7, #20]
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f893 	bl	8002600 <I2C_ITListenCplt>
 80024da:	e030      	b.n	800253e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b29      	cmp	r3, #41	@ 0x29
 80024e6:	d10e      	bne.n	8002506 <I2C_ITSlaveCplt+0x1ce>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024ee:	d00a      	beq.n	8002506 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f9ec 	bl	80028d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff febe 	bl	8002280 <I2C_ITSlaveSeqCplt>
 8002504:	e01b      	b.n	800253e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2210      	movs	r2, #16
 800250c:	61da      	str	r2, [r3, #28]
 800250e:	e016      	b.n	800253e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <I2C_ITSlaveCplt+0x1fa>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002530:	d105      	bne.n	800253e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f8b5 	bl	80026a8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8a4 	bl	80026a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b28      	cmp	r3, #40	@ 0x28
 800256a:	d141      	bne.n	80025f0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800256c:	6979      	ldr	r1, [r7, #20]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f846 	bl	8002600 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002574:	e03c      	b.n	80025f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800257e:	d014      	beq.n	80025aa <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff fe7d 	bl	8002280 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <I2C_ITSlaveCplt+0x2c4>)
 800258a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fcd1 	bl	8001f4a <HAL_I2C_ListenCpltCallback>
}
 80025a8:	e022      	b.n	80025f0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b22      	cmp	r3, #34	@ 0x22
 80025b4:	d10e      	bne.n	80025d4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fca4 	bl	8001f1a <HAL_I2C_SlaveRxCpltCallback>
}
 80025d2:	e00d      	b.n	80025f0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fc8b 	bl	8001f06 <HAL_I2C_SlaveTxCpltCallback>
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	fe00e800 	.word	0xfe00e800
 80025fc:	ffff0000 	.word	0xffff0000

08002600 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a25      	ldr	r2, [pc, #148]	@ (80026a4 <I2C_ITListenCplt+0xa4>)
 800260e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d022      	beq.n	800267c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800267c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fbeb 	bl	8002e5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2210      	movs	r2, #16
 800268c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fc57 	bl	8001f4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	ffff0000 	.word	0xffff0000

080026a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a6d      	ldr	r2, [pc, #436]	@ (800287c <I2C_ITError+0x1d4>)
 80026c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	2b28      	cmp	r3, #40	@ 0x28
 80026de:	d005      	beq.n	80026ec <I2C_ITError+0x44>
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	2b29      	cmp	r3, #41	@ 0x29
 80026e4:	d002      	beq.n	80026ec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80026ea:	d10b      	bne.n	8002704 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026ec:	2103      	movs	r1, #3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fbb4 	bl	8002e5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2228      	movs	r2, #40	@ 0x28
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a60      	ldr	r2, [pc, #384]	@ (8002880 <I2C_ITError+0x1d8>)
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34
 8002702:	e030      	b.n	8002766 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002704:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fba7 	bl	8002e5c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f8e1 	bl	80028d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b60      	cmp	r3, #96	@ 0x60
 800271e:	d01f      	beq.n	8002760 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b20      	cmp	r3, #32
 8002734:	d114      	bne.n	8002760 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b10      	cmp	r3, #16
 8002742:	d109      	bne.n	8002758 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2210      	movs	r2, #16
 800274a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2220      	movs	r2, #32
 800275e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002770:	2b00      	cmp	r3, #0
 8002772:	d039      	beq.n	80027e8 <I2C_ITError+0x140>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b11      	cmp	r3, #17
 8002778:	d002      	beq.n	8002780 <I2C_ITError+0xd8>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b21      	cmp	r3, #33	@ 0x21
 800277e:	d133      	bne.n	80027e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800278e:	d107      	bne.n	80027a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800279e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fdd1 	bl	800134c <HAL_DMA_GetState>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d017      	beq.n	80027e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b4:	4a33      	ldr	r2, [pc, #204]	@ (8002884 <I2C_ITError+0x1dc>)
 80027b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fd80 	bl	80012ca <HAL_DMA_Abort_IT>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d04d      	beq.n	800286c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027da:	4610      	mov	r0, r2
 80027dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027de:	e045      	b.n	800286c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f851 	bl	8002888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027e6:	e041      	b.n	800286c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d039      	beq.n	8002864 <I2C_ITError+0x1bc>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d002      	beq.n	80027fc <I2C_ITError+0x154>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b22      	cmp	r3, #34	@ 0x22
 80027fa:	d133      	bne.n	8002864 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800280a:	d107      	bne.n	800281c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fd93 	bl	800134c <HAL_DMA_GetState>
 8002826:	4603      	mov	r3, r0
 8002828:	2b01      	cmp	r3, #1
 800282a:	d017      	beq.n	800285c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002830:	4a14      	ldr	r2, [pc, #80]	@ (8002884 <I2C_ITError+0x1dc>)
 8002832:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fd42 	bl	80012ca <HAL_DMA_Abort_IT>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d011      	beq.n	8002870 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002856:	4610      	mov	r0, r2
 8002858:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800285a:	e009      	b.n	8002870 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f813 	bl	8002888 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002862:	e005      	b.n	8002870 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f80f 	bl	8002888 <I2C_TreatErrorCallback>
  }
}
 800286a:	e002      	b.n	8002872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002870:	bf00      	nop
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	ffff0000 	.word	0xffff0000
 8002880:	08001f87 	.word	0x08001f87
 8002884:	0800291f 	.word	0x0800291f

08002888 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b60      	cmp	r3, #96	@ 0x60
 800289a:	d10e      	bne.n	80028ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fb5d 	bl	8001f72 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028b8:	e009      	b.n	80028ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fb48 	bl	8001f5e <HAL_I2C_ErrorCallback>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d103      	bne.n	80028f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2200      	movs	r2, #0
 80028f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d007      	beq.n	8002912 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	619a      	str	r2, [r3, #24]
  }
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	2200      	movs	r2, #0
 800293a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	2200      	movs	r2, #0
 800294a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff ff9b 	bl	8002888 <I2C_TreatErrorCallback>
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296a:	e03b      	b.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	6839      	ldr	r1, [r7, #0]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f961 	bl	8002c38 <I2C_IsErrorOccurred>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e041      	b.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d02d      	beq.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002988:	f7fe fb5e 	bl	8001048 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d302      	bcc.n	800299e <I2C_WaitOnFlagUntilTimeout+0x44>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d122      	bne.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d113      	bne.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e00f      	b.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4013      	ands	r3, r2
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d0b4      	beq.n	800296c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a18:	e033      	b.n	8002a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f90a 	bl	8002c38 <I2C_IsErrorOccurred>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e031      	b.n	8002a92 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d025      	beq.n	8002a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fe fb07 	bl	8001048 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11a      	bne.n	8002a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d013      	beq.n	8002a82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e007      	b.n	8002a92 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d1c4      	bne.n	8002a1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa6:	e02f      	b.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f8c3 	bl	8002c38 <I2C_IsErrorOccurred>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e02d      	b.n	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abc:	f7fe fac4 	bl	8001048 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d302      	bcc.n	8002ad2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11a      	bne.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d013      	beq.n	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae4:	f043 0220 	orr.w	r2, r3, #32
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e007      	b.n	8002b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d1c8      	bne.n	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b30:	e071      	b.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f87e 	bl	8002c38 <I2C_IsErrorOccurred>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d13b      	bne.n	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d138      	bne.n	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d105      	bne.n	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d121      	bne.n	8002bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2210      	movs	r2, #16
 8002b88:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2220      	movs	r2, #32
 8002b96:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	75fb      	strb	r3, [r7, #23]
 8002bc4:	e002      	b.n	8002bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002bcc:	f7fe fa3c 	bl	8001048 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d302      	bcc.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d119      	bne.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d00f      	beq.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d002      	beq.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d083      	beq.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	fe00e800 	.word	0xfe00e800

08002c38 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d068      	beq.n	8002d36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c6c:	e049      	b.n	8002d02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d045      	beq.n	8002d02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7fe f9e7 	bl	8001048 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_IsErrorOccurred+0x54>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d13a      	bne.n	8002d02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c9e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cae:	d121      	bne.n	8002cf4 <I2C_IsErrorOccurred+0xbc>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cb6:	d01d      	beq.n	8002cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	2b20      	cmp	r3, #32
 8002cbc:	d01a      	beq.n	8002cf4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ccc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cce:	f7fe f9bb 	bl	8001048 <HAL_GetTick>
 8002cd2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd4:	e00e      	b.n	8002cf4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cd6:	f7fe f9b7 	bl	8001048 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b19      	cmp	r3, #25
 8002ce2:	d907      	bls.n	8002cf4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f043 0320 	orr.w	r3, r3, #32
 8002cea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cf2:	e006      	b.n	8002d02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d1e9      	bne.n	8002cd6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d003      	beq.n	8002d18 <I2C_IsErrorOccurred+0xe0>
 8002d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0aa      	beq.n	8002c6e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2220      	movs	r2, #32
 8002d26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01c      	beq.n	8002de6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff fd92 	bl	80028d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <I2C_IsErrorOccurred+0x1bc>)
 8002dbe:	400b      	ands	r3, r1
 8002dc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002de6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3728      	adds	r7, #40	@ 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	fe00e800 	.word	0xfe00e800

08002df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	4613      	mov	r3, r2
 8002e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e10:	7a7b      	ldrb	r3, [r7, #9]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	0d5b      	lsrs	r3, r3, #21
 8002e32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e36:	4b08      	ldr	r3, [pc, #32]	@ (8002e58 <I2C_TransferConfig+0x60>)
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	ea02 0103 	and.w	r1, r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	03ff63ff 	.word	0x03ff63ff

08002e5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00f      	beq.n	8002e96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002e7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e8a:	2b28      	cmp	r3, #40	@ 0x28
 8002e8c:	d003      	beq.n	8002e96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002e94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00f      	beq.n	8002ec0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002ea6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002eb4:	2b28      	cmp	r3, #40	@ 0x28
 8002eb6:	d003      	beq.n	8002ec0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002ec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	da03      	bge.n	8002ed0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002ece:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d103      	bne.n	8002ede <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d103      	bne.n	8002eec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f043 0320 	orr.w	r3, r3, #32
 8002eea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002eec:	887b      	ldrh	r3, [r7, #2]
 8002eee:	2b40      	cmp	r3, #64	@ 0x40
 8002ef0:	d103      	bne.n	8002efa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6819      	ldr	r1, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43da      	mvns	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	400a      	ands	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d138      	bne.n	8002fa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e032      	b.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	@ 0x24
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d139      	bne.n	8003038 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e033      	b.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2224      	movs	r2, #36	@ 0x24
 8002fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003000:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e000      	b.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <HAL_PWREx_GetVoltageRange+0x18>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000

08003064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003072:	d130      	bne.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003074:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800307c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003080:	d038      	beq.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003082:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800308a:	4a1e      	ldr	r2, [pc, #120]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003090:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003092:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2232      	movs	r2, #50	@ 0x32
 8003098:	fb02 f303 	mul.w	r3, r2, r3
 800309c:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0c9b      	lsrs	r3, r3, #18
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a8:	e002      	b.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b0:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030bc:	d102      	bne.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f2      	bne.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d0:	d110      	bne.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e00f      	b.n	80030f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e2:	d007      	beq.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030e4:	4b07      	ldr	r3, [pc, #28]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030ec:	4a05      	ldr	r2, [pc, #20]	@ (8003104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40007000 	.word	0x40007000
 8003108:	20000000 	.word	0x20000000
 800310c:	431bde83 	.word	0x431bde83

08003110 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f000 bc02 	b.w	8003928 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003124:	4b96      	ldr	r3, [pc, #600]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800312e:	4b94      	ldr	r3, [pc, #592]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80e4 	beq.w	800330e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_RCC_OscConfig+0x4c>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	f040 808b 	bne.w	800326a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b01      	cmp	r3, #1
 8003158:	f040 8087 	bne.w	800326a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800315c:	4b88      	ldr	r3, [pc, #544]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_RCC_OscConfig+0x64>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e3d9      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1a      	ldr	r2, [r3, #32]
 8003178:	4b81      	ldr	r3, [pc, #516]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <HAL_RCC_OscConfig+0x7e>
 8003184:	4b7e      	ldr	r3, [pc, #504]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800318c:	e005      	b.n	800319a <HAL_RCC_OscConfig+0x8a>
 800318e:	4b7c      	ldr	r3, [pc, #496]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800319a:	4293      	cmp	r3, r2
 800319c:	d223      	bcs.n	80031e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fd54 	bl	8003c50 <RCC_SetFlashLatencyFromMSIRange>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e3ba      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b2:	4b73      	ldr	r3, [pc, #460]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a72      	ldr	r2, [pc, #456]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031b8:	f043 0308 	orr.w	r3, r3, #8
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b70      	ldr	r3, [pc, #448]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	496d      	ldr	r1, [pc, #436]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	021b      	lsls	r3, r3, #8
 80031de:	4968      	ldr	r1, [pc, #416]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
 80031e4:	e025      	b.n	8003232 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e6:	4b66      	ldr	r3, [pc, #408]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a65      	ldr	r2, [pc, #404]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b63      	ldr	r3, [pc, #396]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4960      	ldr	r1, [pc, #384]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003204:	4b5e      	ldr	r3, [pc, #376]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	495b      	ldr	r1, [pc, #364]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fd14 	bl	8003c50 <RCC_SetFlashLatencyFromMSIRange>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e37a      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003232:	f000 fc81 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b51      	ldr	r3, [pc, #324]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	4950      	ldr	r1, [pc, #320]	@ (8003384 <HAL_RCC_OscConfig+0x274>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a4e      	ldr	r2, [pc, #312]	@ (8003388 <HAL_RCC_OscConfig+0x278>)
 8003250:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003252:	4b4e      	ldr	r3, [pc, #312]	@ (800338c <HAL_RCC_OscConfig+0x27c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd fea6 	bl	8000fa8 <HAL_InitTick>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d052      	beq.n	800330c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	e35e      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d032      	beq.n	80032d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003272:	4b43      	ldr	r3, [pc, #268]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a42      	ldr	r2, [pc, #264]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800327e:	f7fd fee3 	bl	8001048 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003286:	f7fd fedf 	bl	8001048 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e347      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003298:	4b39      	ldr	r3, [pc, #228]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a4:	4b36      	ldr	r3, [pc, #216]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a35      	ldr	r2, [pc, #212]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b33      	ldr	r3, [pc, #204]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4930      	ldr	r1, [pc, #192]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	492b      	ldr	r1, [pc, #172]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
 80032d6:	e01a      	b.n	800330e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d8:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a28      	ldr	r2, [pc, #160]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e4:	f7fd feb0 	bl	8001048 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ec:	f7fd feac 	bl	8001048 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e314      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1dc>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d073      	beq.n	8003402 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x21c>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d10e      	bne.n	8003344 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	4b14      	ldr	r3, [pc, #80]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d063      	beq.n	8003400 <HAL_RCC_OscConfig+0x2f0>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d15f      	bne.n	8003400 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e2f1      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x24c>
 800334e:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e025      	b.n	80033a8 <HAL_RCC_OscConfig+0x298>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003364:	d114      	bne.n	8003390 <HAL_RCC_OscConfig+0x280>
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a02      	ldr	r2, [pc, #8]	@ (8003380 <HAL_RCC_OscConfig+0x270>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e013      	b.n	80033a8 <HAL_RCC_OscConfig+0x298>
 8003380:	40021000 	.word	0x40021000
 8003384:	080043f8 	.word	0x080043f8
 8003388:	20000000 	.word	0x20000000
 800338c:	20000004 	.word	0x20000004
 8003390:	4ba0      	ldr	r3, [pc, #640]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a9f      	ldr	r2, [pc, #636]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b9d      	ldr	r3, [pc, #628]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a9c      	ldr	r2, [pc, #624]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b0:	f7fd fe4a 	bl	8001048 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fd fe46 	bl	8001048 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	@ 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e2ae      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ca:	4b92      	ldr	r3, [pc, #584]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2a8>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fd fe36 	bl	8001048 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fd fe32 	bl	8001048 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	@ 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e29a      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f2:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x2d0>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d060      	beq.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d005      	beq.n	8003420 <HAL_RCC_OscConfig+0x310>
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d119      	bne.n	800344e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d116      	bne.n	800344e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003420:	4b7c      	ldr	r3, [pc, #496]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_OscConfig+0x328>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e277      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b76      	ldr	r3, [pc, #472]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	4973      	ldr	r1, [pc, #460]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800344c:	e040      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d023      	beq.n	800349e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003456:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6e      	ldr	r2, [pc, #440]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fd fdf1 	bl	8001048 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fd fded 	bl	8001048 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e255      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347c:	4b65      	ldr	r3, [pc, #404]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b62      	ldr	r3, [pc, #392]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	495f      	ldr	r1, [pc, #380]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	e018      	b.n	80034d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b5d      	ldr	r3, [pc, #372]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fd fdcd 	bl	8001048 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fd fdc9 	bl	8001048 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e231      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c4:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d03c      	beq.n	8003556 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01c      	beq.n	800351e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80034e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fda8 	bl	8001048 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fd fda4 	bl	8001048 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e20c      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350e:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003510:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ef      	beq.n	80034fc <HAL_RCC_OscConfig+0x3ec>
 800351c:	e01b      	b.n	8003556 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	4b3d      	ldr	r3, [pc, #244]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003524:	4a3b      	ldr	r2, [pc, #236]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd fd8b 	bl	8001048 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd fd87 	bl	8001048 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1ef      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003548:	4b32      	ldr	r3, [pc, #200]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80a6 	beq.w	80036b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003568:	4b2a      	ldr	r3, [pc, #168]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10d      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003578:	4a26      	ldr	r2, [pc, #152]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003580:	4b24      	ldr	r3, [pc, #144]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358c:	2301      	movs	r3, #1
 800358e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003590:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <HAL_RCC_OscConfig+0x508>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d118      	bne.n	80035ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359c:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <HAL_RCC_OscConfig+0x508>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_RCC_OscConfig+0x508>)
 80035a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a8:	f7fd fd4e 	bl	8001048 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b0:	f7fd fd4a 	bl	8001048 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1b2      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_RCC_OscConfig+0x508>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4d8>
 80035d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035e6:	e029      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d115      	bne.n	800361c <HAL_RCC_OscConfig+0x50c>
 80035f0:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f6:	4a07      	ldr	r2, [pc, #28]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003600:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003606:	4a03      	ldr	r2, [pc, #12]	@ (8003614 <HAL_RCC_OscConfig+0x504>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x52c>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	4b9a      	ldr	r3, [pc, #616]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003622:	4a99      	ldr	r2, [pc, #612]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800362c:	4b96      	ldr	r3, [pc, #600]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 800362e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003632:	4a95      	ldr	r2, [pc, #596]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003634:	f023 0304 	bic.w	r3, r3, #4
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd fd00 	bl	8001048 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fd fcfc 	bl	8001048 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e162      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003662:	4b89      	ldr	r3, [pc, #548]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ed      	beq.n	800364c <HAL_RCC_OscConfig+0x53c>
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003672:	f7fd fce9 	bl	8001048 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fd fce5 	bl	8001048 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e14b      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003690:	4b7d      	ldr	r3, [pc, #500]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ed      	bne.n	800367a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369e:	7ffb      	ldrb	r3, [r7, #31]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b78      	ldr	r3, [pc, #480]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	4a77      	ldr	r2, [pc, #476]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d03c      	beq.n	8003736 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01c      	beq.n	80036fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036c4:	4b70      	ldr	r3, [pc, #448]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80036c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd fcb8 	bl	8001048 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036dc:	f7fd fcb4 	bl	8001048 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e11c      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ee:	4b66      	ldr	r3, [pc, #408]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80036f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ef      	beq.n	80036dc <HAL_RCC_OscConfig+0x5cc>
 80036fc:	e01b      	b.n	8003736 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036fe:	4b62      	ldr	r3, [pc, #392]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003700:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003704:	4a60      	ldr	r2, [pc, #384]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fd fc9b 	bl	8001048 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003716:	f7fd fc97 	bl	8001048 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0ff      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003728:	4b57      	ldr	r3, [pc, #348]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 800372a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ef      	bne.n	8003716 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80f3 	beq.w	8003926 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	2b02      	cmp	r3, #2
 8003746:	f040 80c9 	bne.w	80038dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800374a:	4b4f      	ldr	r3, [pc, #316]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	429a      	cmp	r2, r3
 800375c:	d12c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	3b01      	subs	r3, #1
 800376a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d123      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800377c:	429a      	cmp	r2, r3
 800377e:	d11b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800378c:	429a      	cmp	r2, r3
 800378e:	d113      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d109      	bne.n	80037b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	3b01      	subs	r3, #1
 80037b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d06b      	beq.n	8003890 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d062      	beq.n	8003884 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037be:	4b32      	ldr	r3, [pc, #200]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0ac      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80037d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037da:	f7fd fc35 	bl	8001048 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fd fc31 	bl	8001048 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e099      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f4:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	4b21      	ldr	r3, [pc, #132]	@ (800388c <HAL_RCC_OscConfig+0x77c>)
 8003806:	4013      	ands	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003810:	3a01      	subs	r2, #1
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800381a:	0212      	lsls	r2, r2, #8
 800381c:	4311      	orrs	r1, r2
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003822:	0852      	lsrs	r2, r2, #1
 8003824:	3a01      	subs	r2, #1
 8003826:	0552      	lsls	r2, r2, #21
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800382e:	0852      	lsrs	r2, r2, #1
 8003830:	3a01      	subs	r2, #1
 8003832:	0652      	lsls	r2, r2, #25
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800383a:	06d2      	lsls	r2, r2, #27
 800383c:	430a      	orrs	r2, r1
 800383e:	4912      	ldr	r1, [pc, #72]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003840:	4313      	orrs	r3, r2
 8003842:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003844:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0f      	ldr	r2, [pc, #60]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 800384a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003850:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800385a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800385c:	f7fd fbf4 	bl	8001048 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fd fbf0 	bl	8001048 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e058      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_RCC_OscConfig+0x778>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003882:	e050      	b.n	8003926 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e04f      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
 8003888:	40021000 	.word	0x40021000
 800388c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003890:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d144      	bne.n	8003926 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800389c:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	4b21      	ldr	r3, [pc, #132]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a20      	ldr	r2, [pc, #128]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038b4:	f7fd fbc8 	bl	8001048 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd fbc4 	bl	8001048 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e02c      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ce:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x7ac>
 80038da:	e024      	b.n	8003926 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b0c      	cmp	r3, #12
 80038e0:	d01f      	beq.n	8003922 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a12      	ldr	r2, [pc, #72]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 80038e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7fd fbab 	bl	8001048 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fd fba7 	bl	8001048 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e00f      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003908:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1f0      	bne.n	80038f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003914:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	4905      	ldr	r1, [pc, #20]	@ (8003930 <HAL_RCC_OscConfig+0x820>)
 800391a:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <HAL_RCC_OscConfig+0x824>)
 800391c:	4013      	ands	r3, r2
 800391e:	60cb      	str	r3, [r1, #12]
 8003920:	e001      	b.n	8003926 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3720      	adds	r7, #32
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	feeefffc 	.word	0xfeeefffc

08003938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0e7      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b75      	ldr	r3, [pc, #468]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d910      	bls.n	800397c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b72      	ldr	r3, [pc, #456]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 0207 	bic.w	r2, r3, #7
 8003962:	4970      	ldr	r1, [pc, #448]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b6e      	ldr	r3, [pc, #440]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0cf      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d010      	beq.n	80039aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	4b66      	ldr	r3, [pc, #408]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003994:	429a      	cmp	r2, r3
 8003996:	d908      	bls.n	80039aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003998:	4b63      	ldr	r3, [pc, #396]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4960      	ldr	r1, [pc, #384]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04c      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	4b5a      	ldr	r3, [pc, #360]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d121      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0a6      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d6:	4b54      	ldr	r3, [pc, #336]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d115      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e09a      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e08e      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e086      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a0e:	4b46      	ldr	r3, [pc, #280]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4943      	ldr	r1, [pc, #268]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a20:	f7fd fb12 	bl	8001048 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fd fb0e 	bl	8001048 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e06e      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 020c 	and.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1eb      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	4b31      	ldr	r3, [pc, #196]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d208      	bcs.n	8003a7e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	492b      	ldr	r1, [pc, #172]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7e:	4b29      	ldr	r3, [pc, #164]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d210      	bcs.n	8003aae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8c:	4b25      	ldr	r3, [pc, #148]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 0207 	bic.w	r2, r3, #7
 8003a94:	4923      	ldr	r1, [pc, #140]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9c:	4b21      	ldr	r3, [pc, #132]	@ (8003b24 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e036      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aba:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	4918      	ldr	r1, [pc, #96]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4910      	ldr	r1, [pc, #64]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aec:	f000 f824 	bl	8003b38 <HAL_RCC_GetSysClockFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	490b      	ldr	r1, [pc, #44]	@ (8003b2c <HAL_RCC_ClockConfig+0x1f4>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
 8003b08:	4a09      	ldr	r2, [pc, #36]	@ (8003b30 <HAL_RCC_ClockConfig+0x1f8>)
 8003b0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_RCC_ClockConfig+0x1fc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd fa49 	bl	8000fa8 <HAL_InitTick>
 8003b16:	4603      	mov	r3, r0
 8003b18:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40022000 	.word	0x40022000
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	080043f8 	.word	0x080043f8
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	@ 0x24
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b46:	4b3e      	ldr	r3, [pc, #248]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b50:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x34>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d121      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d11e      	bne.n	8003baa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b6c:	4b34      	ldr	r3, [pc, #208]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b78:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	e005      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b88:	4b2d      	ldr	r3, [pc, #180]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b94:	4a2b      	ldr	r2, [pc, #172]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bbc:	4b23      	ldr	r3, [pc, #140]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003bbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d134      	bne.n	8003c30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0xa6>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d003      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0xac>
 8003bdc:	e005      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bde:	4b1a      	ldr	r3, [pc, #104]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x110>)
 8003be0:	617b      	str	r3, [r7, #20]
      break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x114>)
 8003be6:	617b      	str	r3, [r7, #20]
      break;
 8003be8:	e002      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	617b      	str	r3, [r7, #20]
      break;
 8003bee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bf0:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	0e5b      	lsrs	r3, r3, #25
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	3301      	adds	r3, #1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c30:	69bb      	ldr	r3, [r7, #24]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	@ 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	08004408 	.word	0x08004408
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	007a1200 	.word	0x007a1200

08003c50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c68:	f7ff f9ee 	bl	8003048 <HAL_PWREx_GetVoltageRange>
 8003c6c:	6178      	str	r0, [r7, #20]
 8003c6e:	e014      	b.n	8003c9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4b25      	ldr	r3, [pc, #148]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c74:	4a24      	ldr	r2, [pc, #144]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c7c:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c88:	f7ff f9de 	bl	8003048 <HAL_PWREx_GetVoltageRange>
 8003c8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c92:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca0:	d10b      	bne.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b80      	cmp	r3, #128	@ 0x80
 8003ca6:	d919      	bls.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2ba0      	cmp	r3, #160	@ 0xa0
 8003cac:	d902      	bls.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cae:	2302      	movs	r3, #2
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	e013      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e010      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b80      	cmp	r3, #128	@ 0x80
 8003cbe:	d902      	bls.n	8003cc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e00a      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b80      	cmp	r3, #128	@ 0x80
 8003cca:	d102      	bne.n	8003cd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ccc:	2302      	movs	r3, #2
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	e004      	b.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b70      	cmp	r3, #112	@ 0x70
 8003cd6:	d101      	bne.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cd8:	2301      	movs	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 0207 	bic.w	r2, r3, #7
 8003ce4:	4909      	ldr	r1, [pc, #36]	@ (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cec:	4b07      	ldr	r3, [pc, #28]	@ (8003d0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40022000 	.word	0x40022000

08003d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d031      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d34:	d01a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d3a:	d814      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d44:	d10f      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d46:	4b5d      	ldr	r3, [pc, #372]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d52:	e00c      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fa22 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	74fb      	strb	r3, [r7, #19]
      break;
 8003d6a:	e000      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d74:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	494e      	ldr	r1, [pc, #312]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d8a:	e001      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 809e 	beq.w	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003da2:	4b46      	ldr	r3, [pc, #280]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db8:	4b40      	ldr	r3, [pc, #256]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a39      	ldr	r2, [pc, #228]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de0:	f7fd f932 	bl	8001048 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de6:	e009      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de8:	f7fd f92e 	bl	8001048 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d902      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dfa:	e005      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dfc:	4b30      	ldr	r3, [pc, #192]	@ (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ef      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d15a      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d019      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e2a:	4b24      	ldr	r3, [pc, #144]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e36:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e46:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e56:	4a19      	ldr	r2, [pc, #100]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d016      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fd f8ee 	bl	8001048 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6e:	e00b      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e70:	f7fd f8ea 	bl	8001048 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d902      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	74fb      	strb	r3, [r7, #19]
            break;
 8003e86:	e006      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ec      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9c:	4b07      	ldr	r3, [pc, #28]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eaa:	4904      	ldr	r1, [pc, #16]	@ (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003eb2:	e009      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
 8003eb8:	e006      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec8:	7c7b      	ldrb	r3, [r7, #17]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ece:	4b8d      	ldr	r3, [pc, #564]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed2:	4a8c      	ldr	r2, [pc, #560]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ee6:	4b87      	ldr	r3, [pc, #540]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eec:	f023 0203 	bic.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4983      	ldr	r1, [pc, #524]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f08:	4b7e      	ldr	r3, [pc, #504]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f0e:	f023 020c 	bic.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	497b      	ldr	r1, [pc, #492]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f2a:	4b76      	ldr	r3, [pc, #472]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	4972      	ldr	r1, [pc, #456]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f4c:	4b6d      	ldr	r3, [pc, #436]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5a:	496a      	ldr	r1, [pc, #424]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f6e:	4b65      	ldr	r3, [pc, #404]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	4961      	ldr	r1, [pc, #388]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f90:	4b5c      	ldr	r3, [pc, #368]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	4959      	ldr	r1, [pc, #356]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fb2:	4b54      	ldr	r3, [pc, #336]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	4950      	ldr	r1, [pc, #320]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fda:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	4948      	ldr	r1, [pc, #288]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ff6:	4b43      	ldr	r3, [pc, #268]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	493f      	ldr	r1, [pc, #252]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d028      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004018:	4b3a      	ldr	r3, [pc, #232]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004026:	4937      	ldr	r1, [pc, #220]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004036:	d106      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004038:	4b32      	ldr	r3, [pc, #200]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4a31      	ldr	r2, [pc, #196]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800403e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004042:	60d3      	str	r3, [r2, #12]
 8004044:	e011      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800404a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800404e:	d10c      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	2101      	movs	r1, #1
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f8a4 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004066:	7cfb      	ldrb	r3, [r7, #19]
 8004068:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d028      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004076:	4b23      	ldr	r3, [pc, #140]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004084:	491f      	ldr	r1, [pc, #124]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004094:	d106      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004096:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4a1a      	ldr	r2, [pc, #104]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800409c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040a0:	60d3      	str	r3, [r2, #12]
 80040a2:	e011      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	2101      	movs	r1, #1
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f875 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040be:	7cfb      	ldrb	r3, [r7, #19]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d02b      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e2:	4908      	ldr	r1, [pc, #32]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f2:	d109      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f4:	4b03      	ldr	r3, [pc, #12]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a02      	ldr	r2, [pc, #8]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80040fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040fe:	60d3      	str	r3, [r2, #12]
 8004100:	e014      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800410c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004110:	d10c      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 f843 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01c      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004138:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004146:	4916      	ldr	r1, [pc, #88]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004156:	d10c      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3304      	adds	r3, #4
 800415c:	2102      	movs	r1, #2
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f820 	bl	80041a4 <RCCEx_PLLSAI1_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800416e:	7cfb      	ldrb	r3, [r7, #19]
 8004170:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	4904      	ldr	r1, [pc, #16]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004194:	7cbb      	ldrb	r3, [r7, #18]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000

080041a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041b2:	4b74      	ldr	r3, [pc, #464]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d018      	beq.n	80041f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80041be:	4b71      	ldr	r3, [pc, #452]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f003 0203 	and.w	r2, r3, #3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d10d      	bne.n	80041ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
       ||
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041d6:	4b6b      	ldr	r3, [pc, #428]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	091b      	lsrs	r3, r3, #4
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
       ||
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d047      	beq.n	800427a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	e044      	b.n	800427a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d018      	beq.n	800422a <RCCEx_PLLSAI1_Config+0x86>
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d825      	bhi.n	8004248 <RCCEx_PLLSAI1_Config+0xa4>
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d002      	beq.n	8004206 <RCCEx_PLLSAI1_Config+0x62>
 8004200:	2b02      	cmp	r3, #2
 8004202:	d009      	beq.n	8004218 <RCCEx_PLLSAI1_Config+0x74>
 8004204:	e020      	b.n	8004248 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004206:	4b5f      	ldr	r3, [pc, #380]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11d      	bne.n	800424e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004216:	e01a      	b.n	800424e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004218:	4b5a      	ldr	r3, [pc, #360]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e013      	b.n	8004252 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800422a:	4b56      	ldr	r3, [pc, #344]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004236:	4b53      	ldr	r3, [pc, #332]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d109      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004246:	e006      	b.n	8004256 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      break;
 800424c:	e004      	b.n	8004258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004256:	bf00      	nop
    }

    if(status == HAL_OK)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10d      	bne.n	800427a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800425e:	4b49      	ldr	r3, [pc, #292]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	430b      	orrs	r3, r1
 8004274:	4943      	ldr	r1, [pc, #268]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	4313      	orrs	r3, r2
 8004278:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d17c      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004280:	4b40      	ldr	r3, [pc, #256]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3f      	ldr	r2, [pc, #252]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004286:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800428a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428c:	f7fc fedc 	bl	8001048 <HAL_GetTick>
 8004290:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004292:	e009      	b.n	80042a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004294:	f7fc fed8 	bl	8001048 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d902      	bls.n	80042a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	73fb      	strb	r3, [r7, #15]
        break;
 80042a6:	e005      	b.n	80042b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042a8:	4b36      	ldr	r3, [pc, #216]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ef      	bne.n	8004294 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d15f      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d110      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042c0:	4b30      	ldr	r3, [pc, #192]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80042c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6892      	ldr	r2, [r2, #8]
 80042d0:	0211      	lsls	r1, r2, #8
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	06d2      	lsls	r2, r2, #27
 80042d8:	430a      	orrs	r2, r1
 80042da:	492a      	ldr	r1, [pc, #168]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	610b      	str	r3, [r1, #16]
 80042e0:	e027      	b.n	8004332 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d112      	bne.n	800430e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042e8:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6892      	ldr	r2, [r2, #8]
 80042f8:	0211      	lsls	r1, r2, #8
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6912      	ldr	r2, [r2, #16]
 80042fe:	0852      	lsrs	r2, r2, #1
 8004300:	3a01      	subs	r2, #1
 8004302:	0552      	lsls	r2, r2, #21
 8004304:	430a      	orrs	r2, r1
 8004306:	491f      	ldr	r1, [pc, #124]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	610b      	str	r3, [r1, #16]
 800430c:	e011      	b.n	8004332 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800430e:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004316:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6892      	ldr	r2, [r2, #8]
 800431e:	0211      	lsls	r1, r2, #8
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6952      	ldr	r2, [r2, #20]
 8004324:	0852      	lsrs	r2, r2, #1
 8004326:	3a01      	subs	r2, #1
 8004328:	0652      	lsls	r2, r2, #25
 800432a:	430a      	orrs	r2, r1
 800432c:	4915      	ldr	r1, [pc, #84]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432e:	4313      	orrs	r3, r2
 8004330:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004332:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a13      	ldr	r2, [pc, #76]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004338:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800433c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7fc fe83 	bl	8001048 <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004344:	e009      	b.n	800435a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004346:	f7fc fe7f 	bl	8001048 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d902      	bls.n	800435a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	73fb      	strb	r3, [r7, #15]
          break;
 8004358:	e005      	b.n	8004366 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800435a:	4b0a      	ldr	r3, [pc, #40]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0ef      	beq.n	8004346 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800436c:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	4903      	ldr	r1, [pc, #12]	@ (8004384 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40021000 	.word	0x40021000

08004388 <memset>:
 8004388:	4402      	add	r2, r0
 800438a:	4603      	mov	r3, r0
 800438c:	4293      	cmp	r3, r2
 800438e:	d100      	bne.n	8004392 <memset+0xa>
 8004390:	4770      	bx	lr
 8004392:	f803 1b01 	strb.w	r1, [r3], #1
 8004396:	e7f9      	b.n	800438c <memset+0x4>

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	4d0d      	ldr	r5, [pc, #52]	@ (80043d0 <__libc_init_array+0x38>)
 800439c:	4c0d      	ldr	r4, [pc, #52]	@ (80043d4 <__libc_init_array+0x3c>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	2600      	movs	r6, #0
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	4d0b      	ldr	r5, [pc, #44]	@ (80043d8 <__libc_init_array+0x40>)
 80043aa:	4c0c      	ldr	r4, [pc, #48]	@ (80043dc <__libc_init_array+0x44>)
 80043ac:	f000 f818 	bl	80043e0 <_init>
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	2600      	movs	r6, #0
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	08004438 	.word	0x08004438
 80043d4:	08004438 	.word	0x08004438
 80043d8:	08004438 	.word	0x08004438
 80043dc:	0800443c 	.word	0x0800443c

080043e0 <_init>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr

080043ec <_fini>:
 80043ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ee:	bf00      	nop
 80043f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f2:	bc08      	pop	{r3}
 80043f4:	469e      	mov	lr, r3
 80043f6:	4770      	bx	lr
