
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f88  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005114  08005114  00006114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005154  08005154  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005154  08005154  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005154  08005154  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005154  08005154  00006154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005158  08005158  00006158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800515c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08005168  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005168  0000719c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b8c  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003183  00000000  00000000  0001bbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9c  00000000  00000000  0001fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002463e  00000000  00000000  00020604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001484a  00000000  00000000  00044c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf735  00000000  00000000  0005948c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128bc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003754  00000000  00000000  00128c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080050fc 	.word	0x080050fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080050fc 	.word	0x080050fc

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
BQ_data* BMS;
#ifdef USED_I2C1
	if(i2c == &hi2c1){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a26      	ldr	r2, [pc, #152]	@ (8000270 <BQ_Init+0xa4>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d101      	bne.n	80001e0 <BQ_Init+0x14>
		BMS = &BMS_1;
 80001dc:	4b25      	ldr	r3, [pc, #148]	@ (8000274 <BQ_Init+0xa8>)
 80001de:	60fb      	str	r3, [r7, #12]
#ifdef USED_I2C3
	if(i2c == &hi2c3){
		BMS = &BMS_3;
	}
#endif
    BMS->bq_i2c = i2c;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	687a      	ldr	r2, [r7, #4]
 80001e4:	601a      	str	r2, [r3, #0]
    BMS->bq_deviceAddress = Address;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	2217      	movs	r2, #23
 80001ea:	711a      	strb	r2, [r3, #4]
#ifdef USE_SCANNER
	CONNECTION_STATUS connect = I2CHelper_CheckAddress(BMS);
 80001ec:	68f8      	ldr	r0, [r7, #12]
 80001ee:	f000 fcfe 	bl	8000bee <I2CHelper_CheckAddress>
 80001f2:	4603      	mov	r3, r0
 80001f4:	72fb      	strb	r3, [r7, #11]
	while (connect != CONNECTED)
 80001f6:	e00b      	b.n	8000210 <BQ_Init+0x44>
	{
		connect = I2CHelper_CheckAddress(BMS);
 80001f8:	68f8      	ldr	r0, [r7, #12]
 80001fa:	f000 fcf8 	bl	8000bee <I2CHelper_CheckAddress>
 80001fe:	4603      	mov	r3, r0
 8000200:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(200);
 8000202:	20c8      	movs	r0, #200	@ 0xc8
 8000204:	f000 ffee 	bl	80011e4 <HAL_Delay>
	#ifdef debug
		if(connect != CONNECTED){
 8000208:	7afb      	ldrb	r3, [r7, #11]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d000      	beq.n	8000210 <BQ_Init+0x44>
			__asm("nop"); //insert breakpoint here
 800020e:	bf00      	nop
	while (connect != CONNECTED)
 8000210:	7afb      	ldrb	r3, [r7, #11]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1f0      	bne.n	80001f8 <BQ_Init+0x2c>
		}
	#endif
	}
#endif

    HAL_Delay(1500);
 8000216:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800021a:	f000 ffe3 	bl	80011e4 <HAL_Delay>
    BQAction_UpdateData(BMS);
 800021e:	68f8      	ldr	r0, [r7, #12]
 8000220:	f000 f9cb 	bl	80005ba <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS);
 8000224:	68f8      	ldr	r0, [r7, #12]
 8000226:	f000 f994 	bl	8000552 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS, false);
 800022a:	2100      	movs	r1, #0
 800022c:	68f8      	ldr	r0, [r7, #12]
 800022e:	f000 f90c 	bl	800044a <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS, false);
 8000232:	2100      	movs	r1, #0
 8000234:	68f8      	ldr	r0, [r7, #12]
 8000236:	f000 f91e 	bl	8000476 <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS, false);
 800023a:	2100      	movs	r1, #0
 800023c:	68f8      	ldr	r0, [r7, #12]
 800023e:	f000 f930 	bl	80004a2 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS, true);
 8000242:	2101      	movs	r1, #1
 8000244:	68f8      	ldr	r0, [r7, #12]
 8000246:	f000 f942 	bl	80004ce <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS, true);
 800024a:	2101      	movs	r1, #1
 800024c:	68f8      	ldr	r0, [r7, #12]
 800024e:	f000 f954 	bl	80004fa <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS, true);
 8000252:	2101      	movs	r1, #1
 8000254:	68f8      	ldr	r0, [r7, #12]
 8000256:	f000 f966 	bl	8000526 <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS, false);
 800025a:	2100      	movs	r1, #0
 800025c:	68f8      	ldr	r0, [r7, #12]
 800025e:	f000 f8de 	bl	800041e <BQAction_SetLed>

    BQAction_UpdateData(BMS);
 8000262:	68f8      	ldr	r0, [r7, #12]
 8000264:	f000 f9a9 	bl	80005ba <BQAction_UpdateData>
}
 8000268:	bf00      	nop
 800026a:	3710      	adds	r7, #16
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	20000094 	.word	0x20000094
 8000274:	200000e8 	.word	0x200000e8

08000278 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af02      	add	r7, sp, #8
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	460b      	mov	r3, r1
 8000282:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000284:	2344      	movs	r3, #68	@ 0x44
 8000286:	733b      	strb	r3, [r7, #12]
 8000288:	2302      	movs	r3, #2
 800028a:	737b      	strb	r3, [r7, #13]
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	b2db      	uxtb	r3, r3
 8000290:	73bb      	strb	r3, [r7, #14]
 8000292:	887b      	ldrh	r3, [r7, #2]
 8000294:	0a1b      	lsrs	r3, r3, #8
 8000296:	b29b      	uxth	r3, r3
 8000298:	b2db      	uxtb	r3, r3
 800029a:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	6818      	ldr	r0, [r3, #0]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	791b      	ldrb	r3, [r3, #4]
 80002a4:	4619      	mov	r1, r3
 80002a6:	f107 020c 	add.w	r2, r7, #12
 80002aa:	2364      	movs	r3, #100	@ 0x64
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	2304      	movs	r3, #4
 80002b0:	f002 f8aa 	bl	8002408 <HAL_I2C_Master_Transmit>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b092      	sub	sp, #72	@ 0x48
 80002c0:	af02      	add	r7, sp, #8
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	607a      	str	r2, [r7, #4]
 80002c6:	461a      	mov	r2, r3
 80002c8:	460b      	mov	r3, r1
 80002ca:	817b      	strh	r3, [r7, #10]
 80002cc:	4613      	mov	r3, r2
 80002ce:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002d0:	2344      	movs	r3, #68	@ 0x44
 80002d2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002d6:	2302      	movs	r3, #2
 80002d8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002dc:	897b      	ldrh	r3, [r7, #10]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002e4:	897b      	ldrh	r3, [r7, #10]
 80002e6:	0a1b      	lsrs	r3, r3, #8
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, buf, 4, 100);
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	6818      	ldr	r0, [r3, #0]
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	791b      	ldrb	r3, [r3, #4]
 80002f8:	4619      	mov	r1, r3
 80002fa:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80002fe:	2364      	movs	r3, #100	@ 0x64
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2304      	movs	r3, #4
 8000304:	f002 f880 	bl	8002408 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 8000308:	2344      	movs	r3, #68	@ 0x44
 800030a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800030e:	7a7b      	ldrb	r3, [r7, #9]
 8000310:	3302      	adds	r3, #2
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, addr, 2, 100);
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	791b      	ldrb	r3, [r3, #4]
 8000320:	4619      	mov	r1, r3
 8000322:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000326:	2364      	movs	r3, #100	@ 0x64
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2302      	movs	r3, #2
 800032c:	f002 f86c 	bl	8002408 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	221f      	movs	r2, #31
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f004 fea3 	bl	8005088 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress, result, 35, 100);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	791b      	ldrb	r3, [r3, #4]
 800034a:	4619      	mov	r1, r3
 800034c:	f107 0210 	add.w	r2, r7, #16
 8000350:	2364      	movs	r3, #100	@ 0x64
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2323      	movs	r3, #35	@ 0x23
 8000356:	f002 f96f 	bl	8002638 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 800035a:	2300      	movs	r3, #0
 800035c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800035e:	e00c      	b.n	800037a <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 8000360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000362:	1cda      	adds	r2, r3, #3
 8000364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000366:	6879      	ldr	r1, [r7, #4]
 8000368:	440b      	add	r3, r1
 800036a:	3240      	adds	r2, #64	@ 0x40
 800036c:	443a      	add	r2, r7
 800036e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000372:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000376:	3301      	adds	r3, #1
 8000378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800037a:	7a7b      	ldrb	r3, [r7, #9]
 800037c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800037e:	429a      	cmp	r2, r3
 8000380:	dbee      	blt.n	8000360 <BQ_ReadMABlockCommand+0xa4>
    }
}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3740      	adds	r7, #64	@ 0x40
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data* BMS, uint16_t command)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 8000398:	f107 020c 	add.w	r2, r7, #12
 800039c:	8879      	ldrh	r1, [r7, #2]
 800039e:	2302      	movs	r3, #2
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f7ff ff8b 	bl	80002bc <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	81fb      	strh	r3, [r7, #14]

    result = result | buf[0];
 80003aa:	7b3b      	ldrb	r3, [r7, #12]
 80003ac:	461a      	mov	r2, r3
 80003ae:	89fb      	ldrh	r3, [r7, #14]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[1] << 8);
 80003b4:	7b7b      	ldrb	r3, [r7, #13]
 80003b6:	021b      	lsls	r3, r3, #8
 80003b8:	b21a      	sxth	r2, r3
 80003ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003be:	4313      	orrs	r3, r2
 80003c0:	b21b      	sxth	r3, r3
 80003c2:	81fb      	strh	r3, [r7, #14]

    return result;
 80003c4:	89fb      	ldrh	r3, [r7, #14]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data* BMS, uint16_t command)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b084      	sub	sp, #16
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	807b      	strh	r3, [r7, #2]
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003da:	f107 0208 	add.w	r2, r7, #8
 80003de:	8879      	ldrh	r1, [r7, #2]
 80003e0:	2304      	movs	r3, #4
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f7ff ff6a 	bl	80002bc <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60fb      	str	r3, [r7, #12]

    result = result | (buf[0]);
 80003ec:	7a3b      	ldrb	r3, [r7, #8]
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4313      	orrs	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
    result = result | (buf[1] << 8);
 80003f6:	7a7b      	ldrb	r3, [r7, #9]
 80003f8:	021b      	lsls	r3, r3, #8
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	60fb      	str	r3, [r7, #12]
    result = result | (buf[2] << 16);
 8000400:	7abb      	ldrb	r3, [r7, #10]
 8000402:	041b      	lsls	r3, r3, #16
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	4313      	orrs	r3, r2
 8000408:	60fb      	str	r3, [r7, #12]
    result = result | (buf[3] << 24);
 800040a:	7afb      	ldrb	r3, [r7, #11]
 800040c:	061b      	lsls	r3, r3, #24
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]

    return result;
 8000414:	68fb      	ldr	r3, [r7, #12]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	460b      	mov	r3, r1
 8000428:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7a9b      	ldrb	r3, [r3, #10]
 800042e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	78fa      	ldrb	r2, [r7, #3]
 8000436:	429a      	cmp	r2, r3
 8000438:	d003      	beq.n	8000442 <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 800043a:	212b      	movs	r1, #43	@ 0x2b
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f7ff ff1b 	bl	8000278 <BQ_WriteMABlockCommand>
    }
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	460b      	mov	r3, r1
 8000454:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	7e1b      	ldrb	r3, [r3, #24]
 800045a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	429a      	cmp	r2, r3
 8000464:	d003      	beq.n	800046e <BQAction_SetManufacturingAllFet+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 8000466:	2122      	movs	r1, #34	@ 0x22
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f7ff ff05 	bl	8000278 <BQ_WriteMABlockCommand>
    }
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	460b      	mov	r3, r1
 8000480:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	7e5b      	ldrb	r3, [r3, #25]
 8000486:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800048a:	b2db      	uxtb	r3, r3
 800048c:	78fa      	ldrb	r2, [r7, #3]
 800048e:	429a      	cmp	r2, r3
 8000490:	d003      	beq.n	800049a <BQAction_SetManufacturingFuse+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 8000492:	2126      	movs	r1, #38	@ 0x26
 8000494:	6878      	ldr	r0, [r7, #4]
 8000496:	f7ff feef 	bl	8000278 <BQ_WriteMABlockCommand>
    }
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	460b      	mov	r3, r1
 80004ac:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7e5b      	ldrb	r3, [r3, #25]
 80004b2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	78fa      	ldrb	r2, [r7, #3]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d003      	beq.n	80004c6 <BQAction_SetCalibration+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004be:	212d      	movs	r1, #45	@ 0x2d
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f7ff fed9 	bl	8000278 <BQ_WriteMABlockCommand>
    }
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	7e1b      	ldrb	r3, [r3, #24]
 80004de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	78fa      	ldrb	r2, [r7, #3]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d003      	beq.n	80004f2 <BQAction_SetManufacturingGauging+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 80004ea:	2121      	movs	r1, #33	@ 0x21
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff fec3 	bl	8000278 <BQ_WriteMABlockCommand>
    }
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	7e1b      	ldrb	r3, [r3, #24]
 800050a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800050e:	b2db      	uxtb	r3, r3
 8000510:	78fa      	ldrb	r2, [r7, #3]
 8000512:	429a      	cmp	r2, r3
 8000514:	d003      	beq.n	800051e <BQAction_SetManufacturingPF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000516:	2124      	movs	r1, #36	@ 0x24
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff fead 	bl	8000278 <BQ_WriteMABlockCommand>
    }
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	7e1b      	ldrb	r3, [r3, #24]
 8000536:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800053a:	b2db      	uxtb	r3, r3
 800053c:	78fa      	ldrb	r2, [r7, #3]
 800053e:	429a      	cmp	r2, r3
 8000540:	d003      	beq.n	800054a <BQAction_SetManufacturingLF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 8000542:	2123      	movs	r1, #35	@ 0x23
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff fe97 	bl	8000278 <BQ_WriteMABlockCommand>
    }
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b084      	sub	sp, #16
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800055a:	6878      	ldr	r0, [r7, #4]
 800055c:	f000 f892 	bl	8000684 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode =  BMS->BQ_opStatus.bits.sec;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7a5b      	ldrb	r3, [r3, #9]
 8000564:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 800056c:	e01a      	b.n	80005a4 <BQAction_TryUnsealedDevice+0x52>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 800056e:	f240 4114 	movw	r1, #1044	@ 0x414
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f7ff fe80 	bl	8000278 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000578:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800057c:	f000 fe32 	bl	80011e4 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 8000580:	f243 6172 	movw	r1, #13938	@ 0x3672
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fe77 	bl	8000278 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 800058a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800058e:	f000 fe29 	bl	80011e4 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f876 	bl	8000684 <BQAction_UpdateOpStatus>
        securityMode = BMS->BQ_opStatus.bits.sec;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7a5b      	ldrb	r3, [r3, #9]
 800059c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d0e1      	beq.n	800056e <BQAction_TryUnsealedDevice+0x1c>
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0de      	beq.n	800056e <BQAction_TryUnsealedDevice+0x1c>
    }
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b088      	sub	sp, #32
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80005c2:	2157      	movs	r1, #87	@ 0x57
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff fee1 	bl	800038c <BQ_ReadCommandAsShort>
 80005ca:	4603      	mov	r3, r0
 80005cc:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	8bfa      	ldrh	r2, [r7, #30]
 80005d2:	831a      	strh	r2, [r3, #24]
    uint32_t chargeStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 80005d4:	2155      	movs	r1, #85	@ 0x55
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff fef9 	bl	80003ce <BQ_ReadCommandAsInt>
 80005dc:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	69ba      	ldr	r2, [r7, #24]
 80005e2:	60da      	str	r2, [r3, #12]
    uint32_t operationStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 80005e4:	2154      	movs	r1, #84	@ 0x54
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f7ff fef1 	bl	80003ce <BQ_ReadCommandAsInt>
 80005ec:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	697a      	ldr	r2, [r7, #20]
 80005f2:	609a      	str	r2, [r3, #8]
    uint32_t gaugStatus = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 80005f4:	2156      	movs	r1, #86	@ 0x56
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fee9 	bl	80003ce <BQ_ReadCommandAsInt>
 80005fc:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	611a      	str	r2, [r3, #16]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000604:	2103      	movs	r1, #3
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 fa98 	bl	8000b3c <I2CHelper_ReadRegisterAsShort>
 800060c:	4603      	mov	r3, r0
 800060e:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	89fa      	ldrh	r2, [r7, #14]
 8000614:	82da      	strh	r2, [r3, #22]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS, BQ40Z80_SBS_BatteryStatus);
 8000616:	2116      	movs	r1, #22
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 fa8f 	bl	8000b3c <I2CHelper_ReadRegisterAsShort>
 800061e:	4603      	mov	r3, r0
 8000620:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	89ba      	ldrh	r2, [r7, #12]
 8000626:	829a      	strh	r2, [r3, #20]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS, BQ40Z80_SBS_GPIORead);
 8000628:	2148      	movs	r1, #72	@ 0x48
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 faa7 	bl	8000b7e <I2CHelper_ReadRegisterAsChar>
 8000630:	4603      	mov	r3, r0
 8000632:	72fb      	strb	r3, [r7, #11]
    BMS->BQ_gpio.all = gpioStatus;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	7afa      	ldrb	r2, [r7, #11]
 8000638:	769a      	strb	r2, [r3, #26]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f103 021c 	add.w	r2, r3, #28
 8000640:	2320      	movs	r3, #32
 8000642:	2171      	movs	r1, #113	@ 0x71
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fe39 	bl	80002bc <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS->BQ_daStatus2.all, 16);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8000650:	2310      	movs	r3, #16
 8000652:	2172      	movs	r1, #114	@ 0x72
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff fe31 	bl	80002bc <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS->BQ_daStatus3.all, 18);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8000660:	2312      	movs	r3, #18
 8000662:	217b      	movs	r1, #123	@ 0x7b
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fe29 	bl	80002bc <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS->BQ_outCal.all, 32);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f103 025e 	add.w	r2, r3, #94	@ 0x5e
 8000670:	2320      	movs	r3, #32
 8000672:	f24f 0181 	movw	r1, #61569	@ 0xf081
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fe20 	bl	80002bc <BQ_ReadMABlockCommand>
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS->BQ_daStatus1.all, 32);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f103 021c 	add.w	r2, r3, #28
 8000692:	2320      	movs	r3, #32
 8000694:	2171      	movs	r1, #113	@ 0x71
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff fe10 	bl	80002bc <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 800069c:	2154      	movs	r1, #84	@ 0x54
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff fe95 	bl	80003ce <BQ_ReadCommandAsInt>
 80006a4:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	609a      	str	r2, [r3, #8]
    uint16_t man_status = BQ_ReadCommandAsShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006ac:	2157      	movs	r1, #87	@ 0x57
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff fe6c 	bl	800038c <BQ_ReadCommandAsShort>
 80006b4:	4603      	mov	r3, r0
 80006b6:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	897a      	ldrh	r2, [r7, #10]
 80006bc:	831a      	strh	r2, [r3, #24]
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <BQ_GetBoundaryCellVoltage>:
        return RELAX;
    }
}

BQ_BoundaryCellVoltage BQ_GetBoundaryCellVoltage(BQ_data* BMS)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b089      	sub	sp, #36	@ 0x24
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    BQ_BoundaryCellVoltage result;
    result.Max = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	82fb      	strh	r3, [r7, #22]
    result.Min = 65535;
 80006d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006d6:	82bb      	strh	r3, [r7, #20]

    uint16_t cells[6] =
        {
			BMS->BQ_daStatus1.sep.cell_voltage_1, // 1
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	8b9b      	ldrh	r3, [r3, #28]
    uint16_t cells[6] =
 80006dc:	813b      	strh	r3, [r7, #8]
			BMS->BQ_daStatus1.sep.cell_voltage_2, // 2
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	8bdb      	ldrh	r3, [r3, #30]
    uint16_t cells[6] =
 80006e2:	817b      	strh	r3, [r7, #10]
            BMS->BQ_daStatus1.sep.cell_voltage_3, // 3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	8c1b      	ldrh	r3, [r3, #32]
    uint16_t cells[6] =
 80006e8:	81bb      	strh	r3, [r7, #12]
            BMS->BQ_daStatus1.sep.cell_voltage_4, // 4
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
    uint16_t cells[6] =
 80006ee:	81fb      	strh	r3, [r7, #14]
            BMS->BQ_daStatus3.sep.cell_voltage_5, // 5
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
    uint16_t cells[6] =
 80006f6:	823b      	strh	r3, [r7, #16]
            BMS->BQ_daStatus3.sep.cell_voltage_6  // 6
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
    uint16_t cells[6] =
 80006fe:	827b      	strh	r3, [r7, #18]
        };

    for (int i = 0; i < 6; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e022      	b.n	800074c <BQ_GetBoundaryCellVoltage+0x86>
    {
        if (cells[i] > result.Max)
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	3320      	adds	r3, #32
 800070c:	443b      	add	r3, r7
 800070e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000712:	8afb      	ldrh	r3, [r7, #22]
 8000714:	429a      	cmp	r2, r3
 8000716:	d906      	bls.n	8000726 <BQ_GetBoundaryCellVoltage+0x60>
        {
            result.Max = cells[i];
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	3320      	adds	r3, #32
 800071e:	443b      	add	r3, r7
 8000720:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000724:	82fb      	strh	r3, [r7, #22]
        }
        if (cells[i] < result.Min)
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	3320      	adds	r3, #32
 800072c:	443b      	add	r3, r7
 800072e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8000732:	8abb      	ldrh	r3, [r7, #20]
 8000734:	429a      	cmp	r2, r3
 8000736:	d206      	bcs.n	8000746 <BQ_GetBoundaryCellVoltage+0x80>
        {
            result.Min = cells[i];
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	3320      	adds	r3, #32
 800073e:	443b      	add	r3, r7
 8000740:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000744:	82bb      	strh	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3301      	adds	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	2b05      	cmp	r3, #5
 8000750:	ddd9      	ble.n	8000706 <BQ_GetBoundaryCellVoltage+0x40>
        }
    }

    return result;
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	2300      	movs	r3, #0
 8000758:	8b3a      	ldrh	r2, [r7, #24]
 800075a:	f362 030f 	bfi	r3, r2, #0, #16
 800075e:	8b7a      	ldrh	r2, [r7, #26]
 8000760:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000764:	4618      	mov	r0, r3
 8000766:	3724      	adds	r7, #36	@ 0x24
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000774:	4b30      	ldr	r3, [pc, #192]	@ (8000838 <MX_CAN1_Init+0xc8>)
 8000776:	4a31      	ldr	r2, [pc, #196]	@ (800083c <MX_CAN1_Init+0xcc>)
 8000778:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 48;
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <MX_CAN1_Init+0xc8>)
 800077c:	2230      	movs	r2, #48	@ 0x30
 800077e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000780:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <MX_CAN1_Init+0xc8>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MX_CAN1_Init+0xc8>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800078c:	4b2a      	ldr	r3, [pc, #168]	@ (8000838 <MX_CAN1_Init+0xc8>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <MX_CAN1_Init+0xc8>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000798:	4b27      	ldr	r3, [pc, #156]	@ (8000838 <MX_CAN1_Init+0xc8>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <MX_CAN1_Init+0xc8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007a4:	4b24      	ldr	r3, [pc, #144]	@ (8000838 <MX_CAN1_Init+0xc8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007aa:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <MX_CAN1_Init+0xc8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007b0:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_CAN1_Init+0xc8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007b6:	4b20      	ldr	r3, [pc, #128]	@ (8000838 <MX_CAN1_Init+0xc8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007bc:	481e      	ldr	r0, [pc, #120]	@ (8000838 <MX_CAN1_Init+0xc8>)
 80007be:	f000 fd35 	bl	800122c <HAL_CAN_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fb9f 	bl	8000f0a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  canfil.FilterBank = 0;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
    canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
    canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
//    canfil.FilterIdHigh = 0x05<<5;
//    canfil.FilterIdLow = 0x0;
//    canfil.FilterMaskIdHigh = 0x0F<<5;


    canfil.FilterMaskIdHigh = 0;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
    canfil.FilterMaskIdLow = 0;
 80007e4:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
    canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	61da      	str	r2, [r3, #28]
    canfil.FilterActivation = ENABLE;
 80007f0:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	621a      	str	r2, [r3, #32]
    canfil.SlaveStartFilterBank = 14;
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_CAN1_Init+0xd0>)
 80007f8:	220e      	movs	r2, #14
 80007fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Transmit messages configuration */
    TxHeader.IDE = CAN_ID_EXT;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_CAN1_Init+0xd4>)
 80007fe:	2204      	movs	r2, #4
 8000800:	609a      	str	r2, [r3, #8]
    TxHeader.ExtId = 0x10000;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_CAN1_Init+0xd4>)
 8000804:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000808:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_CAN1_Init+0xd4>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 8;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_CAN1_Init+0xd4>)
 8000812:	2208      	movs	r2, #8
 8000814:	611a      	str	r2, [r3, #16]

    HAL_CAN_ConfigFilter(&hcan1,&canfil);
 8000816:	490a      	ldr	r1, [pc, #40]	@ (8000840 <MX_CAN1_Init+0xd0>)
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_CAN1_Init+0xc8>)
 800081a:	f000 fe02 	bl	8001422 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_CAN1_Init+0xc8>)
 8000820:	f000 fec9 	bl	80015b6 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000824:	2102      	movs	r1, #2
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_CAN1_Init+0xc8>)
 8000828:	f000 ffd9 	bl	80017de <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 800082c:	2101      	movs	r1, #1
 800082e:	4802      	ldr	r0, [pc, #8]	@ (8000838 <MX_CAN1_Init+0xc8>)
 8000830:	f000 ffd5 	bl	80017de <HAL_CAN_ActivateNotification>
  /* USER CODE END CAN1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000006c 	.word	0x2000006c
 800083c:	40006400 	.word	0x40006400
 8000840:	20000044 	.word	0x20000044
 8000844:	20000028 	.word	0x20000028

08000848 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1c      	ldr	r2, [pc, #112]	@ (80008d8 <HAL_CAN_MspInit+0x90>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d131      	bne.n	80008ce <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <HAL_CAN_MspInit+0x94>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <HAL_CAN_MspInit+0x94>)
 8000870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000874:	6593      	str	r3, [r2, #88]	@ 0x58
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <HAL_CAN_MspInit+0x94>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800087a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <HAL_CAN_MspInit+0x94>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <HAL_CAN_MspInit+0x94>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_CAN_MspInit+0x94>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800089a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008ac:	2309      	movs	r3, #9
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f001 fb45 	bl	8001f48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	2014      	movs	r0, #20
 80008c4:	f001 fabb 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008c8:	2014      	movs	r0, #20
 80008ca:	f001 fad4 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40006400 	.word	0x40006400
 80008dc:	40021000 	.word	0x40021000

080008e0 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b38      	ldr	r3, [pc, #224]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a37      	ldr	r2, [pc, #220]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b35      	ldr	r3, [pc, #212]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	4b32      	ldr	r3, [pc, #200]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a31      	ldr	r2, [pc, #196]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	4a2b      	ldr	r2, [pc, #172]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	4a25      	ldr	r2, [pc, #148]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800095c:	481f      	ldr	r0, [pc, #124]	@ (80009dc <MX_GPIO_Init+0xfc>)
 800095e:	f001 fc6d 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000968:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4819      	ldr	r0, [pc, #100]	@ (80009e0 <MX_GPIO_Init+0x100>)
 800097a:	f001 fae5 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097e:	230c      	movs	r3, #12
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098e:	2307      	movs	r3, #7
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f001 fad4 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80009a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <MX_GPIO_Init+0xfc>)
 80009ba:	f001 fac5 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	210c      	movs	r1, #12
 80009c2:	2028      	movs	r0, #40	@ 0x28
 80009c4:	f001 fa3b 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c8:	2028      	movs	r0, #40	@ 0x28
 80009ca:	f001 fa54 	bl	8001e76 <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	@ 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000400 	.word	0x48000400
 80009e0:	48000800 	.word	0x48000800

080009e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <MX_I2C1_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <MX_I2C1_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_I2C1_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a20:	f001 fc56 	bl	80022d0 <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 fa6e 	bl	8000f0a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a32:	f003 f861 	bl	8003af8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fa65 	bl	8000f0a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_I2C1_Init+0x74>)
 8000a44:	f003 f8a3 	bl	8003b8e <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fa5c 	bl	8000f0a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	10808dd3 	.word	0x10808dd3

08000a64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0a2      	sub	sp, #136	@ 0x88
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2260      	movs	r2, #96	@ 0x60
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 faff 	bl	8005088 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a28      	ldr	r2, [pc, #160]	@ (8000b30 <HAL_I2C_MspInit+0xcc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d148      	bne.n	8000b26 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a94:	2340      	movs	r3, #64	@ 0x40
 8000a96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 ff25 	bl	80048f0 <HAL_RCCEx_PeriphCLKConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000aac:	f000 fa2d 	bl	8000f0a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <HAL_I2C_MspInit+0xd0>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b34 <HAL_I2C_MspInit+0xd0>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <HAL_I2C_MspInit+0xd0>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ac8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000acc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000adc:	2304      	movs	r3, #4
 8000ade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4813      	ldr	r0, [pc, #76]	@ (8000b38 <HAL_I2C_MspInit+0xd4>)
 8000aea:	f001 fa2d 	bl	8001f48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <HAL_I2C_MspInit+0xd0>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af2:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <HAL_I2C_MspInit+0xd0>)
 8000af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_I2C_MspInit+0xd0>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210a      	movs	r1, #10
 8000b0a:	201f      	movs	r0, #31
 8000b0c:	f001 f997 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b10:	201f      	movs	r0, #31
 8000b12:	f001 f9b0 	bl	8001e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2109      	movs	r1, #9
 8000b1a:	2020      	movs	r0, #32
 8000b1c:	f001 f98f 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b20:	2020      	movs	r0, #32
 8000b22:	f001 f9a8 	bl	8001e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b26:	bf00      	nop
 8000b28:	3788      	adds	r7, #136	@ 0x88
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400

08000b3c <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(BQ_data* BMS, uint8_t address)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[2];
	I2CHelper_ReadRegister(BMS, address, buf, 2);
 8000b48:	f107 020c 	add.w	r2, r7, #12
 8000b4c:	78f9      	ldrb	r1, [r7, #3]
 8000b4e:	2302      	movs	r3, #2
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f826 	bl	8000ba2 <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000b5a:	7b3b      	ldrb	r3, [r7, #12]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000b64:	7b7b      	ldrb	r3, [r7, #13]
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	b21a      	sxth	r2, r3
 8000b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	81fb      	strh	r3, [r7, #14]

	return result;
 8000b74:	89fb      	ldrh	r3, [r7, #14]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(BQ_data* BMS, uint8_t address)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b084      	sub	sp, #16
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
	uint8_t buf[1];
	I2CHelper_ReadRegister(BMS, address, buf, 1);
 8000b8a:	f107 020c 	add.w	r2, r7, #12
 8000b8e:	78f9      	ldrb	r1, [r7, #3]
 8000b90:	2301      	movs	r3, #1
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f805 	bl	8000ba2 <I2CHelper_ReadRegister>

	return buf[0];
 8000b98:	7b3b      	ldrb	r3, [r7, #12]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(BQ_data* BMS, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af02      	add	r7, sp, #8
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	461a      	mov	r2, r3
 8000bae:	460b      	mov	r3, r1
 8000bb0:	72fb      	strb	r3, [r7, #11]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(BMS->bq_i2c, BMS->bq_deviceAddress, &address, 1, 100);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6818      	ldr	r0, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	791b      	ldrb	r3, [r3, #4]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f107 020b 	add.w	r2, r7, #11
 8000bc4:	2364      	movs	r3, #100	@ 0x64
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f001 fc1d 	bl	8002408 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(BMS->bq_i2c, BMS->bq_deviceAddress,  receive_buffer, size, 100);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	7abb      	ldrb	r3, [r7, #10]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2264      	movs	r2, #100	@ 0x64
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	f001 fd29 	bl	8002638 <HAL_I2C_Master_Receive>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <I2CHelper_CheckAddress>:
 * @brief scanning i2c devices and return first
 * @param i2c I2C_HandleTypeDef pointer
 * @return first i2c device
 */
CONNECTION_STATUS I2CHelper_CheckAddress(BQ_data* BMS)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, BMS->bq_deviceAddress, 3, 5);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	791b      	ldrb	r3, [r3, #4]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2305      	movs	r3, #5
 8000c02:	2203      	movs	r2, #3
 8000c04:	f001 fe0e 	bl	8002824 <HAL_I2C_IsDeviceReady>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	73bb      	strb	r3, [r7, #14]
	if (ret == HAL_BUSY){
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d101      	bne.n	8000c16 <I2CHelper_CheckAddress+0x28>
		return NEED_RESET;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e023      	b.n	8000c5e <I2CHelper_CheckAddress+0x70>
	}
	if (ret == HAL_OK)
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <I2CHelper_CheckAddress+0x32>
	{
		return CONNECTED;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e01e      	b.n	8000c5e <I2CHelper_CheckAddress+0x70>
	}
	for (uint8_t i = 1; i < 255; i++)
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e017      	b.n	8000c56 <I2CHelper_CheckAddress+0x68>
	{
		ret = HAL_I2C_IsDeviceReady(BMS->bq_i2c, i, 3, 5);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	2305      	movs	r3, #5
 8000c30:	2203      	movs	r2, #3
 8000c32:	f001 fdf7 	bl	8002824 <HAL_I2C_IsDeviceReady>
 8000c36:	4603      	mov	r3, r0
 8000c38:	73bb      	strb	r3, [r7, #14]
		if (ret == HAL_OK)
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d104      	bne.n	8000c4a <I2CHelper_CheckAddress+0x5c>
		{
			BMS->bq_deviceAddress = i;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	711a      	strb	r2, [r3, #4]
			return CHANGED_ADDRESS;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e009      	b.n	8000c5e <I2CHelper_CheckAddress+0x70>
		}
		HAL_Delay(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f000 faca 	bl	80011e4 <HAL_Delay>
	for (uint8_t i = 1; i < 255; i++)
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	3301      	adds	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2bff      	cmp	r3, #255	@ 0xff
 8000c5a:	d1e4      	bne.n	8000c26 <I2CHelper_CheckAddress+0x38>
	}
	return INVALID_DEVICE;
 8000c5c:	2302      	movs	r3, #2
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_EXTI_Callback>:
#endif
#define KelvinToCelsius 2732

bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c78:	d113      	bne.n	8000ca2 <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_GPIO_EXTI_Callback+0x44>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	f083 0301 	eor.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <HAL_GPIO_EXTI_Callback+0x44>)
 8000c96:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000c98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9c:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c9e:	f001 fae5 	bl	800226c <HAL_GPIO_TogglePin>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000168 	.word	0x20000168
 8000cb0:	48000400 	.word	0x48000400

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cba:	f000 fa17 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbe:	f000 f8c9 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc2:	f7ff fe0d 	bl	80008e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cc6:	f7ff fe8d 	bl	80009e4 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000cca:	f7ff fd51 	bl	8000770 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  BQ_BoundaryCellVoltage balance;
  status = false;
 8000cce:	4b57      	ldr	r3, [pc, #348]	@ (8000e2c <main+0x178>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  int16_t current = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t percentage[2] = {0};
 8000cdc:	2300      	movs	r3, #0
 8000cde:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t cells[6] = {0};
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	f8c3 2003 	str.w	r2, [r3, #3]
  uint16_t temperature[2] = {0};
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
  BQ_Init(&hi2c1);
 8000d0a:	4849      	ldr	r0, [pc, #292]	@ (8000e30 <main+0x17c>)
 8000d0c:	f7ff fa5e 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(&BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 8000d10:	1d3a      	adds	r2, r7, #4
 8000d12:	2306      	movs	r3, #6
 8000d14:	2102      	movs	r1, #2
 8000d16:	4847      	ldr	r0, [pc, #284]	@ (8000e34 <main+0x180>)
 8000d18:	f7ff fad0 	bl	80002bc <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 8000d1c:	20c8      	movs	r0, #200	@ 0xc8
 8000d1e:	f000 fa61 	bl	80011e4 <HAL_Delay>
	  BQAction_UpdateData(&BMS_1);
 8000d22:	4844      	ldr	r0, [pc, #272]	@ (8000e34 <main+0x180>)
 8000d24:	f7ff fc49 	bl	80005ba <BQAction_UpdateData>
	  voltage = I2CHelper_ReadRegisterAsShort(&BMS_1, BQ40Z80_SBS_Voltage);//works 0x09
 8000d28:	2109      	movs	r1, #9
 8000d2a:	4842      	ldr	r0, [pc, #264]	@ (8000e34 <main+0x180>)
 8000d2c:	f7ff ff06 	bl	8000b3c <I2CHelper_ReadRegisterAsShort>
 8000d30:	4603      	mov	r3, r0
 8000d32:	85fb      	strh	r3, [r7, #46]	@ 0x2e
//	  current = I2CHelper_ReadRegisterAsShort(&BMS_1, BQ40Z80_SBS_Current);//fix 1A = -400 (enable on 0x0A)
	  current = BMS_1.BQ_outCal.sep.current;//works
 8000d34:	4b3f      	ldr	r3, [pc, #252]	@ (8000e34 <main+0x180>)
 8000d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000d3a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	  percentage[0] = I2CHelper_ReadRegisterAsChar(&BMS_1, BQ40Z80_SBS_RelativeStateOfCharge);//ok
 8000d3c:	210d      	movs	r1, #13
 8000d3e:	483d      	ldr	r0, [pc, #244]	@ (8000e34 <main+0x180>)
 8000d40:	f7ff ff1d 	bl	8000b7e <I2CHelper_ReadRegisterAsChar>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  percentage[1] = I2CHelper_ReadRegisterAsChar(&BMS_1, BQ40Z80_SBS_AbsoluteStateOfCharge);
 8000d4a:	210e      	movs	r1, #14
 8000d4c:	4839      	ldr	r0, [pc, #228]	@ (8000e34 <main+0x180>)
 8000d4e:	f7ff ff16 	bl	8000b7e <I2CHelper_ReadRegisterAsChar>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  temperature[0] = BMS_1.BQ_daStatus2.sep.ts1_temperature - KelvinToCelsius;
 8000d58:	4b36      	ldr	r3, [pc, #216]	@ (8000e34 <main+0x180>)
 8000d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000d5c:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	803b      	strh	r3, [r7, #0]
	  temperature[1] = BMS_1.BQ_daStatus2.sep.ts2_temperature - KelvinToCelsius;
 8000d64:	4b33      	ldr	r3, [pc, #204]	@ (8000e34 <main+0x180>)
 8000d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000d6a:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	807b      	strh	r3, [r7, #2]
	  balance = BQ_GetBoundaryCellVoltage(&BMS_1);
 8000d72:	4830      	ldr	r0, [pc, #192]	@ (8000e34 <main+0x180>)
 8000d74:	f7ff fca7 	bl	80006c6 <BQ_GetBoundaryCellVoltage>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1.sep.cell_voltage_1;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e34 <main+0x180>)
 8000d7e:	8b9b      	ldrh	r3, [r3, #28]
 8000d80:	833b      	strh	r3, [r7, #24]
	  cells[1] = BMS_1.BQ_daStatus1.sep.cell_voltage_2;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	@ (8000e34 <main+0x180>)
 8000d84:	8bdb      	ldrh	r3, [r3, #30]
 8000d86:	837b      	strh	r3, [r7, #26]
	  cells[2] = BMS_1.BQ_daStatus1.sep.cell_voltage_3;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	@ (8000e34 <main+0x180>)
 8000d8a:	8c1b      	ldrh	r3, [r3, #32]
 8000d8c:	83bb      	strh	r3, [r7, #28]
	  cells[3] = BMS_1.BQ_daStatus1.sep.cell_voltage_4;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	@ (8000e34 <main+0x180>)
 8000d90:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000d92:	83fb      	strh	r3, [r7, #30]
	  cells[4] = BMS_1.BQ_daStatus3.sep.cell_voltage_5;
 8000d94:	4b27      	ldr	r3, [pc, #156]	@ (8000e34 <main+0x180>)
 8000d96:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8000d9a:	843b      	strh	r3, [r7, #32]
	  cells[5] = BMS_1.BQ_daStatus3.sep.cell_voltage_6;
 8000d9c:	4b25      	ldr	r3, [pc, #148]	@ (8000e34 <main+0x180>)
 8000d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000da2:	847b      	strh	r3, [r7, #34]	@ 0x22
//	  }else{
//		  BQAction_DisableFets(&BMS_1);
//	  }
//	  fun[0] = BMS_1.BQ_opStatus.bits.pdsg;
//	  fun[1] = BMS_1.BQ_opStatus.bits.xdsg;
	  stat4.pidPos = 0;
 8000da4:	4b24      	ldr	r3, [pc, #144]	@ (8000e38 <main+0x184>)
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
	  stat4.currentIn = (float)(BMS_1.BQ_outCal.sep.current) / 1000;
 8000dac:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <main+0x180>)
 8000dae:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	@ 0x60
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dba:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000e3c <main+0x188>
 8000dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <main+0x184>)
 8000dc4:	edc3 7a03 	vstr	s15, [r3, #12]
	  stat4.tempFet = (float)(BMS_1.BQ_daStatus2.sep.ts2_temperature - KelvinToCelsius) / 10;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <main+0x180>)
 8000dca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000dce:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dda:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <main+0x184>)
 8000de4:	edc3 7a01 	vstr	s15, [r3, #4]
	  stat4.tempMotor = (float)(BMS_1.BQ_daStatus2.sep.ts1_temperature - KelvinToCelsius) / 10;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <main+0x180>)
 8000dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000dec:	f6a3 23ac 	subw	r3, r3, #2732	@ 0xaac
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e00:	4b0d      	ldr	r3, [pc, #52]	@ (8000e38 <main+0x184>)
 8000e02:	edc3 7a02 	vstr	s15, [r3, #8]
	  VESC_convertStatus4ToRaw(&rawFrame, &stat4); //guess need vesc2halcan
 8000e06:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <main+0x184>)
 8000e08:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <main+0x18c>)
 8000e0a:	f004 f8ad 	bl	8004f68 <VESC_convertStatus4ToRaw>
	  vesc2halcan(&TxHeader, txData, 8, &rawFrame);
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <main+0x18c>)
 8000e10:	2208      	movs	r2, #8
 8000e12:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <main+0x190>)
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <main+0x194>)
 8000e16:	f000 f90b 	bl	8001030 <vesc2halcan>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, txData, &TxMailbox);
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <main+0x198>)
 8000e1c:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <main+0x190>)
 8000e1e:	490a      	ldr	r1, [pc, #40]	@ (8000e48 <main+0x194>)
 8000e20:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <main+0x19c>)
 8000e22:	f000 fc0c 	bl	800163e <HAL_CAN_AddTxMessage>
	  HAL_Delay(200);
 8000e26:	bf00      	nop
 8000e28:	e778      	b.n	8000d1c <main+0x68>
 8000e2a:	bf00      	nop
 8000e2c:	20000168 	.word	0x20000168
 8000e30:	20000094 	.word	0x20000094
 8000e34:	200000e8 	.word	0x200000e8
 8000e38:	2000016c 	.word	0x2000016c
 8000e3c:	447a0000 	.word	0x447a0000
 8000e40:	20000180 	.word	0x20000180
 8000e44:	20000190 	.word	0x20000190
 8000e48:	20000028 	.word	0x20000028
 8000e4c:	20000040 	.word	0x20000040
 8000e50:	2000006c 	.word	0x2000006c

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b096      	sub	sp, #88	@ 0x58
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2244      	movs	r2, #68	@ 0x44
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f004 f910 	bl	8005088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e7a:	f002 fee3 	bl	8003c44 <HAL_PWREx_ControlVoltageScaling>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e84:	f000 f841 	bl	8000f0a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000ea2:	2309      	movs	r3, #9
 8000ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 ff1a 	bl	8003cf0 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ec2:	f000 f822 	bl	8000f0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2104      	movs	r1, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 fb1a 	bl	8004518 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000eea:	f000 f80e 	bl	8000f0a <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3758      	adds	r7, #88	@ 0x58
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]

}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0e:	b672      	cpsid	i
}
 8000f10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f12:	bf00      	nop
 8000f14:	e7fd      	b.n	8000f12 <Error_Handler+0x8>
	...

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <HAL_MspInit+0x44>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_MspInit+0x44>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <HAL_MspInit+0x44>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <HAL_MspInit+0x44>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <HAL_MspInit+0x44>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_MspInit+0x44>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f8f5 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <CAN1_RX0_IRQHandler+0x10>)
 8000fc6:	f000 fc30 	bl	800182a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000006c 	.word	0x2000006c

08000fd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <I2C1_EV_IRQHandler+0x10>)
 8000fda:	f001 fd0f 	bl	80029fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000094 	.word	0x20000094

08000fe8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <I2C1_ER_IRQHandler+0x10>)
 8000fee:	f001 fd1f 	bl	8002a30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000094 	.word	0x20000094

08000ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001000:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001004:	f001 f94c 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <vesc2halcan>:
#include "vesc2halcan.h"

uint8_t vesc2halcan(CAN_TxHeaderTypeDef* txHeader, uint8_t* txData, size_t txDataSize, const VESC_RawFrame* vescRawFrame)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
	if (txDataSize < vescRawFrame->can_dlc){
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	791b      	ldrb	r3, [r3, #4]
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4293      	cmp	r3, r2
 8001048:	d201      	bcs.n	800104e <vesc2halcan+0x1e>
		return VESC2HALCAN_ERR_TXDATA;
 800104a:	2301      	movs	r3, #1
 800104c:	e020      	b.n	8001090 <vesc2halcan+0x60>
	}
	txHeader->ExtId = *(uint32_t*)vescRawFrame & 0x1FFFFFFF; //Identifier
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	605a      	str	r2, [r3, #4]
	txHeader->IDE = CAN_ID_EXT;//IdType
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2204      	movs	r2, #4
 800105e:	609a      	str	r2, [r3, #8]
	txHeader->RTR = CAN_RTR_DATA; //TxFrameType
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]

	// see FDCAN_data_length_code
	if (vescRawFrame->can_dlc >= 0u && vescRawFrame->can_dlc <= 8u){
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	2b08      	cmp	r3, #8
 800106c:	d80f      	bhi.n	800108e <vesc2halcan+0x5e>
		txHeader->DLC = vescRawFrame->can_dlc;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	791b      	ldrb	r3, [r3, #4]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	611a      	str	r2, [r3, #16]
//	txHeader->BitRateSwitch = FDCAN_BRS_OFF;
//	txHeader->FDFormat = FDCAN_CLASSIC_CAN;
//	txHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	txHeader->MessageMarker = 0x0;

	memcpy(txData, vescRawFrame->rawData, vescRawFrame->can_dlc);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f103 0108 	add.w	r1, r3, #8
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	791b      	ldrb	r3, [r3, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	68b8      	ldr	r0, [r7, #8]
 8001086:	f004 f82b 	bl	80050e0 <memcpy>

	return VESC2HALCAN_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <vesc2halcan+0x60>
		return VESC2HALCAN_ERR_DLC;
 800108e:	2303      	movs	r3, #3
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800109c:	f7ff ffb6 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	@ (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	@ (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f003 ffe7 	bl	8005098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ca:	f7ff fdf3 	bl	8000cb4 <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010dc:	0800515c 	.word	0x0800515c
  ldr r2, =_sbss
 80010e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010e4:	2000019c 	.word	0x2000019c

080010e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_IRQHandler>
	...

080010ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <HAL_Init+0x3c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <HAL_Init+0x3c>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001100:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
 8001104:	f000 fe90 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f80f 	bl	800112c <HAL_InitTick>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	e001      	b.n	800111e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800111a:	f7ff fefd 	bl	8000f18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800111e:	79fb      	ldrb	r3, [r7, #7]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_InitTick+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d023      	beq.n	8001188 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001140:	4b16      	ldr	r3, [pc, #88]	@ (800119c <HAL_InitTick+0x70>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_InitTick+0x6c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fe9b 	bl	8001e92 <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10f      	bne.n	8001182 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d809      	bhi.n	800117c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 fe65 	bl	8001e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_InitTick+0x74>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e007      	b.n	800118c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e004      	b.n	800118c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e001      	b.n	800118c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000198 	.word	0x20000198

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000198 	.word	0x20000198

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008

0800122c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0ed      	b.n	800141a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fafc 	bl	8000848 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff ffb4 	bl	80011cc <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001266:	e012      	b.n	800128e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001268:	f7ff ffb0 	bl	80011cc <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d90b      	bls.n	800128e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2205      	movs	r2, #5
 8001286:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e0c5      	b.n	800141a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0e5      	beq.n	8001268 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0202 	bic.w	r2, r2, #2
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ac:	f7ff ff8e 	bl	80011cc <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012b2:	e012      	b.n	80012da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012b4:	f7ff ff8a 	bl	80011cc <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b0a      	cmp	r3, #10
 80012c0:	d90b      	bls.n	80012da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2205      	movs	r2, #5
 80012d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e09f      	b.n	800141a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1e5      	bne.n	80012b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e1b      	ldrb	r3, [r3, #24]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e007      	b.n	8001312 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7e5b      	ldrb	r3, [r3, #25]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e007      	b.n	800133c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800133a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e9b      	ldrb	r3, [r3, #26]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0220 	orr.w	r2, r2, #32
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0220 	bic.w	r2, r2, #32
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7edb      	ldrb	r3, [r3, #27]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0210 	bic.w	r2, r2, #16
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0210 	orr.w	r2, r2, #16
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d108      	bne.n	80013aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0208 	orr.w	r2, r2, #8
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e007      	b.n	80013ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0208 	bic.w	r2, r2, #8
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7f5b      	ldrb	r3, [r3, #29]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	ea42 0103 	orr.w	r1, r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	1e5a      	subs	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001422:	b480      	push	{r7}
 8001424:	b087      	sub	sp, #28
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001438:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800143a:	7cfb      	ldrb	r3, [r7, #19]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d003      	beq.n	8001448 <HAL_CAN_ConfigFilter+0x26>
 8001440:	7cfb      	ldrb	r3, [r7, #19]
 8001442:	2b02      	cmp	r3, #2
 8001444:	f040 80aa 	bne.w	800159c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2201      	movs	r2, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d123      	bne.n	80014ca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	401a      	ands	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3248      	adds	r2, #72	@ 0x48
 80014aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c0:	6979      	ldr	r1, [r7, #20]
 80014c2:	3348      	adds	r3, #72	@ 0x48
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d122      	bne.n	8001518 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3248      	adds	r2, #72	@ 0x48
 80014f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800150c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800150e:	6979      	ldr	r1, [r7, #20]
 8001510:	3348      	adds	r3, #72	@ 0x48
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001532:	e007      	b.n	8001544 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d109      	bne.n	8001560 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800155e:	e007      	b.n	8001570 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d107      	bne.n	8001588 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	431a      	orrs	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800158e:	f023 0201 	bic.w	r2, r3, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	e006      	b.n	80015aa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d12e      	bne.n	8001628 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015e2:	f7ff fdf3 	bl	80011cc <HAL_GetTick>
 80015e6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015e8:	e012      	b.n	8001610 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ea:	f7ff fdef 	bl	80011cc <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b0a      	cmp	r3, #10
 80015f6:	d90b      	bls.n	8001610 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2205      	movs	r2, #5
 8001608:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e012      	b.n	8001636 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1e5      	bne.n	80015ea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e006      	b.n	8001636 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
  }
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800163e:	b480      	push	{r7}
 8001640:	b089      	sub	sp, #36	@ 0x24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001652:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800165c:	7ffb      	ldrb	r3, [r7, #31]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d003      	beq.n	800166a <HAL_CAN_AddTxMessage+0x2c>
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	2b02      	cmp	r3, #2
 8001666:	f040 80ad 	bne.w	80017c4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8095 	beq.w	80017b4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001694:	2201      	movs	r2, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	409a      	lsls	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10d      	bne.n	80016c2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	6809      	ldr	r1, [r1, #0]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3318      	adds	r3, #24
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	440b      	add	r3, r1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e00f      	b.n	80016e2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016d2:	68f9      	ldr	r1, [r7, #12]
 80016d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3318      	adds	r3, #24
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	440b      	add	r3, r1
 80016e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3318      	adds	r3, #24
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	440b      	add	r3, r1
 80016f2:	3304      	adds	r3, #4
 80016f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	7d1b      	ldrb	r3, [r3, #20]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d111      	bne.n	8001722 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3318      	adds	r3, #24
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	3304      	adds	r3, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	6811      	ldr	r1, [r2, #0]
 8001712:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3318      	adds	r3, #24
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	440b      	add	r3, r1
 800171e:	3304      	adds	r3, #4
 8001720:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3307      	adds	r3, #7
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	061a      	lsls	r2, r3, #24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3306      	adds	r3, #6
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3305      	adds	r3, #5
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	4313      	orrs	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	3204      	adds	r2, #4
 8001742:	7812      	ldrb	r2, [r2, #0]
 8001744:	4610      	mov	r0, r2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	ea43 0200 	orr.w	r2, r3, r0
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	440b      	add	r3, r1
 8001754:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001758:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3303      	adds	r3, #3
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	061a      	lsls	r2, r3, #24
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3302      	adds	r3, #2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	041b      	lsls	r3, r3, #16
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4313      	orrs	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4610      	mov	r0, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	6811      	ldr	r1, [r2, #0]
 8001780:	ea43 0200 	orr.w	r2, r3, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	440b      	add	r3, r1
 800178a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800178e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3318      	adds	r3, #24
 8001798:	011b      	lsls	r3, r3, #4
 800179a:	4413      	add	r3, r2
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	6811      	ldr	r1, [r2, #0]
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3318      	adds	r3, #24
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	440b      	add	r3, r1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e00e      	b.n	80017d2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e006      	b.n	80017d2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d002      	beq.n	80017fc <HAL_CAN_ActivateNotification+0x1e>
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d109      	bne.n	8001810 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6959      	ldr	r1, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	e006      	b.n	800181e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b08a      	sub	sp, #40	@ 0x28
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d07c      	beq.n	800196a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d023      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f983 	bl	8001b98 <HAL_CAN_TxMailbox0CompleteCallback>
 8001892:	e016      	b.n	80018c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a6:	e00c      	b.n	80018c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ba:	e002      	b.n	80018c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f989 	bl	8001bd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d024      	beq.n	8001916 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f963 	bl	8001bac <HAL_CAN_TxMailbox1CompleteCallback>
 80018e6:	e016      	b.n	8001916 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fa:	e00c      	b.n	8001916 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
 800190e:	e002      	b.n	8001916 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f969 	bl	8001be8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d024      	beq.n	800196a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001928:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f943 	bl	8001bc0 <HAL_CAN_TxMailbox2CompleteCallback>
 800193a:	e016      	b.n	800196a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
 800194e:	e00c      	b.n	800196a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
 8001962:	e002      	b.n	800196a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f949 	bl	8001bfc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00c      	beq.n	800198e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2210      	movs	r2, #16
 800198c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2208      	movs	r2, #8
 80019a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f930 	bl	8001c10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fa94 	bl	8000ef6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00c      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2210      	movs	r2, #16
 80019f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f912 	bl	8001c38 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f8f9 	bl	8001c24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00b      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f8fc 	bl	8001c4c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8f5 	bl	8001c60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d07b      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d072      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d043      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03e      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001af8:	2b60      	cmp	r3, #96	@ 0x60
 8001afa:	d02b      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x32a>
 8001afc:	2b60      	cmp	r3, #96	@ 0x60
 8001afe:	d82e      	bhi.n	8001b5e <HAL_CAN_IRQHandler+0x334>
 8001b00:	2b50      	cmp	r3, #80	@ 0x50
 8001b02:	d022      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x320>
 8001b04:	2b50      	cmp	r3, #80	@ 0x50
 8001b06:	d82a      	bhi.n	8001b5e <HAL_CAN_IRQHandler+0x334>
 8001b08:	2b40      	cmp	r3, #64	@ 0x40
 8001b0a:	d019      	beq.n	8001b40 <HAL_CAN_IRQHandler+0x316>
 8001b0c:	2b40      	cmp	r3, #64	@ 0x40
 8001b0e:	d826      	bhi.n	8001b5e <HAL_CAN_IRQHandler+0x334>
 8001b10:	2b30      	cmp	r3, #48	@ 0x30
 8001b12:	d010      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x30c>
 8001b14:	2b30      	cmp	r3, #48	@ 0x30
 8001b16:	d822      	bhi.n	8001b5e <HAL_CAN_IRQHandler+0x334>
 8001b18:	2b10      	cmp	r3, #16
 8001b1a:	d002      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x2f8>
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d005      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b20:	e01d      	b.n	8001b5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b2a:	e019      	b.n	8001b60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b34:	e014      	b.n	8001b60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	f043 0320 	orr.w	r3, r3, #32
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b3e:	e00f      	b.n	8001b60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b48:	e00a      	b.n	8001b60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b52:	e005      	b.n	8001b60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b5c:	e000      	b.n	8001b60 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2204      	movs	r2, #4
 8001b76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f872 	bl	8001c74 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	@ 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	@ (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d005      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	e029      	b.n	8001f22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 020e 	bic.w	r2, r2, #14
 8001edc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0201 	bic.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f003 021c 	and.w	r2, r3, #28
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	4798      	blx	r3
    }
  }
  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f3a:	b2db      	uxtb	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e154      	b.n	8002202 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8146 	beq.w	80021fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d005      	beq.n	8001f88 <HAL_GPIO_Init+0x40>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d130      	bne.n	8001fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 0201 	and.w	r2, r3, #1
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d017      	beq.n	8002026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d123      	bne.n	800207a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	6939      	ldr	r1, [r7, #16]
 8002076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0203 	and.w	r2, r3, #3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a0 	beq.w	80021fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020bc:	4b58      	ldr	r3, [pc, #352]	@ (8002220 <HAL_GPIO_Init+0x2d8>)
 80020be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c0:	4a57      	ldr	r2, [pc, #348]	@ (8002220 <HAL_GPIO_Init+0x2d8>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c8:	4b55      	ldr	r3, [pc, #340]	@ (8002220 <HAL_GPIO_Init+0x2d8>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d4:	4a53      	ldr	r2, [pc, #332]	@ (8002224 <HAL_GPIO_Init+0x2dc>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020fe:	d019      	beq.n	8002134 <HAL_GPIO_Init+0x1ec>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a49      	ldr	r2, [pc, #292]	@ (8002228 <HAL_GPIO_Init+0x2e0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_GPIO_Init+0x1e8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a48      	ldr	r2, [pc, #288]	@ (800222c <HAL_GPIO_Init+0x2e4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00d      	beq.n	800212c <HAL_GPIO_Init+0x1e4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a47      	ldr	r2, [pc, #284]	@ (8002230 <HAL_GPIO_Init+0x2e8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0x1e0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <HAL_GPIO_Init+0x2ec>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_GPIO_Init+0x1dc>
 8002120:	2304      	movs	r3, #4
 8002122:	e008      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002124:	2307      	movs	r3, #7
 8002126:	e006      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002128:	2303      	movs	r3, #3
 800212a:	e004      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 800212c:	2302      	movs	r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002134:	2300      	movs	r3, #0
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4093      	lsls	r3, r2
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002146:	4937      	ldr	r1, [pc, #220]	@ (8002224 <HAL_GPIO_Init+0x2dc>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002154:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002178:	4a2f      	ldr	r2, [pc, #188]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800217e:	4b2e      	ldr	r3, [pc, #184]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021a2:	4a25      	ldr	r2, [pc, #148]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021a8:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_GPIO_Init+0x2f0>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f47f aea3 	bne.w	8001f58 <HAL_GPIO_Init+0x10>
  }
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000
 8002228:	48000400 	.word	0x48000400
 800222c:	48000800 	.word	0x48000800
 8002230:	48000c00 	.word	0x48000c00
 8002234:	48001000 	.word	0x48001000
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002258:	e002      	b.n	8002260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	43d9      	mvns	r1, r3
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	400b      	ands	r3, r1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fcd2 	bl	8000c68 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e08d      	b.n	80023fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe fbb4 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2224      	movs	r2, #36	@ 0x24
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002320:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002330:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e006      	b.n	8002358 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002356:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d108      	bne.n	8002372 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	e007      	b.n	8002382 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002380:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002394:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69d9      	ldr	r1, [r3, #28]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	461a      	mov	r2, r3
 8002414:	460b      	mov	r3, r1
 8002416:	817b      	strh	r3, [r7, #10]
 8002418:	4613      	mov	r3, r2
 800241a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b20      	cmp	r3, #32
 8002426:	f040 80fd 	bne.w	8002624 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_I2C_Master_Transmit+0x30>
 8002434:	2302      	movs	r3, #2
 8002436:	e0f6      	b.n	8002626 <HAL_I2C_Master_Transmit+0x21e>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002440:	f7fe fec4 	bl	80011cc <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2319      	movs	r3, #25
 800244c:	2201      	movs	r2, #1
 800244e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f001 f871 	bl	800353a <I2C_WaitOnFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0e1      	b.n	8002626 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2221      	movs	r2, #33	@ 0x21
 8002466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2210      	movs	r2, #16
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	893a      	ldrh	r2, [r7, #8]
 8002482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	2bff      	cmp	r3, #255	@ 0xff
 8002492:	d906      	bls.n	80024a2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	22ff      	movs	r2, #255	@ 0xff
 8002498:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800249a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e007      	b.n	80024b2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80024ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d024      	beq.n	8002504 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	781a      	ldrb	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	8979      	ldrh	r1, [r7, #10]
 80024f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002630 <HAL_I2C_Master_Transmit+0x228>)
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f001 fa6b 	bl	80039d8 <I2C_TransferConfig>
 8002502:	e066      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002508:	b2da      	uxtb	r2, r3
 800250a:	8979      	ldrh	r1, [r7, #10]
 800250c:	4b48      	ldr	r3, [pc, #288]	@ (8002630 <HAL_I2C_Master_Transmit+0x228>)
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f001 fa60 	bl	80039d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002518:	e05b      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	6a39      	ldr	r1, [r7, #32]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f001 f864 	bl	80035ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07b      	b.n	8002626 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d034      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0x1ca>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d130      	bne.n	80025d2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	2200      	movs	r2, #0
 8002578:	2180      	movs	r1, #128	@ 0x80
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 ffdd 	bl	800353a <I2C_WaitOnFlagUntilTimeout>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e04d      	b.n	8002626 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2bff      	cmp	r3, #255	@ 0xff
 8002592:	d90e      	bls.n	80025b2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	22ff      	movs	r2, #255	@ 0xff
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	8979      	ldrh	r1, [r7, #10]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f001 fa14 	bl	80039d8 <I2C_TransferConfig>
 80025b0:	e00f      	b.n	80025d2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	8979      	ldrh	r1, [r7, #10]
 80025c4:	2300      	movs	r3, #0
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f001 fa03 	bl	80039d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d19e      	bne.n	800251a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	6a39      	ldr	r1, [r7, #32]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f001 f84a 	bl	800367a <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e01a      	b.n	8002626 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2220      	movs	r2, #32
 80025f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <HAL_I2C_Master_Transmit+0x22c>)
 8002604:	400b      	ands	r3, r1
 8002606:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
  }
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	80002000 	.word	0x80002000
 8002634:	fe00e800 	.word	0xfe00e800

08002638 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	817b      	strh	r3, [r7, #10]
 8002648:	4613      	mov	r3, r2
 800264a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 80db 	bne.w	8002810 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_I2C_Master_Receive+0x30>
 8002664:	2302      	movs	r3, #2
 8002666:	e0d4      	b.n	8002812 <HAL_I2C_Master_Receive+0x1da>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002670:	f7fe fdac 	bl	80011cc <HAL_GetTick>
 8002674:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2319      	movs	r3, #25
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 ff59 	bl	800353a <I2C_WaitOnFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0bf      	b.n	8002812 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2222      	movs	r2, #34	@ 0x22
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2210      	movs	r2, #16
 800269e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	893a      	ldrh	r2, [r7, #8]
 80026b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2bff      	cmp	r3, #255	@ 0xff
 80026c2:	d90e      	bls.n	80026e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	4b52      	ldr	r3, [pc, #328]	@ (800281c <HAL_I2C_Master_Receive+0x1e4>)
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f001 f97c 	bl	80039d8 <I2C_TransferConfig>
 80026e0:	e06d      	b.n	80027be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	8979      	ldrh	r1, [r7, #10]
 80026f4:	4b49      	ldr	r3, [pc, #292]	@ (800281c <HAL_I2C_Master_Receive+0x1e4>)
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f001 f96b 	bl	80039d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002702:	e05c      	b.n	80027be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	6a39      	ldr	r1, [r7, #32]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fff9 	bl	8003700 <I2C_WaitOnRXNEFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e07c      	b.n	8002812 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d034      	beq.n	80027be <HAL_I2C_Master_Receive+0x186>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d130      	bne.n	80027be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	2200      	movs	r2, #0
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fee7 	bl	800353a <I2C_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e04d      	b.n	8002812 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277a:	b29b      	uxth	r3, r3
 800277c:	2bff      	cmp	r3, #255	@ 0xff
 800277e:	d90e      	bls.n	800279e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	22ff      	movs	r2, #255	@ 0xff
 8002784:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	2300      	movs	r3, #0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f001 f91e 	bl	80039d8 <I2C_TransferConfig>
 800279c:	e00f      	b.n	80027be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	8979      	ldrh	r1, [r7, #10]
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f001 f90d 	bl	80039d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d19d      	bne.n	8002704 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	6a39      	ldr	r1, [r7, #32]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 ff54 	bl	800367a <I2C_WaitOnSTOPFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e01a      	b.n	8002812 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2220      	movs	r2, #32
 80027e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002820 <HAL_I2C_Master_Receive+0x1e8>)
 80027f0:	400b      	ands	r3, r1
 80027f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e000      	b.n	8002812 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	80002400 	.word	0x80002400
 8002820:	fe00e800 	.word	0xfe00e800

08002824 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 80d6 	bne.w	80029f2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002854:	d101      	bne.n	800285a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	e0cc      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_I2C_IsDeviceReady+0x44>
 8002864:	2302      	movs	r3, #2
 8002866:	e0c5      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x1d0>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2224      	movs	r2, #36	@ 0x24
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_I2C_IsDeviceReady+0x72>
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800288c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002890:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002894:	e006      	b.n	80028a4 <HAL_I2C_IsDeviceReady+0x80>
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028a0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fc8f 	bl	80011cc <HAL_GetTick>
 80028ae:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028dc:	e034      	b.n	8002948 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d01a      	beq.n	800291c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028e6:	f7fe fc71 	bl	80011cc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d302      	bcc.n	80028fc <HAL_I2C_IsDeviceReady+0xd8>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e06b      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b20      	cmp	r3, #32
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b10      	cmp	r3, #16
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002948:	7ffb      	ldrb	r3, [r7, #31]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <HAL_I2C_IsDeviceReady+0x130>
 800294e:	7fbb      	ldrb	r3, [r7, #30]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0c4      	beq.n	80028de <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b10      	cmp	r3, #16
 8002960:	d01a      	beq.n	8002998 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2200      	movs	r2, #0
 800296a:	2120      	movs	r1, #32
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fde4 	bl	800353a <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e03b      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2220      	movs	r2, #32
 8002982:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e02d      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	2120      	movs	r1, #32
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fdc9 	bl	800353a <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e020      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2210      	movs	r2, #16
 80029b8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2220      	movs	r2, #32
 80029c0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f63f af56 	bhi.w	800287e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f043 0220 	orr.w	r2, r3, #32
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
  }
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	68f9      	ldr	r1, [r7, #12]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00f      	beq.n	8002a72 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00f      	beq.n	8002a9c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f043 0208 	orr.w	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00f      	beq.n	8002ac6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	f043 0202 	orr.w	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ac4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 030b 	and.w	r3, r3, #11
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fbd5 	bl	8003288 <I2C_ITError>
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	460b      	mov	r3, r1
 8002b18:	70fb      	strb	r3, [r7, #3]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <I2C_Slave_ISR_IT+0x24>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0e2      	b.n	8002d50 <I2C_Slave_ISR_IT+0x1ea>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ba6:	6939      	ldr	r1, [r7, #16]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f9b5 	bl	8002f18 <I2C_ITSlaveCplt>
 8002bae:	e0ca      	b.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d04b      	beq.n	8002c52 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d046      	beq.n	8002c52 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d128      	bne.n	8002c20 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b28      	cmp	r3, #40	@ 0x28
 8002bd8:	d108      	bne.n	8002bec <I2C_Slave_ISR_IT+0x86>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002be0:	d104      	bne.n	8002bec <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002be2:	6939      	ldr	r1, [r7, #16]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fafb 	bl	80031e0 <I2C_ITListenCplt>
 8002bea:	e031      	b.n	8002c50 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b29      	cmp	r3, #41	@ 0x29
 8002bf6:	d10e      	bne.n	8002c16 <I2C_Slave_ISR_IT+0xb0>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bfe:	d00a      	beq.n	8002c16 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2210      	movs	r2, #16
 8002c06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fc54 	bl	80034b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f926 	bl	8002e60 <I2C_ITSlaveSeqCplt>
 8002c14:	e01c      	b.n	8002c50 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2210      	movs	r2, #16
 8002c1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002c1e:	e08f      	b.n	8002d40 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2210      	movs	r2, #16
 8002c26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <I2C_Slave_ISR_IT+0xdc>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c40:	d17e      	bne.n	8002d40 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	4619      	mov	r1, r3
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fb1d 	bl	8003288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c4e:	e077      	b.n	8002d40 <I2C_Slave_ISR_IT+0x1da>
 8002c50:	e076      	b.n	8002d40 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02f      	beq.n	8002cbc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02a      	beq.n	8002cbc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d018      	beq.n	8002ca2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d14b      	bne.n	8002d44 <I2C_Slave_ISR_IT+0x1de>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb2:	d047      	beq.n	8002d44 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f8d3 	bl	8002e60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002cba:	e043      	b.n	8002d44 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002cd0:	6939      	ldr	r1, [r7, #16]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f840 	bl	8002d58 <I2C_ITAddrCplt>
 8002cd8:	e035      	b.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d030      	beq.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d02b      	beq.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d018      	beq.n	8002d2a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d28:	e00d      	b.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d30:	d002      	beq.n	8002d38 <I2C_Slave_ISR_IT+0x1d2>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f891 	bl	8002e60 <I2C_ITSlaveSeqCplt>
 8002d3e:	e002      	b.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002d40:	bf00      	nop
 8002d42:	e000      	b.n	8002d46 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002d44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d6e:	2b28      	cmp	r3, #40	@ 0x28
 8002d70:	d16a      	bne.n	8002e48 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d90:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d9e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002dac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d138      	bne.n	8002e28 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	09db      	lsrs	r3, r3, #7
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	89bb      	ldrh	r3, [r7, #12]
 8002dbe:	4053      	eors	r3, r2
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	f003 0306 	and.w	r3, r3, #6
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11c      	bne.n	8002e04 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002dca:	897b      	ldrh	r3, [r7, #10]
 8002dcc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d13b      	bne.n	8002e58 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2208      	movs	r2, #8
 8002dec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002df6:	89ba      	ldrh	r2, [r7, #12]
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fe86 	bl	8002b0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e02:	e029      	b.n	8002e58 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002e04:	893b      	ldrh	r3, [r7, #8]
 8002e06:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fe15 	bl	8003a3c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e1a:	89ba      	ldrh	r2, [r7, #12]
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fe74 	bl	8002b0e <HAL_I2C_AddrCallback>
}
 8002e26:	e017      	b.n	8002e58 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002e28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fe05 	bl	8003a3c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e3a:	89ba      	ldrh	r2, [r7, #12]
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fe64 	bl	8002b0e <HAL_I2C_AddrCallback>
}
 8002e46:	e007      	b.n	8002e58 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	e00c      	b.n	8002eae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b29      	cmp	r3, #41	@ 0x29
 8002eb8:	d112      	bne.n	8002ee0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2228      	movs	r2, #40	@ 0x28
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2221      	movs	r2, #33	@ 0x21
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ec8:	2101      	movs	r1, #1
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fdb6 	bl	8003a3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fe04 	bl	8002ae6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ede:	e017      	b.n	8002f10 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eea:	d111      	bne.n	8002f10 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2228      	movs	r2, #40	@ 0x28
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2222      	movs	r2, #34	@ 0x22
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002efa:	2102      	movs	r1, #2
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fd9d 	bl	8003a3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff fdf5 	bl	8002afa <HAL_I2C_SlaveRxCpltCallback>
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f32:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2220      	movs	r2, #32
 8002f42:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	2b21      	cmp	r3, #33	@ 0x21
 8002f48:	d002      	beq.n	8002f50 <I2C_ITSlaveCplt+0x38>
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	2b29      	cmp	r3, #41	@ 0x29
 8002f4e:	d108      	bne.n	8002f62 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f50:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fd71 	bl	8003a3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2221      	movs	r2, #33	@ 0x21
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f60:	e019      	b.n	8002f96 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	2b22      	cmp	r3, #34	@ 0x22
 8002f66:	d002      	beq.n	8002f6e <I2C_ITSlaveCplt+0x56>
 8002f68:	7afb      	ldrb	r3, [r7, #11]
 8002f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6c:	d108      	bne.n	8002f80 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f6e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fd62 	bl	8003a3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2222      	movs	r2, #34	@ 0x22
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f7e:	e00a      	b.n	8002f96 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002f80:	7afb      	ldrb	r3, [r7, #11]
 8002f82:	2b28      	cmp	r3, #40	@ 0x28
 8002f84:	d107      	bne.n	8002f96 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002f86:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fd56 	bl	8003a3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fa4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b89      	ldr	r3, [pc, #548]	@ (80031d8 <I2C_ITSlaveCplt+0x2c0>)
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa7d 	bl	80034b6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d013      	beq.n	8002fee <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01f      	beq.n	800301e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fec:	e017      	b.n	800301e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d012      	beq.n	800301e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003006:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0304 	bic.w	r3, r3, #4
 800302e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d049      	beq.n	800311e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003090:	2b00      	cmp	r3, #0
 8003092:	d044      	beq.n	800311e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d128      	bne.n	80030f0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b28      	cmp	r3, #40	@ 0x28
 80030a8:	d108      	bne.n	80030bc <I2C_ITSlaveCplt+0x1a4>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030b0:	d104      	bne.n	80030bc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80030b2:	6979      	ldr	r1, [r7, #20]
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f893 	bl	80031e0 <I2C_ITListenCplt>
 80030ba:	e030      	b.n	800311e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b29      	cmp	r3, #41	@ 0x29
 80030c6:	d10e      	bne.n	80030e6 <I2C_ITSlaveCplt+0x1ce>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030ce:	d00a      	beq.n	80030e6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2210      	movs	r2, #16
 80030d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f9ec 	bl	80034b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff febe 	bl	8002e60 <I2C_ITSlaveSeqCplt>
 80030e4:	e01b      	b.n	800311e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2210      	movs	r2, #16
 80030ec:	61da      	str	r2, [r3, #28]
 80030ee:	e016      	b.n	800311e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2210      	movs	r2, #16
 80030f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	f043 0204 	orr.w	r2, r3, #4
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <I2C_ITSlaveCplt+0x1fa>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003110:	d105      	bne.n	800311e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8b5 	bl	8003288 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003138:	4619      	mov	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8a4 	bl	8003288 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b28      	cmp	r3, #40	@ 0x28
 800314a:	d141      	bne.n	80031d0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800314c:	6979      	ldr	r1, [r7, #20]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f846 	bl	80031e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003154:	e03c      	b.n	80031d0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800315e:	d014      	beq.n	800318a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff fe7d 	bl	8002e60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <I2C_ITSlaveCplt+0x2c4>)
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fcd1 	bl	8002b2a <HAL_I2C_ListenCpltCallback>
}
 8003188:	e022      	b.n	80031d0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b22      	cmp	r3, #34	@ 0x22
 8003194:	d10e      	bne.n	80031b4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fca4 	bl	8002afa <HAL_I2C_SlaveRxCpltCallback>
}
 80031b2:	e00d      	b.n	80031d0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fc8b 	bl	8002ae6 <HAL_I2C_SlaveTxCpltCallback>
}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	fe00e800 	.word	0xfe00e800
 80031dc:	ffff0000 	.word	0xffff0000

080031e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a25      	ldr	r2, [pc, #148]	@ (8003284 <I2C_ITListenCplt+0xa4>)
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d022      	beq.n	800325c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d012      	beq.n	800325c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800325c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fbeb 	bl	8003a3c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2210      	movs	r2, #16
 800326c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fc57 	bl	8002b2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003298:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a6d      	ldr	r2, [pc, #436]	@ (800345c <I2C_ITError+0x1d4>)
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b28      	cmp	r3, #40	@ 0x28
 80032be:	d005      	beq.n	80032cc <I2C_ITError+0x44>
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b29      	cmp	r3, #41	@ 0x29
 80032c4:	d002      	beq.n	80032cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032ca:	d10b      	bne.n	80032e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032cc:	2103      	movs	r1, #3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fbb4 	bl	8003a3c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2228      	movs	r2, #40	@ 0x28
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a60      	ldr	r2, [pc, #384]	@ (8003460 <I2C_ITError+0x1d8>)
 80032e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80032e2:	e030      	b.n	8003346 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032e4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fba7 	bl	8003a3c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8e1 	bl	80034b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b60      	cmp	r3, #96	@ 0x60
 80032fe:	d01f      	beq.n	8003340 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b20      	cmp	r3, #32
 8003314:	d114      	bne.n	8003340 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b10      	cmp	r3, #16
 8003322:	d109      	bne.n	8003338 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2210      	movs	r2, #16
 800332a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2220      	movs	r2, #32
 800333e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	2b00      	cmp	r3, #0
 8003352:	d039      	beq.n	80033c8 <I2C_ITError+0x140>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b11      	cmp	r3, #17
 8003358:	d002      	beq.n	8003360 <I2C_ITError+0xd8>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b21      	cmp	r3, #33	@ 0x21
 800335e:	d133      	bne.n	80033c8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800336a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800336e:	d107      	bne.n	8003380 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800337e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fdd1 	bl	8001f2c <HAL_DMA_GetState>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d017      	beq.n	80033c0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	4a33      	ldr	r2, [pc, #204]	@ (8003464 <I2C_ITError+0x1dc>)
 8003396:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe fd80 	bl	8001eaa <HAL_DMA_Abort_IT>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d04d      	beq.n	800344c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033ba:	4610      	mov	r0, r2
 80033bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033be:	e045      	b.n	800344c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f851 	bl	8003468 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033c6:	e041      	b.n	800344c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d039      	beq.n	8003444 <I2C_ITError+0x1bc>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b12      	cmp	r3, #18
 80033d4:	d002      	beq.n	80033dc <I2C_ITError+0x154>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b22      	cmp	r3, #34	@ 0x22
 80033da:	d133      	bne.n	8003444 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ea:	d107      	bne.n	80033fc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fd93 	bl	8001f2c <HAL_DMA_GetState>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d017      	beq.n	800343c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	4a14      	ldr	r2, [pc, #80]	@ (8003464 <I2C_ITError+0x1dc>)
 8003412:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fd42 	bl	8001eaa <HAL_DMA_Abort_IT>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d011      	beq.n	8003450 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003436:	4610      	mov	r0, r2
 8003438:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800343a:	e009      	b.n	8003450 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f813 	bl	8003468 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003442:	e005      	b.n	8003450 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f80f 	bl	8003468 <I2C_TreatErrorCallback>
  }
}
 800344a:	e002      	b.n	8003452 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800344c:	bf00      	nop
 800344e:	e000      	b.n	8003452 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003450:	bf00      	nop
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	ffff0000 	.word	0xffff0000
 8003460:	08002b67 	.word	0x08002b67
 8003464:	080034ff 	.word	0x080034ff

08003468 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b60      	cmp	r3, #96	@ 0x60
 800347a:	d10e      	bne.n	800349a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff fb5d 	bl	8002b52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003498:	e009      	b.n	80034ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff fb48 	bl	8002b3e <HAL_I2C_ErrorCallback>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d103      	bne.n	80034d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d007      	beq.n	80034f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699a      	ldr	r2, [r3, #24]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	619a      	str	r2, [r3, #24]
  }
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	2200      	movs	r2, #0
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003528:	2200      	movs	r2, #0
 800352a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff ff9b 	bl	8003468 <I2C_TreatErrorCallback>
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	4613      	mov	r3, r2
 8003548:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354a:	e03b      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	6839      	ldr	r1, [r7, #0]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f961 	bl	8003818 <I2C_IsErrorOccurred>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e041      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d02d      	beq.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003568:	f7fd fe30 	bl	80011cc <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d302      	bcc.n	800357e <I2C_WaitOnFlagUntilTimeout+0x44>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d122      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	79fb      	ldrb	r3, [r7, #7]
 8003598:	429a      	cmp	r2, r3
 800359a:	d113      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e00f      	b.n	80035e4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d0b4      	beq.n	800354c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035f8:	e033      	b.n	8003662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f90a 	bl	8003818 <I2C_IsErrorOccurred>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e031      	b.n	8003672 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d025      	beq.n	8003662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fd fdd9 	bl	80011cc <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11a      	bne.n	8003662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d013      	beq.n	8003662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e007      	b.n	8003672 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	d1c4      	bne.n	80035fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003686:	e02f      	b.n	80036e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f8c3 	bl	8003818 <I2C_IsErrorOccurred>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e02d      	b.n	80036f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fd fd96 	bl	80011cc <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11a      	bne.n	80036e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d013      	beq.n	80036e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e007      	b.n	80036f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d1c8      	bne.n	8003688 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003710:	e071      	b.n	80037f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f87e 	bl	8003818 <I2C_IsErrorOccurred>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b20      	cmp	r3, #32
 8003732:	d13b      	bne.n	80037ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d138      	bne.n	80037ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b04      	cmp	r3, #4
 8003746:	d105      	bne.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d121      	bne.n	80037a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2210      	movs	r2, #16
 8003768:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2204      	movs	r2, #4
 800376e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2220      	movs	r2, #32
 8003776:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b24      	ldr	r3, [pc, #144]	@ (8003814 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003784:	400b      	ands	r3, r1
 8003786:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
 80037a4:	e002      	b.n	80037ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80037ac:	f7fd fd0e 	bl	80011cc <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d119      	bne.n	80037f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d00f      	beq.n	80037f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b04      	cmp	r3, #4
 8003802:	d002      	beq.n	800380a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d083      	beq.n	8003712 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800380a:	7dfb      	ldrb	r3, [r7, #23]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	fe00e800 	.word	0xfe00e800

08003818 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	@ 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d068      	beq.n	8003916 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2210      	movs	r2, #16
 800384a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800384c:	e049      	b.n	80038e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d045      	beq.n	80038e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fd fcb9 	bl	80011cc <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <I2C_IsErrorOccurred+0x54>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d13a      	bne.n	80038e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003876:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800387e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800388a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800388e:	d121      	bne.n	80038d4 <I2C_IsErrorOccurred+0xbc>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003896:	d01d      	beq.n	80038d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b20      	cmp	r3, #32
 800389c:	d01a      	beq.n	80038d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038ae:	f7fd fc8d 	bl	80011cc <HAL_GetTick>
 80038b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b4:	e00e      	b.n	80038d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038b6:	f7fd fc89 	bl	80011cc <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b19      	cmp	r3, #25
 80038c2:	d907      	bls.n	80038d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f043 0320 	orr.w	r3, r3, #32
 80038ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038d2:	e006      	b.n	80038e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d1e9      	bne.n	80038b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d003      	beq.n	80038f8 <I2C_IsErrorOccurred+0xe0>
 80038f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0aa      	beq.n	800384e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	f043 0308 	orr.w	r3, r3, #8
 8003950:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800395a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f043 0302 	orr.w	r3, r3, #2
 8003972:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800397c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01c      	beq.n	80039c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff fd92 	bl	80034b6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <I2C_IsErrorOccurred+0x1bc>)
 800399e:	400b      	ands	r3, r1
 80039a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3728      	adds	r7, #40	@ 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	fe00e800 	.word	0xfe00e800

080039d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	4613      	mov	r3, r2
 80039e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ea:	897b      	ldrh	r3, [r7, #10]
 80039ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039f0:	7a7b      	ldrb	r3, [r7, #9]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	0d5b      	lsrs	r3, r3, #21
 8003a12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a16:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <I2C_TransferConfig+0x60>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	ea02 0103 	and.w	r1, r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	03ff63ff 	.word	0x03ff63ff

08003a3c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00f      	beq.n	8003a76 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003a5c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a6a:	2b28      	cmp	r3, #40	@ 0x28
 8003a6c:	d003      	beq.n	8003a76 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003a74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00f      	beq.n	8003aa0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003a86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a94:	2b28      	cmp	r3, #40	@ 0x28
 8003a96:	d003      	beq.n	8003aa0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003a9e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	da03      	bge.n	8003ab0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ab0:	887b      	ldrh	r3, [r7, #2]
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d103      	bne.n	8003abe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d103      	bne.n	8003acc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f043 0320 	orr.w	r3, r3, #32
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	2b40      	cmp	r3, #64	@ 0x40
 8003ad0:	d103      	bne.n	8003ada <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	400a      	ands	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d138      	bne.n	8003b80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e032      	b.n	8003b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d139      	bne.n	8003c18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e033      	b.n	8003c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2224      	movs	r2, #36	@ 0x24
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0201 	bic.w	r2, r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003be0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c2c:	4b04      	ldr	r3, [pc, #16]	@ (8003c40 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40007000 	.word	0x40007000

08003c44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c52:	d130      	bne.n	8003cb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c54:	4b23      	ldr	r3, [pc, #140]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c60:	d038      	beq.n	8003cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c62:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2232      	movs	r2, #50	@ 0x32
 8003c78:	fb02 f303 	mul.w	r3, r2, r3
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c88:	e002      	b.n	8003c90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9c:	d102      	bne.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f2      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb0:	d110      	bne.n	8003cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e00f      	b.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc2:	d007      	beq.n	8003cd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cc4:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ccc:	4a05      	ldr	r2, [pc, #20]	@ (8003ce4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	431bde83 	.word	0x431bde83

08003cf0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f000 bc02 	b.w	8004508 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d04:	4b96      	ldr	r3, [pc, #600]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d0e:	4b94      	ldr	r3, [pc, #592]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80e4 	beq.w	8003eee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <HAL_RCC_OscConfig+0x4c>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	f040 808b 	bne.w	8003e4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	f040 8087 	bne.w	8003e4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d3c:	4b88      	ldr	r3, [pc, #544]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_OscConfig+0x64>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e3d9      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1a      	ldr	r2, [r3, #32]
 8003d58:	4b81      	ldr	r3, [pc, #516]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <HAL_RCC_OscConfig+0x7e>
 8003d64:	4b7e      	ldr	r3, [pc, #504]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d6c:	e005      	b.n	8003d7a <HAL_RCC_OscConfig+0x8a>
 8003d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d223      	bcs.n	8003dc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fd54 	bl	8004830 <RCC_SetFlashLatencyFromMSIRange>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e3ba      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d92:	4b73      	ldr	r3, [pc, #460]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a72      	ldr	r2, [pc, #456]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003d98:	f043 0308 	orr.w	r3, r3, #8
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b70      	ldr	r3, [pc, #448]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	496d      	ldr	r1, [pc, #436]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	4968      	ldr	r1, [pc, #416]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
 8003dc4:	e025      	b.n	8003e12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc6:	4b66      	ldr	r3, [pc, #408]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a65      	ldr	r2, [pc, #404]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	f043 0308 	orr.w	r3, r3, #8
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b63      	ldr	r3, [pc, #396]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	4960      	ldr	r1, [pc, #384]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de4:	4b5e      	ldr	r3, [pc, #376]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	495b      	ldr	r1, [pc, #364]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fd14 	bl	8004830 <RCC_SetFlashLatencyFromMSIRange>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e37a      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e12:	f000 fc81 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 8003e16:	4602      	mov	r2, r0
 8003e18:	4b51      	ldr	r3, [pc, #324]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	4950      	ldr	r1, [pc, #320]	@ (8003f64 <HAL_RCC_OscConfig+0x274>)
 8003e24:	5ccb      	ldrb	r3, [r1, r3]
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8003f68 <HAL_RCC_OscConfig+0x278>)
 8003e30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e32:	4b4e      	ldr	r3, [pc, #312]	@ (8003f6c <HAL_RCC_OscConfig+0x27c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd f978 	bl	800112c <HAL_InitTick>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d052      	beq.n	8003eec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	e35e      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d032      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e52:	4b43      	ldr	r3, [pc, #268]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a42      	ldr	r2, [pc, #264]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e5e:	f7fd f9b5 	bl	80011cc <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e66:	f7fd f9b1 	bl	80011cc <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e347      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e78:	4b39      	ldr	r3, [pc, #228]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e84:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a35      	ldr	r2, [pc, #212]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	f043 0308 	orr.w	r3, r3, #8
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	4b33      	ldr	r3, [pc, #204]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4930      	ldr	r1, [pc, #192]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	492b      	ldr	r1, [pc, #172]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
 8003eb6:	e01a      	b.n	8003eee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eb8:	4b29      	ldr	r3, [pc, #164]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a28      	ldr	r2, [pc, #160]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd f982 	bl	80011cc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ecc:	f7fd f97e 	bl	80011cc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e314      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ede:	4b20      	ldr	r3, [pc, #128]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1dc>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d073      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_OscConfig+0x21c>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d10e      	bne.n	8003f24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d063      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d15f      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e2f1      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x24c>
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a0b      	ldr	r2, [pc, #44]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e025      	b.n	8003f88 <HAL_RCC_OscConfig+0x298>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f44:	d114      	bne.n	8003f70 <HAL_RCC_OscConfig+0x280>
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a05      	ldr	r2, [pc, #20]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a02      	ldr	r2, [pc, #8]	@ (8003f60 <HAL_RCC_OscConfig+0x270>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e013      	b.n	8003f88 <HAL_RCC_OscConfig+0x298>
 8003f60:	40021000 	.word	0x40021000
 8003f64:	08005114 	.word	0x08005114
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	20000004 	.word	0x20000004
 8003f70:	4ba0      	ldr	r3, [pc, #640]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a9f      	ldr	r2, [pc, #636]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8003f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b9d      	ldr	r3, [pc, #628]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a9c      	ldr	r2, [pc, #624]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fd f91c 	bl	80011cc <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f98:	f7fd f918 	bl	80011cc <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b64      	cmp	r3, #100	@ 0x64
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e2ae      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003faa:	4b92      	ldr	r3, [pc, #584]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x2a8>
 8003fb6:	e014      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd f908 	bl	80011cc <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fd f904 	bl	80011cc <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	@ 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e29a      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fd2:	4b88      	ldr	r3, [pc, #544]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x2d0>
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d060      	beq.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_OscConfig+0x310>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	d119      	bne.n	800402e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d116      	bne.n	800402e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004000:	4b7c      	ldr	r3, [pc, #496]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_OscConfig+0x328>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e277      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004018:	4b76      	ldr	r3, [pc, #472]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	4973      	ldr	r1, [pc, #460]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004028:	4313      	orrs	r3, r2
 800402a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800402c:	e040      	b.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d023      	beq.n	800407e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004036:	4b6f      	ldr	r3, [pc, #444]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6e      	ldr	r2, [pc, #440]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fd f8c3 	bl	80011cc <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404a:	f7fd f8bf 	bl	80011cc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e255      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405c:	4b65      	ldr	r3, [pc, #404]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004068:	4b62      	ldr	r3, [pc, #392]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	495f      	ldr	r1, [pc, #380]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
 800407c:	e018      	b.n	80040b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407e:	4b5d      	ldr	r3, [pc, #372]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a5c      	ldr	r2, [pc, #368]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd f89f 	bl	80011cc <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd f89b 	bl	80011cc <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e231      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a4:	4b53      	ldr	r3, [pc, #332]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d03c      	beq.n	8004136 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01c      	beq.n	80040fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ca:	4a4a      	ldr	r2, [pc, #296]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d4:	f7fd f87a 	bl	80011cc <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fd f876 	bl	80011cc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e20c      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040ee:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80040f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ef      	beq.n	80040dc <HAL_RCC_OscConfig+0x3ec>
 80040fc:	e01b      	b.n	8004136 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040fe:	4b3d      	ldr	r3, [pc, #244]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004104:	4a3b      	ldr	r2, [pc, #236]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410e:	f7fd f85d 	bl	80011cc <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004116:	f7fd f859 	bl	80011cc <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e1ef      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004128:	4b32      	ldr	r3, [pc, #200]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ef      	bne.n	8004116 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80a6 	beq.w	8004290 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004148:	4b2a      	ldr	r3, [pc, #168]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10d      	bne.n	8004170 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004154:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004158:	4a26      	ldr	r2, [pc, #152]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 800415a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004160:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800416c:	2301      	movs	r3, #1
 800416e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004170:	4b21      	ldr	r3, [pc, #132]	@ (80041f8 <HAL_RCC_OscConfig+0x508>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d118      	bne.n	80041ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417c:	4b1e      	ldr	r3, [pc, #120]	@ (80041f8 <HAL_RCC_OscConfig+0x508>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1d      	ldr	r2, [pc, #116]	@ (80041f8 <HAL_RCC_OscConfig+0x508>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004186:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004188:	f7fd f820 	bl	80011cc <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004190:	f7fd f81c 	bl	80011cc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e1b2      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a2:	4b15      	ldr	r3, [pc, #84]	@ (80041f8 <HAL_RCC_OscConfig+0x508>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4d8>
 80041b6:	4b0f      	ldr	r3, [pc, #60]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041bc:	4a0d      	ldr	r2, [pc, #52]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041c6:	e029      	b.n	800421c <HAL_RCC_OscConfig+0x52c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d115      	bne.n	80041fc <HAL_RCC_OscConfig+0x50c>
 80041d0:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d6:	4a07      	ldr	r2, [pc, #28]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041e0:	4b04      	ldr	r3, [pc, #16]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	4a03      	ldr	r2, [pc, #12]	@ (80041f4 <HAL_RCC_OscConfig+0x504>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041f0:	e014      	b.n	800421c <HAL_RCC_OscConfig+0x52c>
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000
 80041f8:	40007000 	.word	0x40007000
 80041fc:	4b9a      	ldr	r3, [pc, #616]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	4a99      	ldr	r2, [pc, #612]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800420c:	4b96      	ldr	r3, [pc, #600]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	4a95      	ldr	r2, [pc, #596]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d016      	beq.n	8004252 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fc ffd2 	bl	80011cc <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800422a:	e00a      	b.n	8004242 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fc ffce 	bl	80011cc <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e162      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004242:	4b89      	ldr	r3, [pc, #548]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ed      	beq.n	800422c <HAL_RCC_OscConfig+0x53c>
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fc ffbb 	bl	80011cc <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fc ffb7 	bl	80011cc <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e14b      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004270:	4b7d      	ldr	r3, [pc, #500]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ed      	bne.n	800425a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800427e:	7ffb      	ldrb	r3, [r7, #31]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	4b78      	ldr	r3, [pc, #480]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004288:	4a77      	ldr	r2, [pc, #476]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 800428a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800428e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d03c      	beq.n	8004316 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01c      	beq.n	80042de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042a4:	4b70      	ldr	r3, [pc, #448]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80042a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b4:	f7fc ff8a 	bl	80011cc <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042bc:	f7fc ff86 	bl	80011cc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e11c      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ce:	4b66      	ldr	r3, [pc, #408]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80042d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ef      	beq.n	80042bc <HAL_RCC_OscConfig+0x5cc>
 80042dc:	e01b      	b.n	8004316 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042de:	4b62      	ldr	r3, [pc, #392]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80042e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042e4:	4a60      	ldr	r2, [pc, #384]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fc ff6d 	bl	80011cc <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f6:	f7fc ff69 	bl	80011cc <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e0ff      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004308:	4b57      	ldr	r3, [pc, #348]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 800430a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1ef      	bne.n	80042f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80f3 	beq.w	8004506 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	2b02      	cmp	r3, #2
 8004326:	f040 80c9 	bne.w	80044bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800432a:	4b4f      	ldr	r3, [pc, #316]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0203 	and.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	429a      	cmp	r2, r3
 800433c:	d12c      	bne.n	8004398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	3b01      	subs	r3, #1
 800434a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d123      	bne.n	8004398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d11b      	bne.n	8004398 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d113      	bne.n	8004398 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	3b01      	subs	r3, #1
 800437e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d109      	bne.n	8004398 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	085b      	lsrs	r3, r3, #1
 8004390:	3b01      	subs	r3, #1
 8004392:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d06b      	beq.n	8004470 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d062      	beq.n	8004464 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800439e:	4b32      	ldr	r3, [pc, #200]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e0ac      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a2d      	ldr	r2, [pc, #180]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80043b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ba:	f7fc ff07 	bl	80011cc <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fc ff03 	bl	80011cc <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e099      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d4:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f0      	bne.n	80043c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e0:	4b21      	ldr	r3, [pc, #132]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	4b21      	ldr	r3, [pc, #132]	@ (800446c <HAL_RCC_OscConfig+0x77c>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043f0:	3a01      	subs	r2, #1
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	4311      	orrs	r1, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043fa:	0212      	lsls	r2, r2, #8
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004402:	0852      	lsrs	r2, r2, #1
 8004404:	3a01      	subs	r2, #1
 8004406:	0552      	lsls	r2, r2, #21
 8004408:	4311      	orrs	r1, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800440e:	0852      	lsrs	r2, r2, #1
 8004410:	3a01      	subs	r2, #1
 8004412:	0652      	lsls	r2, r2, #25
 8004414:	4311      	orrs	r1, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800441a:	06d2      	lsls	r2, r2, #27
 800441c:	430a      	orrs	r2, r1
 800441e:	4912      	ldr	r1, [pc, #72]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004420:	4313      	orrs	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004424:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a0f      	ldr	r2, [pc, #60]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004430:	4b0d      	ldr	r3, [pc, #52]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a0c      	ldr	r2, [pc, #48]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800443a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800443c:	f7fc fec6 	bl	80011cc <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fc fec2 	bl	80011cc <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e058      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004456:	4b04      	ldr	r3, [pc, #16]	@ (8004468 <HAL_RCC_OscConfig+0x778>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004462:	e050      	b.n	8004506 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e04f      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
 8004468:	40021000 	.word	0x40021000
 800446c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004470:	4b27      	ldr	r3, [pc, #156]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d144      	bne.n	8004506 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800447c:	4b24      	ldr	r3, [pc, #144]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a23      	ldr	r2, [pc, #140]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 8004482:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004486:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004488:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a20      	ldr	r2, [pc, #128]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 800448e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004492:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004494:	f7fc fe9a 	bl	80011cc <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fc fe96 	bl	80011cc <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e02c      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ae:	4b18      	ldr	r3, [pc, #96]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x7ac>
 80044ba:	e024      	b.n	8004506 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d01f      	beq.n	8004502 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a12      	ldr	r2, [pc, #72]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 80044c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fc fe7d 	bl	80011cc <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d6:	f7fc fe79 	bl	80011cc <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e00f      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e8:	4b09      	ldr	r3, [pc, #36]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f0      	bne.n	80044d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044f4:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	4905      	ldr	r1, [pc, #20]	@ (8004510 <HAL_RCC_OscConfig+0x820>)
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_OscConfig+0x824>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
 8004500:	e001      	b.n	8004506 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3720      	adds	r7, #32
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40021000 	.word	0x40021000
 8004514:	feeefffc 	.word	0xfeeefffc

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0e7      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800452c:	4b75      	ldr	r3, [pc, #468]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d910      	bls.n	800455c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b72      	ldr	r3, [pc, #456]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 0207 	bic.w	r2, r3, #7
 8004542:	4970      	ldr	r1, [pc, #448]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b6e      	ldr	r3, [pc, #440]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0cf      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	4b66      	ldr	r3, [pc, #408]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004574:	429a      	cmp	r2, r3
 8004576:	d908      	bls.n	800458a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b63      	ldr	r3, [pc, #396]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4960      	ldr	r1, [pc, #384]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d04c      	beq.n	8004630 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d107      	bne.n	80045ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800459e:	4b5a      	ldr	r3, [pc, #360]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d121      	bne.n	80045ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0a6      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	4b54      	ldr	r3, [pc, #336]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d115      	bne.n	80045ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e09a      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e08e      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045de:	4b4a      	ldr	r3, [pc, #296]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e086      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ee:	4b46      	ldr	r3, [pc, #280]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 0203 	bic.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4943      	ldr	r1, [pc, #268]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fc fde4 	bl	80011cc <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	e00a      	b.n	800461e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fc fde0 	bl	80011cc <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e06e      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	4b3a      	ldr	r3, [pc, #232]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 020c 	and.w	r2, r3, #12
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	429a      	cmp	r2, r3
 800462e:	d1eb      	bne.n	8004608 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d010      	beq.n	800465e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4b31      	ldr	r3, [pc, #196]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004648:	429a      	cmp	r2, r3
 800464a:	d208      	bcs.n	800465e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b2e      	ldr	r3, [pc, #184]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	492b      	ldr	r1, [pc, #172]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800465e:	4b29      	ldr	r3, [pc, #164]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d210      	bcs.n	800468e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466c:	4b25      	ldr	r3, [pc, #148]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f023 0207 	bic.w	r2, r3, #7
 8004674:	4923      	ldr	r1, [pc, #140]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467c:	4b21      	ldr	r3, [pc, #132]	@ (8004704 <HAL_RCC_ClockConfig+0x1ec>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d001      	beq.n	800468e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e036      	b.n	80046fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469a:	4b1b      	ldr	r3, [pc, #108]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	4918      	ldr	r1, [pc, #96]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d009      	beq.n	80046cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b8:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4910      	ldr	r1, [pc, #64]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046cc:	f000 f824 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004708 <HAL_RCC_ClockConfig+0x1f0>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	091b      	lsrs	r3, r3, #4
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	490b      	ldr	r1, [pc, #44]	@ (800470c <HAL_RCC_ClockConfig+0x1f4>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
 80046e8:	4a09      	ldr	r2, [pc, #36]	@ (8004710 <HAL_RCC_ClockConfig+0x1f8>)
 80046ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046ec:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <HAL_RCC_ClockConfig+0x1fc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc fd1b 	bl	800112c <HAL_InitTick>
 80046f6:	4603      	mov	r3, r0
 80046f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80046fa:	7afb      	ldrb	r3, [r7, #11]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40022000 	.word	0x40022000
 8004708:	40021000 	.word	0x40021000
 800470c:	08005114 	.word	0x08005114
 8004710:	20000000 	.word	0x20000000
 8004714:	20000004 	.word	0x20000004

08004718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	@ 0x24
 800471c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004726:	4b3e      	ldr	r3, [pc, #248]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004730:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0303 	and.w	r3, r3, #3
 8004738:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x34>
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d121      	bne.n	800478a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d11e      	bne.n	800478a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800474c:	4b34      	ldr	r3, [pc, #208]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d107      	bne.n	8004768 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004758:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 800475a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475e:	0a1b      	lsrs	r3, r3, #8
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e005      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004768:	4b2d      	ldr	r3, [pc, #180]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004774:	4a2b      	ldr	r2, [pc, #172]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10d      	bne.n	80047a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b04      	cmp	r3, #4
 800478e:	d102      	bne.n	8004796 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004790:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x110>)
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	e004      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800479c:	4b23      	ldr	r3, [pc, #140]	@ (800482c <HAL_RCC_GetSysClockFreq+0x114>)
 800479e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d134      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d003      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0xa6>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d003      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0xac>
 80047bc:	e005      	b.n	80047ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x110>)
 80047c0:	617b      	str	r3, [r7, #20]
      break;
 80047c2:	e005      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_RCC_GetSysClockFreq+0x114>)
 80047c6:	617b      	str	r3, [r7, #20]
      break;
 80047c8:	e002      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	617b      	str	r3, [r7, #20]
      break;
 80047ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047d0:	4b13      	ldr	r3, [pc, #76]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	3301      	adds	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047de:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	0a1b      	lsrs	r3, r3, #8
 80047e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	fb03 f202 	mul.w	r2, r3, r2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	0e5b      	lsrs	r3, r3, #25
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	3301      	adds	r3, #1
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	fbb2 f3f3 	udiv	r3, r2, r3
 800480e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004810:	69bb      	ldr	r3, [r7, #24]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3724      	adds	r7, #36	@ 0x24
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	08005124 	.word	0x08005124
 8004828:	00f42400 	.word	0x00f42400
 800482c:	007a1200 	.word	0x007a1200

08004830 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800483c:	4b2a      	ldr	r3, [pc, #168]	@ (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004848:	f7ff f9ee 	bl	8003c28 <HAL_PWREx_GetVoltageRange>
 800484c:	6178      	str	r0, [r7, #20]
 800484e:	e014      	b.n	800487a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	4b25      	ldr	r3, [pc, #148]	@ (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	4a24      	ldr	r2, [pc, #144]	@ (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485a:	6593      	str	r3, [r2, #88]	@ 0x58
 800485c:	4b22      	ldr	r3, [pc, #136]	@ (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004868:	f7ff f9de 	bl	8003c28 <HAL_PWREx_GetVoltageRange>
 800486c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800486e:	4b1e      	ldr	r3, [pc, #120]	@ (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004878:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004880:	d10b      	bne.n	800489a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b80      	cmp	r3, #128	@ 0x80
 8004886:	d919      	bls.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2ba0      	cmp	r3, #160	@ 0xa0
 800488c:	d902      	bls.n	8004894 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800488e:	2302      	movs	r3, #2
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	e013      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004894:	2301      	movs	r3, #1
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e010      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b80      	cmp	r3, #128	@ 0x80
 800489e:	d902      	bls.n	80048a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048a0:	2303      	movs	r3, #3
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	e00a      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b80      	cmp	r3, #128	@ 0x80
 80048aa:	d102      	bne.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ac:	2302      	movs	r3, #2
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	e004      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b70      	cmp	r3, #112	@ 0x70
 80048b6:	d101      	bne.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048b8:	2301      	movs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048bc:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 0207 	bic.w	r2, r3, #7
 80048c4:	4909      	ldr	r1, [pc, #36]	@ (80048ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048cc:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40022000 	.word	0x40022000

080048f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048f8:	2300      	movs	r3, #0
 80048fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048fc:	2300      	movs	r3, #0
 80048fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d031      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004910:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004914:	d01a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004916:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800491a:	d814      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004924:	d10f      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004926:	4b5d      	ldr	r3, [pc, #372]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	4a5c      	ldr	r2, [pc, #368]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004930:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004932:	e00c      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fa22 	bl	8004d84 <RCCEx_PLLSAI1_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	74fb      	strb	r3, [r7, #19]
      break;
 800494a:	e000      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800494c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494e:	7cfb      	ldrb	r3, [r7, #19]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004954:	4b51      	ldr	r3, [pc, #324]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800495a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	494e      	ldr	r1, [pc, #312]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800496a:	e001      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 809e 	beq.w	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004982:	4b46      	ldr	r3, [pc, #280]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004998:	4b40      	ldr	r3, [pc, #256]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a4:	4b3d      	ldr	r3, [pc, #244]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b0:	2301      	movs	r3, #1
 80049b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b4:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a39      	ldr	r2, [pc, #228]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049c0:	f7fc fc04 	bl	80011cc <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049c6:	e009      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c8:	f7fc fc00 	bl	80011cc <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d902      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	74fb      	strb	r3, [r7, #19]
        break;
 80049da:	e005      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049dc:	4b30      	ldr	r3, [pc, #192]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0ef      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d15a      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ee:	4b2b      	ldr	r3, [pc, #172]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01e      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d019      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a0a:	4b24      	ldr	r3, [pc, #144]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a16:	4b21      	ldr	r3, [pc, #132]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a26:	4b1d      	ldr	r3, [pc, #116]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a36:	4a19      	ldr	r2, [pc, #100]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d016      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fc fbc0 	bl	80011cc <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	e00b      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fc fbbc 	bl	80011cc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d902      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	74fb      	strb	r3, [r7, #19]
            break;
 8004a66:	e006      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a68:	4b0c      	ldr	r3, [pc, #48]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ec      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a76:	7cfb      	ldrb	r3, [r7, #19]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8a:	4904      	ldr	r1, [pc, #16]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a92:	e009      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	74bb      	strb	r3, [r7, #18]
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa8:	7c7b      	ldrb	r3, [r7, #17]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	4b8d      	ldr	r3, [pc, #564]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	4a8c      	ldr	r2, [pc, #560]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ab8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac6:	4b87      	ldr	r3, [pc, #540]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004acc:	f023 0203 	bic.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4983      	ldr	r1, [pc, #524]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ae8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	f023 020c 	bic.w	r2, r3, #12
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	497b      	ldr	r1, [pc, #492]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b0a:	4b76      	ldr	r3, [pc, #472]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	4972      	ldr	r1, [pc, #456]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b2c:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	496a      	ldr	r1, [pc, #424]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b4e:	4b65      	ldr	r3, [pc, #404]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	4961      	ldr	r1, [pc, #388]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b70:	4b5c      	ldr	r3, [pc, #368]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	4959      	ldr	r1, [pc, #356]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b92:	4b54      	ldr	r3, [pc, #336]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	4950      	ldr	r1, [pc, #320]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc2:	4948      	ldr	r1, [pc, #288]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bd6:	4b43      	ldr	r3, [pc, #268]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	493f      	ldr	r1, [pc, #252]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d028      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c06:	4937      	ldr	r1, [pc, #220]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c16:	d106      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c18:	4b32      	ldr	r3, [pc, #200]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e011      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	2101      	movs	r1, #1
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f8a4 	bl	8004d84 <RCCEx_PLLSAI1_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c56:	4b23      	ldr	r3, [pc, #140]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c64:	491f      	ldr	r1, [pc, #124]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c76:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c80:	60d3      	str	r3, [r2, #12]
 8004c82:	e011      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c8c:	d10c      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2101      	movs	r1, #1
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f875 	bl	8004d84 <RCCEx_PLLSAI1_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d02b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc2:	4908      	ldr	r1, [pc, #32]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cd2:	d109      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cd4:	4b03      	ldr	r3, [pc, #12]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4a02      	ldr	r2, [pc, #8]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cde:	60d3      	str	r3, [r2, #12]
 8004ce0:	e014      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f843 	bl	8004d84 <RCCEx_PLLSAI1_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01c      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d18:	4b19      	ldr	r3, [pc, #100]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d26:	4916      	ldr	r1, [pc, #88]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f820 	bl	8004d84 <RCCEx_PLLSAI1_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d48:	7cfb      	ldrb	r3, [r7, #19]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d5e:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d64:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	4904      	ldr	r1, [pc, #16]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000

08004d84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d92:	4b74      	ldr	r3, [pc, #464]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d9e:	4b71      	ldr	r3, [pc, #452]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0203 	and.w	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d10d      	bne.n	8004dca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
       ||
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004db6:	4b6b      	ldr	r3, [pc, #428]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d047      	beq.n	8004e5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
 8004dce:	e044      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d018      	beq.n	8004e0a <RCCEx_PLLSAI1_Config+0x86>
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d825      	bhi.n	8004e28 <RCCEx_PLLSAI1_Config+0xa4>
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <RCCEx_PLLSAI1_Config+0x62>
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d009      	beq.n	8004df8 <RCCEx_PLLSAI1_Config+0x74>
 8004de4:	e020      	b.n	8004e28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004de6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11d      	bne.n	8004e2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df6:	e01a      	b.n	8004e2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004df8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d116      	bne.n	8004e32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e08:	e013      	b.n	8004e32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e0a:	4b56      	ldr	r3, [pc, #344]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e16:	4b53      	ldr	r3, [pc, #332]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e26:	e006      	b.n	8004e36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e2c:	e004      	b.n	8004e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e3e:	4b49      	ldr	r3, [pc, #292]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6819      	ldr	r1, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	430b      	orrs	r3, r1
 8004e54:	4943      	ldr	r1, [pc, #268]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d17c      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e60:	4b40      	ldr	r3, [pc, #256]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3f      	ldr	r2, [pc, #252]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e6c:	f7fc f9ae 	bl	80011cc <HAL_GetTick>
 8004e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e72:	e009      	b.n	8004e88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e74:	f7fc f9aa 	bl	80011cc <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d902      	bls.n	8004e88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	73fb      	strb	r3, [r7, #15]
        break;
 8004e86:	e005      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e88:	4b36      	ldr	r3, [pc, #216]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ef      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d15f      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d110      	bne.n	8004ec2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ea0:	4b30      	ldr	r3, [pc, #192]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ea8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6892      	ldr	r2, [r2, #8]
 8004eb0:	0211      	lsls	r1, r2, #8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68d2      	ldr	r2, [r2, #12]
 8004eb6:	06d2      	lsls	r2, r2, #27
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	492a      	ldr	r1, [pc, #168]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	610b      	str	r3, [r1, #16]
 8004ec0:	e027      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d112      	bne.n	8004eee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ec8:	4b26      	ldr	r3, [pc, #152]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ed0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6892      	ldr	r2, [r2, #8]
 8004ed8:	0211      	lsls	r1, r2, #8
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6912      	ldr	r2, [r2, #16]
 8004ede:	0852      	lsrs	r2, r2, #1
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	0552      	lsls	r2, r2, #21
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	491f      	ldr	r1, [pc, #124]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	610b      	str	r3, [r1, #16]
 8004eec:	e011      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eee:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ef6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	0211      	lsls	r1, r2, #8
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6952      	ldr	r2, [r2, #20]
 8004f04:	0852      	lsrs	r2, r2, #1
 8004f06:	3a01      	subs	r2, #1
 8004f08:	0652      	lsls	r2, r2, #25
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	4915      	ldr	r1, [pc, #84]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f12:	4b14      	ldr	r3, [pc, #80]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a13      	ldr	r2, [pc, #76]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fc f955 	bl	80011cc <HAL_GetTick>
 8004f22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f24:	e009      	b.n	8004f3a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f26:	f7fc f951 	bl	80011cc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d902      	bls.n	8004f3a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	73fb      	strb	r3, [r7, #15]
          break;
 8004f38:	e005      	b.n	8004f46 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0ef      	beq.n	8004f26 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	4903      	ldr	r1, [pc, #12]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000

08004f68 <VESC_convertStatus4ToRaw>:

	return true;
}

bool VESC_convertStatus4ToRaw(VESC_RawFrame* out, const VESC_Status_4* in)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
	out->vescID = in->vescID;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	701a      	strb	r2, [r3, #0]
	out->command = VESC_COMMAND_STATUS_4;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	705a      	strb	r2, [r3, #1]
	out->_reserved = VESC_CAN_EXTID_FLAG;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	709a      	strb	r2, [r3, #2]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f8c:	70da      	strb	r2, [r3, #3]
	out->can_dlc = VESC_CAN_STATUS_4_DLEN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2208      	movs	r2, #8
 8004f92:	711a      	strb	r2, [r3, #4]

	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPFET], in->tempFet, VESC_SCALE_STATUS_4_TEMPFET);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f9a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fa6:	ee17 3a90 	vmov	r3, s15
 8004faa:	b219      	sxth	r1, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	3308      	adds	r3, #8
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	18d4      	adds	r4, r2, r3
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	f000 f849 	bl	800504c <_VESC_b16_swap>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_TEMPMOTOR], in->tempMotor, VESC_SCALE_STATUS_4_TEMPMOTOR);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fc4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd0:	ee17 3a90 	vmov	r3, s15
 8004fd4:	b219      	sxth	r1, r3
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	3308      	adds	r3, #8
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	18d4      	adds	r4, r2, r3
 8004fde:	4608      	mov	r0, r1
 8004fe0:	f000 f834 	bl	800504c <_VESC_b16_swap>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_CURRENTIN], in->currentIn, VESC_SCALE_STATUS_4_CURRENTIN);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fee:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ffa:	ee17 3a90 	vmov	r3, s15
 8004ffe:	b219      	sxth	r1, r3
 8005000:	2304      	movs	r3, #4
 8005002:	3308      	adds	r3, #8
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	18d4      	adds	r4, r2, r3
 8005008:	4608      	mov	r0, r1
 800500a:	f000 f81f 	bl	800504c <_VESC_b16_swap>
 800500e:	4603      	mov	r3, r0
 8005010:	8023      	strh	r3, [r4, #0]
	_VESC_WriteRawData16(out, _VESC_offset_Status_4[_VESC_OFFSETIDX_STATUS_4_PIDPOS], in->pidPos, VESC_SCALE_STATUS_4_PIDPOS);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	edd3 7a04 	vldr	s15, [r3, #16]
 8005018:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005048 <VESC_convertStatus4ToRaw+0xe0>
 800501c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005024:	ee17 3a90 	vmov	r3, s15
 8005028:	b219      	sxth	r1, r3
 800502a:	2306      	movs	r3, #6
 800502c:	3308      	adds	r3, #8
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	18d4      	adds	r4, r2, r3
 8005032:	4608      	mov	r0, r1
 8005034:	f000 f80a 	bl	800504c <_VESC_b16_swap>
 8005038:	4603      	mov	r3, r0
 800503a:	8023      	strh	r3, [r4, #0]

	return true;
 800503c:	2301      	movs	r3, #1
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bd90      	pop	{r4, r7, pc}
 8005046:	bf00      	nop
 8005048:	42480000 	.word	0x42480000

0800504c <_VESC_b16_swap>:
#include <libVescCan/VESC_Endian.h>

int16_t _VESC_b16_swap(int16_t val)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	80fb      	strh	r3, [r7, #6]
	int16_t ret = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0x00FF) << 8;
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	b21a      	sxth	r2, r3
 8005060:	89fb      	ldrh	r3, [r7, #14]
 8005062:	4313      	orrs	r3, r2
 8005064:	81fb      	strh	r3, [r7, #14]
	ret |= (val & 0xFF00) >> 8;
 8005066:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800506a:	121b      	asrs	r3, r3, #8
 800506c:	b21b      	sxth	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	b21a      	sxth	r2, r3
 8005072:	89fb      	ldrh	r3, [r7, #14]
 8005074:	4313      	orrs	r3, r2
 8005076:	81fb      	strh	r3, [r7, #14]
	return ret;
 8005078:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <memset>:
 8005088:	4402      	add	r2, r0
 800508a:	4603      	mov	r3, r0
 800508c:	4293      	cmp	r3, r2
 800508e:	d100      	bne.n	8005092 <memset+0xa>
 8005090:	4770      	bx	lr
 8005092:	f803 1b01 	strb.w	r1, [r3], #1
 8005096:	e7f9      	b.n	800508c <memset+0x4>

08005098 <__libc_init_array>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4d0d      	ldr	r5, [pc, #52]	@ (80050d0 <__libc_init_array+0x38>)
 800509c:	4c0d      	ldr	r4, [pc, #52]	@ (80050d4 <__libc_init_array+0x3c>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	2600      	movs	r6, #0
 80050a4:	42a6      	cmp	r6, r4
 80050a6:	d109      	bne.n	80050bc <__libc_init_array+0x24>
 80050a8:	4d0b      	ldr	r5, [pc, #44]	@ (80050d8 <__libc_init_array+0x40>)
 80050aa:	4c0c      	ldr	r4, [pc, #48]	@ (80050dc <__libc_init_array+0x44>)
 80050ac:	f000 f826 	bl	80050fc <_init>
 80050b0:	1b64      	subs	r4, r4, r5
 80050b2:	10a4      	asrs	r4, r4, #2
 80050b4:	2600      	movs	r6, #0
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	d105      	bne.n	80050c6 <__libc_init_array+0x2e>
 80050ba:	bd70      	pop	{r4, r5, r6, pc}
 80050bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c0:	4798      	blx	r3
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7ee      	b.n	80050a4 <__libc_init_array+0xc>
 80050c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ca:	4798      	blx	r3
 80050cc:	3601      	adds	r6, #1
 80050ce:	e7f2      	b.n	80050b6 <__libc_init_array+0x1e>
 80050d0:	08005154 	.word	0x08005154
 80050d4:	08005154 	.word	0x08005154
 80050d8:	08005154 	.word	0x08005154
 80050dc:	08005158 	.word	0x08005158

080050e0 <memcpy>:
 80050e0:	440a      	add	r2, r1
 80050e2:	4291      	cmp	r1, r2
 80050e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050e8:	d100      	bne.n	80050ec <memcpy+0xc>
 80050ea:	4770      	bx	lr
 80050ec:	b510      	push	{r4, lr}
 80050ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050f6:	4291      	cmp	r1, r2
 80050f8:	d1f9      	bne.n	80050ee <memcpy+0xe>
 80050fa:	bd10      	pop	{r4, pc}

080050fc <_init>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	bf00      	nop
 8005100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005102:	bc08      	pop	{r3}
 8005104:	469e      	mov	lr, r3
 8005106:	4770      	bx	lr

08005108 <_fini>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	bf00      	nop
 800510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510e:	bc08      	pop	{r3}
 8005110:	469e      	mov	lr, r3
 8005112:	4770      	bx	lr
