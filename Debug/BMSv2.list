
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f18  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080050a4  080050a4  000060a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e4  080050e4  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  080050e4  080050e4  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e4  080050e4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e4  080050e4  000060e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050e8  080050e8  000060e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080050ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  080050fc  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080050fc  0000716c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed05  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ade  00000000  00000000  00015d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00018828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000958  00000000  00000000  000194b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233e4  00000000  00000000  00019e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d05  00000000  00000000  0003d1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca75a  00000000  00000000  0004eef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011964b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  00119690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011c89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800508c 	.word	0x0800508c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	0800508c 	.word	0x0800508c

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b590      	push	{r4, r7, lr}
 80001ce:	b0bb      	sub	sp, #236	@ 0xec
 80001d0:	af36      	add	r7, sp, #216	@ 0xd8
 80001d2:	6078      	str	r0, [r7, #4]
    BMS_1.bq_i2c = i2c;
 80001d4:	4a58      	ldr	r2, [pc, #352]	@ (8000338 <BQ_Init+0x16c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]
    if(i2c == &hi2c1){
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a57      	ldr	r2, [pc, #348]	@ (800033c <BQ_Init+0x170>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d10b      	bne.n	80001fa <BQ_Init+0x2e>
    	__HAL_RCC_I2C1_CLK_ENABLE();
 80001e2:	4b57      	ldr	r3, [pc, #348]	@ (8000340 <BQ_Init+0x174>)
 80001e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001e6:	4a56      	ldr	r2, [pc, #344]	@ (8000340 <BQ_Init+0x174>)
 80001e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80001ee:	4b54      	ldr	r3, [pc, #336]	@ (8000340 <BQ_Init+0x174>)
 80001f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]

//    ("[BQ] Started", 12);
//    if (USE_SCANNER == 1)
//    {
#ifdef USE_SCANNER
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001fa:	4b52      	ldr	r3, [pc, #328]	@ (8000344 <BQ_Init+0x178>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	b299      	uxth	r1, r3
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	2203      	movs	r2, #3
 8000206:	6878      	ldr	r0, [r7, #4]
 8000208:	f002 fb64 	bl	80028d4 <HAL_I2C_IsDeviceReady>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
	while (ret != HAL_OK)
 8000210:	e012      	b.n	8000238 <BQ_Init+0x6c>
	{
//            ("[BQ] device not founded", 23);
		ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 8000212:	4b4c      	ldr	r3, [pc, #304]	@ (8000344 <BQ_Init+0x178>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	005b      	lsls	r3, r3, #1
 8000218:	b299      	uxth	r1, r3
 800021a:	2364      	movs	r3, #100	@ 0x64
 800021c:	2203      	movs	r2, #3
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f002 fb58 	bl	80028d4 <HAL_I2C_IsDeviceReady>
 8000224:	4603      	mov	r3, r0
 8000226:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1000);
 8000228:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022c:	f001 fd60 	bl	8001cf0 <HAL_Delay>
	#ifdef debug
		if(ret == HAL_ERROR){
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d100      	bne.n	8000238 <BQ_Init+0x6c>
			__asm("nop");
 8000236:	bf00      	nop
	while (ret != HAL_OK)
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1e9      	bne.n	8000212 <BQ_Init+0x46>
#endif
//    }

    

    HAL_Delay(1500);
 800023e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000242:	f001 fd55 	bl	8001cf0 <HAL_Delay>
    BQAction_UpdateData(&BMS_1);
 8000246:	483c      	ldr	r0, [pc, #240]	@ (8000338 <BQ_Init+0x16c>)
 8000248:	f000 fcae 	bl	8000ba8 <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(BMS_1);
 800024c:	4c3a      	ldr	r4, [pc, #232]	@ (8000338 <BQ_Init+0x16c>)
 800024e:	4668      	mov	r0, sp
 8000250:	f104 0310 	add.w	r3, r4, #16
 8000254:	22d4      	movs	r2, #212	@ 0xd4
 8000256:	4619      	mov	r1, r3
 8000258:	f004 ff0a 	bl	8005070 <memcpy>
 800025c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000260:	f000 fc40 	bl	8000ae4 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(BMS_1, false);
 8000264:	4c34      	ldr	r4, [pc, #208]	@ (8000338 <BQ_Init+0x16c>)
 8000266:	2300      	movs	r3, #0
 8000268:	9335      	str	r3, [sp, #212]	@ 0xd4
 800026a:	4668      	mov	r0, sp
 800026c:	f104 0310 	add.w	r3, r4, #16
 8000270:	22d4      	movs	r2, #212	@ 0xd4
 8000272:	4619      	mov	r1, r3
 8000274:	f004 fefc 	bl	8005070 <memcpy>
 8000278:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800027c:	f000 f9ce 	bl	800061c <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(BMS_1, false);
 8000280:	4c2d      	ldr	r4, [pc, #180]	@ (8000338 <BQ_Init+0x16c>)
 8000282:	2300      	movs	r3, #0
 8000284:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000286:	4668      	mov	r0, sp
 8000288:	f104 0310 	add.w	r3, r4, #16
 800028c:	22d4      	movs	r2, #212	@ 0xd4
 800028e:	4619      	mov	r1, r3
 8000290:	f004 feee 	bl	8005070 <memcpy>
 8000294:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000298:	f000 f9ee 	bl	8000678 <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(BMS_1, false);
 800029c:	4c26      	ldr	r4, [pc, #152]	@ (8000338 <BQ_Init+0x16c>)
 800029e:	2300      	movs	r3, #0
 80002a0:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002a2:	4668      	mov	r0, sp
 80002a4:	f104 0310 	add.w	r3, r4, #16
 80002a8:	22d4      	movs	r2, #212	@ 0xd4
 80002aa:	4619      	mov	r1, r3
 80002ac:	f004 fee0 	bl	8005070 <memcpy>
 80002b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002b4:	f000 fa0e 	bl	80006d4 <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(BMS_1, true);
 80002b8:	4c1f      	ldr	r4, [pc, #124]	@ (8000338 <BQ_Init+0x16c>)
 80002ba:	2301      	movs	r3, #1
 80002bc:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002be:	4668      	mov	r0, sp
 80002c0:	f104 0310 	add.w	r3, r4, #16
 80002c4:	22d4      	movs	r2, #212	@ 0xd4
 80002c6:	4619      	mov	r1, r3
 80002c8:	f004 fed2 	bl	8005070 <memcpy>
 80002cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002d0:	f000 fa2e 	bl	8000730 <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(BMS_1, true);
 80002d4:	4c18      	ldr	r4, [pc, #96]	@ (8000338 <BQ_Init+0x16c>)
 80002d6:	2301      	movs	r3, #1
 80002d8:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002da:	4668      	mov	r0, sp
 80002dc:	f104 0310 	add.w	r3, r4, #16
 80002e0:	22d4      	movs	r2, #212	@ 0xd4
 80002e2:	4619      	mov	r1, r3
 80002e4:	f004 fec4 	bl	8005070 <memcpy>
 80002e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80002ec:	f000 fa4e 	bl	800078c <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(BMS_1, true);
 80002f0:	4c11      	ldr	r4, [pc, #68]	@ (8000338 <BQ_Init+0x16c>)
 80002f2:	2301      	movs	r3, #1
 80002f4:	9335      	str	r3, [sp, #212]	@ 0xd4
 80002f6:	4668      	mov	r0, sp
 80002f8:	f104 0310 	add.w	r3, r4, #16
 80002fc:	22d4      	movs	r2, #212	@ 0xd4
 80002fe:	4619      	mov	r1, r3
 8000300:	f004 feb6 	bl	8005070 <memcpy>
 8000304:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000308:	f000 fa6e 	bl	80007e8 <BQAction_SetManufacturingLF>
    BQAction_SetLed(BMS_1, false);
 800030c:	4c0a      	ldr	r4, [pc, #40]	@ (8000338 <BQ_Init+0x16c>)
 800030e:	2300      	movs	r3, #0
 8000310:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000312:	4668      	mov	r0, sp
 8000314:	f104 0310 	add.w	r3, r4, #16
 8000318:	22d4      	movs	r2, #212	@ 0xd4
 800031a:	4619      	mov	r1, r3
 800031c:	f004 fea8 	bl	8005070 <memcpy>
 8000320:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000324:	f000 f94c 	bl	80005c0 <BQAction_SetLed>

    BQAction_UpdateData(&BMS_1);
 8000328:	4803      	ldr	r0, [pc, #12]	@ (8000338 <BQ_Init+0x16c>)
 800032a:	f000 fc3d 	bl	8000ba8 <BQAction_UpdateData>
    //BQ_ForceUpdateFlash();

    //BQ_BoundaryCellVoltage voltages = BQ_GetBoundaryCellVoltage();

//    ("[BQ] initialized", 16);
}
 800032e:	bf00      	nop
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	bf00      	nop
 8000338:	2000002c 	.word	0x2000002c
 800033c:	20000110 	.word	0x20000110
 8000340:	40021000 	.word	0x40021000
 8000344:	20000000 	.word	0x20000000

08000348 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data BMS, uint16_t command)
{
 8000348:	b084      	sub	sp, #16
 800034a:	b580      	push	{r7, lr}
 800034c:	b084      	sub	sp, #16
 800034e:	af02      	add	r7, sp, #8
 8000350:	f107 0c10 	add.w	ip, r7, #16
 8000354:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 8000358:	2344      	movs	r3, #68	@ 0x44
 800035a:	713b      	strb	r3, [r7, #4]
 800035c:	2302      	movs	r3, #2
 800035e:	717b      	strb	r3, [r7, #5]
 8000360:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000364:	b2db      	uxtb	r3, r3
 8000366:	71bb      	strb	r3, [r7, #6]
 8000368:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 800036c:	0a1b      	lsrs	r3, r3, #8
 800036e:	b29b      	uxth	r3, r3
 8000370:	b2db      	uxtb	r3, r3
 8000372:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000374:	6938      	ldr	r0, [r7, #16]
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <BQ_WriteMABlockCommand+0x50>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	b299      	uxth	r1, r3
 800037e:	1d3a      	adds	r2, r7, #4
 8000380:	2364      	movs	r3, #100	@ 0x64
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2304      	movs	r3, #4
 8000386:	f002 f897 	bl	80024b8 <HAL_I2C_Master_Transmit>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000394:	b004      	add	sp, #16
 8000396:	4770      	bx	lr
 8000398:	20000000 	.word	0x20000000

0800039c <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 800039c:	b084      	sub	sp, #16
 800039e:	b580      	push	{r7, lr}
 80003a0:	b08e      	sub	sp, #56	@ 0x38
 80003a2:	af02      	add	r7, sp, #8
 80003a4:	f107 0c38 	add.w	ip, r7, #56	@ 0x38
 80003a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80003ac:	2344      	movs	r3, #68	@ 0x44
 80003ae:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80003b2:	2302      	movs	r3, #2
 80003b4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80003b8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80003c2:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 80003c6:	0a1b      	lsrs	r3, r3, #8
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80003d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80003d2:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <BQ_ReadMABlockCommand+0xd8>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	b299      	uxth	r1, r3
 80003da:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80003de:	2364      	movs	r3, #100	@ 0x64
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	2304      	movs	r3, #4
 80003e4:	f002 f868 	bl	80024b8 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 80003e8:	2344      	movs	r3, #68	@ 0x44
 80003ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80003ee:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 80003f2:	3302      	adds	r3, #2
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    HAL_I2C_Master_Transmit(BMS.bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 80003fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80003fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000474 <BQ_ReadMABlockCommand+0xd8>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	b299      	uxth	r1, r3
 8000404:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000408:	2364      	movs	r3, #100	@ 0x64
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2302      	movs	r3, #2
 800040e:	f002 f853 	bl	80024b8 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000412:	2300      	movs	r3, #0
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	221f      	movs	r2, #31
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f004 fdfb 	bl	8005018 <memset>
    HAL_I2C_Master_Receive(BMS.bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 8000422:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000424:	4b13      	ldr	r3, [pc, #76]	@ (8000474 <BQ_ReadMABlockCommand+0xd8>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	b299      	uxth	r1, r3
 800042c:	463a      	mov	r2, r7
 800042e:	2364      	movs	r3, #100	@ 0x64
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2323      	movs	r3, #35	@ 0x23
 8000434:	f002 f958 	bl	80026e8 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000438:	2300      	movs	r3, #0
 800043a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800043c:	e00d      	b.n	800045a <BQ_ReadMABlockCommand+0xbe>
    {
        receive[i] = result[i + 3];
 800043e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000440:	1cda      	adds	r2, r3, #3
 8000442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000444:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8000448:	440b      	add	r3, r1
 800044a:	3230      	adds	r2, #48	@ 0x30
 800044c:	443a      	add	r2, r7
 800044e:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000452:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 8000454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000456:	3301      	adds	r3, #1
 8000458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800045a:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 800045e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000460:	429a      	cmp	r2, r3
 8000462:	dbec      	blt.n	800043e <BQ_ReadMABlockCommand+0xa2>
    }
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	3730      	adds	r7, #48	@ 0x30
 800046a:	46bd      	mov	sp, r7
 800046c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000470:	b004      	add	sp, #16
 8000472:	4770      	bx	lr
 8000474:	20000000 	.word	0x20000000

08000478 <BQ_ReadCommandAsShort>:
 * @brief reading from ManufacturerBlockAccess() as uint16_t
 * @param command command to read
 * @return 16bit value from command
 */
uint16_t BQ_ReadCommandAsShort(BQ_data BMS, uint16_t command)
{
 8000478:	b084      	sub	sp, #16
 800047a:	b580      	push	{r7, lr}
 800047c:	b0ba      	sub	sp, #232	@ 0xe8
 800047e:	af38      	add	r7, sp, #224	@ 0xe0
 8000480:	f107 0c10 	add.w	ip, r7, #16
 8000484:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 8000488:	2302      	movs	r3, #2
 800048a:	9337      	str	r3, [sp, #220]	@ 0xdc
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000490:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000494:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000496:	4668      	mov	r0, sp
 8000498:	f107 0320 	add.w	r3, r7, #32
 800049c:	22d4      	movs	r2, #212	@ 0xd4
 800049e:	4619      	mov	r1, r3
 80004a0:	f004 fde6 	bl	8005070 <memcpy>
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004aa:	f7ff ff77 	bl	800039c <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	80fb      	strh	r3, [r7, #6]

    result = result | buf[0];
 80004b2:	793b      	ldrb	r3, [r7, #4]
 80004b4:	461a      	mov	r2, r3
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	80fb      	strh	r3, [r7, #6]
    result = result | (buf[1] << 8);
 80004bc:	797b      	ldrb	r3, [r7, #5]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	b21a      	sxth	r2, r3
 80004c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	80fb      	strh	r3, [r7, #6]

    return result;
 80004cc:	88fb      	ldrh	r3, [r7, #6]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004d8:	b004      	add	sp, #16
 80004da:	4770      	bx	lr

080004dc <BQ_ReadCommandAsInt>:
 * @brief reading from ManufacturerBlockAccess() as uint32_t
 * @param command command to read
 * @return 32bit value from command
 */
uint32_t BQ_ReadCommandAsInt(BQ_data BMS, uint16_t command)
{
 80004dc:	b084      	sub	sp, #16
 80004de:	b580      	push	{r7, lr}
 80004e0:	b0ba      	sub	sp, #232	@ 0xe8
 80004e2:	af38      	add	r7, sp, #224	@ 0xe0
 80004e4:	f107 0c10 	add.w	ip, r7, #16
 80004e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    uint8_t buf[4];

    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80004ec:	2304      	movs	r3, #4
 80004ee:	9337      	str	r3, [sp, #220]	@ 0xdc
 80004f0:	463b      	mov	r3, r7
 80004f2:	9336      	str	r3, [sp, #216]	@ 0xd8
 80004f4:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 80004f8:	9335      	str	r3, [sp, #212]	@ 0xd4
 80004fa:	4668      	mov	r0, sp
 80004fc:	f107 0320 	add.w	r3, r7, #32
 8000500:	22d4      	movs	r2, #212	@ 0xd4
 8000502:	4619      	mov	r1, r3
 8000504:	f004 fdb4 	bl	8005070 <memcpy>
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800050e:	f7ff ff45 	bl	800039c <BQ_ReadMABlockCommand>

    uint32_t result = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]

    result = result | (buf[0]);
 8000516:	783b      	ldrb	r3, [r7, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4313      	orrs	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
    result = result | (buf[1] << 8);
 8000520:	787b      	ldrb	r3, [r7, #1]
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4313      	orrs	r3, r2
 8000528:	607b      	str	r3, [r7, #4]
    result = result | (buf[2] << 16);
 800052a:	78bb      	ldrb	r3, [r7, #2]
 800052c:	041b      	lsls	r3, r3, #16
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	607b      	str	r3, [r7, #4]
    result = result | (buf[3] << 24);
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	061b      	lsls	r3, r3, #24
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	607b      	str	r3, [r7, #4]

    return result;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800054a:	b004      	add	sp, #16
 800054c:	4770      	bx	lr

0800054e <BQ_ReadCommandAsLInt>:

uint32_t BQ_ReadCommandAsLInt(BQ_data BMS, uint16_t command){
 800054e:	b084      	sub	sp, #16
 8000550:	b580      	push	{r7, lr}
 8000552:	b0ba      	sub	sp, #232	@ 0xe8
 8000554:	af38      	add	r7, sp, #224	@ 0xe0
 8000556:	f107 0c10 	add.w	ip, r7, #16
 800055a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t buf[4];

	    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 800055e:	2304      	movs	r3, #4
 8000560:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000562:	463b      	mov	r3, r7
 8000564:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000566:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 800056a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800056c:	4668      	mov	r0, sp
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	22d4      	movs	r2, #212	@ 0xd4
 8000574:	4619      	mov	r1, r3
 8000576:	f004 fd7b 	bl	8005070 <memcpy>
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000580:	f7ff ff0c 	bl	800039c <BQ_ReadMABlockCommand>

	    uint32_t result = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]

	    result = result | (buf[3]);
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4313      	orrs	r3, r2
 8000590:	607b      	str	r3, [r7, #4]
	    result = result | (buf[2] << 8);
 8000592:	78bb      	ldrb	r3, [r7, #2]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
	    result = result | (buf[1] << 16);
 800059c:	787b      	ldrb	r3, [r7, #1]
 800059e:	041b      	lsls	r3, r3, #16
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	607b      	str	r3, [r7, #4]
	    result = result | (buf[0] << 24);
 80005a6:	783b      	ldrb	r3, [r7, #0]
 80005a8:	061b      	lsls	r3, r3, #24
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	607b      	str	r3, [r7, #4]

	    return result;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data BMS, bool active)
{
 80005c0:	b084      	sub	sp, #16
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b0b6      	sub	sp, #216	@ 0xd8
 80005c6:	af36      	add	r7, sp, #216	@ 0xd8
 80005c8:	f107 0c08 	add.w	ip, r7, #8
 80005cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsLedEnabled(BMS) != active)
 80005d0:	4668      	mov	r0, sp
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	22d4      	movs	r2, #212	@ 0xd4
 80005d8:	4619      	mov	r1, r3
 80005da:	f004 fd49 	bl	8005070 <memcpy>
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e4:	f000 fe58 	bl	8001298 <BQ_IsLedEnabled>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d00d      	beq.n	8000610 <BQAction_SetLed+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 80005f4:	232b      	movs	r3, #43	@ 0x2b
 80005f6:	9335      	str	r3, [sp, #212]	@ 0xd4
 80005f8:	4668      	mov	r0, sp
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	22d4      	movs	r2, #212	@ 0xd4
 8000600:	4619      	mov	r1, r3
 8000602:	f004 fd35 	bl	8005070 <memcpy>
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800060c:	f7ff fe9c 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000618:	b004      	add	sp, #16
 800061a:	4770      	bx	lr

0800061c <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data BMS, bool active)
{
 800061c:	b084      	sub	sp, #16
 800061e:	b580      	push	{r7, lr}
 8000620:	b0b6      	sub	sp, #216	@ 0xd8
 8000622:	af36      	add	r7, sp, #216	@ 0xd8
 8000624:	f107 0c08 	add.w	ip, r7, #8
 8000628:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingAllFetEnabled(BMS) != active)
 800062c:	4668      	mov	r0, sp
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	22d4      	movs	r2, #212	@ 0xd4
 8000634:	4619      	mov	r1, r3
 8000636:	f004 fd1b 	bl	8005070 <memcpy>
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000640:	f000 fe8b 	bl	800135a <BQ_IsManufacturingAllFetEnabled>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 800064c:	4293      	cmp	r3, r2
 800064e:	d00d      	beq.n	800066c <BQAction_SetManufacturingAllFet+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 8000650:	2322      	movs	r3, #34	@ 0x22
 8000652:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000654:	4668      	mov	r0, sp
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	22d4      	movs	r2, #212	@ 0xd4
 800065c:	4619      	mov	r1, r3
 800065e:	f004 fd07 	bl	8005070 <memcpy>
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000668:	f7ff fe6e 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data BMS, bool active)
{
 8000678:	b084      	sub	sp, #16
 800067a:	b580      	push	{r7, lr}
 800067c:	b0b6      	sub	sp, #216	@ 0xd8
 800067e:	af36      	add	r7, sp, #216	@ 0xd8
 8000680:	f107 0c08 	add.w	ip, r7, #8
 8000684:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingFuseEnabled(BMS) != active)
 8000688:	4668      	mov	r0, sp
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	22d4      	movs	r2, #212	@ 0xd4
 8000690:	4619      	mov	r1, r3
 8000692:	f004 fced 	bl	8005070 <memcpy>
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800069c:	f000 fe96 	bl	80013cc <BQ_IsManufacturingFuseEnabled>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d00d      	beq.n	80006c8 <BQAction_SetManufacturingFuse+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 80006ac:	2326      	movs	r3, #38	@ 0x26
 80006ae:	9335      	str	r3, [sp, #212]	@ 0xd4
 80006b0:	4668      	mov	r0, sp
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	22d4      	movs	r2, #212	@ 0xd4
 80006b8:	4619      	mov	r1, r3
 80006ba:	f004 fcd9 	bl	8005070 <memcpy>
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c4:	f7ff fe40 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006d0:	b004      	add	sp, #16
 80006d2:	4770      	bx	lr

080006d4 <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data BMS, bool active)
{
 80006d4:	b084      	sub	sp, #16
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b0b6      	sub	sp, #216	@ 0xd8
 80006da:	af36      	add	r7, sp, #216	@ 0xd8
 80006dc:	f107 0c08 	add.w	ip, r7, #8
 80006e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingCalibrationEnabled(BMS) != active)
 80006e4:	4668      	mov	r0, sp
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	22d4      	movs	r2, #212	@ 0xd4
 80006ec:	4619      	mov	r1, r3
 80006ee:	f004 fcbf 	bl	8005070 <memcpy>
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f8:	f000 fe8e 	bl	8001418 <BQ_IsManufacturingCalibrationEnabled>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000704:	4293      	cmp	r3, r2
 8000706:	d00d      	beq.n	8000724 <BQAction_SetCalibration+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 8000708:	232d      	movs	r3, #45	@ 0x2d
 800070a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800070c:	4668      	mov	r0, sp
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	22d4      	movs	r2, #212	@ 0xd4
 8000714:	4619      	mov	r1, r3
 8000716:	f004 fcab 	bl	8005070 <memcpy>
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000720:	f7ff fe12 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800072c:	b004      	add	sp, #16
 800072e:	4770      	bx	lr

08000730 <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data BMS, bool active)
{
 8000730:	b084      	sub	sp, #16
 8000732:	b580      	push	{r7, lr}
 8000734:	b0b6      	sub	sp, #216	@ 0xd8
 8000736:	af36      	add	r7, sp, #216	@ 0xd8
 8000738:	f107 0c08 	add.w	ip, r7, #8
 800073c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingGaugingEnabled(BMS) != active)
 8000740:	4668      	mov	r0, sp
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	22d4      	movs	r2, #212	@ 0xd4
 8000748:	4619      	mov	r1, r3
 800074a:	f004 fc91 	bl	8005070 <memcpy>
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000754:	f000 fdee 	bl	8001334 <BQ_IsManufacturingGaugingEnabled>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000760:	4293      	cmp	r3, r2
 8000762:	d00d      	beq.n	8000780 <BQAction_SetManufacturingGauging+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 8000764:	2321      	movs	r3, #33	@ 0x21
 8000766:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000768:	4668      	mov	r0, sp
 800076a:	f107 0318 	add.w	r3, r7, #24
 800076e:	22d4      	movs	r2, #212	@ 0xd4
 8000770:	4619      	mov	r1, r3
 8000772:	f004 fc7d 	bl	8005070 <memcpy>
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800077c:	f7ff fde4 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000788:	b004      	add	sp, #16
 800078a:	4770      	bx	lr

0800078c <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data BMS, bool active)
{
 800078c:	b084      	sub	sp, #16
 800078e:	b580      	push	{r7, lr}
 8000790:	b0b6      	sub	sp, #216	@ 0xd8
 8000792:	af36      	add	r7, sp, #216	@ 0xd8
 8000794:	f107 0c08 	add.w	ip, r7, #8
 8000798:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingPermanentFailureEnabled(BMS) != active)
 800079c:	4668      	mov	r0, sp
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	22d4      	movs	r2, #212	@ 0xd4
 80007a4:	4619      	mov	r1, r3
 80007a6:	f004 fc63 	bl	8005070 <memcpy>
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b0:	f000 fdf9 	bl	80013a6 <BQ_IsManufacturingPermanentFailureEnabled>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 80007bc:	4293      	cmp	r3, r2
 80007be:	d00d      	beq.n	80007dc <BQAction_SetManufacturingPF+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 80007c0:	2324      	movs	r3, #36	@ 0x24
 80007c2:	9335      	str	r3, [sp, #212]	@ 0xd4
 80007c4:	4668      	mov	r0, sp
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	22d4      	movs	r2, #212	@ 0xd4
 80007cc:	4619      	mov	r1, r3
 80007ce:	f004 fc4f 	bl	8005070 <memcpy>
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d8:	f7ff fdb6 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr

080007e8 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data BMS, bool active)
{
 80007e8:	b084      	sub	sp, #16
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b0b6      	sub	sp, #216	@ 0xd8
 80007ee:	af36      	add	r7, sp, #216	@ 0xd8
 80007f0:	f107 0c08 	add.w	ip, r7, #8
 80007f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_IsManufacturingLifetimeEnabled(BMS) != active)
 80007f8:	4668      	mov	r0, sp
 80007fa:	f107 0318 	add.w	r3, r7, #24
 80007fe:	22d4      	movs	r2, #212	@ 0xd4
 8000800:	4619      	mov	r1, r3
 8000802:	f004 fc35 	bl	8005070 <memcpy>
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080c:	f000 fdb8 	bl	8001380 <BQ_IsManufacturingLifetimeEnabled>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8000818:	4293      	cmp	r3, r2
 800081a:	d00d      	beq.n	8000838 <BQAction_SetManufacturingLF+0x50>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 800081c:	2323      	movs	r3, #35	@ 0x23
 800081e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000820:	4668      	mov	r0, sp
 8000822:	f107 0318 	add.w	r3, r7, #24
 8000826:	22d4      	movs	r2, #212	@ 0xd4
 8000828:	4619      	mov	r1, r3
 800082a:	f004 fc21 	bl	8005070 <memcpy>
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000834:	f7ff fd88 	bl	8000348 <BQ_WriteMABlockCommand>
    }
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <BQAction_EnableDischarging>:
/**
 * @brief enable discharge fet and disable the rest
 * @param none
 */
bool BQAction_EnableDischarging(BQ_data BMS)
{
 8000844:	b084      	sub	sp, #16
 8000846:	b580      	push	{r7, lr}
 8000848:	b0b6      	sub	sp, #216	@ 0xd8
 800084a:	af36      	add	r7, sp, #216	@ 0xd8
 800084c:	f107 0c08 	add.w	ip, r7, #8
 8000850:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (BQ_GetChargeMode(BMS) == DISCHARGE){
 8000854:	4668      	mov	r0, sp
 8000856:	f107 0318 	add.w	r3, r7, #24
 800085a:	22d4      	movs	r2, #212	@ 0xd4
 800085c:	4619      	mov	r1, r3
 800085e:	f004 fc07 	bl	8005070 <memcpy>
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000868:	f000 fc20 	bl	80010ac <BQ_GetChargeMode>
 800086c:	4603      	mov	r3, r0
 800086e:	2b02      	cmp	r3, #2
 8000870:	d101      	bne.n	8000876 <BQAction_EnableDischarging+0x32>
        return false;
 8000872:	2300      	movs	r3, #0
 8000874:	e0a9      	b.n	80009ca <BQAction_EnableDischarging+0x186>
    }

    // turn off unused fets
    if (BQ_IsChargeFetTestEnabled(BMS)){
 8000876:	4668      	mov	r0, sp
 8000878:	f107 0318 	add.w	r3, r7, #24
 800087c:	22d4      	movs	r2, #212	@ 0xd4
 800087e:	4619      	mov	r1, r3
 8000880:	f004 fbf6 	bl	8005070 <memcpy>
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800088a:	f000 fd2d 	bl	80012e8 <BQ_IsChargeFetTestEnabled>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00d      	beq.n	80008b0 <BQAction_EnableDischarging+0x6c>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000894:	231f      	movs	r3, #31
 8000896:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000898:	4668      	mov	r0, sp
 800089a:	f107 0318 	add.w	r3, r7, #24
 800089e:	22d4      	movs	r2, #212	@ 0xd4
 80008a0:	4619      	mov	r1, r3
 80008a2:	f004 fbe5 	bl	8005070 <memcpy>
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ac:	f7ff fd4c 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 80008b0:	4668      	mov	r0, sp
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	22d4      	movs	r2, #212	@ 0xd4
 80008b8:	4619      	mov	r1, r3
 80008ba:	f004 fbd9 	bl	8005070 <memcpy>
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c4:	f000 fd95 	bl	80013f2 <BQ_IsPreDischargeFetTestEnabled>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00d      	beq.n	80008ea <BQAction_EnableDischarging+0xa6>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 80008ce:	231c      	movs	r3, #28
 80008d0:	9335      	str	r3, [sp, #212]	@ 0xd4
 80008d2:	4668      	mov	r0, sp
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	22d4      	movs	r2, #212	@ 0xd4
 80008da:	4619      	mov	r1, r3
 80008dc:	f004 fbc8 	bl	8005070 <memcpy>
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e6:	f7ff fd2f 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 80008ea:	4668      	mov	r0, sp
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	22d4      	movs	r2, #212	@ 0xd4
 80008f2:	4619      	mov	r1, r3
 80008f4:	f004 fbbc 	bl	8005070 <memcpy>
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fe:	f000 fce0 	bl	80012c2 <BQ_IsPreChargeFetTestEnabled>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00d      	beq.n	8000924 <BQAction_EnableDischarging+0xe0>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 8000908:	231e      	movs	r3, #30
 800090a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800090c:	4668      	mov	r0, sp
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	22d4      	movs	r2, #212	@ 0xd4
 8000914:	4619      	mov	r1, r3
 8000916:	f004 fbab 	bl	8005070 <memcpy>
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000920:	f7ff fd12 	bl	8000348 <BQ_WriteMABlockCommand>
    }

    // turn on discharge
    if (!BQ_IsDischargeFetTestEnabled(BMS)){
 8000924:	4668      	mov	r0, sp
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	22d4      	movs	r2, #212	@ 0xd4
 800092c:	4619      	mov	r1, r3
 800092e:	f004 fb9f 	bl	8005070 <memcpy>
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000938:	f000 fce9 	bl	800130e <BQ_IsDischargeFetTestEnabled>
 800093c:	4603      	mov	r3, r0
 800093e:	f083 0301 	eor.w	r3, r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00d      	beq.n	8000964 <BQAction_EnableDischarging+0x120>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000948:	2320      	movs	r3, #32
 800094a:	9335      	str	r3, [sp, #212]	@ 0xd4
 800094c:	4668      	mov	r0, sp
 800094e:	f107 0318 	add.w	r3, r7, #24
 8000952:	22d4      	movs	r2, #212	@ 0xd4
 8000954:	4619      	mov	r1, r3
 8000956:	f004 fb8b 	bl	8005070 <memcpy>
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000960:	f7ff fcf2 	bl	8000348 <BQ_WriteMABlockCommand>
    }

    HAL_Delay(1500);
 8000964:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000968:	f001 f9c2 	bl	8001cf0 <HAL_Delay>

    if (BQ_GetChargeMode(BMS) != CHARGE){
 800096c:	4668      	mov	r0, sp
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	22d4      	movs	r2, #212	@ 0xd4
 8000974:	4619      	mov	r1, r3
 8000976:	f004 fb7b 	bl	8005070 <memcpy>
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000980:	f000 fb94 	bl	80010ac <BQ_GetChargeMode>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	d001      	beq.n	800098e <BQAction_EnableDischarging+0x14a>
        return true;
 800098a:	2301      	movs	r3, #1
 800098c:	e01d      	b.n	80009ca <BQAction_EnableDischarging+0x186>
    }else{
        // turn off discharge
        if (BQ_IsDischargeFetTestEnabled(BMS)){
 800098e:	4668      	mov	r0, sp
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	22d4      	movs	r2, #212	@ 0xd4
 8000996:	4619      	mov	r1, r3
 8000998:	f004 fb6a 	bl	8005070 <memcpy>
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a2:	f000 fcb4 	bl	800130e <BQ_IsDischargeFetTestEnabled>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00d      	beq.n	80009c8 <BQAction_EnableDischarging+0x184>
            BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80009ac:	2320      	movs	r3, #32
 80009ae:	9335      	str	r3, [sp, #212]	@ 0xd4
 80009b0:	4668      	mov	r0, sp
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	22d4      	movs	r2, #212	@ 0xd4
 80009b8:	4619      	mov	r1, r3
 80009ba:	f004 fb59 	bl	8005070 <memcpy>
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c4:	f7ff fcc0 	bl	8000348 <BQ_WriteMABlockCommand>
        }
        return false;
 80009c8:	2300      	movs	r3, #0
    }
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009d2:	b004      	add	sp, #16
 80009d4:	4770      	bx	lr

080009d6 <BQAction_DisableFets>:
/**
 * @brief disable all fets
 * @param none
 */
bool BQAction_DisableFets(BQ_data BMS)
{
 80009d6:	b084      	sub	sp, #16
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0b6      	sub	sp, #216	@ 0xd8
 80009dc:	af36      	add	r7, sp, #216	@ 0xd8
 80009de:	f107 0c08 	add.w	ip, r7, #8
 80009e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQAction_UpdateOpStatus(&BMS);
 80009e6:	f107 0008 	add.w	r0, r7, #8
 80009ea:	f000 f9b1 	bl	8000d50 <BQAction_UpdateOpStatus>
    if (BQ_IsChargeFetTestEnabled(BMS)){
 80009ee:	4668      	mov	r0, sp
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	22d4      	movs	r2, #212	@ 0xd4
 80009f6:	4619      	mov	r1, r3
 80009f8:	f004 fb3a 	bl	8005070 <memcpy>
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a02:	f000 fc71 	bl	80012e8 <BQ_IsChargeFetTestEnabled>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00d      	beq.n	8000a28 <BQAction_DisableFets+0x52>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000a0c:	231f      	movs	r3, #31
 8000a0e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000a10:	4668      	mov	r0, sp
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	22d4      	movs	r2, #212	@ 0xd4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f004 fb29 	bl	8005070 <memcpy>
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a24:	f7ff fc90 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsDischargeFetTestEnabled(BMS)){
 8000a28:	4668      	mov	r0, sp
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	22d4      	movs	r2, #212	@ 0xd4
 8000a30:	4619      	mov	r1, r3
 8000a32:	f004 fb1d 	bl	8005070 <memcpy>
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3c:	f000 fc67 	bl	800130e <BQ_IsDischargeFetTestEnabled>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00d      	beq.n	8000a62 <BQAction_DisableFets+0x8c>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000a46:	2320      	movs	r3, #32
 8000a48:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000a4a:	4668      	mov	r0, sp
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	22d4      	movs	r2, #212	@ 0xd4
 8000a52:	4619      	mov	r1, r3
 8000a54:	f004 fb0c 	bl	8005070 <memcpy>
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5e:	f7ff fc73 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreChargeFetTestEnabled(BMS)){
 8000a62:	4668      	mov	r0, sp
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	22d4      	movs	r2, #212	@ 0xd4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f004 fb00 	bl	8005070 <memcpy>
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a76:	f000 fc24 	bl	80012c2 <BQ_IsPreChargeFetTestEnabled>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00d      	beq.n	8000a9c <BQAction_DisableFets+0xc6>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 8000a80:	231e      	movs	r3, #30
 8000a82:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000a84:	4668      	mov	r0, sp
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	22d4      	movs	r2, #212	@ 0xd4
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f004 faef 	bl	8005070 <memcpy>
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a98:	f7ff fc56 	bl	8000348 <BQ_WriteMABlockCommand>
    }
    if (BQ_IsPreDischargeFetTestEnabled(BMS)){
 8000a9c:	4668      	mov	r0, sp
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	22d4      	movs	r2, #212	@ 0xd4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f004 fae3 	bl	8005070 <memcpy>
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab0:	f000 fc9f 	bl	80013f2 <BQ_IsPreDischargeFetTestEnabled>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00d      	beq.n	8000ad6 <BQAction_DisableFets+0x100>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000aba:	231c      	movs	r3, #28
 8000abc:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000abe:	4668      	mov	r0, sp
 8000ac0:	f107 0318 	add.w	r3, r7, #24
 8000ac4:	22d4      	movs	r2, #212	@ 0xd4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f004 fad2 	bl	8005070 <memcpy>
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad2:	f7ff fc39 	bl	8000348 <BQ_WriteMABlockCommand>
    }

    return true;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data BMS)
{
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b0b8      	sub	sp, #224	@ 0xe0
 8000aea:	af36      	add	r7, sp, #216	@ 0xd8
 8000aec:	f107 0c10 	add.w	ip, r7, #16
 8000af0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//    bool isSealed = false;

    BQAction_UpdateOpStatus(&BMS);
 8000af4:	f107 0010 	add.w	r0, r7, #16
 8000af8:	f000 f92a 	bl	8000d50 <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode(BMS);
 8000afc:	4668      	mov	r0, sp
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	22d4      	movs	r2, #212	@ 0xd4
 8000b04:	4619      	mov	r1, r3
 8000b06:	f004 fab3 	bl	8005070 <memcpy>
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b10:	f000 fa94 	bl	800103c <BQ_GetSecurityMode>
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000b18:	e037      	b.n	8000b8a <BQAction_TryUnsealedDevice+0xa6>
    {
//        isSealed = true;
//        ("[BQ] Security mode - Sealed", 27);

        BQ_WriteMABlockCommand(BMS, 0x0414);
 8000b1a:	f240 4314 	movw	r3, #1044	@ 0x414
 8000b1e:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000b20:	4668      	mov	r0, sp
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	22d4      	movs	r2, #212	@ 0xd4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f004 faa1 	bl	8005070 <memcpy>
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b34:	f7ff fc08 	bl	8000348 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 8000b38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b3c:	f001 f8d8 	bl	8001cf0 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 8000b40:	f243 6372 	movw	r3, #13938	@ 0x3672
 8000b44:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000b46:	4668      	mov	r0, sp
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	22d4      	movs	r2, #212	@ 0xd4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f004 fa8e 	bl	8005070 <memcpy>
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b5a:	f7ff fbf5 	bl	8000348 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 8000b5e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b62:	f001 f8c5 	bl	8001cf0 <HAL_Delay>
        BQAction_UpdateOpStatus(&BMS);
 8000b66:	f107 0010 	add.w	r0, r7, #16
 8000b6a:	f000 f8f1 	bl	8000d50 <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode(BMS);
 8000b6e:	4668      	mov	r0, sp
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	22d4      	movs	r2, #212	@ 0xd4
 8000b76:	4619      	mov	r1, r3
 8000b78:	f004 fa7a 	bl	8005070 <memcpy>
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b82:	f000 fa5b 	bl	800103c <BQ_GetSecurityMode>
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
    while (securityMode == SEALED || securityMode == RESERVED)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0c4      	beq.n	8000b1a <BQAction_TryUnsealedDevice+0x36>
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d0c1      	beq.n	8000b1a <BQAction_TryUnsealedDevice+0x36>
    // print only if the device was previously sealeded
//    if (isSealed){
//        ("[BQ] successfully unsealed", 27);
//    }

}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4770      	bx	lr
	...

08000ba8 <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b0c5      	sub	sp, #276	@ 0x114
 8000bac:	af3c      	add	r7, sp, #240	@ 0xf0
 8000bae:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsShort((*BMS), BQ40Z80_MFA_MANUFACTURING_STATUS);
 8000bb0:	687c      	ldr	r4, [r7, #4]
 8000bb2:	2357      	movs	r3, #87	@ 0x57
 8000bb4:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000bb6:	4668      	mov	r0, sp
 8000bb8:	f104 0310 	add.w	r3, r4, #16
 8000bbc:	22d4      	movs	r2, #212	@ 0xd4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f004 fa56 	bl	8005070 <memcpy>
 8000bc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bc8:	f7ff fc56 	bl	8000478 <BQ_ReadCommandAsShort>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	83fb      	strh	r3, [r7, #30]
    uint32_t chargeStatus = BQ_ReadCommandAsInt((*BMS), BQ40Z80_MFA_CHARGING_STATUS);
 8000bd0:	687c      	ldr	r4, [r7, #4]
 8000bd2:	2355      	movs	r3, #85	@ 0x55
 8000bd4:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000bd6:	4668      	mov	r0, sp
 8000bd8:	f104 0310 	add.w	r3, r4, #16
 8000bdc:	22d4      	movs	r2, #212	@ 0xd4
 8000bde:	4619      	mov	r1, r3
 8000be0:	f004 fa46 	bl	8005070 <memcpy>
 8000be4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000be8:	f7ff fc78 	bl	80004dc <BQ_ReadCommandAsInt>
 8000bec:	61b8      	str	r0, [r7, #24]
    uint32_t operationStatus = BQ_ReadCommandAsLInt((*BMS), BQ40Z80_MFA_OPERATION_STATUS);
 8000bee:	687c      	ldr	r4, [r7, #4]
 8000bf0:	2354      	movs	r3, #84	@ 0x54
 8000bf2:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000bf4:	4668      	mov	r0, sp
 8000bf6:	f104 0310 	add.w	r3, r4, #16
 8000bfa:	22d4      	movs	r2, #212	@ 0xd4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f004 fa37 	bl	8005070 <memcpy>
 8000c02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c06:	f7ff fca2 	bl	800054e <BQ_ReadCommandAsLInt>
 8000c0a:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all= operationStatus;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	605a      	str	r2, [r3, #4]
    uint32_t gaugStatus = BQ_ReadCommandAsInt((*BMS), BQ40Z80_MFA_GAUGING_STATUS);
 8000c12:	687c      	ldr	r4, [r7, #4]
 8000c14:	2356      	movs	r3, #86	@ 0x56
 8000c16:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000c18:	4668      	mov	r0, sp
 8000c1a:	f104 0310 	add.w	r3, r4, #16
 8000c1e:	22d4      	movs	r2, #212	@ 0xd4
 8000c20:	4619      	mov	r1, r3
 8000c22:	f004 fa25 	bl	8005070 <memcpy>
 8000c26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c2a:	f7ff fc57 	bl	80004dc <BQ_ReadCommandAsInt>
 8000c2e:	6138      	str	r0, [r7, #16]

    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a41      	ldr	r2, [pc, #260]	@ (8000d3c <BQAction_UpdateData+0x194>)
 8000c36:	7811      	ldrb	r1, [r2, #0]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fd50 	bl	80016e0 <I2CHelper_ReadRegisterAsShort>
 8000c40:	4603      	mov	r3, r0
 8000c42:	81fb      	strh	r3, [r7, #14]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a3c      	ldr	r2, [pc, #240]	@ (8000d3c <BQAction_UpdateData+0x194>)
 8000c4a:	7811      	ldrb	r1, [r2, #0]
 8000c4c:	2216      	movs	r2, #22
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fd46 	bl	80016e0 <I2CHelper_ReadRegisterAsShort>
 8000c54:	4603      	mov	r3, r0
 8000c56:	81bb      	strh	r3, [r7, #12]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a37      	ldr	r2, [pc, #220]	@ (8000d3c <BQAction_UpdateData+0x194>)
 8000c5e:	7811      	ldrb	r1, [r2, #0]
 8000c60:	2248      	movs	r2, #72	@ 0x48
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fd61 	bl	800172a <I2CHelper_ReadRegisterAsChar>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	72fb      	strb	r3, [r7, #11]

    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000c6c:	687c      	ldr	r4, [r7, #4]
 8000c6e:	2320      	movs	r3, #32
 8000c70:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000c72:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <BQAction_UpdateData+0x198>)
 8000c74:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000c76:	2371      	movs	r3, #113	@ 0x71
 8000c78:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000c7a:	4668      	mov	r0, sp
 8000c7c:	f104 0310 	add.w	r3, r4, #16
 8000c80:	22d4      	movs	r2, #212	@ 0xd4
 8000c82:	4619      	mov	r1, r3
 8000c84:	f004 f9f4 	bl	8005070 <memcpy>
 8000c88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c8c:	f7ff fb86 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2, 16);
 8000c90:	687c      	ldr	r4, [r7, #4]
 8000c92:	2310      	movs	r3, #16
 8000c94:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000c96:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <BQAction_UpdateData+0x19c>)
 8000c98:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000c9a:	2372      	movs	r3, #114	@ 0x72
 8000c9c:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000c9e:	4668      	mov	r0, sp
 8000ca0:	f104 0310 	add.w	r3, r4, #16
 8000ca4:	22d4      	movs	r2, #212	@ 0xd4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f004 f9e2 	bl	8005070 <memcpy>
 8000cac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cb0:	f7ff fb74 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
 8000cb4:	687c      	ldr	r4, [r7, #4]
 8000cb6:	2312      	movs	r3, #18
 8000cb8:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000cba:	4b23      	ldr	r3, [pc, #140]	@ (8000d48 <BQAction_UpdateData+0x1a0>)
 8000cbc:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000cbe:	237b      	movs	r3, #123	@ 0x7b
 8000cc0:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000cc2:	4668      	mov	r0, sp
 8000cc4:	f104 0310 	add.w	r3, r4, #16
 8000cc8:	22d4      	movs	r2, #212	@ 0xd4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f004 f9d0 	bl	8005070 <memcpy>
 8000cd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cd4:	f7ff fb62 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal, 32);
 8000cd8:	687c      	ldr	r4, [r7, #4]
 8000cda:	2320      	movs	r3, #32
 8000cdc:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <BQAction_UpdateData+0x1a4>)
 8000ce0:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000ce2:	f24f 0381 	movw	r3, #61569	@ 0xf081
 8000ce6:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000ce8:	4668      	mov	r0, sp
 8000cea:	f104 0310 	add.w	r3, r4, #16
 8000cee:	22d4      	movs	r2, #212	@ 0xd4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f004 f9bd 	bl	8005070 <memcpy>
 8000cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cfa:	f7ff fb4f 	bl	800039c <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags((*BMS), operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 8000cfe:	687c      	ldr	r4, [r7, #4]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	933b      	str	r3, [sp, #236]	@ 0xec
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	933a      	str	r3, [sp, #232]	@ 0xe8
 8000d08:	8bfb      	ldrh	r3, [r7, #30]
 8000d0a:	9339      	str	r3, [sp, #228]	@ 0xe4
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	9338      	str	r3, [sp, #224]	@ 0xe0
 8000d10:	89bb      	ldrh	r3, [r7, #12]
 8000d12:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000d14:	89fb      	ldrh	r3, [r7, #14]
 8000d16:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000d1c:	4668      	mov	r0, sp
 8000d1e:	f104 0310 	add.w	r3, r4, #16
 8000d22:	22d4      	movs	r2, #212	@ 0xd4
 8000d24:	4619      	mov	r1, r3
 8000d26:	f004 f9a3 	bl	8005070 <memcpy>
 8000d2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d2e:	f000 f88b 	bl	8000e48 <BQ_ParseAllFlags>
}
 8000d32:	bf00      	nop
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	200000ac 	.word	0x200000ac
 8000d44:	200000cc 	.word	0x200000cc
 8000d48:	200000dc 	.word	0x200000dc
 8000d4c:	200000ee 	.word	0x200000ee

08000d50 <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b0bd      	sub	sp, #244	@ 0xf4
 8000d54:	af38      	add	r7, sp, #224	@ 0xe0
 8000d56:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand((*BMS), BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 8000d58:	687c      	ldr	r4, [r7, #4]
 8000d5a:	2320      	movs	r3, #32
 8000d5c:	9337      	str	r3, [sp, #220]	@ 0xdc
 8000d5e:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <BQAction_UpdateOpStatus+0x94>)
 8000d60:	9336      	str	r3, [sp, #216]	@ 0xd8
 8000d62:	2371      	movs	r3, #113	@ 0x71
 8000d64:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000d66:	4668      	mov	r0, sp
 8000d68:	f104 0310 	add.w	r3, r4, #16
 8000d6c:	22d4      	movs	r2, #212	@ 0xd4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f004 f97e 	bl	8005070 <memcpy>
 8000d74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d78:	f7ff fb10 	bl	800039c <BQ_ReadMABlockCommand>
    uint32_t test = BQ_ReadCommandAsLInt((*BMS), BQ40Z80_MFA_OPERATION_STATUS);
 8000d7c:	687c      	ldr	r4, [r7, #4]
 8000d7e:	2354      	movs	r3, #84	@ 0x54
 8000d80:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000d82:	4668      	mov	r0, sp
 8000d84:	f104 0310 	add.w	r3, r4, #16
 8000d88:	22d4      	movs	r2, #212	@ 0xd4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f004 f970 	bl	8005070 <memcpy>
 8000d90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d94:	f7ff fbdb 	bl	800054e <BQ_ReadCommandAsLInt>
 8000d98:	60f8      	str	r0, [r7, #12]
    BQ_ParseOperationStatus(BMS, test);//problem
 8000d9a:	68f9      	ldr	r1, [r7, #12]
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f8c1 	bl	8000f24 <BQ_ParseOperationStatus>
    BQ_ParseManufacturingStatus((*BMS), BQ_ReadCommandAsShort((*BMS), BQ40Z80_MFA_MANUFACTURING_STATUS));
 8000da2:	687c      	ldr	r4, [r7, #4]
 8000da4:	2357      	movs	r3, #87	@ 0x57
 8000da6:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000da8:	4668      	mov	r0, sp
 8000daa:	f104 0310 	add.w	r3, r4, #16
 8000dae:	22d4      	movs	r2, #212	@ 0xd4
 8000db0:	4619      	mov	r1, r3
 8000db2:	f004 f95d 	bl	8005070 <memcpy>
 8000db6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dba:	f7ff fb5d 	bl	8000478 <BQ_ReadCommandAsShort>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	687c      	ldr	r4, [r7, #4]
 8000dc2:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000dc4:	4668      	mov	r0, sp
 8000dc6:	f104 0310 	add.w	r3, r4, #16
 8000dca:	22d4      	movs	r2, #212	@ 0xd4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f004 f94f 	bl	8005070 <memcpy>
 8000dd2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dd6:	f000 f907 	bl	8000fe8 <BQ_ParseManufacturingStatus>
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000ac 	.word	0x200000ac

08000de8 <decimalToBinary>:
 * @param value decimal value
 * @param array array to write
 * @param count array size
 */
void decimalToBinary(uint32_t value, uint8_t *array, uint8_t count)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	4613      	mov	r3, r2
 8000df4:	71fb      	strb	r3, [r7, #7]
	uint8_t currentCount = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000dfa:	e00e      	b.n	8000e1a <decimalToBinary+0x32>
	{
		array[currentCount] = value % 2;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	440b      	add	r3, r1
 8000e06:	f002 0201 	and.w	r2, r2, #1
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	701a      	strb	r2, [r3, #0]
		value /= 2;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	085b      	lsrs	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
		currentCount++;
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	3301      	adds	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
	while (value > 0)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ed      	bne.n	8000dfc <decimalToBinary+0x14>
	}

	while (currentCount < count)
 8000e20:	e007      	b.n	8000e32 <decimalToBinary+0x4a>
	{
		array[currentCount] = 0;
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	4413      	add	r3, r2
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
		currentCount++;
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	75fb      	strb	r3, [r7, #23]
	while (currentCount < count)
 8000e32:	7dfa      	ldrb	r2, [r7, #23]
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d3f3      	bcc.n	8000e22 <decimalToBinary+0x3a>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <BQ_ParseAllFlags>:
					  uint16_t batteryMode,
					  uint8_t gpio,
					  uint16_t manStatus,
					  uint32_t chargeStatus,
					  uint32_t gaugStatus)
{
 8000e48:	b084      	sub	sp, #16
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b0b6      	sub	sp, #216	@ 0xd8
 8000e4e:	af36      	add	r7, sp, #216	@ 0xd8
 8000e50:	f107 0c08 	add.w	ip, r7, #8
 8000e54:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	BQ_ParseOperationStatus(&BMS, opStatus);
 8000e58:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8000e5c:	f107 0008 	add.w	r0, r7, #8
 8000e60:	f000 f860 	bl	8000f24 <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(BMS, chargeStatus);
 8000e64:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8000e68:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000e6a:	4668      	mov	r0, sp
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	22d4      	movs	r2, #212	@ 0xd4
 8000e72:	4619      	mov	r1, r3
 8000e74:	f004 f8fc 	bl	8005070 <memcpy>
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7e:	f000 f85f 	bl	8000f40 <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(BMS, gaugStatus);
 8000e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000e86:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000e88:	4668      	mov	r0, sp
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	22d4      	movs	r2, #212	@ 0xd4
 8000e90:	4619      	mov	r1, r3
 8000e92:	f004 f8ed 	bl	8005070 <memcpy>
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9c:	f000 f865 	bl	8000f6a <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(BMS, batteryStatus);
 8000ea0:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8000ea4:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000ea6:	4668      	mov	r0, sp
 8000ea8:	f107 0318 	add.w	r3, r7, #24
 8000eac:	22d4      	movs	r2, #212	@ 0xd4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f004 f8de 	bl	8005070 <memcpy>
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eba:	f000 f86b 	bl	8000f94 <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(BMS, manStatus);
 8000ebe:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8000ec2:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000ec4:	4668      	mov	r0, sp
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	22d4      	movs	r2, #212	@ 0xd4
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f004 f8cf 	bl	8005070 <memcpy>
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed8:	f000 f886 	bl	8000fe8 <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(BMS, batteryMode);
 8000edc:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 8000ee0:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000ee2:	4668      	mov	r0, sp
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	22d4      	movs	r2, #212	@ 0xd4
 8000eea:	4619      	mov	r1, r3
 8000eec:	f004 f8c0 	bl	8005070 <memcpy>
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef6:	f000 f862 	bl	8000fbe <BQ_ParseBatteryMode>
	BQ_ParseGpio(BMS, gpio);
 8000efa:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8000efe:	9335      	str	r3, [sp, #212]	@ 0xd4
 8000f00:	4668      	mov	r0, sp
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	22d4      	movs	r2, #212	@ 0xd4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f004 f8b1 	bl	8005070 <memcpy>
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f14:	f000 f87d 	bl	8001012 <BQ_ParseGpio>
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(BQ_data* BMS, uint32_t raw)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_opStatus
	//	decimalToBinary(raw, BMS.BQ_opStatus, 32);
	BMS->BQ_opStatus.all = raw;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	605a      	str	r2, [r3, #4]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(BQ_data BMS, uint32_t raw)
{
 8000f40:	b084      	sub	sp, #16
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	f107 0c08 	add.w	ip, r7, #8
 8000f4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_chargeStatus
	decimalToBinary(raw, BMS.BQ_chargeStatus, 32);
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	2220      	movs	r2, #32
 8000f54:	4619      	mov	r1, r3
 8000f56:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000f5a:	f7ff ff45 	bl	8000de8 <decimalToBinary>
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f66:	b004      	add	sp, #16
 8000f68:	4770      	bx	lr

08000f6a <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(BQ_data BMS, uint32_t raw)
{
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	f107 0c08 	add.w	ip, r7, #8
 8000f74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_gaugeStatus
	decimalToBinary(raw, BMS.BQ_gaugeStatus, 32);
 8000f78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000f84:	f7ff ff30 	bl	8000de8 <decimalToBinary>
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(BQ_data BMS, uint16_t raw)
{
 8000f94:	b084      	sub	sp, #16
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	f107 0c08 	add.w	ip, r7, #8
 8000f9e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_batteryStatus
	decimalToBinary(raw, BMS.BQ_batteryStatus, 16);
 8000fa2:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000fa6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000faa:	2210      	movs	r2, #16
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff1b 	bl	8000de8 <decimalToBinary>
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fba:	b004      	add	sp, #16
 8000fbc:	4770      	bx	lr

08000fbe <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(BQ_data BMS, uint16_t raw)
{
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	f107 0c08 	add.w	ip, r7, #8
 8000fc8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_batteryMode
	decimalToBinary(raw, BMS.BQ_batteryMode, 16);
 8000fcc:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000fd0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff06 	bl	8000de8 <decimalToBinary>
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fe4:	b004      	add	sp, #16
 8000fe6:	4770      	bx	lr

08000fe8 <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(BQ_data BMS, uint16_t raw)
{
 8000fe8:	b084      	sub	sp, #16
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	f107 0c08 	add.w	ip, r7, #8
 8000ff2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	decimalToBinary(raw, BMS.BQ_manufacturingStatus, 16);
 8000ff6:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8000ffa:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000ffe:	2210      	movs	r2, #16
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fef1 	bl	8000de8 <decimalToBinary>
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800100e:	b004      	add	sp, #16
 8001010:	4770      	bx	lr

08001012 <BQ_ParseGpio>:

void BQ_ParseGpio(BQ_data BMS, uint8_t raw)
{
 8001012:	b084      	sub	sp, #16
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
 8001018:	f107 0c08 	add.w	ip, r7, #8
 800101c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//convert to binary array and save in BQ_gpio
	decimalToBinary(raw, BMS.BQ_gpio, 8);
 8001020:	f897 30ec 	ldrb.w	r3, [r7, #236]	@ 0xec
 8001024:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8001028:	2208      	movs	r2, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fedc 	bl	8000de8 <decimalToBinary>
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr

0800103c <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(BQ_data BMS)
{
 800103c:	b084      	sub	sp, #16
 800103e:	b490      	push	{r4, r7}
 8001040:	af00      	add	r7, sp, #0
 8001042:	f107 0408 	add.w	r4, r7, #8
 8001046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (BMS.BQ_opStatus.bits.sec1 && BMS.BQ_opStatus.bits.sec0){
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <BQ_GetSecurityMode+0x2a>
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <BQ_GetSecurityMode+0x2a>
        return SEALED;//11
 8001062:	2300      	movs	r3, #0
 8001064:	e01c      	b.n	80010a0 <BQ_GetSecurityMode+0x64>
    }else if (BMS.BQ_opStatus.bits.sec1 && !BMS.BQ_opStatus.bits.sec0){
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <BQ_GetSecurityMode+0x46>
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <BQ_GetSecurityMode+0x46>
        return UNSEALED;//10
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <BQ_GetSecurityMode+0x64>
    }else if (!BMS.BQ_opStatus.bits.sec1 && BMS.BQ_opStatus.bits.sec0){
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d107      	bne.n	800109e <BQ_GetSecurityMode+0x62>
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <BQ_GetSecurityMode+0x62>
        return FULL_ACCESS;//01
 800109a:	2302      	movs	r3, #2
 800109c:	e000      	b.n	80010a0 <BQ_GetSecurityMode+0x64>
    }else{
        return RESERVED;//00
 800109e:	2303      	movs	r3, #3
    }
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc90      	pop	{r4, r7}
 80010a6:	b004      	add	sp, #16
 80010a8:	4770      	bx	lr
	...

080010ac <BQ_GetChargeMode>:
/**
 * @brief get charge from BQ_opStatus
 * @return CHARGE, DISCHARGE or RELAX
 */
CHARGE_MODE BQ_GetChargeMode(BQ_data BMS)
{
 80010ac:	b084      	sub	sp, #16
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b0b8      	sub	sp, #224	@ 0xe0
 80010b2:	af36      	add	r7, sp, #216	@ 0xd8
 80010b4:	f107 0c10 	add.w	ip, r7, #16
 80010b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    BQAction_UpdateOpStatus(&BMS);
 80010bc:	f107 0010 	add.w	r0, r7, #16
 80010c0:	f7ff fe46 	bl	8000d50 <BQAction_UpdateOpStatus>
    uint16_t packVoltage = BMS.BQ_daStatus1[10] | (BMS.BQ_daStatus1[11] << 8);
 80010c4:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	80fb      	strh	r3, [r7, #6]
    uint16_t current = I2CHelper_ReadRegisterAsShort(BMS.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	4a44      	ldr	r2, [pc, #272]	@ (80011ec <BQ_GetChargeMode+0x140>)
 80010dc:	7811      	ldrb	r1, [r2, #0]
 80010de:	220a      	movs	r2, #10
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fafd 	bl	80016e0 <I2CHelper_ReadRegisterAsShort>
 80010e6:	4603      	mov	r3, r0
 80010e8:	80bb      	strh	r3, [r7, #4]

    if (packVoltage > 1000 && BQ_IsChargeEnabled(BMS) && BQ_IsChargeFetEnabled(BMS) && BQ_IsChargeFetTestEnabled(BMS) && current > 0 && current < 30000){
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f0:	d936      	bls.n	8001160 <BQ_GetChargeMode+0xb4>
 80010f2:	4668      	mov	r0, sp
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	22d4      	movs	r2, #212	@ 0xd4
 80010fa:	4619      	mov	r1, r3
 80010fc:	f003 ffb8 	bl	8005070 <memcpy>
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001106:	f000 f8b2 	bl	800126e <BQ_IsChargeEnabled>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d027      	beq.n	8001160 <BQ_GetChargeMode+0xb4>
 8001110:	4668      	mov	r0, sp
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	22d4      	movs	r2, #212	@ 0xd4
 8001118:	4619      	mov	r1, r3
 800111a:	f003 ffa9 	bl	8005070 <memcpy>
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001124:	f000 f879 	bl	800121a <BQ_IsChargeFetEnabled>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d018      	beq.n	8001160 <BQ_GetChargeMode+0xb4>
 800112e:	4668      	mov	r0, sp
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	22d4      	movs	r2, #212	@ 0xd4
 8001136:	4619      	mov	r1, r3
 8001138:	f003 ff9a 	bl	8005070 <memcpy>
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001142:	f000 f8d1 	bl	80012e8 <BQ_IsChargeFetTestEnabled>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <BQ_GetChargeMode+0xb4>
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <BQ_GetChargeMode+0xb4>
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001158:	4293      	cmp	r3, r2
 800115a:	d801      	bhi.n	8001160 <BQ_GetChargeMode+0xb4>
        return CHARGE;
 800115c:	2301      	movs	r3, #1
 800115e:	e03e      	b.n	80011de <BQ_GetChargeMode+0x132>
    }else if (packVoltage > 1000 && BQ_IsDischargeEnabled(BMS) && BQ_IsDischargeFetEnabled(BMS) && BQ_IsDischargeFetTestEnabled(BMS) && 65535 - current > 0 && current > 30000){
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001166:	d939      	bls.n	80011dc <BQ_GetChargeMode+0x130>
 8001168:	4668      	mov	r0, sp
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	22d4      	movs	r2, #212	@ 0xd4
 8001170:	4619      	mov	r1, r3
 8001172:	f003 ff7d 	bl	8005070 <memcpy>
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	f000 f862 	bl	8001244 <BQ_IsDischargeEnabled>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d02a      	beq.n	80011dc <BQ_GetChargeMode+0x130>
 8001186:	4668      	mov	r0, sp
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	22d4      	movs	r2, #212	@ 0xd4
 800118e:	4619      	mov	r1, r3
 8001190:	f003 ff6e 	bl	8005070 <memcpy>
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119a:	f000 f829 	bl	80011f0 <BQ_IsDischargeFetEnabled>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01b      	beq.n	80011dc <BQ_GetChargeMode+0x130>
 80011a4:	4668      	mov	r0, sp
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	22d4      	movs	r2, #212	@ 0xd4
 80011ac:	4619      	mov	r1, r3
 80011ae:	f003 ff5f 	bl	8005070 <memcpy>
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b8:	f000 f8a9 	bl	800130e <BQ_IsDischargeFetTestEnabled>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00c      	beq.n	80011dc <BQ_GetChargeMode+0x130>
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80011c8:	33ff      	adds	r3, #255	@ 0xff
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dd06      	ble.n	80011dc <BQ_GetChargeMode+0x130>
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	f247 5230 	movw	r2, #30000	@ 0x7530
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d901      	bls.n	80011dc <BQ_GetChargeMode+0x130>
        return DISCHARGE;
 80011d8:	2302      	movs	r3, #2
 80011da:	e000      	b.n	80011de <BQ_GetChargeMode+0x132>
    }else{
        return RELAX;
 80011dc:	2300      	movs	r3, #0
    }
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011e8:	b004      	add	sp, #16
 80011ea:	4770      	bx	lr
 80011ec:	20000000 	.word	0x20000000

080011f0 <BQ_IsDischargeFetEnabled>:
//
//    return result;
//}

bool BQ_IsDischargeFetEnabled(BQ_data BMS)
{
 80011f0:	b084      	sub	sp, #16
 80011f2:	b490      	push	{r4, r7}
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	f107 0408 	add.w	r4, r7, #8
 80011fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus.bits.dsg;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bc90      	pop	{r4, r7}
 8001216:	b004      	add	sp, #16
 8001218:	4770      	bx	lr

0800121a <BQ_IsChargeFetEnabled>:

bool BQ_IsChargeFetEnabled(BQ_data BMS)
{
 800121a:	b084      	sub	sp, #16
 800121c:	b490      	push	{r4, r7}
 800121e:	af00      	add	r7, sp, #0
 8001220:	f107 0408 	add.w	r4, r7, #8
 8001224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus.bits.chg;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf14      	ite	ne
 8001234:	2301      	movne	r3, #1
 8001236:	2300      	moveq	r3, #0
 8001238:	b2db      	uxtb	r3, r3
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc90      	pop	{r4, r7}
 8001240:	b004      	add	sp, #16
 8001242:	4770      	bx	lr

08001244 <BQ_IsDischargeEnabled>:
{
    return BMS.BQ_opStatus.bits.pdsg;
}

bool BQ_IsDischargeEnabled(BQ_data BMS)
{
 8001244:	b084      	sub	sp, #16
 8001246:	b490      	push	{r4, r7}
 8001248:	af00      	add	r7, sp, #0
 800124a:	f107 0408 	add.w	r4, r7, #8
 800124e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus.bits.xdsg;
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	bf14      	ite	ne
 800125e:	2301      	movne	r3, #1
 8001260:	2300      	moveq	r3, #0
 8001262:	b2db      	uxtb	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc90      	pop	{r4, r7}
 800126a:	b004      	add	sp, #16
 800126c:	4770      	bx	lr

0800126e <BQ_IsChargeEnabled>:

bool BQ_IsChargeEnabled(BQ_data BMS)
{
 800126e:	b084      	sub	sp, #16
 8001270:	b490      	push	{r4, r7}
 8001272:	af00      	add	r7, sp, #0
 8001274:	f107 0408 	add.w	r4, r7, #8
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus.bits.xchg;
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bc90      	pop	{r4, r7}
 8001294:	b004      	add	sp, #16
 8001296:	4770      	bx	lr

08001298 <BQ_IsLedEnabled>:

bool BQ_IsLedEnabled(BQ_data BMS)
{
 8001298:	b084      	sub	sp, #16
 800129a:	b490      	push	{r4, r7}
 800129c:	af00      	add	r7, sp, #0
 800129e:	f107 0408 	add.w	r4, r7, #8
 80012a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_opStatus.bits.led;
 80012a6:	7b7b      	ldrb	r3, [r7, #13]
 80012a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf14      	ite	ne
 80012b2:	2301      	movne	r3, #1
 80012b4:	2300      	moveq	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc90      	pop	{r4, r7}
 80012be:	b004      	add	sp, #16
 80012c0:	4770      	bx	lr

080012c2 <BQ_IsPreChargeFetTestEnabled>:

bool BQ_IsPreChargeFetTestEnabled(BQ_data BMS)
{
 80012c2:	b084      	sub	sp, #16
 80012c4:	b490      	push	{r4, r7}
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	f107 0408 	add.w	r4, r7, #8
 80012cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[0];
 80012d0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf14      	ite	ne
 80012d8:	2301      	movne	r3, #1
 80012da:	2300      	moveq	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc90      	pop	{r4, r7}
 80012e4:	b004      	add	sp, #16
 80012e6:	4770      	bx	lr

080012e8 <BQ_IsChargeFetTestEnabled>:

bool BQ_IsChargeFetTestEnabled(BQ_data BMS)
{
 80012e8:	b084      	sub	sp, #16
 80012ea:	b490      	push	{r4, r7}
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	f107 0408 	add.w	r4, r7, #8
 80012f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[1];
 80012f6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	bc90      	pop	{r4, r7}
 800130a:	b004      	add	sp, #16
 800130c:	4770      	bx	lr

0800130e <BQ_IsDischargeFetTestEnabled>:

bool BQ_IsDischargeFetTestEnabled(BQ_data BMS)
{
 800130e:	b084      	sub	sp, #16
 8001310:	b490      	push	{r4, r7}
 8001312:	af00      	add	r7, sp, #0
 8001314:	f107 0408 	add.w	r4, r7, #8
 8001318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[2];
 800131c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc90      	pop	{r4, r7}
 8001330:	b004      	add	sp, #16
 8001332:	4770      	bx	lr

08001334 <BQ_IsManufacturingGaugingEnabled>:

bool BQ_IsManufacturingGaugingEnabled(BQ_data BMS)
{
 8001334:	b084      	sub	sp, #16
 8001336:	b490      	push	{r4, r7}
 8001338:	af00      	add	r7, sp, #0
 800133a:	f107 0408 	add.w	r4, r7, #8
 800133e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[3];
 8001342:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf14      	ite	ne
 800134a:	2301      	movne	r3, #1
 800134c:	2300      	moveq	r3, #0
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bc90      	pop	{r4, r7}
 8001356:	b004      	add	sp, #16
 8001358:	4770      	bx	lr

0800135a <BQ_IsManufacturingAllFetEnabled>:
/**
 * @brief function shows fet control
 * @return 0 if fet control enabled, 1 if fet control disabled
 */
bool BQ_IsManufacturingAllFetEnabled(BQ_data BMS)
{
 800135a:	b084      	sub	sp, #16
 800135c:	b490      	push	{r4, r7}
 800135e:	af00      	add	r7, sp, #0
 8001360:	f107 0408 	add.w	r4, r7, #8
 8001364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[4];
 8001368:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf14      	ite	ne
 8001370:	2301      	movne	r3, #1
 8001372:	2300      	moveq	r3, #0
 8001374:	b2db      	uxtb	r3, r3
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	bc90      	pop	{r4, r7}
 800137c:	b004      	add	sp, #16
 800137e:	4770      	bx	lr

08001380 <BQ_IsManufacturingLifetimeEnabled>:

bool BQ_IsManufacturingLifetimeEnabled(BQ_data BMS)
{
 8001380:	b084      	sub	sp, #16
 8001382:	b490      	push	{r4, r7}
 8001384:	af00      	add	r7, sp, #0
 8001386:	f107 0408 	add.w	r4, r7, #8
 800138a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[5];
 800138e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8001392:	2b00      	cmp	r3, #0
 8001394:	bf14      	ite	ne
 8001396:	2301      	movne	r3, #1
 8001398:	2300      	moveq	r3, #0
 800139a:	b2db      	uxtb	r3, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc90      	pop	{r4, r7}
 80013a2:	b004      	add	sp, #16
 80013a4:	4770      	bx	lr

080013a6 <BQ_IsManufacturingPermanentFailureEnabled>:

bool BQ_IsManufacturingPermanentFailureEnabled(BQ_data BMS)
{
 80013a6:	b084      	sub	sp, #16
 80013a8:	b490      	push	{r4, r7}
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	f107 0408 	add.w	r4, r7, #8
 80013b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[6];
 80013b4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc90      	pop	{r4, r7}
 80013c8:	b004      	add	sp, #16
 80013ca:	4770      	bx	lr

080013cc <BQ_IsManufacturingFuseEnabled>:

bool BQ_IsManufacturingFuseEnabled(BQ_data BMS)
{
 80013cc:	b084      	sub	sp, #16
 80013ce:	b490      	push	{r4, r7}
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	f107 0408 	add.w	r4, r7, #8
 80013d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[8];
 80013da:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	2300      	moveq	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc90      	pop	{r4, r7}
 80013ee:	b004      	add	sp, #16
 80013f0:	4770      	bx	lr

080013f2 <BQ_IsPreDischargeFetTestEnabled>:

bool BQ_IsPreDischargeFetTestEnabled(BQ_data BMS)
{
 80013f2:	b084      	sub	sp, #16
 80013f4:	b490      	push	{r4, r7}
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f107 0408 	add.w	r4, r7, #8
 80013fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[13];
 8001400:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	bc90      	pop	{r4, r7}
 8001414:	b004      	add	sp, #16
 8001416:	4770      	bx	lr

08001418 <BQ_IsManufacturingCalibrationEnabled>:

bool BQ_IsManufacturingCalibrationEnabled(BQ_data BMS)
{
 8001418:	b084      	sub	sp, #16
 800141a:	b490      	push	{r4, r7}
 800141c:	af00      	add	r7, sp, #0
 800141e:	f107 0408 	add.w	r4, r7, #8
 8001422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return BMS.BQ_manufacturingStatus[15];
 8001426:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc90      	pop	{r4, r7}
 800143a:	b004      	add	sp, #16
 800143c:	4770      	bx	lr
	...

08001440 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	@ 0x28
 8001444:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001456:	4b49      	ldr	r3, [pc, #292]	@ (800157c <MX_GPIO_Init+0x13c>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	4a48      	ldr	r2, [pc, #288]	@ (800157c <MX_GPIO_Init+0x13c>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001462:	4b46      	ldr	r3, [pc, #280]	@ (800157c <MX_GPIO_Init+0x13c>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	4b43      	ldr	r3, [pc, #268]	@ (800157c <MX_GPIO_Init+0x13c>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	4a42      	ldr	r2, [pc, #264]	@ (800157c <MX_GPIO_Init+0x13c>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147a:	4b40      	ldr	r3, [pc, #256]	@ (800157c <MX_GPIO_Init+0x13c>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <MX_GPIO_Init+0x13c>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a3c      	ldr	r2, [pc, #240]	@ (800157c <MX_GPIO_Init+0x13c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <MX_GPIO_Init+0x13c>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b37      	ldr	r3, [pc, #220]	@ (800157c <MX_GPIO_Init+0x13c>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a36      	ldr	r2, [pc, #216]	@ (800157c <MX_GPIO_Init+0x13c>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b34      	ldr	r3, [pc, #208]	@ (800157c <MX_GPIO_Init+0x13c>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	21b0      	movs	r1, #176	@ 0xb0
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f000 ff15 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c8:	482d      	ldr	r0, [pc, #180]	@ (8001580 <MX_GPIO_Init+0x140>)
 80014ca:	f000 ff0f 	bl	80022ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4827      	ldr	r0, [pc, #156]	@ (8001584 <MX_GPIO_Init+0x144>)
 80014e6:	f000 fd87 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014ea:	230c      	movs	r3, #12
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014fa:	2307      	movs	r3, #7
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001508:	f000 fd76 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800150c:	23b0      	movs	r3, #176	@ 0xb0
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001526:	f000 fd67 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800152a:	2340      	movs	r3, #64	@ 0x40
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001540:	f000 fd5a 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4808      	ldr	r0, [pc, #32]	@ (8001580 <MX_GPIO_Init+0x140>)
 800155e:	f000 fd4b 	bl	8001ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	210c      	movs	r1, #12
 8001566:	2028      	movs	r0, #40	@ 0x28
 8001568:	f000 fcc1 	bl	8001eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800156c:	2028      	movs	r0, #40	@ 0x28
 800156e:	f000 fcda 	bl	8001f26 <HAL_NVIC_EnableIRQ>

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	48000400 	.word	0x48000400
 8001584:	48000800 	.word	0x48000800

08001588 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_I2C1_Init+0x74>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <MX_I2C1_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_I2C1_Init+0x74>)
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <MX_I2C1_Init+0x7c>)
 8001596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_I2C1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c2:	480e      	ldr	r0, [pc, #56]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015c4:	f000 fedc 	bl	8002380 <HAL_I2C_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ce:	f000 fa60 	bl	8001a92 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015d2:	2100      	movs	r1, #0
 80015d4:	4809      	ldr	r0, [pc, #36]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015d6:	f002 fae7 	bl	8003ba8 <HAL_I2CEx_ConfigAnalogFilter>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015e0:	f000 fa57 	bl	8001a92 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015e4:	2100      	movs	r1, #0
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_I2C1_Init+0x74>)
 80015e8:	f002 fb29 	bl	8003c3e <HAL_I2CEx_ConfigDigitalFilter>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015f2:	f000 fa4e 	bl	8001a92 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000110 	.word	0x20000110
 8001600:	40005400 	.word	0x40005400
 8001604:	10909cec 	.word	0x10909cec

08001608 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0a2      	sub	sp, #136	@ 0x88
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2260      	movs	r2, #96	@ 0x60
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fcf5 	bl	8005018 <memset>
  if(i2cHandle->Instance==I2C1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a28      	ldr	r2, [pc, #160]	@ (80016d4 <HAL_I2C_MspInit+0xcc>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d148      	bne.n	80016ca <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001638:	2340      	movs	r3, #64	@ 0x40
 800163a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4618      	mov	r0, r3
 8001646:	f003 f9ab 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001650:	f000 fa1f 	bl	8001a92 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <HAL_I2C_MspInit+0xd0>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <HAL_I2C_MspInit+0xd0>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001660:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <HAL_I2C_MspInit+0xd0>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800166c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001670:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001672:	2312      	movs	r3, #18
 8001674:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001676:	2301      	movs	r3, #1
 8001678:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001680:	2304      	movs	r3, #4
 8001682:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800168a:	4619      	mov	r1, r3
 800168c:	4813      	ldr	r0, [pc, #76]	@ (80016dc <HAL_I2C_MspInit+0xd4>)
 800168e:	f000 fcb3 	bl	8001ff8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_I2C_MspInit+0xd0>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <HAL_I2C_MspInit+0xd0>)
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800169c:	6593      	str	r3, [r2, #88]	@ 0x58
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <HAL_I2C_MspInit+0xd0>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210a      	movs	r1, #10
 80016ae:	201f      	movs	r0, #31
 80016b0:	f000 fc1d 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016b4:	201f      	movs	r0, #31
 80016b6:	f000 fc36 	bl	8001f26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2109      	movs	r1, #9
 80016be:	2020      	movs	r0, #32
 80016c0:	f000 fc15 	bl	8001eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016c4:	2020      	movs	r0, #32
 80016c6:	f000 fc2e 	bl	8001f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016ca:	bf00      	nop
 80016cc:	3788      	adds	r7, #136	@ 0x88
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000400 	.word	0x48000400

080016e0 <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
 80016ec:	4613      	mov	r3, r2
 80016ee:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	78ba      	ldrb	r2, [r7, #2]
 80016f6:	78f9      	ldrb	r1, [r7, #3]
 80016f8:	2002      	movs	r0, #2
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f82a 	bl	8001756 <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8001706:	7b3b      	ldrb	r3, [r7, #12]
 8001708:	461a      	mov	r2, r3
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	4313      	orrs	r3, r2
 800170e:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8001710:	7b7b      	ldrb	r3, [r7, #13]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b21a      	sxth	r2, r3
 8001716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171a:	4313      	orrs	r3, r2
 800171c:	b21b      	sxth	r3, r3
 800171e:	81fb      	strh	r3, [r7, #14]

	return result;
 8001720:	89fb      	ldrh	r3, [r7, #14]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af02      	add	r7, sp, #8
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
 8001736:	4613      	mov	r3, r2
 8001738:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	78ba      	ldrb	r2, [r7, #2]
 8001740:	78f9      	ldrb	r1, [r7, #3]
 8001742:	2001      	movs	r0, #1
 8001744:	9000      	str	r0, [sp, #0]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f805 	bl	8001756 <I2CHelper_ReadRegister>

	return buf[0];
 800174c:	7b3b      	ldrb	r3, [r7, #12]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af02      	add	r7, sp, #8
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	72fb      	strb	r3, [r7, #11]
 8001764:	4613      	mov	r3, r2
 8001766:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	b29b      	uxth	r3, r3
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	b299      	uxth	r1, r3
 8001770:	f107 020a 	add.w	r2, r7, #10
 8001774:	2364      	movs	r3, #100	@ 0x64
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fe9c 	bl	80024b8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	b29b      	uxth	r3, r3
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	b299      	uxth	r1, r3
 8001788:	7e3b      	ldrb	r3, [r7, #24]
 800178a:	b29b      	uxth	r3, r3
 800178c:	2264      	movs	r2, #100	@ 0x64
 800178e:	9200      	str	r2, [sp, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 ffa8 	bl	80026e8 <HAL_I2C_Master_Receive>
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017b0:	d113      	bne.n	80017da <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_GPIO_EXTI_Callback+0x44>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bf14      	ite	ne
 80017ba:	2301      	movne	r3, #1
 80017bc:	2300      	moveq	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f083 0301 	eor.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_GPIO_EXTI_Callback+0x44>)
 80017ce:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80017d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017d4:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80017d6:	f000 fda1 	bl	800231c <HAL_GPIO_TogglePin>
  }
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000164 	.word	0x20000164
 80017e8:	48000400 	.word	0x48000400

080017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b0c3      	sub	sp, #268	@ 0x10c
 80017f0:	af38      	add	r7, sp, #224	@ 0xe0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f2:	f000 fa01 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f6:	f000 f8fb 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fa:	f7ff fe21 	bl	8001440 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017fe:	f7ff fec3 	bl	8001588 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Init(&hi2c1);
 8001802:	4877      	ldr	r0, [pc, #476]	@ (80019e0 <main+0x1f4>)
 8001804:	f000 fdbc 	bl	8002380 <HAL_I2C_Init>
  HAL_I2C_MspInit(&hi2c1);
 8001808:	4875      	ldr	r0, [pc, #468]	@ (80019e0 <main+0x1f4>)
 800180a:	f7ff fefd 	bl	8001608 <HAL_I2C_MspInit>
  status = false;
 800180e:	4b75      	ldr	r3, [pc, #468]	@ (80019e4 <main+0x1f8>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t current = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t percentage[2] = {0};
 800181c:	2300      	movs	r3, #0
 800181e:	843b      	strh	r3, [r7, #32]
  uint16_t cells[6] = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f8c3 2003 	str.w	r2, [r3, #3]
  BQ_Init(&hi2c1);
 8001844:	4866      	ldr	r0, [pc, #408]	@ (80019e0 <main+0x1f4>)
 8001846:	f7fe fcc1 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 800184a:	4c67      	ldr	r4, [pc, #412]	@ (80019e8 <main+0x1fc>)
 800184c:	2306      	movs	r3, #6
 800184e:	9337      	str	r3, [sp, #220]	@ 0xdc
 8001850:	463b      	mov	r3, r7
 8001852:	9336      	str	r3, [sp, #216]	@ 0xd8
 8001854:	2302      	movs	r3, #2
 8001856:	9335      	str	r3, [sp, #212]	@ 0xd4
 8001858:	4668      	mov	r0, sp
 800185a:	f104 0310 	add.w	r3, r4, #16
 800185e:	22d4      	movs	r2, #212	@ 0xd4
 8001860:	4619      	mov	r1, r3
 8001862:	f003 fc05 	bl	8005070 <memcpy>
 8001866:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800186a:	f7fe fd97 	bl	800039c <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 800186e:	20c8      	movs	r0, #200	@ 0xc8
 8001870:	f000 fa3e 	bl	8001cf0 <HAL_Delay>
	  BQAction_UpdateData(&BMS_1);
 8001874:	485c      	ldr	r0, [pc, #368]	@ (80019e8 <main+0x1fc>)
 8001876:	f7ff f997 	bl	8000ba8 <BQAction_UpdateData>
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_DA_STATUS_2, 16);
//	  BQ_ReadMABlockCommand(BMS_1, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
//	  BQ_ReadMABlockCommand(BQ40Z80_MFA_OUTPUT_CADC_CAL, BQ_outCal, 32);
	  voltage = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 800187a:	4b5b      	ldr	r3, [pc, #364]	@ (80019e8 <main+0x1fc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ec <main+0x200>)
 8001880:	7811      	ldrb	r1, [r2, #0]
 8001882:	2209      	movs	r2, #9
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff2b 	bl	80016e0 <I2CHelper_ReadRegisterAsShort>
 800188a:	4603      	mov	r3, r0
 800188c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  current = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);//TODO fix 1A = -400
 800188e:	4b56      	ldr	r3, [pc, #344]	@ (80019e8 <main+0x1fc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a56      	ldr	r2, [pc, #344]	@ (80019ec <main+0x200>)
 8001894:	7811      	ldrb	r1, [r2, #0]
 8001896:	220a      	movs	r2, #10
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff21 	bl	80016e0 <I2CHelper_ReadRegisterAsShort>
 800189e:	4603      	mov	r3, r0
 80018a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  percentage[0] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 80018a2:	4b51      	ldr	r3, [pc, #324]	@ (80019e8 <main+0x1fc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a51      	ldr	r2, [pc, #324]	@ (80019ec <main+0x200>)
 80018a8:	7811      	ldrb	r1, [r2, #0]
 80018aa:	220d      	movs	r2, #13
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff3c 	bl	800172a <I2CHelper_ReadRegisterAsChar>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f887 3020 	strb.w	r3, [r7, #32]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 80018b8:	4b4b      	ldr	r3, [pc, #300]	@ (80019e8 <main+0x1fc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a4b      	ldr	r2, [pc, #300]	@ (80019ec <main+0x200>)
 80018be:	7811      	ldrb	r1, [r2, #0]
 80018c0:	220e      	movs	r2, #14
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff31 	bl	800172a <I2CHelper_ReadRegisterAsChar>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1[0] | (BMS_1.BQ_daStatus1[1] << 8);
 80018ce:	4b46      	ldr	r3, [pc, #280]	@ (80019e8 <main+0x1fc>)
 80018d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	4b44      	ldr	r3, [pc, #272]	@ (80019e8 <main+0x1fc>)
 80018d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	82bb      	strh	r3, [r7, #20]
	  cells[1] = BMS_1.BQ_daStatus1[2] | (BMS_1.BQ_daStatus1[3] << 8);
 80018e8:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <main+0x1fc>)
 80018ea:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <main+0x1fc>)
 80018f2:	f893 3083 	ldrb.w	r3, [r3, #131]	@ 0x83
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	82fb      	strh	r3, [r7, #22]
	  cells[2] = BMS_1.BQ_daStatus1[4] | (BMS_1.BQ_daStatus1[5] << 8);
 8001902:	4b39      	ldr	r3, [pc, #228]	@ (80019e8 <main+0x1fc>)
 8001904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8001908:	b21a      	sxth	r2, r3
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <main+0x1fc>)
 800190c:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21b      	sxth	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b21b      	sxth	r3, r3
 8001918:	b29b      	uxth	r3, r3
 800191a:	833b      	strh	r3, [r7, #24]
	  cells[3] = BMS_1.BQ_daStatus1[6] | (BMS_1.BQ_daStatus1[7] << 8);
 800191c:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <main+0x1fc>)
 800191e:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <main+0x1fc>)
 8001926:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b21b      	sxth	r3, r3
 8001932:	b29b      	uxth	r3, r3
 8001934:	837b      	strh	r3, [r7, #26]
	  cells[4] = BMS_1.BQ_daStatus3[0] | (BMS_1.BQ_daStatus3[1] << 8);
 8001936:	4b2c      	ldr	r3, [pc, #176]	@ (80019e8 <main+0x1fc>)
 8001938:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <main+0x1fc>)
 8001940:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21b      	sxth	r3, r3
 8001948:	4313      	orrs	r3, r2
 800194a:	b21b      	sxth	r3, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	83bb      	strh	r3, [r7, #28]
	  cells[5] = BMS_1.BQ_daStatus3[6] | (BMS_1.BQ_daStatus3[7] << 8);
 8001950:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <main+0x1fc>)
 8001952:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8001956:	b21a      	sxth	r2, r3
 8001958:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <main+0x1fc>)
 800195a:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	b21b      	sxth	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b21b      	sxth	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	83fb      	strh	r3, [r7, #30]

	  // -----toggle fets--------
	  if(status){
 800196a:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <main+0x1f8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <main+0x1a0>
		  BQAction_EnableDischarging(BMS_1);
 8001972:	4c1d      	ldr	r4, [pc, #116]	@ (80019e8 <main+0x1fc>)
 8001974:	4668      	mov	r0, sp
 8001976:	f104 0310 	add.w	r3, r4, #16
 800197a:	22d4      	movs	r2, #212	@ 0xd4
 800197c:	4619      	mov	r1, r3
 800197e:	f003 fb77 	bl	8005070 <memcpy>
 8001982:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001986:	f7fe ff5d 	bl	8000844 <BQAction_EnableDischarging>
 800198a:	e00b      	b.n	80019a4 <main+0x1b8>
	  }else{
		  BQAction_DisableFets(BMS_1);
 800198c:	4c16      	ldr	r4, [pc, #88]	@ (80019e8 <main+0x1fc>)
 800198e:	4668      	mov	r0, sp
 8001990:	f104 0310 	add.w	r3, r4, #16
 8001994:	22d4      	movs	r2, #212	@ 0xd4
 8001996:	4619      	mov	r1, r3
 8001998:	f003 fb6a 	bl	8005070 <memcpy>
 800199c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019a0:	f7ff f819 	bl	80009d6 <BQAction_DisableFets>
	  }
	  fun[0] = BQ_IsDischargeFetEnabled(BMS_1);
 80019a4:	4c10      	ldr	r4, [pc, #64]	@ (80019e8 <main+0x1fc>)
 80019a6:	4668      	mov	r0, sp
 80019a8:	f104 0310 	add.w	r3, r4, #16
 80019ac:	22d4      	movs	r2, #212	@ 0xd4
 80019ae:	4619      	mov	r1, r3
 80019b0:	f003 fb5e 	bl	8005070 <memcpy>
 80019b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019b8:	f7ff fc1a 	bl	80011f0 <BQ_IsDischargeFetEnabled>
 80019bc:	4603      	mov	r3, r0
 80019be:	733b      	strb	r3, [r7, #12]
	  fun[1] = BQ_IsDischargeEnabled(BMS_1);
 80019c0:	4c09      	ldr	r4, [pc, #36]	@ (80019e8 <main+0x1fc>)
 80019c2:	4668      	mov	r0, sp
 80019c4:	f104 0310 	add.w	r3, r4, #16
 80019c8:	22d4      	movs	r2, #212	@ 0xd4
 80019ca:	4619      	mov	r1, r3
 80019cc:	f003 fb50 	bl	8005070 <memcpy>
 80019d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80019d4:	f7ff fc36 	bl	8001244 <BQ_IsDischargeEnabled>
 80019d8:	4603      	mov	r3, r0
 80019da:	737b      	strb	r3, [r7, #13]
	  HAL_Delay(200);
 80019dc:	e747      	b.n	800186e <main+0x82>
 80019de:	bf00      	nop
 80019e0:	20000110 	.word	0x20000110
 80019e4:	20000164 	.word	0x20000164
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	20000000 	.word	0x20000000

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b096      	sub	sp, #88	@ 0x58
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	2244      	movs	r2, #68	@ 0x44
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fb0a 	bl	8005018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a12:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a16:	f002 f96d 	bl	8003cf4 <HAL_PWREx_ControlVoltageScaling>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a20:	f000 f837 	bl	8001a92 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a24:	2302      	movs	r3, #2
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a2c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a2e:	2310      	movs	r3, #16
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a36:	2302      	movs	r3, #2
 8001a38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001a3e:	230a      	movs	r3, #10
 8001a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a42:	2307      	movs	r3, #7
 8001a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a46:	2302      	movs	r3, #2
 8001a48:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 f9a4 	bl	8003da0 <HAL_RCC_OscConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a5e:	f000 f818 	bl	8001a92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a62:	230f      	movs	r3, #15
 8001a64:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a66:	2303      	movs	r3, #3
 8001a68:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a76:	463b      	mov	r3, r7
 8001a78:	2104      	movs	r1, #4
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 fda4 	bl	80045c8 <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a86:	f000 f804 	bl	8001a92 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3758      	adds	r7, #88	@ 0x58
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a96:	b672      	cpsid	i
}
 8001a98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9a:	bf00      	nop
 8001a9c:	e7fd      	b.n	8001a9a <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <MemManage_Handler+0x4>

08001b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3e:	f000 f8b7 	bl	8001cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <I2C1_EV_IRQHandler+0x10>)
 8001b4e:	f000 ffad 	bl	8002aac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000110 	.word	0x20000110

08001b5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <I2C1_ER_IRQHandler+0x10>)
 8001b62:	f000 ffbd 	bl	8002ae0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000110 	.word	0x20000110

08001b70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b78:	f000 fbea 	bl	8002350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <SystemInit+0x20>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <SystemInit+0x20>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff ffea 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480c      	ldr	r0, [pc, #48]	@ (8001be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bae:	490d      	ldr	r1, [pc, #52]	@ (8001be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <LoopForever+0xe>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf0 <LoopForever+0x16>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f003 fa29 	bl	8005028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bd6:	f7ff fe09 	bl	80017ec <main>

08001bda <LoopForever>:

LoopForever:
    b LoopForever
 8001bda:	e7fe      	b.n	8001bda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001be8:	080050ec 	.word	0x080050ec
  ldr r2, =_sbss
 8001bec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001bf0:	2000016c 	.word	0x2000016c

08001bf4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_Init+0x3c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_Init+0x3c>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0e:	2003      	movs	r0, #3
 8001c10:	f000 f962 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c14:	2000      	movs	r0, #0
 8001c16:	f000 f80f 	bl	8001c38 <HAL_InitTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	71fb      	strb	r3, [r7, #7]
 8001c24:	e001      	b.n	8001c2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c26:	f7ff ff3b 	bl	8001aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c44:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <HAL_InitTick+0x6c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d023      	beq.n	8001c94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <HAL_InitTick+0x70>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_InitTick+0x6c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f96d 	bl	8001f42 <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d809      	bhi.n	8001c88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 f937 	bl	8001eee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c80:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <HAL_InitTick+0x74>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e007      	b.n	8001c98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e004      	b.n	8001c98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	e001      	b.n	8001c98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000000c 	.word	0x2000000c
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	20000008 	.word	0x20000008

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000000c 	.word	0x2000000c
 8001cd4:	20000168 	.word	0x20000168

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000168 	.word	0x20000168

08001cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf8:	f7ff ffee 	bl	8001cd8 <HAL_GetTick>
 8001cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d005      	beq.n	8001d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_Delay+0x44>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d16:	bf00      	nop
 8001d18:	f7ff ffde 	bl	8001cd8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d8f7      	bhi.n	8001d18 <HAL_Delay+0x28>
  {
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000000c 	.word	0x2000000c

08001d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	@ (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	@ (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	@ (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	@ 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff8e 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff29 	bl	8001d38 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff3e 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff8e 	bl	8001e2c <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff31 	bl	8001d9c <__NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff ffa2 	bl	8001e94 <SysTick_Config>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d005      	beq.n	8001f7e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e029      	b.n	8001fd2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 020e 	bic.w	r2, r2, #14
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f003 021c 	and.w	r2, r3, #28
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
    }
  }
  return status;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fea:	b2db      	uxtb	r3, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	e154      	b.n	80022b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 8146 	beq.w	80022ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d005      	beq.n	8002038 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d130      	bne.n	800209a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	2203      	movs	r2, #3
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800206e:	2201      	movs	r2, #1
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	f003 0201 	and.w	r2, r3, #1
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d017      	beq.n	80020d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d123      	bne.n	800212a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	08da      	lsrs	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3208      	adds	r2, #8
 80020ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	6939      	ldr	r1, [r7, #16]
 8002126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2203      	movs	r2, #3
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0203 	and.w	r2, r3, #3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80a0 	beq.w	80022ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216c:	4b58      	ldr	r3, [pc, #352]	@ (80022d0 <HAL_GPIO_Init+0x2d8>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002170:	4a57      	ldr	r2, [pc, #348]	@ (80022d0 <HAL_GPIO_Init+0x2d8>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6613      	str	r3, [r2, #96]	@ 0x60
 8002178:	4b55      	ldr	r3, [pc, #340]	@ (80022d0 <HAL_GPIO_Init+0x2d8>)
 800217a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002184:	4a53      	ldr	r2, [pc, #332]	@ (80022d4 <HAL_GPIO_Init+0x2dc>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021ae:	d019      	beq.n	80021e4 <HAL_GPIO_Init+0x1ec>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a49      	ldr	r2, [pc, #292]	@ (80022d8 <HAL_GPIO_Init+0x2e0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d013      	beq.n	80021e0 <HAL_GPIO_Init+0x1e8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a48      	ldr	r2, [pc, #288]	@ (80022dc <HAL_GPIO_Init+0x2e4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00d      	beq.n	80021dc <HAL_GPIO_Init+0x1e4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a47      	ldr	r2, [pc, #284]	@ (80022e0 <HAL_GPIO_Init+0x2e8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a46      	ldr	r2, [pc, #280]	@ (80022e4 <HAL_GPIO_Init+0x2ec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_GPIO_Init+0x1dc>
 80021d0:	2304      	movs	r3, #4
 80021d2:	e008      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021d4:	2307      	movs	r3, #7
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021d8:	2303      	movs	r3, #3
 80021da:	e004      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021dc:	2302      	movs	r3, #2
 80021de:	e002      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e4:	2300      	movs	r3, #0
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	4093      	lsls	r3, r2
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021f6:	4937      	ldr	r1, [pc, #220]	@ (80022d4 <HAL_GPIO_Init+0x2dc>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002204:	4b38      	ldr	r3, [pc, #224]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002228:	4a2f      	ldr	r2, [pc, #188]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800222e:	4b2e      	ldr	r3, [pc, #184]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002252:	4a25      	ldr	r2, [pc, #148]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002258:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800227c:	4a1a      	ldr	r2, [pc, #104]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002282:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a6:	4a10      	ldr	r2, [pc, #64]	@ (80022e8 <HAL_GPIO_Init+0x2f0>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f aea3 	bne.w	8002008 <HAL_GPIO_Init+0x10>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000
 80022d8:	48000400 	.word	0x48000400
 80022dc:	48000800 	.word	0x48000800
 80022e0:	48000c00 	.word	0x48000c00
 80022e4:	48001000 	.word	0x48001000
 80022e8:	40010400 	.word	0x40010400

080022ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	807b      	strh	r3, [r7, #2]
 80022f8:	4613      	mov	r3, r2
 80022fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022fc:	787b      	ldrb	r3, [r7, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002308:	e002      	b.n	8002310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43d9      	mvns	r1, r3
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	400b      	ands	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800235a:	4b08      	ldr	r3, [pc, #32]	@ (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002366:	4a05      	ldr	r2, [pc, #20]	@ (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fa16 	bl	80017a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e08d      	b.n	80024ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff f92e 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	@ 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e006      	b.n	8002408 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002406:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d108      	bne.n	8002422 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	e007      	b.n	8002432 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002430:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69d9      	ldr	r1, [r3, #28]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	f040 80fd 	bne.w	80026d4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_I2C_Master_Transmit+0x30>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0f6      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x21e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024f0:	f7ff fbf2 	bl	8001cd8 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2319      	movs	r3, #25
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f001 f871 	bl	80035ea <I2C_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0e1      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2221      	movs	r2, #33	@ 0x21
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2210      	movs	r2, #16
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	2bff      	cmp	r3, #255	@ 0xff
 8002542:	d906      	bls.n	8002552 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	22ff      	movs	r2, #255	@ 0xff
 8002548:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800254a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e007      	b.n	8002562 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800255c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002560:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d024      	beq.n	80025b4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	8979      	ldrh	r1, [r7, #10]
 80025a6:	4b4e      	ldr	r3, [pc, #312]	@ (80026e0 <HAL_I2C_Master_Transmit+0x228>)
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f001 fa6b 	bl	8003a88 <I2C_TransferConfig>
 80025b2:	e066      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	8979      	ldrh	r1, [r7, #10]
 80025bc:	4b48      	ldr	r3, [pc, #288]	@ (80026e0 <HAL_I2C_Master_Transmit+0x228>)
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f001 fa60 	bl	8003a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80025c8:	e05b      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f001 f864 	bl	800369c <I2C_WaitOnTXISFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07b      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d034      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x1ca>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d130      	bne.n	8002682 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2200      	movs	r2, #0
 8002628:	2180      	movs	r1, #128	@ 0x80
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 ffdd 	bl	80035ea <I2C_WaitOnFlagUntilTimeout>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e04d      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	2bff      	cmp	r3, #255	@ 0xff
 8002642:	d90e      	bls.n	8002662 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	22ff      	movs	r2, #255	@ 0xff
 8002648:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264e:	b2da      	uxtb	r2, r3
 8002650:	8979      	ldrh	r1, [r7, #10]
 8002652:	2300      	movs	r3, #0
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f001 fa14 	bl	8003a88 <I2C_TransferConfig>
 8002660:	e00f      	b.n	8002682 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002670:	b2da      	uxtb	r2, r3
 8002672:	8979      	ldrh	r1, [r7, #10]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f001 fa03 	bl	8003a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d19e      	bne.n	80025ca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f001 f84a 	bl	800372a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01a      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <HAL_I2C_Master_Transmit+0x22c>)
 80026b4:	400b      	ands	r3, r1
 80026b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e000      	b.n	80026d6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
  }
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	80002000 	.word	0x80002000
 80026e4:	fe00e800 	.word	0xfe00e800

080026e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	461a      	mov	r2, r3
 80026f4:	460b      	mov	r3, r1
 80026f6:	817b      	strh	r3, [r7, #10]
 80026f8:	4613      	mov	r3, r2
 80026fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	f040 80db 	bne.w	80028c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_I2C_Master_Receive+0x30>
 8002714:	2302      	movs	r3, #2
 8002716:	e0d4      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002720:	f7ff fada 	bl	8001cd8 <HAL_GetTick>
 8002724:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2319      	movs	r3, #25
 800272c:	2201      	movs	r2, #1
 800272e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 ff59 	bl	80035ea <I2C_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0bf      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2222      	movs	r2, #34	@ 0x22
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2210      	movs	r2, #16
 800274e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	893a      	ldrh	r2, [r7, #8]
 8002762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	2bff      	cmp	r3, #255	@ 0xff
 8002772:	d90e      	bls.n	8002792 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	b2da      	uxtb	r2, r3
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	4b52      	ldr	r3, [pc, #328]	@ (80028cc <HAL_I2C_Master_Receive+0x1e4>)
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f001 f97c 	bl	8003a88 <I2C_TransferConfig>
 8002790:	e06d      	b.n	800286e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	8979      	ldrh	r1, [r7, #10]
 80027a4:	4b49      	ldr	r3, [pc, #292]	@ (80028cc <HAL_I2C_Master_Receive+0x1e4>)
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f001 f96b 	bl	8003a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027b2:	e05c      	b.n	800286e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	6a39      	ldr	r1, [r7, #32]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fff9 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e07c      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d034      	beq.n	800286e <HAL_I2C_Master_Receive+0x186>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d130      	bne.n	800286e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2200      	movs	r2, #0
 8002814:	2180      	movs	r1, #128	@ 0x80
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fee7 	bl	80035ea <I2C_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e04d      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2bff      	cmp	r3, #255	@ 0xff
 800282e:	d90e      	bls.n	800284e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	22ff      	movs	r2, #255	@ 0xff
 8002834:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	2300      	movs	r3, #0
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f001 f91e 	bl	8003a88 <I2C_TransferConfig>
 800284c:	e00f      	b.n	800286e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285c:	b2da      	uxtb	r2, r3
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	2300      	movs	r3, #0
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f001 f90d 	bl	8003a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d19d      	bne.n	80027b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 ff54 	bl	800372a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e01a      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2220      	movs	r2, #32
 8002892:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <HAL_I2C_Master_Receive+0x1e8>)
 80028a0:	400b      	ands	r3, r1
 80028a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	80002400 	.word	0x80002400
 80028d0:	fe00e800 	.word	0xfe00e800

080028d4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	460b      	mov	r3, r1
 80028e2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	f040 80d6 	bne.w	8002aa2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002904:	d101      	bne.n	800290a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e0cc      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_IsDeviceReady+0x44>
 8002914:	2302      	movs	r3, #2
 8002916:	e0c5      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1d0>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2224      	movs	r2, #36	@ 0x24
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_I2C_IsDeviceReady+0x72>
 8002936:	897b      	ldrh	r3, [r7, #10]
 8002938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002940:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002944:	e006      	b.n	8002954 <HAL_I2C_IsDeviceReady+0x80>
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002950:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800295a:	f7ff f9bd 	bl	8001cd8 <HAL_GetTick>
 800295e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b20      	cmp	r3, #32
 800296c:	bf0c      	ite	eq
 800296e:	2301      	moveq	r3, #1
 8002970:	2300      	movne	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b10      	cmp	r3, #16
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800298c:	e034      	b.n	80029f8 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d01a      	beq.n	80029cc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7ff f99f 	bl	8001cd8 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <HAL_I2C_IsDeviceReady+0xd8>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10f      	bne.n	80029cc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e06b      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029f8:	7ffb      	ldrb	r3, [r7, #31]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <HAL_I2C_IsDeviceReady+0x130>
 80029fe:	7fbb      	ldrb	r3, [r7, #30]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0c4      	beq.n	800298e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d01a      	beq.n	8002a48 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2120      	movs	r1, #32
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fde4 	bl	80035ea <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e03b      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2220      	movs	r2, #32
 8002a32:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e02d      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2120      	movs	r1, #32
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fdc9 	bl	80035ea <I2C_WaitOnFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e020      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	f63f af56 	bhi.w	800292e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	68f9      	ldr	r1, [r7, #12]
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00f      	beq.n	8002b22 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	f043 0201 	orr.w	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00f      	beq.n	8002b4c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	f043 0208 	orr.w	r2, r3, #8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b4a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00f      	beq.n	8002b76 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b64:	f043 0202 	orr.w	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b74:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 030b 	and.w	r3, r3, #11
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fbd5 	bl	8003338 <I2C_ITError>
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70fb      	strb	r3, [r7, #3]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <I2C_Slave_ISR_IT+0x24>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0e2      	b.n	8002e00 <I2C_Slave_ISR_IT+0x1ea>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c56:	6939      	ldr	r1, [r7, #16]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f9b5 	bl	8002fc8 <I2C_ITSlaveCplt>
 8002c5e:	e0ca      	b.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04b      	beq.n	8002d02 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d046      	beq.n	8002d02 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d128      	bne.n	8002cd0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b28      	cmp	r3, #40	@ 0x28
 8002c88:	d108      	bne.n	8002c9c <I2C_Slave_ISR_IT+0x86>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c90:	d104      	bne.n	8002c9c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c92:	6939      	ldr	r1, [r7, #16]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fafb 	bl	8003290 <I2C_ITListenCplt>
 8002c9a:	e031      	b.n	8002d00 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b29      	cmp	r3, #41	@ 0x29
 8002ca6:	d10e      	bne.n	8002cc6 <I2C_Slave_ISR_IT+0xb0>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cae:	d00a      	beq.n	8002cc6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fc54 	bl	8003566 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f926 	bl	8002f10 <I2C_ITSlaveSeqCplt>
 8002cc4:	e01c      	b.n	8002d00 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2210      	movs	r2, #16
 8002ccc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002cce:	e08f      	b.n	8002df0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	f043 0204 	orr.w	r2, r3, #4
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <I2C_Slave_ISR_IT+0xdc>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf0:	d17e      	bne.n	8002df0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fb1d 	bl	8003338 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cfe:	e077      	b.n	8002df0 <I2C_Slave_ISR_IT+0x1da>
 8002d00:	e076      	b.n	8002df0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02f      	beq.n	8002d6c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02a      	beq.n	8002d6c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d018      	beq.n	8002d52 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d14b      	bne.n	8002df4 <I2C_Slave_ISR_IT+0x1de>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d62:	d047      	beq.n	8002df4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8d3 	bl	8002f10 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d6a:	e043      	b.n	8002df4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f840 	bl	8002e08 <I2C_ITAddrCplt>
 8002d88:	e035      	b.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d030      	beq.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02b      	beq.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d018      	beq.n	8002dda <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002dd8:	e00d      	b.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de0:	d002      	beq.n	8002de8 <I2C_Slave_ISR_IT+0x1d2>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d106      	bne.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f891 	bl	8002f10 <I2C_ITSlaveSeqCplt>
 8002dee:	e002      	b.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002df4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e1e:	2b28      	cmp	r3, #40	@ 0x28
 8002e20:	d16a      	bne.n	8002ef8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e40:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e5c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d138      	bne.n	8002ed8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002e66:	897b      	ldrh	r3, [r7, #10]
 8002e68:	09db      	lsrs	r3, r3, #7
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	89bb      	ldrh	r3, [r7, #12]
 8002e6e:	4053      	eors	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f003 0306 	and.w	r3, r3, #6
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d11c      	bne.n	8002eb4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d13b      	bne.n	8002f08 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ea6:	89ba      	ldrh	r2, [r7, #12]
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fe86 	bl	8002bbe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002eb2:	e029      	b.n	8002f08 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002eb4:	893b      	ldrh	r3, [r7, #8]
 8002eb6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002eb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fe15 	bl	8003aec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eca:	89ba      	ldrh	r2, [r7, #12]
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fe74 	bl	8002bbe <HAL_I2C_AddrCallback>
}
 8002ed6:	e017      	b.n	8002f08 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ed8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fe05 	bl	8003aec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002eea:	89ba      	ldrh	r2, [r7, #12]
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fe64 	bl	8002bbe <HAL_I2C_AddrCallback>
}
 8002ef6:	e007      	b.n	8002f08 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2208      	movs	r2, #8
 8002efe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e00c      	b.n	8002f5e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b29      	cmp	r3, #41	@ 0x29
 8002f68:	d112      	bne.n	8002f90 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2228      	movs	r2, #40	@ 0x28
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2221      	movs	r2, #33	@ 0x21
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f78:	2101      	movs	r1, #1
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fdb6 	bl	8003aec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fe04 	bl	8002b96 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f8e:	e017      	b.n	8002fc0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f9a:	d111      	bne.n	8002fc0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2228      	movs	r2, #40	@ 0x28
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2222      	movs	r2, #34	@ 0x22
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002faa:	2102      	movs	r1, #2
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fd9d 	bl	8003aec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fdf5 	bl	8002baa <HAL_I2C_SlaveRxCpltCallback>
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	2b21      	cmp	r3, #33	@ 0x21
 8002ff8:	d002      	beq.n	8003000 <I2C_ITSlaveCplt+0x38>
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	2b29      	cmp	r3, #41	@ 0x29
 8002ffe:	d108      	bne.n	8003012 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003000:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fd71 	bl	8003aec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2221      	movs	r2, #33	@ 0x21
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003010:	e019      	b.n	8003046 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003012:	7afb      	ldrb	r3, [r7, #11]
 8003014:	2b22      	cmp	r3, #34	@ 0x22
 8003016:	d002      	beq.n	800301e <I2C_ITSlaveCplt+0x56>
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	2b2a      	cmp	r3, #42	@ 0x2a
 800301c:	d108      	bne.n	8003030 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800301e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fd62 	bl	8003aec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2222      	movs	r2, #34	@ 0x22
 800302c:	631a      	str	r2, [r3, #48]	@ 0x30
 800302e:	e00a      	b.n	8003046 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	2b28      	cmp	r3, #40	@ 0x28
 8003034:	d107      	bne.n	8003046 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003036:	f248 0103 	movw	r1, #32771	@ 0x8003
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fd56 	bl	8003aec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003054:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b89      	ldr	r3, [pc, #548]	@ (8003288 <I2C_ITSlaveCplt+0x2c0>)
 8003062:	400b      	ands	r3, r1
 8003064:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa7d 	bl	8003566 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003084:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01f      	beq.n	80030ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b29a      	uxth	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800309c:	e017      	b.n	80030ce <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d012      	beq.n	80030ce <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d049      	beq.n	80031ce <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003140:	2b00      	cmp	r3, #0
 8003142:	d044      	beq.n	80031ce <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d128      	bne.n	80031a0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b28      	cmp	r3, #40	@ 0x28
 8003158:	d108      	bne.n	800316c <I2C_ITSlaveCplt+0x1a4>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003160:	d104      	bne.n	800316c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003162:	6979      	ldr	r1, [r7, #20]
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f893 	bl	8003290 <I2C_ITListenCplt>
 800316a:	e030      	b.n	80031ce <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b29      	cmp	r3, #41	@ 0x29
 8003176:	d10e      	bne.n	8003196 <I2C_ITSlaveCplt+0x1ce>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800317e:	d00a      	beq.n	8003196 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2210      	movs	r2, #16
 8003186:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f9ec 	bl	8003566 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff febe 	bl	8002f10 <I2C_ITSlaveSeqCplt>
 8003194:	e01b      	b.n	80031ce <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2210      	movs	r2, #16
 800319c:	61da      	str	r2, [r3, #28]
 800319e:	e016      	b.n	80031ce <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2210      	movs	r2, #16
 80031a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <I2C_ITSlaveCplt+0x1fa>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c0:	d105      	bne.n	80031ce <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8b5 	bl	8003338 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8a4 	bl	8003338 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b28      	cmp	r3, #40	@ 0x28
 80031fa:	d141      	bne.n	8003280 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031fc:	6979      	ldr	r1, [r7, #20]
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f846 	bl	8003290 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003204:	e03c      	b.n	8003280 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800320e:	d014      	beq.n	800323a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fe7d 	bl	8002f10 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1c      	ldr	r2, [pc, #112]	@ (800328c <I2C_ITSlaveCplt+0x2c4>)
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fcd1 	bl	8002bda <HAL_I2C_ListenCpltCallback>
}
 8003238:	e022      	b.n	8003280 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b22      	cmp	r3, #34	@ 0x22
 8003244:	d10e      	bne.n	8003264 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fca4 	bl	8002baa <HAL_I2C_SlaveRxCpltCallback>
}
 8003262:	e00d      	b.n	8003280 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fc8b 	bl	8002b96 <HAL_I2C_SlaveTxCpltCallback>
}
 8003280:	bf00      	nop
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	fe00e800 	.word	0xfe00e800
 800328c:	ffff0000 	.word	0xffff0000

08003290 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a25      	ldr	r2, [pc, #148]	@ (8003334 <I2C_ITListenCplt+0xa4>)
 800329e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d022      	beq.n	800330c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d012      	beq.n	800330c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800330c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fbeb 	bl	8003aec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2210      	movs	r2, #16
 800331c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fc57 	bl	8002bda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	ffff0000 	.word	0xffff0000

08003338 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003348:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a6d      	ldr	r2, [pc, #436]	@ (800350c <I2C_ITError+0x1d4>)
 8003356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b28      	cmp	r3, #40	@ 0x28
 800336e:	d005      	beq.n	800337c <I2C_ITError+0x44>
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	2b29      	cmp	r3, #41	@ 0x29
 8003374:	d002      	beq.n	800337c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b2a      	cmp	r3, #42	@ 0x2a
 800337a:	d10b      	bne.n	8003394 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800337c:	2103      	movs	r1, #3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fbb4 	bl	8003aec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2228      	movs	r2, #40	@ 0x28
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a60      	ldr	r2, [pc, #384]	@ (8003510 <I2C_ITError+0x1d8>)
 8003390:	635a      	str	r2, [r3, #52]	@ 0x34
 8003392:	e030      	b.n	80033f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003394:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fba7 	bl	8003aec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f8e1 	bl	8003566 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b60      	cmp	r3, #96	@ 0x60
 80033ae:	d01f      	beq.n	80033f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d114      	bne.n	80033f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d109      	bne.n	80033e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2210      	movs	r2, #16
 80033da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e0:	f043 0204 	orr.w	r2, r3, #4
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2220      	movs	r2, #32
 80033ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	2b00      	cmp	r3, #0
 8003402:	d039      	beq.n	8003478 <I2C_ITError+0x140>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b11      	cmp	r3, #17
 8003408:	d002      	beq.n	8003410 <I2C_ITError+0xd8>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b21      	cmp	r3, #33	@ 0x21
 800340e:	d133      	bne.n	8003478 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800341a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800341e:	d107      	bne.n	8003430 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800342e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe fdd1 	bl	8001fdc <HAL_DMA_GetState>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d017      	beq.n	8003470 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	4a33      	ldr	r2, [pc, #204]	@ (8003514 <I2C_ITError+0x1dc>)
 8003446:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fd80 	bl	8001f5a <HAL_DMA_Abort_IT>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d04d      	beq.n	80034fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800346a:	4610      	mov	r0, r2
 800346c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800346e:	e045      	b.n	80034fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f851 	bl	8003518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003476:	e041      	b.n	80034fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d039      	beq.n	80034f4 <I2C_ITError+0x1bc>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d002      	beq.n	800348c <I2C_ITError+0x154>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b22      	cmp	r3, #34	@ 0x22
 800348a:	d133      	bne.n	80034f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349a:	d107      	bne.n	80034ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fd93 	bl	8001fdc <HAL_DMA_GetState>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d017      	beq.n	80034ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	4a14      	ldr	r2, [pc, #80]	@ (8003514 <I2C_ITError+0x1dc>)
 80034c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe fd42 	bl	8001f5a <HAL_DMA_Abort_IT>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d011      	beq.n	8003500 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034e6:	4610      	mov	r0, r2
 80034e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ea:	e009      	b.n	8003500 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f813 	bl	8003518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f2:	e005      	b.n	8003500 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f80f 	bl	8003518 <I2C_TreatErrorCallback>
  }
}
 80034fa:	e002      	b.n	8003502 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003500:	bf00      	nop
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	ffff0000 	.word	0xffff0000
 8003510:	08002c17 	.word	0x08002c17
 8003514:	080035af 	.word	0x080035af

08003518 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b60      	cmp	r3, #96	@ 0x60
 800352a:	d10e      	bne.n	800354a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff fb5d 	bl	8002c02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003548:	e009      	b.n	800355e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff fb48 	bl	8002bee <HAL_I2C_ErrorCallback>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b02      	cmp	r3, #2
 800357a:	d103      	bne.n	8003584 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d007      	beq.n	80035a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	619a      	str	r2, [r3, #24]
  }
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c8:	2200      	movs	r2, #0
 80035ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	2200      	movs	r2, #0
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff ff9b 	bl	8003518 <I2C_TreatErrorCallback>
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fa:	e03b      	b.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	6839      	ldr	r1, [r7, #0]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f961 	bl	80038c8 <I2C_IsErrorOccurred>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e041      	b.n	8003694 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d02d      	beq.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fe fb5e 	bl	8001cd8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_WaitOnFlagUntilTimeout+0x44>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d122      	bne.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	bf0c      	ite	eq
 800363e:	2301      	moveq	r3, #1
 8003640:	2300      	movne	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	429a      	cmp	r2, r3
 800364a:	d113      	bne.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	f043 0220 	orr.w	r2, r3, #32
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e00f      	b.n	8003694 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	429a      	cmp	r2, r3
 8003690:	d0b4      	beq.n	80035fc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036a8:	e033      	b.n	8003712 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f90a 	bl	80038c8 <I2C_IsErrorOccurred>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e031      	b.n	8003722 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d025      	beq.n	8003712 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fe fb07 	bl	8001cd8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11a      	bne.n	8003712 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d013      	beq.n	8003712 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e007      	b.n	8003722 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d1c4      	bne.n	80036aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003736:	e02f      	b.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f8c3 	bl	80038c8 <I2C_IsErrorOccurred>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e02d      	b.n	80037a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374c:	f7fe fac4 	bl	8001cd8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11a      	bne.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b20      	cmp	r3, #32
 800376e:	d013      	beq.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e007      	b.n	80037a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d1c8      	bne.n	8003738 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037c0:	e071      	b.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f87e 	bl	80038c8 <I2C_IsErrorOccurred>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d13b      	bne.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d138      	bne.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d105      	bne.n	8003804 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d121      	bne.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2210      	movs	r2, #16
 8003818:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2204      	movs	r2, #4
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2220      	movs	r2, #32
 8003826:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003834:	400b      	ands	r3, r1
 8003836:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	75fb      	strb	r3, [r7, #23]
 8003854:	e002      	b.n	800385c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800385c:	f7fe fa3c 	bl	8001cd8 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d119      	bne.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d116      	bne.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b04      	cmp	r3, #4
 8003884:	d00f      	beq.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d002      	beq.n	80038ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d083      	beq.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	fe00e800 	.word	0xfe00e800

080038c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	@ 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d068      	beq.n	80039c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2210      	movs	r2, #16
 80038fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038fc:	e049      	b.n	8003992 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d045      	beq.n	8003992 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fe f9e7 	bl	8001cd8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_IsErrorOccurred+0x54>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d13a      	bne.n	8003992 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003926:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800392e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800393a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800393e:	d121      	bne.n	8003984 <I2C_IsErrorOccurred+0xbc>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003946:	d01d      	beq.n	8003984 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	2b20      	cmp	r3, #32
 800394c:	d01a      	beq.n	8003984 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800395c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800395e:	f7fe f9bb 	bl	8001cd8 <HAL_GetTick>
 8003962:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003964:	e00e      	b.n	8003984 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003966:	f7fe f9b7 	bl	8001cd8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b19      	cmp	r3, #25
 8003972:	d907      	bls.n	8003984 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f043 0320 	orr.w	r3, r3, #32
 800397a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003982:	e006      	b.n	8003992 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b20      	cmp	r3, #32
 8003990:	d1e9      	bne.n	8003966 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b20      	cmp	r3, #32
 800399e:	d003      	beq.n	80039a8 <I2C_IsErrorOccurred+0xe0>
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0aa      	beq.n	80038fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2220      	movs	r2, #32
 80039b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f043 0308 	orr.w	r3, r3, #8
 8003a00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01c      	beq.n	8003a76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff fd92 	bl	8003566 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a84 <I2C_IsErrorOccurred+0x1bc>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3728      	adds	r7, #40	@ 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	fe00e800 	.word	0xfe00e800

08003a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	817b      	strh	r3, [r7, #10]
 8003a96:	4613      	mov	r3, r2
 8003a98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aa0:	7a7b      	ldrb	r3, [r7, #9]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aa8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ab6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	0d5b      	lsrs	r3, r3, #21
 8003ac2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ac6:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <I2C_TransferConfig+0x60>)
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	43db      	mvns	r3, r3
 8003acc:	ea02 0103 	and.w	r1, r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	03ff63ff 	.word	0x03ff63ff

08003aec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00f      	beq.n	8003b26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003b0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b1a:	2b28      	cmp	r3, #40	@ 0x28
 8003b1c:	d003      	beq.n	8003b26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00f      	beq.n	8003b50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003b36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b44:	2b28      	cmp	r3, #40	@ 0x28
 8003b46:	d003      	beq.n	8003b50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	da03      	bge.n	8003b60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d103      	bne.n	8003b6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d103      	bne.n	8003b7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f043 0320 	orr.w	r3, r3, #32
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	2b40      	cmp	r3, #64	@ 0x40
 8003b80:	d103      	bne.n	8003b8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d138      	bne.n	8003c30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e032      	b.n	8003c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	@ 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d139      	bne.n	8003cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e033      	b.n	8003cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2224      	movs	r2, #36	@ 0x24
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cdc:	4b04      	ldr	r3, [pc, #16]	@ (8003cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40007000 	.word	0x40007000

08003cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d02:	d130      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d04:	4b23      	ldr	r3, [pc, #140]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d10:	d038      	beq.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d12:	4b20      	ldr	r3, [pc, #128]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d22:	4b1d      	ldr	r3, [pc, #116]	@ (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2232      	movs	r2, #50	@ 0x32
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0c9b      	lsrs	r3, r3, #18
 8003d34:	3301      	adds	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d38:	e002      	b.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d40:	4b14      	ldr	r3, [pc, #80]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4c:	d102      	bne.n	8003d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f2      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d54:	4b0f      	ldr	r3, [pc, #60]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d60:	d110      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e00f      	b.n	8003d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d66:	4b0b      	ldr	r3, [pc, #44]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d72:	d007      	beq.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d74:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d7c:	4a05      	ldr	r2, [pc, #20]	@ (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40007000 	.word	0x40007000
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	431bde83 	.word	0x431bde83

08003da0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f000 bc02 	b.w	80045b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db4:	4b96      	ldr	r3, [pc, #600]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dbe:	4b94      	ldr	r3, [pc, #592]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80e4 	beq.w	8003f9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_RCC_OscConfig+0x4c>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	f040 808b 	bne.w	8003efa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 8087 	bne.w	8003efa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dec:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_OscConfig+0x64>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e3d9      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	4b81      	ldr	r3, [pc, #516]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCC_OscConfig+0x7e>
 8003e14:	4b7e      	ldr	r3, [pc, #504]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e1c:	e005      	b.n	8003e2a <HAL_RCC_OscConfig+0x8a>
 8003e1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d223      	bcs.n	8003e76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fd54 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e3ba      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e42:	4b73      	ldr	r3, [pc, #460]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a72      	ldr	r2, [pc, #456]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e48:	f043 0308 	orr.w	r3, r3, #8
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b70      	ldr	r3, [pc, #448]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	496d      	ldr	r1, [pc, #436]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e60:	4b6b      	ldr	r3, [pc, #428]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	4968      	ldr	r1, [pc, #416]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
 8003e74:	e025      	b.n	8003ec2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e76:	4b66      	ldr	r3, [pc, #408]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a65      	ldr	r2, [pc, #404]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	f043 0308 	orr.w	r3, r3, #8
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b63      	ldr	r3, [pc, #396]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4960      	ldr	r1, [pc, #384]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e94:	4b5e      	ldr	r3, [pc, #376]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	495b      	ldr	r1, [pc, #364]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fd14 	bl	80048e0 <RCC_SetFlashLatencyFromMSIRange>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e37a      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ec2:	f000 fc81 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	4b51      	ldr	r3, [pc, #324]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	4950      	ldr	r1, [pc, #320]	@ (8004014 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	5ccb      	ldrb	r3, [r1, r3]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	fa22 f303 	lsr.w	r3, r2, r3
 8003ede:	4a4e      	ldr	r2, [pc, #312]	@ (8004018 <HAL_RCC_OscConfig+0x278>)
 8003ee0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800401c <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd fea6 	bl	8001c38 <HAL_InitTick>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d052      	beq.n	8003f9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	e35e      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d032      	beq.n	8003f68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f02:	4b43      	ldr	r3, [pc, #268]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a42      	ldr	r2, [pc, #264]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f0e:	f7fd fee3 	bl	8001cd8 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f16:	f7fd fedf 	bl	8001cd8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e347      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f28:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	f043 0308 	orr.w	r3, r3, #8
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b33      	ldr	r3, [pc, #204]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	4930      	ldr	r1, [pc, #192]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f52:	4b2f      	ldr	r3, [pc, #188]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	492b      	ldr	r1, [pc, #172]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
 8003f66:	e01a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f68:	4b29      	ldr	r3, [pc, #164]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f74:	f7fd feb0 	bl	8001cd8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f7c:	f7fd feac 	bl	8001cd8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e314      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x1dc>
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d073      	beq.n	8004092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x21c>
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b0c      	cmp	r3, #12
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d063      	beq.n	8004090 <HAL_RCC_OscConfig+0x2f0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d15f      	bne.n	8004090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e2f1      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCC_OscConfig+0x24c>
 8003fde:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e025      	b.n	8004038 <HAL_RCC_OscConfig+0x298>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff4:	d114      	bne.n	8004020 <HAL_RCC_OscConfig+0x280>
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a05      	ldr	r2, [pc, #20]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b03      	ldr	r3, [pc, #12]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a02      	ldr	r2, [pc, #8]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e013      	b.n	8004038 <HAL_RCC_OscConfig+0x298>
 8004010:	40021000 	.word	0x40021000
 8004014:	080050a4 	.word	0x080050a4
 8004018:	20000004 	.word	0x20000004
 800401c:	20000008 	.word	0x20000008
 8004020:	4ba0      	ldr	r3, [pc, #640]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a9f      	ldr	r2, [pc, #636]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4b9d      	ldr	r3, [pc, #628]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a9c      	ldr	r2, [pc, #624]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fe4a 	bl	8001cd8 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004048:	f7fd fe46 	bl	8001cd8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	@ 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e2ae      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405a:	4b92      	ldr	r3, [pc, #584]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x2a8>
 8004066:	e014      	b.n	8004092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fd fe36 	bl	8001cd8 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7fd fe32 	bl	8001cd8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	@ 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e29a      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004082:	4b88      	ldr	r3, [pc, #544]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x2d0>
 800408e:	e000      	b.n	8004092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d060      	beq.n	8004160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_OscConfig+0x310>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d119      	bne.n	80040de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d116      	bne.n	80040de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b0:	4b7c      	ldr	r3, [pc, #496]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x328>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e277      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b76      	ldr	r3, [pc, #472]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	4973      	ldr	r1, [pc, #460]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040dc:	e040      	b.n	8004160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d023      	beq.n	800412e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e6:	4b6f      	ldr	r3, [pc, #444]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6e      	ldr	r2, [pc, #440]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fd fdf1 	bl	8001cd8 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fd fded 	bl	8001cd8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e255      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410c:	4b65      	ldr	r3, [pc, #404]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004118:	4b62      	ldr	r3, [pc, #392]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	061b      	lsls	r3, r3, #24
 8004126:	495f      	ldr	r1, [pc, #380]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	e018      	b.n	8004160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412e:	4b5d      	ldr	r3, [pc, #372]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a5c      	ldr	r2, [pc, #368]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fd fdcd 	bl	8001cd8 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004142:	f7fd fdc9 	bl	8001cd8 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e231      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d03c      	beq.n	80041e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01c      	beq.n	80041ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004174:	4b4b      	ldr	r3, [pc, #300]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417a:	4a4a      	ldr	r2, [pc, #296]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fd fda8 	bl	8001cd8 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418c:	f7fd fda4 	bl	8001cd8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e20c      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800419e:	4b41      	ldr	r3, [pc, #260]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80041a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ef      	beq.n	800418c <HAL_RCC_OscConfig+0x3ec>
 80041ac:	e01b      	b.n	80041e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ae:	4b3d      	ldr	r3, [pc, #244]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b4:	4a3b      	ldr	r2, [pc, #236]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041be:	f7fd fd8b 	bl	8001cd8 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fd fd87 	bl	8001cd8 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1ef      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d8:	4b32      	ldr	r3, [pc, #200]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80041da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ef      	bne.n	80041c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80a6 	beq.w	8004340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041f8:	4b2a      	ldr	r3, [pc, #168]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10d      	bne.n	8004220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004204:	4b27      	ldr	r3, [pc, #156]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	4a26      	ldr	r2, [pc, #152]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 800420a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004210:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800421c:	2301      	movs	r3, #1
 800421e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <HAL_RCC_OscConfig+0x508>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d118      	bne.n	800425e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800422c:	4b1e      	ldr	r3, [pc, #120]	@ (80042a8 <HAL_RCC_OscConfig+0x508>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <HAL_RCC_OscConfig+0x508>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004238:	f7fd fd4e 	bl	8001cd8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004240:	f7fd fd4a 	bl	8001cd8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e1b2      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <HAL_RCC_OscConfig+0x508>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d108      	bne.n	8004278 <HAL_RCC_OscConfig+0x4d8>
 8004266:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	4a0d      	ldr	r2, [pc, #52]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004276:	e029      	b.n	80042cc <HAL_RCC_OscConfig+0x52c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b05      	cmp	r3, #5
 800427e:	d115      	bne.n	80042ac <HAL_RCC_OscConfig+0x50c>
 8004280:	4b08      	ldr	r3, [pc, #32]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004286:	4a07      	ldr	r2, [pc, #28]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004290:	4b04      	ldr	r3, [pc, #16]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004296:	4a03      	ldr	r2, [pc, #12]	@ (80042a4 <HAL_RCC_OscConfig+0x504>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042a0:	e014      	b.n	80042cc <HAL_RCC_OscConfig+0x52c>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40007000 	.word	0x40007000
 80042ac:	4b9a      	ldr	r3, [pc, #616]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	4a99      	ldr	r2, [pc, #612]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042bc:	4b96      	ldr	r3, [pc, #600]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	4a95      	ldr	r2, [pc, #596]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d016      	beq.n	8004302 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd fd00 	bl	8001cd8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fd fcfc 	bl	8001cd8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e162      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f2:	4b89      	ldr	r3, [pc, #548]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0ed      	beq.n	80042dc <HAL_RCC_OscConfig+0x53c>
 8004300:	e015      	b.n	800432e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fd fce9 	bl	8001cd8 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004308:	e00a      	b.n	8004320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fd fce5 	bl	8001cd8 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e14b      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004320:	4b7d      	ldr	r3, [pc, #500]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1ed      	bne.n	800430a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b78      	ldr	r3, [pc, #480]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004338:	4a77      	ldr	r2, [pc, #476]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 800433a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800433e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d03c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01c      	beq.n	800438e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004354:	4b70      	ldr	r3, [pc, #448]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435a:	4a6f      	ldr	r2, [pc, #444]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fcb8 	bl	8001cd8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436c:	f7fd fcb4 	bl	8001cd8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e11c      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800437e:	4b66      	ldr	r3, [pc, #408]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004380:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0ef      	beq.n	800436c <HAL_RCC_OscConfig+0x5cc>
 800438c:	e01b      	b.n	80043c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800438e:	4b62      	ldr	r3, [pc, #392]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004394:	4a60      	ldr	r2, [pc, #384]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fd fc9b 	bl	8001cd8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043a6:	f7fd fc97 	bl	8001cd8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0ff      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b8:	4b57      	ldr	r3, [pc, #348]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80043ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ef      	bne.n	80043a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80f3 	beq.w	80045b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f040 80c9 	bne.w	800456c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043da:	4b4f      	ldr	r3, [pc, #316]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f003 0203 	and.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d12c      	bne.n	8004448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	3b01      	subs	r3, #1
 80043fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d123      	bne.n	8004448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d11b      	bne.n	8004448 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d113      	bne.n	8004448 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d109      	bne.n	8004448 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	3b01      	subs	r3, #1
 8004442:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d06b      	beq.n	8004520 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d062      	beq.n	8004514 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800444e:	4b32      	ldr	r3, [pc, #200]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0ac      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800445e:	4b2e      	ldr	r3, [pc, #184]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a2d      	ldr	r2, [pc, #180]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004464:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004468:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800446a:	f7fd fc35 	bl	8001cd8 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004472:	f7fd fc31 	bl	8001cd8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e099      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004484:	4b24      	ldr	r3, [pc, #144]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f0      	bne.n	8004472 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004490:	4b21      	ldr	r3, [pc, #132]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	4b21      	ldr	r3, [pc, #132]	@ (800451c <HAL_RCC_OscConfig+0x77c>)
 8004496:	4013      	ands	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80044a0:	3a01      	subs	r2, #1
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	4311      	orrs	r1, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044aa:	0212      	lsls	r2, r2, #8
 80044ac:	4311      	orrs	r1, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80044b2:	0852      	lsrs	r2, r2, #1
 80044b4:	3a01      	subs	r2, #1
 80044b6:	0552      	lsls	r2, r2, #21
 80044b8:	4311      	orrs	r1, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80044be:	0852      	lsrs	r2, r2, #1
 80044c0:	3a01      	subs	r2, #1
 80044c2:	0652      	lsls	r2, r2, #25
 80044c4:	4311      	orrs	r1, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80044ca:	06d2      	lsls	r2, r2, #27
 80044cc:	430a      	orrs	r2, r1
 80044ce:	4912      	ldr	r1, [pc, #72]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044d4:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a0f      	ldr	r2, [pc, #60]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80044da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 80044e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044ec:	f7fd fbf4 	bl	8001cd8 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fbf0 	bl	8001cd8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e058      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	4b04      	ldr	r3, [pc, #16]	@ (8004518 <HAL_RCC_OscConfig+0x778>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004512:	e050      	b.n	80045b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e04f      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
 8004518:	40021000 	.word	0x40021000
 800451c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004520:	4b27      	ldr	r3, [pc, #156]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d144      	bne.n	80045b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800452c:	4b24      	ldr	r3, [pc, #144]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a23      	ldr	r2, [pc, #140]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004538:	4b21      	ldr	r3, [pc, #132]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4a20      	ldr	r2, [pc, #128]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 800453e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004542:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004544:	f7fd fbc8 	bl	8001cd8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd fbc4 	bl	8001cd8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e02c      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455e:	4b18      	ldr	r3, [pc, #96]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x7ac>
 800456a:	e024      	b.n	80045b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d01f      	beq.n	80045b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b13      	ldr	r3, [pc, #76]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a12      	ldr	r2, [pc, #72]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 8004578:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800457c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd fbab 	bl	8001cd8 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fd fba7 	bl	8001cd8 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e00f      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004598:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80045a4:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4905      	ldr	r1, [pc, #20]	@ (80045c0 <HAL_RCC_OscConfig+0x820>)
 80045aa:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <HAL_RCC_OscConfig+0x824>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
 80045b0:	e001      	b.n	80045b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	feeefffc 	.word	0xfeeefffc

080045c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0e7      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045dc:	4b75      	ldr	r3, [pc, #468]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d910      	bls.n	800460c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b72      	ldr	r3, [pc, #456]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 0207 	bic.w	r2, r3, #7
 80045f2:	4970      	ldr	r1, [pc, #448]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0cf      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	4b66      	ldr	r3, [pc, #408]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004624:	429a      	cmp	r2, r3
 8004626:	d908      	bls.n	800463a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004628:	4b63      	ldr	r3, [pc, #396]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	4960      	ldr	r1, [pc, #384]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d04c      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b03      	cmp	r3, #3
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800464e:	4b5a      	ldr	r3, [pc, #360]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d121      	bne.n	800469e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e0a6      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004666:	4b54      	ldr	r3, [pc, #336]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d115      	bne.n	800469e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e09a      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800467e:	4b4e      	ldr	r3, [pc, #312]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e08e      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800468e:	4b4a      	ldr	r3, [pc, #296]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e086      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b46      	ldr	r3, [pc, #280]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4943      	ldr	r1, [pc, #268]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b0:	f7fd fb12 	bl	8001cd8 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fd fb0e 	bl	8001cd8 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e06e      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b3a      	ldr	r3, [pc, #232]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d010      	beq.n	800470e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d208      	bcs.n	800470e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b2e      	ldr	r3, [pc, #184]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	492b      	ldr	r1, [pc, #172]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800470e:	4b29      	ldr	r3, [pc, #164]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d210      	bcs.n	800473e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471c:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f023 0207 	bic.w	r2, r3, #7
 8004724:	4923      	ldr	r1, [pc, #140]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	4313      	orrs	r3, r2
 800472a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472c:	4b21      	ldr	r3, [pc, #132]	@ (80047b4 <HAL_RCC_ClockConfig+0x1ec>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d001      	beq.n	800473e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e036      	b.n	80047ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474a:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4918      	ldr	r1, [pc, #96]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4910      	ldr	r1, [pc, #64]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800477c:	f000 f824 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	490b      	ldr	r1, [pc, #44]	@ (80047bc <HAL_RCC_ClockConfig+0x1f4>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	fa22 f303 	lsr.w	r3, r2, r3
 8004798:	4a09      	ldr	r2, [pc, #36]	@ (80047c0 <HAL_RCC_ClockConfig+0x1f8>)
 800479a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800479c:	4b09      	ldr	r3, [pc, #36]	@ (80047c4 <HAL_RCC_ClockConfig+0x1fc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd fa49 	bl	8001c38 <HAL_InitTick>
 80047a6:	4603      	mov	r3, r0
 80047a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80047aa:	7afb      	ldrb	r3, [r7, #11]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40022000 	.word	0x40022000
 80047b8:	40021000 	.word	0x40021000
 80047bc:	080050a4 	.word	0x080050a4
 80047c0:	20000004 	.word	0x20000004
 80047c4:	20000008 	.word	0x20000008

080047c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b089      	sub	sp, #36	@ 0x24
 80047cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d6:	4b3e      	ldr	r3, [pc, #248]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 030c 	and.w	r3, r3, #12
 80047de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e0:	4b3b      	ldr	r3, [pc, #236]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0x34>
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b0c      	cmp	r3, #12
 80047f4:	d121      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d11e      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047fc:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004808:	4b31      	ldr	r3, [pc, #196]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800480a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e005      	b.n	8004824 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004818:	4b2d      	ldr	r3, [pc, #180]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004824:	4a2b      	ldr	r2, [pc, #172]	@ (80048d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10d      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d102      	bne.n	8004846 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004840:	4b25      	ldr	r3, [pc, #148]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e004      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d101      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800484c:	4b23      	ldr	r3, [pc, #140]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x114>)
 800484e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	d134      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004856:	4b1e      	ldr	r3, [pc, #120]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_GetSysClockFreq+0xa6>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d003      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0xac>
 800486c:	e005      	b.n	800487a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800486e:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004870:	617b      	str	r3, [r7, #20]
      break;
 8004872:	e005      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_RCC_GetSysClockFreq+0x114>)
 8004876:	617b      	str	r3, [r7, #20]
      break;
 8004878:	e002      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	617b      	str	r3, [r7, #20]
      break;
 800487e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004880:	4b13      	ldr	r3, [pc, #76]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	3301      	adds	r3, #1
 800488c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800488e:	4b10      	ldr	r3, [pc, #64]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	fb03 f202 	mul.w	r2, r3, r2
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048a6:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	0e5b      	lsrs	r3, r3, #25
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	3301      	adds	r3, #1
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80048be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048c0:	69bb      	ldr	r3, [r7, #24]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	@ 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000
 80048d4:	080050b4 	.word	0x080050b4
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	007a1200 	.word	0x007a1200

080048e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f8:	f7ff f9ee 	bl	8003cd8 <HAL_PWREx_GetVoltageRange>
 80048fc:	6178      	str	r0, [r7, #20]
 80048fe:	e014      	b.n	800492a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004900:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004904:	4a24      	ldr	r2, [pc, #144]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490a:	6593      	str	r3, [r2, #88]	@ 0x58
 800490c:	4b22      	ldr	r3, [pc, #136]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004918:	f7ff f9de 	bl	8003cd8 <HAL_PWREx_GetVoltageRange>
 800491c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800491e:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004922:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004924:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004928:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004930:	d10b      	bne.n	800494a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b80      	cmp	r3, #128	@ 0x80
 8004936:	d919      	bls.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2ba0      	cmp	r3, #160	@ 0xa0
 800493c:	d902      	bls.n	8004944 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800493e:	2302      	movs	r3, #2
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e013      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004944:	2301      	movs	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	e010      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b80      	cmp	r3, #128	@ 0x80
 800494e:	d902      	bls.n	8004956 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004950:	2303      	movs	r3, #3
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	e00a      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b80      	cmp	r3, #128	@ 0x80
 800495a:	d102      	bne.n	8004962 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800495c:	2302      	movs	r3, #2
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	e004      	b.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b70      	cmp	r3, #112	@ 0x70
 8004966:	d101      	bne.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004968:	2301      	movs	r3, #1
 800496a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800496c:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 0207 	bic.w	r2, r3, #7
 8004974:	4909      	ldr	r1, [pc, #36]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800497c:	4b07      	ldr	r3, [pc, #28]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	429a      	cmp	r2, r3
 8004988:	d001      	beq.n	800498e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40021000 	.word	0x40021000
 800499c:	40022000 	.word	0x40022000

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a8:	2300      	movs	r3, #0
 80049aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d031      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049c4:	d01a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80049c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049ca:	d814      	bhi.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049d4:	d10f      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80049d6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a5c      	ldr	r2, [pc, #368]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049e2:	e00c      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fa22 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 80049f0:	4603      	mov	r3, r0
 80049f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f4:	e003      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	74fb      	strb	r3, [r7, #19]
      break;
 80049fa:	e000      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80049fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10b      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a04:	4b51      	ldr	r3, [pc, #324]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	494e      	ldr	r1, [pc, #312]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a1a:	e001      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 809e 	beq.w	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a32:	4b46      	ldr	r3, [pc, #280]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00d      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a48:	4b40      	ldr	r3, [pc, #256]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a54:	4b3d      	ldr	r3, [pc, #244]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a60:	2301      	movs	r3, #1
 8004a62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a64:	4b3a      	ldr	r3, [pc, #232]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a39      	ldr	r2, [pc, #228]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a70:	f7fd f932 	bl	8001cd8 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a76:	e009      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a78:	f7fd f92e 	bl	8001cd8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d902      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	74fb      	strb	r3, [r7, #19]
        break;
 8004a8a:	e005      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a8c:	4b30      	ldr	r3, [pc, #192]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0ef      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d15a      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01e      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d019      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ac6:	4b21      	ldr	r3, [pc, #132]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004acc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004adc:	4a1b      	ldr	r2, [pc, #108]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ae6:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d016      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fd f8ee 	bl	8001cd8 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afe:	e00b      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b00:	f7fd f8ea 	bl	8001cd8 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d902      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	74fb      	strb	r3, [r7, #19]
            break;
 8004b16:	e006      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b18:	4b0c      	ldr	r3, [pc, #48]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0ec      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b2c:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3a:	4904      	ldr	r1, [pc, #16]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b42:	e009      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	74bb      	strb	r3, [r7, #18]
 8004b48:	e006      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b58:	7c7b      	ldrb	r3, [r7, #17]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d105      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b62:	4a8c      	ldr	r2, [pc, #560]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b76:	4b87      	ldr	r3, [pc, #540]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7c:	f023 0203 	bic.w	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	4983      	ldr	r1, [pc, #524]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b98:	4b7e      	ldr	r3, [pc, #504]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	f023 020c 	bic.w	r2, r3, #12
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	497b      	ldr	r1, [pc, #492]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bba:	4b76      	ldr	r3, [pc, #472]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc8:	4972      	ldr	r1, [pc, #456]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bdc:	4b6d      	ldr	r3, [pc, #436]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	496a      	ldr	r1, [pc, #424]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0c:	4961      	ldr	r1, [pc, #388]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c20:	4b5c      	ldr	r3, [pc, #368]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	4959      	ldr	r1, [pc, #356]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c42:	4b54      	ldr	r3, [pc, #336]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c50:	4950      	ldr	r1, [pc, #320]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c64:	4b4b      	ldr	r3, [pc, #300]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c72:	4948      	ldr	r1, [pc, #288]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c86:	4b43      	ldr	r3, [pc, #268]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	493f      	ldr	r1, [pc, #252]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d028      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb6:	4937      	ldr	r1, [pc, #220]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc8:	4b32      	ldr	r3, [pc, #200]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a31      	ldr	r2, [pc, #196]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cd2:	60d3      	str	r3, [r2, #12]
 8004cd4:	e011      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f8a4 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cf0:	7cfb      	ldrb	r3, [r7, #19]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d028      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d06:	4b23      	ldr	r3, [pc, #140]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d14:	491f      	ldr	r1, [pc, #124]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d24:	d106      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d26:	4b1b      	ldr	r3, [pc, #108]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d30:	60d3      	str	r3, [r2, #12]
 8004d32:	e011      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f875 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d72:	4908      	ldr	r1, [pc, #32]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d82:	d109      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d84:	4b03      	ldr	r3, [pc, #12]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a02      	ldr	r2, [pc, #8]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d8e:	60d3      	str	r3, [r2, #12]
 8004d90:	e014      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2101      	movs	r1, #1
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f843 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01c      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc8:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd6:	4916      	ldr	r1, [pc, #88]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	2102      	movs	r1, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f820 	bl	8004e34 <RCCEx_PLLSAI1_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e0e:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1c:	4904      	ldr	r1, [pc, #16]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e24:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000

08004e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e42:	4b74      	ldr	r3, [pc, #464]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e4e:	4b71      	ldr	r3, [pc, #452]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0203 	and.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d10d      	bne.n	8004e7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
       ||
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e66:	4b6b      	ldr	r3, [pc, #428]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	f003 0307 	and.w	r3, r3, #7
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
       ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d047      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	e044      	b.n	8004f0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d018      	beq.n	8004eba <RCCEx_PLLSAI1_Config+0x86>
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d825      	bhi.n	8004ed8 <RCCEx_PLLSAI1_Config+0xa4>
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d002      	beq.n	8004e96 <RCCEx_PLLSAI1_Config+0x62>
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d009      	beq.n	8004ea8 <RCCEx_PLLSAI1_Config+0x74>
 8004e94:	e020      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e96:	4b5f      	ldr	r3, [pc, #380]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d11d      	bne.n	8004ede <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea6:	e01a      	b.n	8004ede <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d116      	bne.n	8004ee2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb8:	e013      	b.n	8004ee2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eba:	4b56      	ldr	r3, [pc, #344]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10f      	bne.n	8004ee6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ec6:	4b53      	ldr	r3, [pc, #332]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ed6:	e006      	b.n	8004ee6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      break;
 8004edc:	e004      	b.n	8004ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e002      	b.n	8004ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10d      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004eee:	4b49      	ldr	r3, [pc, #292]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	430b      	orrs	r3, r1
 8004f04:	4943      	ldr	r1, [pc, #268]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d17c      	bne.n	800500a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f10:	4b40      	ldr	r3, [pc, #256]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a3f      	ldr	r2, [pc, #252]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f1c:	f7fc fedc 	bl	8001cd8 <HAL_GetTick>
 8004f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f22:	e009      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f24:	f7fc fed8 	bl	8001cd8 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d902      	bls.n	8004f38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	73fb      	strb	r3, [r7, #15]
        break;
 8004f36:	e005      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f38:	4b36      	ldr	r3, [pc, #216]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ef      	bne.n	8004f24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d15f      	bne.n	800500a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d110      	bne.n	8004f72 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f50:	4b30      	ldr	r3, [pc, #192]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004f58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6892      	ldr	r2, [r2, #8]
 8004f60:	0211      	lsls	r1, r2, #8
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d2      	ldr	r2, [r2, #12]
 8004f66:	06d2      	lsls	r2, r2, #27
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	492a      	ldr	r1, [pc, #168]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	610b      	str	r3, [r1, #16]
 8004f70:	e027      	b.n	8004fc2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d112      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f78:	4b26      	ldr	r3, [pc, #152]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6892      	ldr	r2, [r2, #8]
 8004f88:	0211      	lsls	r1, r2, #8
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6912      	ldr	r2, [r2, #16]
 8004f8e:	0852      	lsrs	r2, r2, #1
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0552      	lsls	r2, r2, #21
 8004f94:	430a      	orrs	r2, r1
 8004f96:	491f      	ldr	r1, [pc, #124]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	610b      	str	r3, [r1, #16]
 8004f9c:	e011      	b.n	8004fc2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004fa6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6892      	ldr	r2, [r2, #8]
 8004fae:	0211      	lsls	r1, r2, #8
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6952      	ldr	r2, [r2, #20]
 8004fb4:	0852      	lsrs	r2, r2, #1
 8004fb6:	3a01      	subs	r2, #1
 8004fb8:	0652      	lsls	r2, r2, #25
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	4915      	ldr	r1, [pc, #84]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fc2:	4b14      	ldr	r3, [pc, #80]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a13      	ldr	r2, [pc, #76]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fcc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fce:	f7fc fe83 	bl	8001cd8 <HAL_GetTick>
 8004fd2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fd4:	e009      	b.n	8004fea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fd6:	f7fc fe7f 	bl	8001cd8 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d902      	bls.n	8004fea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	73fb      	strb	r3, [r7, #15]
          break;
 8004fe8:	e005      	b.n	8004ff6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004fea:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ef      	beq.n	8004fd6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ffc:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	4903      	ldr	r1, [pc, #12]	@ (8005014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005006:	4313      	orrs	r3, r2
 8005008:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000

08005018 <memset>:
 8005018:	4402      	add	r2, r0
 800501a:	4603      	mov	r3, r0
 800501c:	4293      	cmp	r3, r2
 800501e:	d100      	bne.n	8005022 <memset+0xa>
 8005020:	4770      	bx	lr
 8005022:	f803 1b01 	strb.w	r1, [r3], #1
 8005026:	e7f9      	b.n	800501c <memset+0x4>

08005028 <__libc_init_array>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	4d0d      	ldr	r5, [pc, #52]	@ (8005060 <__libc_init_array+0x38>)
 800502c:	4c0d      	ldr	r4, [pc, #52]	@ (8005064 <__libc_init_array+0x3c>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	2600      	movs	r6, #0
 8005034:	42a6      	cmp	r6, r4
 8005036:	d109      	bne.n	800504c <__libc_init_array+0x24>
 8005038:	4d0b      	ldr	r5, [pc, #44]	@ (8005068 <__libc_init_array+0x40>)
 800503a:	4c0c      	ldr	r4, [pc, #48]	@ (800506c <__libc_init_array+0x44>)
 800503c:	f000 f826 	bl	800508c <_init>
 8005040:	1b64      	subs	r4, r4, r5
 8005042:	10a4      	asrs	r4, r4, #2
 8005044:	2600      	movs	r6, #0
 8005046:	42a6      	cmp	r6, r4
 8005048:	d105      	bne.n	8005056 <__libc_init_array+0x2e>
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005050:	4798      	blx	r3
 8005052:	3601      	adds	r6, #1
 8005054:	e7ee      	b.n	8005034 <__libc_init_array+0xc>
 8005056:	f855 3b04 	ldr.w	r3, [r5], #4
 800505a:	4798      	blx	r3
 800505c:	3601      	adds	r6, #1
 800505e:	e7f2      	b.n	8005046 <__libc_init_array+0x1e>
 8005060:	080050e4 	.word	0x080050e4
 8005064:	080050e4 	.word	0x080050e4
 8005068:	080050e4 	.word	0x080050e4
 800506c:	080050e8 	.word	0x080050e8

08005070 <memcpy>:
 8005070:	440a      	add	r2, r1
 8005072:	4291      	cmp	r1, r2
 8005074:	f100 33ff 	add.w	r3, r0, #4294967295
 8005078:	d100      	bne.n	800507c <memcpy+0xc>
 800507a:	4770      	bx	lr
 800507c:	b510      	push	{r4, lr}
 800507e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005086:	4291      	cmp	r1, r2
 8005088:	d1f9      	bne.n	800507e <memcpy+0xe>
 800508a:	bd10      	pop	{r4, pc}

0800508c <_init>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr

08005098 <_fini>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr
