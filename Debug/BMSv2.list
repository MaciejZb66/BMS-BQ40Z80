
BMSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004690  08004690  00005690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080046d0  080046d0  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d0  080046d0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000010  080046e8  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080046e8  00006104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111f8  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b12  00000000  00000000  00017238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00019d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ee  00000000  00000000  0001a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233b8  00000000  00000000  0001b23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a5a  00000000  00000000  0003e5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca75e  00000000  00000000  00050050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e20  00000000  00000000  0011a7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0011d614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004678 	.word	0x08004678

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004678 	.word	0x08004678

080001cc <BQ_Init>:
/**
 * @brief bq40z80 initialization
 * @param i2c i2c pointer
 */
void BQ_Init(I2C_HandleTypeDef *i2c)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    BMS_1.bq_i2c = i2c;
 80001d4:	4a28      	ldr	r2, [pc, #160]	@ (8000278 <BQ_Init+0xac>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6013      	str	r3, [r2, #0]

#ifdef USE_SCANNER
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001da:	4b28      	ldr	r3, [pc, #160]	@ (800027c <BQ_Init+0xb0>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	005b      	lsls	r3, r3, #1
 80001e0:	b299      	uxth	r1, r3
 80001e2:	2364      	movs	r3, #100	@ 0x64
 80001e4:	2203      	movs	r2, #3
 80001e6:	6878      	ldr	r0, [r7, #4]
 80001e8:	f001 fe78 	bl	8001edc <HAL_I2C_IsDeviceReady>
 80001ec:	4603      	mov	r3, r0
 80001ee:	73fb      	strb	r3, [r7, #15]
	while (ret != HAL_OK)
 80001f0:	e012      	b.n	8000218 <BQ_Init+0x4c>
	{
		ret = HAL_I2C_IsDeviceReady(i2c, bq_deviceAddress << 1, 3, 100);
 80001f2:	4b22      	ldr	r3, [pc, #136]	@ (800027c <BQ_Init+0xb0>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	005b      	lsls	r3, r3, #1
 80001f8:	b299      	uxth	r1, r3
 80001fa:	2364      	movs	r3, #100	@ 0x64
 80001fc:	2203      	movs	r2, #3
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f001 fe6c 	bl	8001edc <HAL_I2C_IsDeviceReady>
 8000204:	4603      	mov	r3, r0
 8000206:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800020c:	f001 f874 	bl	80012f8 <HAL_Delay>
	#ifdef debug
		if(ret != HAL_OK){
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d000      	beq.n	8000218 <BQ_Init+0x4c>
			__asm("nop"); //insert breakpoint here
 8000216:	bf00      	nop
	while (ret != HAL_OK)
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d1e9      	bne.n	80001f2 <BQ_Init+0x26>
		}
	#endif
	}
#endif

    HAL_Delay(1500);
 800021e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000222:	f001 f869 	bl	80012f8 <HAL_Delay>
    BQAction_UpdateData(&BMS_1);
 8000226:	4814      	ldr	r0, [pc, #80]	@ (8000278 <BQ_Init+0xac>)
 8000228:	f000 fa60 	bl	80006ec <BQAction_UpdateData>
    BQAction_TryUnsealedDevice(&BMS_1);
 800022c:	4812      	ldr	r0, [pc, #72]	@ (8000278 <BQ_Init+0xac>)
 800022e:	f000 fa2a 	bl	8000686 <BQAction_TryUnsealedDevice>

    BQAction_SetManufacturingAllFet(&BMS_1, false);
 8000232:	2100      	movs	r1, #0
 8000234:	4810      	ldr	r0, [pc, #64]	@ (8000278 <BQ_Init+0xac>)
 8000236:	f000 f916 	bl	8000466 <BQAction_SetManufacturingAllFet>
    BQAction_SetManufacturingFuse(&BMS_1, false);
 800023a:	2100      	movs	r1, #0
 800023c:	480e      	ldr	r0, [pc, #56]	@ (8000278 <BQ_Init+0xac>)
 800023e:	f000 f928 	bl	8000492 <BQAction_SetManufacturingFuse>
    BQAction_SetCalibration(&BMS_1, false);
 8000242:	2100      	movs	r1, #0
 8000244:	480c      	ldr	r0, [pc, #48]	@ (8000278 <BQ_Init+0xac>)
 8000246:	f000 f93a 	bl	80004be <BQAction_SetCalibration>
    BQAction_SetManufacturingGauging(&BMS_1, true);
 800024a:	2101      	movs	r1, #1
 800024c:	480a      	ldr	r0, [pc, #40]	@ (8000278 <BQ_Init+0xac>)
 800024e:	f000 f94c 	bl	80004ea <BQAction_SetManufacturingGauging>
    BQAction_SetManufacturingPF(&BMS_1, true);
 8000252:	2101      	movs	r1, #1
 8000254:	4808      	ldr	r0, [pc, #32]	@ (8000278 <BQ_Init+0xac>)
 8000256:	f000 f95e 	bl	8000516 <BQAction_SetManufacturingPF>
    BQAction_SetManufacturingLF(&BMS_1, true);
 800025a:	2101      	movs	r1, #1
 800025c:	4806      	ldr	r0, [pc, #24]	@ (8000278 <BQ_Init+0xac>)
 800025e:	f000 f970 	bl	8000542 <BQAction_SetManufacturingLF>
    BQAction_SetLed(&BMS_1, false);
 8000262:	2100      	movs	r1, #0
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <BQ_Init+0xac>)
 8000266:	f000 f8e8 	bl	800043a <BQAction_SetLed>

    BQAction_UpdateData(&BMS_1);
 800026a:	4803      	ldr	r0, [pc, #12]	@ (8000278 <BQ_Init+0xac>)
 800026c:	f000 fa3e 	bl	80006ec <BQAction_UpdateData>
}
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	2000002c 	.word	0x2000002c
 800027c:	20000000 	.word	0x20000000

08000280 <BQ_WriteMABlockCommand>:
/**
 * @brief send command to ManufacturerBlockAccess()
 * @param command command to send
 */
void BQ_WriteMABlockCommand(BQ_data* BMS, uint16_t command)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af02      	add	r7, sp, #8
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	807b      	strh	r3, [r7, #2]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 800028c:	2344      	movs	r3, #68	@ 0x44
 800028e:	733b      	strb	r3, [r7, #12]
 8000290:	2302      	movs	r3, #2
 8000292:	737b      	strb	r3, [r7, #13]
 8000294:	887b      	ldrh	r3, [r7, #2]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	73bb      	strb	r3, [r7, #14]
 800029a:	887b      	ldrh	r3, [r7, #2]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	b29b      	uxth	r3, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6818      	ldr	r0, [r3, #0]
 80002a8:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <BQ_WriteMABlockCommand+0x48>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	005b      	lsls	r3, r3, #1
 80002ae:	b299      	uxth	r1, r3
 80002b0:	f107 020c 	add.w	r2, r7, #12
 80002b4:	2364      	movs	r3, #100	@ 0x64
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2304      	movs	r3, #4
 80002ba:	f001 fc01 	bl	8001ac0 <HAL_I2C_Master_Transmit>
}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000000 	.word	0x20000000

080002cc <BQ_ReadMABlockCommand>:
 * @param command command from read
 * @param receive array to receive
 * @param size array size
 */
void BQ_ReadMABlockCommand(BQ_data* BMS, uint16_t command, uint8_t *receive, uint8_t size)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b092      	sub	sp, #72	@ 0x48
 80002d0:	af02      	add	r7, sp, #8
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	607a      	str	r2, [r7, #4]
 80002d6:	461a      	mov	r2, r3
 80002d8:	460b      	mov	r3, r1
 80002da:	817b      	strh	r3, [r7, #10]
 80002dc:	4613      	mov	r3, r2
 80002de:	727b      	strb	r3, [r7, #9]
    // send 0x44, then count of bytes, then command
    uint8_t buf[4] = {0x44, 0x02, command & 0xff, (command >> 8) & 0xff};
 80002e0:	2344      	movs	r3, #68	@ 0x44
 80002e2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80002e6:	2302      	movs	r3, #2
 80002e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80002ec:	897b      	ldrh	r3, [r7, #10]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80002f4:	897b      	ldrh	r3, [r7, #10]
 80002f6:	0a1b      	lsrs	r3, r3, #8
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_deviceAddress << 1, buf, 4, 100);
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	6818      	ldr	r0, [r3, #0]
 8000304:	4b27      	ldr	r3, [pc, #156]	@ (80003a4 <BQ_ReadMABlockCommand+0xd8>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	b299      	uxth	r1, r3
 800030c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000310:	2364      	movs	r3, #100	@ 0x64
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2304      	movs	r3, #4
 8000316:	f001 fbd3 	bl	8001ac0 <HAL_I2C_Master_Transmit>

    // send 0x44, then receive size
    uint8_t addr[2] = {0x44, 2 + size};
 800031a:	2344      	movs	r3, #68	@ 0x44
 800031c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8000320:	7a7b      	ldrb	r3, [r7, #9]
 8000322:	3302      	adds	r3, #2
 8000324:	b2db      	uxtb	r3, r3
 8000326:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    HAL_I2C_Master_Transmit(BMS->bq_i2c, bq_deviceAddress << 1, addr, 2, 100);
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	4b1d      	ldr	r3, [pc, #116]	@ (80003a4 <BQ_ReadMABlockCommand+0xd8>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	b299      	uxth	r1, r3
 8000336:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800033a:	2364      	movs	r3, #100	@ 0x64
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2302      	movs	r3, #2
 8000340:	f001 fbbe 	bl	8001ac0 <HAL_I2C_Master_Transmit>

    uint8_t result[35] = {0};
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	221f      	movs	r2, #31
 800034e:	2100      	movs	r1, #0
 8000350:	4618      	mov	r0, r3
 8000352:	f004 f965 	bl	8004620 <memset>
    HAL_I2C_Master_Receive(BMS->bq_i2c, bq_deviceAddress << 1, result, 35, 100);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	6818      	ldr	r0, [r3, #0]
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <BQ_ReadMABlockCommand+0xd8>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	b299      	uxth	r1, r3
 8000362:	f107 0210 	add.w	r2, r7, #16
 8000366:	2364      	movs	r3, #100	@ 0x64
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2323      	movs	r3, #35	@ 0x23
 800036c:	f001 fcc0 	bl	8001cf0 <HAL_I2C_Master_Receive>

    for (int i = 0; i < size; i++)
 8000370:	2300      	movs	r3, #0
 8000372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000374:	e00c      	b.n	8000390 <BQ_ReadMABlockCommand+0xc4>
    {
        receive[i] = result[i + 3];
 8000376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000378:	1cda      	adds	r2, r3, #3
 800037a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	440b      	add	r3, r1
 8000380:	3240      	adds	r2, #64	@ 0x40
 8000382:	443a      	add	r2, r7
 8000384:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 8000388:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++)
 800038a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800038c:	3301      	adds	r3, #1
 800038e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000390:	7a7b      	ldrb	r3, [r7, #9]
 8000392:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000394:	429a      	cmp	r2, r3
 8000396:	dbee      	blt.n	8000376 <BQ_ReadMABlockCommand+0xaa>
    }
}
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	3740      	adds	r7, #64	@ 0x40
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000

080003a8 <BQ_ReadCommandAsLShort>:
    result = result | (buf[1] << 8);

    return result;
}

uint16_t BQ_ReadCommandAsLShort(BQ_data* BMS, uint16_t command){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
    uint8_t buf[2];

    BQ_ReadMABlockCommand(BMS, command, buf, 2);
 80003b4:	f107 020c 	add.w	r2, r7, #12
 80003b8:	8879      	ldrh	r1, [r7, #2]
 80003ba:	2302      	movs	r3, #2
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff85 	bl	80002cc <BQ_ReadMABlockCommand>

    uint16_t result = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	81fb      	strh	r3, [r7, #14]

    result = result | buf[1];
 80003c6:	7b7b      	ldrb	r3, [r7, #13]
 80003c8:	461a      	mov	r2, r3
 80003ca:	89fb      	ldrh	r3, [r7, #14]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	81fb      	strh	r3, [r7, #14]
    result = result | (buf[0] << 8);
 80003d0:	7b3b      	ldrb	r3, [r7, #12]
 80003d2:	021b      	lsls	r3, r3, #8
 80003d4:	b21a      	sxth	r2, r3
 80003d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003da:	4313      	orrs	r3, r2
 80003dc:	b21b      	sxth	r3, r3
 80003de:	81fb      	strh	r3, [r7, #14]

    return result;
 80003e0:	89fb      	ldrh	r3, [r7, #14]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <BQ_ReadCommandAsLInt>:
    result = result | (buf[3] << 24);

    return result;
}

uint32_t BQ_ReadCommandAsLInt(BQ_data* BMS, uint16_t command){
 80003ea:	b580      	push	{r7, lr}
 80003ec:	b084      	sub	sp, #16
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	6078      	str	r0, [r7, #4]
 80003f2:	460b      	mov	r3, r1
 80003f4:	807b      	strh	r3, [r7, #2]
	uint8_t buf[4];

	    BQ_ReadMABlockCommand(BMS, command, buf, 4);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	8879      	ldrh	r1, [r7, #2]
 80003fc:	2304      	movs	r3, #4
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f7ff ff64 	bl	80002cc <BQ_ReadMABlockCommand>

	    uint32_t result = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]

	    result = result | (buf[3]);
 8000408:	7afb      	ldrb	r3, [r7, #11]
 800040a:	461a      	mov	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	4313      	orrs	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
	    result = result | (buf[2] << 8);
 8000412:	7abb      	ldrb	r3, [r7, #10]
 8000414:	021b      	lsls	r3, r3, #8
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4313      	orrs	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
	    result = result | (buf[1] << 16);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	041b      	lsls	r3, r3, #16
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	4313      	orrs	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
	    result = result | (buf[0] << 24);
 8000426:	7a3b      	ldrb	r3, [r7, #8]
 8000428:	061b      	lsls	r3, r3, #24
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	4313      	orrs	r3, r2
 800042e:	60fb      	str	r3, [r7, #12]

	    return result;
 8000430:	68fb      	ldr	r3, [r7, #12]
}
 8000432:	4618      	mov	r0, r3
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <BQAction_SetLed>:
/**
 * @brief setting led
 * @param active true - set on, false - set off
 */
void BQAction_SetLed(BQ_data* BMS, bool active)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	460b      	mov	r3, r1
 8000444:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_opStatus.bits.led != active)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	795b      	ldrb	r3, [r3, #5]
 800044a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800044e:	b2db      	uxtb	r3, r3
 8000450:	78fa      	ldrb	r2, [r7, #3]
 8000452:	429a      	cmp	r2, r3
 8000454:	d003      	beq.n	800045e <BQAction_SetLed+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LED_TOGGLE);
 8000456:	212b      	movs	r1, #43	@ 0x2b
 8000458:	6878      	ldr	r0, [r7, #4]
 800045a:	f7ff ff11 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <BQAction_SetManufacturingAllFet>:
/**
 * @brief setting ManufacturingStatus()[FET_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingAllFet(BQ_data* BMS, bool active)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	460b      	mov	r3, r1
 8000470:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fet != active)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	7d5b      	ldrb	r3, [r3, #21]
 8000476:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800047a:	b2db      	uxtb	r3, r3
 800047c:	78fa      	ldrb	r2, [r7, #3]
 800047e:	429a      	cmp	r2, r3
 8000480:	d003      	beq.n	800048a <BQAction_SetManufacturingAllFet+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FET_CONTROL);
 8000482:	2122      	movs	r1, #34	@ 0x22
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f7ff fefb 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}

08000492 <BQAction_SetManufacturingFuse>:
/**
 * @brief setting ManufacturingStatus()[FUSE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingFuse(BQ_data* BMS, bool active)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.fuse != active)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7d1b      	ldrb	r3, [r3, #20]
 80004a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	78fa      	ldrb	r2, [r7, #3]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d003      	beq.n	80004b6 <BQAction_SetManufacturingFuse+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_FUSE);
 80004ae:	2126      	movs	r1, #38	@ 0x26
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff fee5 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <BQAction_SetCalibration>:
/**
 * @brief setting ManufacturingStatus()[CAL_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetCalibration(BQ_data* BMS, bool active)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	460b      	mov	r3, r1
 80004c8:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.cal != active)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	7d1b      	ldrb	r3, [r3, #20]
 80004ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	78fa      	ldrb	r2, [r7, #3]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d003      	beq.n	80004e2 <BQAction_SetCalibration+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CALIBRATION_MODE);
 80004da:	212d      	movs	r1, #45	@ 0x2d
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff fecf 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <BQAction_SetManufacturingGauging>:
/**
 * @brief setting ManufacturingStatus()[GAUGE_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingGauging(BQ_data* BMS, bool active)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b082      	sub	sp, #8
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.gauge != active)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	7d5b      	ldrb	r3, [r3, #21]
 80004fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	78fa      	ldrb	r2, [r7, #3]
 8000502:	429a      	cmp	r2, r3
 8000504:	d003      	beq.n	800050e <BQAction_SetManufacturingGauging+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_GAUGING);
 8000506:	2121      	movs	r1, #33	@ 0x21
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f7ff feb9 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <BQAction_SetManufacturingPF>:
/**
 * @brief setting ManufacturingStatus()[PF_EN]
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingPF(BQ_data* BMS, bool active)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.pf != active)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	7d5b      	ldrb	r3, [r3, #21]
 8000526:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800052a:	b2db      	uxtb	r3, r3
 800052c:	78fa      	ldrb	r2, [r7, #3]
 800052e:	429a      	cmp	r2, r3
 8000530:	d003      	beq.n	800053a <BQAction_SetManufacturingPF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PERMANENT_FAILURE);
 8000532:	2124      	movs	r1, #36	@ 0x24
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff fea3 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <BQAction_SetManufacturingLF>:
/**
 * @brief setting ManufacturingStatus()[LF_EN] lifetime
 * @param active true - set on, false - set off
 */
void BQAction_SetManufacturingLF(BQ_data* BMS, bool active)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
 800054a:	460b      	mov	r3, r1
 800054c:	70fb      	strb	r3, [r7, #3]
    if (BMS->BQ_manufacturingStatus.bits.lf != active)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7d5b      	ldrb	r3, [r3, #21]
 8000552:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	78fa      	ldrb	r2, [r7, #3]
 800055a:	429a      	cmp	r2, r3
 800055c:	d003      	beq.n	8000566 <BQAction_SetManufacturingLF+0x24>
    {
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_LIFETIME_DATA_COLLECTION);
 800055e:	2123      	movs	r1, #35	@ 0x23
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f7ff fe8d 	bl	8000280 <BQ_WriteMABlockCommand>
    }
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <BQAction_EnableDischarging>:
/**
 * @brief enable discharge fet and disable the rest
 * @param none
 */
bool BQAction_EnableDischarging(BQ_data* BMS)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
    if (BQ_GetChargeMode(BMS) == DISCHARGE){
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f000 fa2a 	bl	80009d0 <BQ_GetChargeMode>
 800057c:	4603      	mov	r3, r0
 800057e:	2b02      	cmp	r3, #2
 8000580:	d101      	bne.n	8000586 <BQAction_EnableDischarging+0x18>
        return false;
 8000582:	2300      	movs	r3, #0
 8000584:	e043      	b.n	800060e <BQAction_EnableDischarging+0xa0>
    }

    // turn off unused fets
    if (BMS->BQ_manufacturingStatus.bits.chg){
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7d5b      	ldrb	r3, [r3, #21]
 800058a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800058e:	b2db      	uxtb	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d003      	beq.n	800059c <BQAction_EnableDischarging+0x2e>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000594:	211f      	movs	r1, #31
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fe72 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pdsg){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7d1b      	ldrb	r3, [r3, #20]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <BQAction_EnableDischarging+0x44>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 80005aa:	211c      	movs	r1, #28
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff fe67 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pchg){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7d5b      	ldrb	r3, [r3, #21]
 80005b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d003      	beq.n	80005c8 <BQAction_EnableDischarging+0x5a>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 80005c0:	211e      	movs	r1, #30
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fe5c 	bl	8000280 <BQ_WriteMABlockCommand>
    }

    // turn on discharge
    if (!BMS->BQ_manufacturingStatus.bits.dsg){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7d5b      	ldrb	r3, [r3, #21]
 80005cc:	f003 0320 	and.w	r3, r3, #32
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <BQAction_EnableDischarging+0x70>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 80005d6:	2120      	movs	r1, #32
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff fe51 	bl	8000280 <BQ_WriteMABlockCommand>
    }

    HAL_Delay(1500);
 80005de:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005e2:	f000 fe89 	bl	80012f8 <HAL_Delay>

    if (BQ_GetChargeMode(BMS) != CHARGE){
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f9f2 	bl	80009d0 <BQ_GetChargeMode>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d001      	beq.n	80005f6 <BQAction_EnableDischarging+0x88>
        return true;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00b      	b.n	800060e <BQAction_EnableDischarging+0xa0>
    }else{
        // turn off discharge
        if (BMS->BQ_manufacturingStatus.bits.dsg){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7d5b      	ldrb	r3, [r3, #21]
 80005fa:	f003 0320 	and.w	r3, r3, #32
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <BQAction_EnableDischarging+0x9e>
            BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000604:	2120      	movs	r1, #32
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff fe3a 	bl	8000280 <BQ_WriteMABlockCommand>
        }
        return false;
 800060c:	2300      	movs	r3, #0
    }
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <BQAction_DisableFets>:
/**
 * @brief disable all fets
 * @param none
 */
bool BQAction_DisableFets(BQ_data* BMS)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f8e4 	bl	80007ec <BQAction_UpdateOpStatus>
    if (BMS->BQ_manufacturingStatus.bits.chg){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	7d5b      	ldrb	r3, [r3, #21]
 8000628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d003      	beq.n	800063a <BQAction_DisableFets+0x24>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_CHG_FET_TOGGLE);
 8000632:	211f      	movs	r1, #31
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fe23 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.dsg){
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7d5b      	ldrb	r3, [r3, #21]
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <BQAction_DisableFets+0x3a>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_DSG_FET_TOGGLE);
 8000648:	2120      	movs	r1, #32
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff fe18 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pchg){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7d5b      	ldrb	r3, [r3, #21]
 8000654:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <BQAction_DisableFets+0x50>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PCHG_FET_TOGGLE);
 800065e:	211e      	movs	r1, #30
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fe0d 	bl	8000280 <BQ_WriteMABlockCommand>
    }
    if (BMS->BQ_manufacturingStatus.bits.pdsg){
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7d1b      	ldrb	r3, [r3, #20]
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <BQAction_DisableFets+0x66>
        BQ_WriteMABlockCommand(BMS, BQ40Z80_MFA_PDSG_FET_TOGGLE);
 8000674:	211c      	movs	r1, #28
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f7ff fe02 	bl	8000280 <BQ_WriteMABlockCommand>
    }

    return true;
 800067c:	2301      	movs	r3, #1
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <BQAction_TryUnsealedDevice>:
/**
 * @brief change sealed mode to unsealed
 * @param none
 **/
void BQAction_TryUnsealedDevice(BQ_data* BMS)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f8ac 	bl	80007ec <BQAction_UpdateOpStatus>
    SECURITY_MODE securityMode = BQ_GetSecurityMode(BMS);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f960 	bl	800095a <BQ_GetSecurityMode>
 800069a:	4603      	mov	r3, r0
 800069c:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 800069e:	e019      	b.n	80006d4 <BQAction_TryUnsealedDevice+0x4e>
    {
        BQ_WriteMABlockCommand(BMS, 0x0414);
 80006a0:	f240 4114 	movw	r1, #1044	@ 0x414
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fdeb 	bl	8000280 <BQ_WriteMABlockCommand>
        HAL_Delay(500);
 80006aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ae:	f000 fe23 	bl	80012f8 <HAL_Delay>
        BQ_WriteMABlockCommand(BMS, 0x3672);
 80006b2:	f243 6172 	movw	r1, #13938	@ 0x3672
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff fde2 	bl	8000280 <BQ_WriteMABlockCommand>
        HAL_Delay(3000);
 80006bc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006c0:	f000 fe1a 	bl	80012f8 <HAL_Delay>
        BQAction_UpdateOpStatus(BMS);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f891 	bl	80007ec <BQAction_UpdateOpStatus>
        securityMode = BQ_GetSecurityMode(BMS);
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f945 	bl	800095a <BQ_GetSecurityMode>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]
    while (securityMode == SEALED || securityMode == RESERVED)
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0e2      	beq.n	80006a0 <BQAction_TryUnsealedDevice+0x1a>
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d0df      	beq.n	80006a0 <BQAction_TryUnsealedDevice+0x1a>
    }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <BQAction_UpdateData>:
/**
 * @brief updating statuses, flags
 * @param none
 */
void BQAction_UpdateData(BQ_data* BMS)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	6078      	str	r0, [r7, #4]
    uint16_t manStatus = BQ_ReadCommandAsLShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 80006f4:	2157      	movs	r1, #87	@ 0x57
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff fe56 	bl	80003a8 <BQ_ReadCommandAsLShort>
 80006fc:	4603      	mov	r3, r0
 80006fe:	83fb      	strh	r3, [r7, #30]
    BMS->BQ_manufacturingStatus.all = manStatus;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	8bfa      	ldrh	r2, [r7, #30]
 8000704:	829a      	strh	r2, [r3, #20]
    uint32_t chargeStatus = BQ_ReadCommandAsLInt(BMS, BQ40Z80_MFA_CHARGING_STATUS);
 8000706:	2155      	movs	r1, #85	@ 0x55
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fe6e 	bl	80003ea <BQ_ReadCommandAsLInt>
 800070e:	61b8      	str	r0, [r7, #24]
    BMS->BQ_chargeStatus.all = chargeStatus;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	69ba      	ldr	r2, [r7, #24]
 8000714:	609a      	str	r2, [r3, #8]
    uint32_t operationStatus = BQ_ReadCommandAsLInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 8000716:	2154      	movs	r1, #84	@ 0x54
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff fe66 	bl	80003ea <BQ_ReadCommandAsLInt>
 800071e:	6178      	str	r0, [r7, #20]
    BMS->BQ_opStatus.all = operationStatus;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	605a      	str	r2, [r3, #4]
    uint32_t gaugStatus = BQ_ReadCommandAsLInt(BMS, BQ40Z80_MFA_GAUGING_STATUS);
 8000726:	2156      	movs	r1, #86	@ 0x56
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff fe5e 	bl	80003ea <BQ_ReadCommandAsLInt>
 800072e:	6138      	str	r0, [r7, #16]
    BMS->BQ_gaugeStatus.all = gaugStatus;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	60da      	str	r2, [r3, #12]
    uint16_t batteryMode = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryMode); //possibly misplaced bytes
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a27      	ldr	r2, [pc, #156]	@ (80007d8 <BQAction_UpdateData+0xec>)
 800073c:	7811      	ldrb	r1, [r2, #0]
 800073e:	2203      	movs	r2, #3
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fb03 	bl	8000d4c <I2CHelper_ReadRegisterAsShort>
 8000746:	4603      	mov	r3, r0
 8000748:	81fb      	strh	r3, [r7, #14]
    BMS->BQ_batteryMode.all = batteryMode;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	89fa      	ldrh	r2, [r7, #14]
 800074e:	825a      	strh	r2, [r3, #18]
    uint16_t batteryStatus = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_BatteryStatus);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a20      	ldr	r2, [pc, #128]	@ (80007d8 <BQAction_UpdateData+0xec>)
 8000756:	7811      	ldrb	r1, [r2, #0]
 8000758:	2216      	movs	r2, #22
 800075a:	4618      	mov	r0, r3
 800075c:	f000 faf6 	bl	8000d4c <I2CHelper_ReadRegisterAsShort>
 8000760:	4603      	mov	r3, r0
 8000762:	81bb      	strh	r3, [r7, #12]
    BMS->BQ_batteryStatus.all = batteryStatus;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	89ba      	ldrh	r2, [r7, #12]
 8000768:	821a      	strh	r2, [r3, #16]
    uint8_t gpioStatus = I2CHelper_ReadRegisterAsChar(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_GPIORead);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <BQAction_UpdateData+0xec>)
 8000770:	7811      	ldrb	r1, [r2, #0]
 8000772:	2248      	movs	r2, #72	@ 0x48
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fb0e 	bl	8000d96 <I2CHelper_ReadRegisterAsChar>
 800077a:	4603      	mov	r3, r0
 800077c:	72fb      	strb	r3, [r7, #11]

    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 800077e:	2320      	movs	r3, #32
 8000780:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <BQAction_UpdateData+0xf0>)
 8000782:	2171      	movs	r1, #113	@ 0x71
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fda1 	bl	80002cc <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_2, BMS_1.BQ_daStatus2, 16);
 800078a:	2310      	movs	r3, #16
 800078c:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <BQAction_UpdateData+0xf4>)
 800078e:	2172      	movs	r1, #114	@ 0x72
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fd9b 	bl	80002cc <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_3, BMS_1.BQ_daStatus3, 18);
 8000796:	2312      	movs	r3, #18
 8000798:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <BQAction_UpdateData+0xf8>)
 800079a:	217b      	movs	r1, #123	@ 0x7b
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fd95 	bl	80002cc <BQ_ReadMABlockCommand>
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_OUTPUT_CADC_CAL, BMS_1.BQ_outCal.all, 32);
 80007a2:	2320      	movs	r3, #32
 80007a4:	4a10      	ldr	r2, [pc, #64]	@ (80007e8 <BQAction_UpdateData+0xfc>)
 80007a6:	f24f 0181 	movw	r1, #61569	@ 0xf081
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff fd8e 	bl	80002cc <BQ_ReadMABlockCommand>
    BQ_ParseAllFlags(BMS, operationStatus, batteryMode, batteryStatus, gpioStatus, manStatus, chargeStatus, gaugStatus);
 80007b0:	89b9      	ldrh	r1, [r7, #12]
 80007b2:	89fa      	ldrh	r2, [r7, #14]
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	9303      	str	r3, [sp, #12]
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	9302      	str	r3, [sp, #8]
 80007bc:	8bfb      	ldrh	r3, [r7, #30]
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	7afb      	ldrb	r3, [r7, #11]
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	460b      	mov	r3, r1
 80007c6:	6979      	ldr	r1, [r7, #20]
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f831 	bl	8000830 <BQ_ParseAllFlags>
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000043 	.word	0x20000043
 80007e0:	20000063 	.word	0x20000063
 80007e4:	20000073 	.word	0x20000073
 80007e8:	20000086 	.word	0x20000086

080007ec <BQAction_UpdateOpStatus>:
/**
 * @brief update dastatus1, OperationStatus flags and ManufacturingStatus flags
 * @param none
 */
void BQAction_UpdateOpStatus(BQ_data* BMS)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    BQ_ReadMABlockCommand(BMS, BQ40Z80_MFA_DA_STATUS_1, BMS_1.BQ_daStatus1, 32);
 80007f4:	2320      	movs	r3, #32
 80007f6:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <BQAction_UpdateOpStatus+0x40>)
 80007f8:	2171      	movs	r1, #113	@ 0x71
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff fd66 	bl	80002cc <BQ_ReadMABlockCommand>
    uint32_t op_status = BQ_ReadCommandAsLInt(BMS, BQ40Z80_MFA_OPERATION_STATUS);
 8000800:	2154      	movs	r1, #84	@ 0x54
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff fdf1 	bl	80003ea <BQ_ReadCommandAsLInt>
 8000808:	60f8      	str	r0, [r7, #12]
    BMS->BQ_opStatus.all = op_status;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	605a      	str	r2, [r3, #4]
//    BQ_ParseOperationStatus(BMS, op_status);
    uint16_t man_status = BQ_ReadCommandAsLShort(BMS, BQ40Z80_MFA_MANUFACTURING_STATUS);
 8000810:	2157      	movs	r1, #87	@ 0x57
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fdc8 	bl	80003a8 <BQ_ReadCommandAsLShort>
 8000818:	4603      	mov	r3, r0
 800081a:	817b      	strh	r3, [r7, #10]
    BMS->BQ_manufacturingStatus.all = man_status;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	897a      	ldrh	r2, [r7, #10]
 8000820:	829a      	strh	r2, [r3, #20]
//    BQ_ParseManufacturingStatus(BMS, man_status);
}
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000043 	.word	0x20000043

08000830 <BQ_ParseAllFlags>:
					  uint16_t batteryMode,
					  uint8_t gpio,
					  uint16_t manStatus,
					  uint32_t chargeStatus,
					  uint32_t gaugStatus)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	4611      	mov	r1, r2
 800083c:	461a      	mov	r2, r3
 800083e:	460b      	mov	r3, r1
 8000840:	80fb      	strh	r3, [r7, #6]
 8000842:	4613      	mov	r3, r2
 8000844:	80bb      	strh	r3, [r7, #4]
	BQ_ParseOperationStatus(BMS, opStatus);
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f000 f820 	bl	800088e <BQ_ParseOperationStatus>
	BQ_ParseChargeStatus(BMS, chargeStatus);
 800084e:	6a39      	ldr	r1, [r7, #32]
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f82a 	bl	80008aa <BQ_ParseChargeStatus>
	BQ_ParseGaugeStatus(BMS, gaugStatus);
 8000856:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f000 f834 	bl	80008c6 <BQ_ParseGaugeStatus>
	BQ_ParseBatteryStatus(BMS, batteryStatus);
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4619      	mov	r1, r3
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f83d 	bl	80008e2 <BQ_ParseBatteryStatus>
	BQ_ParseManufacturingStatus(BMS, manStatus);
 8000868:	8bbb      	ldrh	r3, [r7, #28]
 800086a:	4619      	mov	r1, r3
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f000 f856 	bl	800091e <BQ_ParseManufacturingStatus>
	BQ_ParseBatteryMode(BMS, batteryMode);
 8000872:	88bb      	ldrh	r3, [r7, #4]
 8000874:	4619      	mov	r1, r3
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f000 f842 	bl	8000900 <BQ_ParseBatteryMode>
	BQ_ParseGpio(BMS, gpio);
 800087c:	7e3b      	ldrb	r3, [r7, #24]
 800087e:	4619      	mov	r1, r3
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f000 f85b 	bl	800093c <BQ_ParseGpio>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <BQ_ParseOperationStatus>:
void BQ_ParseOperationStatus(BQ_data* BMS, uint32_t raw)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_opStatus
	BMS->BQ_opStatus.all = raw;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	605a      	str	r2, [r3, #4]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <BQ_ParseChargeStatus>:

void BQ_ParseChargeStatus(BQ_data* BMS, uint32_t raw)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_chargeStatus
//	decimalToBinary(raw, BMS->BQ_chargeStatus, 32);
	BMS->BQ_chargeStatus.all = raw;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	609a      	str	r2, [r3, #8]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <BQ_ParseGaugeStatus>:

void BQ_ParseGaugeStatus(BQ_data* BMS, uint32_t raw)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
	//convert to binary array and save in BQ_gaugeStatus
//	decimalToBinary(raw, BMS->BQ_gaugeStatus, 32);
	BMS->BQ_gaugeStatus.all = raw;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	60da      	str	r2, [r3, #12]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <BQ_ParseBatteryStatus>:

void BQ_ParseBatteryStatus(BQ_data* BMS, uint16_t raw)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	460b      	mov	r3, r1
 80008ec:	807b      	strh	r3, [r7, #2]
	//convert to binary array and save in BQ_batteryStatus
//	decimalToBinary(raw, BMS->BQ_batteryStatus, 16);
	BMS->BQ_batteryStatus.all = raw;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	887a      	ldrh	r2, [r7, #2]
 80008f2:	821a      	strh	r2, [r3, #16]
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <BQ_ParseBatteryMode>:

void BQ_ParseBatteryMode(BQ_data* BMS, uint16_t raw)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	//convert to binary array and save in BQ_batteryMode
//	decimalToBinary(raw, BMS->BQ_batteryMode, 16);
	BMS->BQ_batteryMode.all = raw;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	887a      	ldrh	r2, [r7, #2]
 8000910:	825a      	strh	r2, [r3, #18]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <BQ_ParseManufacturingStatus>:

void BQ_ParseManufacturingStatus(BQ_data* BMS, uint16_t raw)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	807b      	strh	r3, [r7, #2]
	BMS->BQ_manufacturingStatus.all = raw;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	887a      	ldrh	r2, [r7, #2]
 800092e:	829a      	strh	r2, [r3, #20]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <BQ_ParseGpio>:

void BQ_ParseGpio(BQ_data* BMS, uint8_t raw)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
	//convert to binary array and save in BQ_gpio
//	decimalToBinary(raw, BMS->BQ_gpio, 8);
	BMS->BQ_gpio.all = raw;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	78fa      	ldrb	r2, [r7, #3]
 800094c:	759a      	strb	r2, [r3, #22]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <BQ_GetSecurityMode>:
/**
 * @brief get security mode from BQ_opStatus
 * @return SECURITY_MODE
 */
SECURITY_MODE BQ_GetSecurityMode(BQ_data* BMS)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
    if (BMS->BQ_opStatus.bits.sec1 && BMS->BQ_opStatus.bits.sec0){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	799b      	ldrb	r3, [r3, #6]
 8000966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d008      	beq.n	8000982 <BQ_GetSecurityMode+0x28>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	799b      	ldrb	r3, [r3, #6]
 8000974:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <BQ_GetSecurityMode+0x28>
        return SEALED;//11
 800097e:	2300      	movs	r3, #0
 8000980:	e020      	b.n	80009c4 <BQ_GetSecurityMode+0x6a>
    }else if (BMS->BQ_opStatus.bits.sec1 && !BMS->BQ_opStatus.bits.sec0){
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	799b      	ldrb	r3, [r3, #6]
 8000986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d008      	beq.n	80009a2 <BQ_GetSecurityMode+0x48>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	799b      	ldrb	r3, [r3, #6]
 8000994:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <BQ_GetSecurityMode+0x48>
        return UNSEALED;//10
 800099e:	2301      	movs	r3, #1
 80009a0:	e010      	b.n	80009c4 <BQ_GetSecurityMode+0x6a>
    }else if (!BMS->BQ_opStatus.bits.sec1 && BMS->BQ_opStatus.bits.sec0){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	799b      	ldrb	r3, [r3, #6]
 80009a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d108      	bne.n	80009c2 <BQ_GetSecurityMode+0x68>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <BQ_GetSecurityMode+0x68>
        return FULL_ACCESS;//01
 80009be:	2302      	movs	r3, #2
 80009c0:	e000      	b.n	80009c4 <BQ_GetSecurityMode+0x6a>
    }else{
        return RESERVED;//00
 80009c2:	2303      	movs	r3, #3
    }
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <BQ_GetChargeMode>:
/**
 * @brief get charge from BQ_opStatus
 * @return CHARGE, DISCHARGE or RELAX
 */
CHARGE_MODE BQ_GetChargeMode(BQ_data* BMS)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    BQAction_UpdateOpStatus(BMS);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff07 	bl	80007ec <BQAction_UpdateOpStatus>
    uint16_t packVoltage = BMS->BQ_daStatus1[10] | (BMS->BQ_daStatus1[11] << 8);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	81fb      	strh	r3, [r7, #14]
    uint16_t current = I2CHelper_ReadRegisterAsShort(BMS->bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa8 <BQ_GetChargeMode+0xd8>)
 80009fc:	7811      	ldrb	r1, [r2, #0]
 80009fe:	220a      	movs	r2, #10
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 f9a3 	bl	8000d4c <I2CHelper_ReadRegisterAsShort>
 8000a06:	4603      	mov	r3, r0
 8000a08:	81bb      	strh	r3, [r7, #12]

    if (packVoltage > 1000 && BMS->BQ_opStatus.bits.chg && BMS->BQ_opStatus.bits.pchg && BMS->BQ_manufacturingStatus.bits.chg && current > 0 && current < 30000){
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a10:	d91e      	bls.n	8000a50 <BQ_GetChargeMode+0x80>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	79db      	ldrb	r3, [r3, #7]
 8000a16:	f003 0320 	and.w	r3, r3, #32
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d017      	beq.n	8000a50 <BQ_GetChargeMode+0x80>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	79db      	ldrb	r3, [r3, #7]
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d010      	beq.n	8000a50 <BQ_GetChargeMode+0x80>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7d5b      	ldrb	r3, [r3, #21]
 8000a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d009      	beq.n	8000a50 <BQ_GetChargeMode+0x80>
 8000a3c:	89bb      	ldrh	r3, [r7, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <BQ_GetChargeMode+0x80>
 8000a42:	89bb      	ldrh	r3, [r7, #12]
 8000a44:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d801      	bhi.n	8000a50 <BQ_GetChargeMode+0x80>
        return CHARGE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e026      	b.n	8000a9e <BQ_GetChargeMode+0xce>
    }else if (packVoltage > 1000 && BMS->BQ_opStatus.bits.xdsg && BMS->BQ_opStatus.bits.dsg && BMS->BQ_manufacturingStatus.bits.dsg && 65535 - current > 0 && current > 30000){
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a56:	d921      	bls.n	8000a9c <BQ_GetChargeMode+0xcc>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	799b      	ldrb	r3, [r3, #6]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d01a      	beq.n	8000a9c <BQ_GetChargeMode+0xcc>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	79db      	ldrb	r3, [r3, #7]
 8000a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d013      	beq.n	8000a9c <BQ_GetChargeMode+0xcc>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7d5b      	ldrb	r3, [r3, #21]
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d00c      	beq.n	8000a9c <BQ_GetChargeMode+0xcc>
 8000a82:	89bb      	ldrh	r3, [r7, #12]
 8000a84:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8000a88:	33ff      	adds	r3, #255	@ 0xff
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dd06      	ble.n	8000a9c <BQ_GetChargeMode+0xcc>
 8000a8e:	89bb      	ldrh	r3, [r7, #12]
 8000a90:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d901      	bls.n	8000a9c <BQ_GetChargeMode+0xcc>
        return DISCHARGE;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	e000      	b.n	8000a9e <BQ_GetChargeMode+0xce>
    }else{
        return RELAX;
 8000a9c:	2300      	movs	r3, #0
    }
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000000 	.word	0x20000000

08000aac <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b49      	ldr	r3, [pc, #292]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	4a48      	ldr	r2, [pc, #288]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ace:	4b46      	ldr	r3, [pc, #280]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	4b43      	ldr	r3, [pc, #268]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a42      	ldr	r2, [pc, #264]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b40      	ldr	r3, [pc, #256]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a3c      	ldr	r2, [pc, #240]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b3a      	ldr	r3, [pc, #232]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a36      	ldr	r2, [pc, #216]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <MX_GPIO_Init+0x13c>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	21b0      	movs	r1, #176	@ 0xb0
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f000 fee3 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b34:	482d      	ldr	r0, [pc, #180]	@ (8000bec <MX_GPIO_Init+0x140>)
 8000b36:	f000 fedd 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b40:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4827      	ldr	r0, [pc, #156]	@ (8000bf0 <MX_GPIO_Init+0x144>)
 8000b52:	f000 fd55 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b74:	f000 fd44 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000b78:	23b0      	movs	r3, #176	@ 0xb0
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b92:	f000 fd35 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000b96:	2340      	movs	r3, #64	@ 0x40
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bac:	f000 fd28 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4808      	ldr	r0, [pc, #32]	@ (8000bec <MX_GPIO_Init+0x140>)
 8000bca:	f000 fd19 	bl	8001600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 12, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210c      	movs	r1, #12
 8000bd2:	2028      	movs	r0, #40	@ 0x28
 8000bd4:	f000 fc8f 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd8:	2028      	movs	r0, #40	@ 0x28
 8000bda:	f000 fca8 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	@ 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	48000800 	.word	0x48000800

08000bf4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c6c <MX_I2C1_Init+0x78>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c00:	4a1b      	ldr	r2, [pc, #108]	@ (8000c70 <MX_I2C1_Init+0x7c>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c04:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c2e:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c30:	f000 feaa 	bl	8001988 <HAL_I2C_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 fa2e 	bl	800109a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c42:	f002 fab5 	bl	80031b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c4c:	f000 fa25 	bl	800109a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <MX_I2C1_Init+0x74>)
 8000c54:	f002 faf7 	bl	8003246 <HAL_I2CEx_ConfigDigitalFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fa1c 	bl	800109a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000a8 	.word	0x200000a8
 8000c6c:	40005400 	.word	0x40005400
 8000c70:	10909cec 	.word	0x10909cec

08000c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0a2      	sub	sp, #136	@ 0x88
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2260      	movs	r2, #96	@ 0x60
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fcc3 	bl	8004620 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <HAL_I2C_MspInit+0xcc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d148      	bne.n	8000d36 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ca4:	2340      	movs	r3, #64	@ 0x40
 8000ca6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 f979 	bl	8003fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f000 f9ed 	bl	800109a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <HAL_I2C_MspInit+0xd0>)
 8000cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d44 <HAL_I2C_MspInit+0xd0>)
 8000cc6:	f043 0302 	orr.w	r3, r3, #2
 8000cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <HAL_I2C_MspInit+0xd0>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000cd8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cdc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cec:	2304      	movs	r3, #4
 8000cee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4813      	ldr	r0, [pc, #76]	@ (8000d48 <HAL_I2C_MspInit+0xd4>)
 8000cfa:	f000 fc81 	bl	8001600 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_I2C_MspInit+0xd0>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_I2C_MspInit+0xd0>)
 8000d04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_I2C_MspInit+0xd0>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210a      	movs	r1, #10
 8000d1a:	201f      	movs	r0, #31
 8000d1c:	f000 fbeb 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d20:	201f      	movs	r0, #31
 8000d22:	f000 fc04 	bl	800152e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 9, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2109      	movs	r1, #9
 8000d2a:	2020      	movs	r0, #32
 8000d2c:	f000 fbe3 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d30:	2020      	movs	r0, #32
 8000d32:	f000 fbfc 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3788      	adds	r7, #136	@ 0x88
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40021000 	.word	0x40021000
 8000d48:	48000400 	.word	0x48000400

08000d4c <I2CHelper_ReadRegisterAsShort>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint16_t I2CHelper_ReadRegisterAsShort(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af02      	add	r7, sp, #8
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	70fb      	strb	r3, [r7, #3]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	I2CHelper_ReadRegister(i2c, device, address, buf, 2);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	78ba      	ldrb	r2, [r7, #2]
 8000d62:	78f9      	ldrb	r1, [r7, #3]
 8000d64:	2002      	movs	r0, #2
 8000d66:	9000      	str	r0, [sp, #0]
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f82a 	bl	8000dc2 <I2CHelper_ReadRegister>
	uint16_t result = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	81fb      	strh	r3, [r7, #14]

	result = result | buf[0];
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	461a      	mov	r2, r3
 8000d76:	89fb      	ldrh	r3, [r7, #14]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	81fb      	strh	r3, [r7, #14]
	result = result | (buf[1] << 8);
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	81fb      	strh	r3, [r7, #14]

	return result;
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <I2CHelper_ReadRegisterAsChar>:
 * @param i2c I2C_HandleTypeDef pointer
 * @param device device address
 * @param address address from read
 **/
uint8_t I2CHelper_ReadRegisterAsChar(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af02      	add	r7, sp, #8
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70fb      	strb	r3, [r7, #3]
 8000da2:	4613      	mov	r3, r2
 8000da4:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[1];
	I2CHelper_ReadRegister(i2c, device, address, buf, 1);
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	78ba      	ldrb	r2, [r7, #2]
 8000dac:	78f9      	ldrb	r1, [r7, #3]
 8000dae:	2001      	movs	r0, #1
 8000db0:	9000      	str	r0, [sp, #0]
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f805 	bl	8000dc2 <I2CHelper_ReadRegister>

	return buf[0];
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <I2CHelper_ReadRegister>:
 * @param address where to read
 * @param receive_buffer array to write
 * @param size receive_buffer size
 */
void I2CHelper_ReadRegister(I2C_HandleTypeDef *i2c, uint8_t device, uint8_t address, uint8_t *receive_buffer, uint8_t size)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af02      	add	r7, sp, #8
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	72fb      	strb	r3, [r7, #11]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(i2c, device << 1, &address, 1, 100);
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	b299      	uxth	r1, r3
 8000ddc:	f107 020a 	add.w	r2, r7, #10
 8000de0:	2364      	movs	r3, #100	@ 0x64
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2301      	movs	r3, #1
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 fe6a 	bl	8001ac0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(i2c, device << 1, receive_buffer, size, 100);
 8000dec:	7afb      	ldrb	r3, [r7, #11]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	b299      	uxth	r1, r3
 8000df4:	7e3b      	ldrb	r3, [r7, #24]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	2264      	movs	r2, #100	@ 0x64
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 ff76 	bl	8001cf0 <HAL_I2C_Master_Receive>
}
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool status;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin){
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e1c:	d113      	bne.n	8000e46 <HAL_GPIO_EXTI_Callback+0x3a>
	  status = !status;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf14      	ite	ne
 8000e26:	2301      	movne	r3, #1
 8000e28:	2300      	moveq	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f083 0301 	eor.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e3a:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000e3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e42:	f000 fd6f 	bl	8001924 <HAL_GPIO_TogglePin>
  }
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000fc 	.word	0x200000fc
 8000e54:	48000400 	.word	0x48000400

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	@ 0x28
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5e:	f000 f9cf 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e62:	f000 f8c9 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e66:	f7ff fe21 	bl	8000aac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e6a:	f7ff fec3 	bl	8000bf4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_I2C_Init(&hi2c1);
//  HAL_I2C_MspInit(&hi2c1);
  status = false;
 8000e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8000fe8 <main+0x190>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
  uint16_t voltage = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t current = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint8_t percentage[2] = {0};
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	843b      	strh	r3, [r7, #32]
  uint16_t cells[6] = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
  bool fun[5] = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	711a      	strb	r2, [r3, #4]
  uint8_t test[11] = {0};
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	f8c3 2003 	str.w	r2, [r3, #3]
//  percentage[0] = I2CHelper_GetFirstAddress(&hi2c1);
  BQ_Init(&hi2c1);
 8000ea4:	4851      	ldr	r0, [pc, #324]	@ (8000fec <main+0x194>)
 8000ea6:	f7ff f991 	bl	80001cc <BQ_Init>
  BQ_ReadMABlockCommand(&BMS_1, BQ40Z80_MFA_FIRMWARE_VERSION, test, 6);
 8000eaa:	463a      	mov	r2, r7
 8000eac:	2306      	movs	r3, #6
 8000eae:	2102      	movs	r1, #2
 8000eb0:	484f      	ldr	r0, [pc, #316]	@ (8000ff0 <main+0x198>)
 8000eb2:	f7ff fa0b 	bl	80002cc <BQ_ReadMABlockCommand>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(200);
 8000eb6:	20c8      	movs	r0, #200	@ 0xc8
 8000eb8:	f000 fa1e 	bl	80012f8 <HAL_Delay>
	  BQAction_UpdateData(&BMS_1);
 8000ebc:	484c      	ldr	r0, [pc, #304]	@ (8000ff0 <main+0x198>)
 8000ebe:	f7ff fc15 	bl	80006ec <BQAction_UpdateData>
	  voltage = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Voltage);//works 0x09
 8000ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff0 <main+0x198>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <main+0x19c>)
 8000ec8:	7811      	ldrb	r1, [r2, #0]
 8000eca:	2209      	movs	r2, #9
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff3d 	bl	8000d4c <I2CHelper_ReadRegisterAsShort>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  current = I2CHelper_ReadRegisterAsShort(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_Current);//TODO fix 1A = -400
 8000ed6:	4b46      	ldr	r3, [pc, #280]	@ (8000ff0 <main+0x198>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a46      	ldr	r2, [pc, #280]	@ (8000ff4 <main+0x19c>)
 8000edc:	7811      	ldrb	r1, [r2, #0]
 8000ede:	220a      	movs	r2, #10
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff33 	bl	8000d4c <I2CHelper_ReadRegisterAsShort>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	  percentage[0] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_RelativeStateOfCharge);
 8000eea:	4b41      	ldr	r3, [pc, #260]	@ (8000ff0 <main+0x198>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a41      	ldr	r2, [pc, #260]	@ (8000ff4 <main+0x19c>)
 8000ef0:	7811      	ldrb	r1, [r2, #0]
 8000ef2:	220d      	movs	r2, #13
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff4e 	bl	8000d96 <I2CHelper_ReadRegisterAsChar>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 3020 	strb.w	r3, [r7, #32]
	  percentage[1] = I2CHelper_ReadRegisterAsChar(BMS_1.bq_i2c, bq_deviceAddress, BQ40Z80_SBS_AbsoluteStateOfCharge);
 8000f00:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <main+0x198>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff4 <main+0x19c>)
 8000f06:	7811      	ldrb	r1, [r2, #0]
 8000f08:	220e      	movs	r2, #14
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff43 	bl	8000d96 <I2CHelper_ReadRegisterAsChar>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  // -----separated cells-----
	  cells[0] = BMS_1.BQ_daStatus1[0] | (BMS_1.BQ_daStatus1[1] << 8);
 8000f16:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <main+0x198>)
 8000f18:	7ddb      	ldrb	r3, [r3, #23]
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ff0 <main+0x198>)
 8000f1e:	7e1b      	ldrb	r3, [r3, #24]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	82bb      	strh	r3, [r7, #20]
	  cells[1] = BMS_1.BQ_daStatus1[2] | (BMS_1.BQ_daStatus1[3] << 8);
 8000f2c:	4b30      	ldr	r3, [pc, #192]	@ (8000ff0 <main+0x198>)
 8000f2e:	7e5b      	ldrb	r3, [r3, #25]
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <main+0x198>)
 8000f34:	7e9b      	ldrb	r3, [r3, #26]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	82fb      	strh	r3, [r7, #22]
	  cells[2] = BMS_1.BQ_daStatus1[4] | (BMS_1.BQ_daStatus1[5] << 8);
 8000f42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <main+0x198>)
 8000f44:	7edb      	ldrb	r3, [r3, #27]
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b29      	ldr	r3, [pc, #164]	@ (8000ff0 <main+0x198>)
 8000f4a:	7f1b      	ldrb	r3, [r3, #28]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	833b      	strh	r3, [r7, #24]
	  cells[3] = BMS_1.BQ_daStatus1[6] | (BMS_1.BQ_daStatus1[7] << 8);
 8000f58:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <main+0x198>)
 8000f5a:	7f5b      	ldrb	r3, [r3, #29]
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <main+0x198>)
 8000f60:	7f9b      	ldrb	r3, [r3, #30]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	837b      	strh	r3, [r7, #26]
	  cells[4] = BMS_1.BQ_daStatus3[0] | (BMS_1.BQ_daStatus3[1] << 8);
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <main+0x198>)
 8000f70:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <main+0x198>)
 8000f78:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	83bb      	strh	r3, [r7, #28]
	  cells[5] = BMS_1.BQ_daStatus3[6] | (BMS_1.BQ_daStatus3[7] << 8);
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <main+0x198>)
 8000f8a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <main+0x198>)
 8000f92:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	83fb      	strh	r3, [r7, #30]

	  // -----toggle fets--------
	  if(status){
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <main+0x190>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <main+0x15a>
		  BQAction_EnableDischarging(&BMS_1);
 8000faa:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <main+0x198>)
 8000fac:	f7ff fadf 	bl	800056e <BQAction_EnableDischarging>
 8000fb0:	e002      	b.n	8000fb8 <main+0x160>
	  }else{
		  BQAction_DisableFets(&BMS_1);
 8000fb2:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <main+0x198>)
 8000fb4:	f7ff fb2f 	bl	8000616 <BQAction_DisableFets>
	  }
	  fun[0] = BMS_1.BQ_opStatus.bits.pdsg;
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <main+0x198>)
 8000fba:	79db      	ldrb	r3, [r3, #7]
 8000fbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	733b      	strb	r3, [r7, #12]
	  fun[1] = BMS_1.BQ_opStatus.bits.xdsg;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <main+0x198>)
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	2301      	movne	r3, #1
 8000fde:	2300      	moveq	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	737b      	strb	r3, [r7, #13]
	  HAL_Delay(200);
 8000fe4:	e767      	b.n	8000eb6 <main+0x5e>
 8000fe6:	bf00      	nop
 8000fe8:	200000fc 	.word	0x200000fc
 8000fec:	200000a8 	.word	0x200000a8
 8000ff0:	2000002c 	.word	0x2000002c
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	@ 0x58
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2244      	movs	r2, #68	@ 0x44
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fb0a 	bl	8004620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	463b      	mov	r3, r7
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800101e:	f002 f96d 	bl	80032fc <HAL_PWREx_ControlVoltageScaling>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001028:	f000 f837 	bl	800109a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001034:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	2310      	movs	r3, #16
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103e:	2302      	movs	r3, #2
 8001040:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001042:	2301      	movs	r3, #1
 8001044:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001046:	230a      	movs	r3, #10
 8001048:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800104a:	2307      	movs	r3, #7
 800104c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4618      	mov	r0, r3
 800105c:	f002 f9a4 	bl	80033a8 <HAL_RCC_OscConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001066:	f000 f818 	bl	800109a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106a:	230f      	movs	r3, #15
 800106c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106e:	2303      	movs	r3, #3
 8001070:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2104      	movs	r1, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fda4 	bl	8003bd0 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108e:	f000 f804 	bl	800109a <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3758      	adds	r7, #88	@ 0x58
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109e:	b672      	cpsid	i
}
 80010a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a2:	bf00      	nop
 80010a4:	e7fd      	b.n	80010a2 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <HAL_MspInit+0x44>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ba:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <HAL_MspInit+0x44>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ca:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <HAL_MspInit+0x44>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <HAL_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001146:	f000 f8b7 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <I2C1_EV_IRQHandler+0x10>)
 8001156:	f000 ffad 	bl	80020b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000a8 	.word	0x200000a8

08001164 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <I2C1_ER_IRQHandler+0x10>)
 800116a:	f000 ffbd 	bl	80020e8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000a8 	.word	0x200000a8

08001178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800117c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001180:	f000 fbea 	bl	8001958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b0:	f7ff ffea 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b6:	490d      	ldr	r1, [pc, #52]	@ (80011ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <LoopForever+0xe>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011cc:	4c0a      	ldr	r4, [pc, #40]	@ (80011f8 <LoopForever+0x16>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011da:	f003 fa29 	bl	8004630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011de:	f7ff fe3b 	bl	8000e58 <main>

080011e2 <LoopForever>:

LoopForever:
    b LoopForever
 80011e2:	e7fe      	b.n	80011e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80011f0:	080046d8 	.word	0x080046d8
  ldr r2, =_sbss
 80011f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80011f8:	20000104 	.word	0x20000104

080011fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_IRQHandler>
	...

08001200 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <HAL_Init+0x3c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a0b      	ldr	r2, [pc, #44]	@ (800123c <HAL_Init+0x3c>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001214:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
 8001218:	f000 f962 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800121c:	2000      	movs	r0, #0
 800121e:	f000 f80f 	bl	8001240 <HAL_InitTick>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	e001      	b.n	8001232 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800122e:	f7ff ff3b 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001232:	79fb      	ldrb	r3, [r7, #7]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <HAL_InitTick+0x6c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d023      	beq.n	800129c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_InitTick+0x70>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_InitTick+0x6c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f96d 	bl	800154a <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d809      	bhi.n	8001290 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f937 	bl	80014f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <HAL_InitTick+0x74>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e007      	b.n	80012a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e001      	b.n	80012a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000004 	.word	0x20000004
 80012b4:	20000008 	.word	0x20000008

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2000000c 	.word	0x2000000c
 80012dc:	20000100 	.word	0x20000100

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000100 	.word	0x20000100

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff ffee 	bl	80012e0 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_Delay+0x44>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffde 	bl	80012e0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000000c 	.word	0x2000000c

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	@ (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	@ (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	@ 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	@ 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff29 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff3e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff31 	bl	80013a4 <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d005      	beq.n	8001586 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2204      	movs	r2, #4
 800157e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e029      	b.n	80015da <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 020e 	bic.w	r2, r2, #14
 8001594:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	f003 021c 	and.w	r2, r3, #28
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
    }
  }
  return status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015f2:	b2db      	uxtb	r3, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e154      	b.n	80018ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8146 	beq.w	80018b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x40>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0203 	and.w	r2, r3, #3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80a0 	beq.w	80018b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b58      	ldr	r3, [pc, #352]	@ (80018d8 <HAL_GPIO_Init+0x2d8>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001778:	4a57      	ldr	r2, [pc, #348]	@ (80018d8 <HAL_GPIO_Init+0x2d8>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001780:	4b55      	ldr	r3, [pc, #340]	@ (80018d8 <HAL_GPIO_Init+0x2d8>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800178c:	4a53      	ldr	r2, [pc, #332]	@ (80018dc <HAL_GPIO_Init+0x2dc>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017b6:	d019      	beq.n	80017ec <HAL_GPIO_Init+0x1ec>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a49      	ldr	r2, [pc, #292]	@ (80018e0 <HAL_GPIO_Init+0x2e0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d013      	beq.n	80017e8 <HAL_GPIO_Init+0x1e8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a48      	ldr	r2, [pc, #288]	@ (80018e4 <HAL_GPIO_Init+0x2e4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_GPIO_Init+0x1e4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a47      	ldr	r2, [pc, #284]	@ (80018e8 <HAL_GPIO_Init+0x2e8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0x1e0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a46      	ldr	r2, [pc, #280]	@ (80018ec <HAL_GPIO_Init+0x2ec>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_GPIO_Init+0x1dc>
 80017d8:	2304      	movs	r3, #4
 80017da:	e008      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017dc:	2307      	movs	r3, #7
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e0:	2303      	movs	r3, #3
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_Init+0x1ee>
 80017ec:	2300      	movs	r3, #0
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017fe:	4937      	ldr	r1, [pc, #220]	@ (80018dc <HAL_GPIO_Init+0x2dc>)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800180c:	4b38      	ldr	r3, [pc, #224]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001830:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001836:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800185a:	4a25      	ldr	r2, [pc, #148]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001860:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001884:	4a1a      	ldr	r2, [pc, #104]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800188a:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ae:	4a10      	ldr	r2, [pc, #64]	@ (80018f0 <HAL_GPIO_Init+0x2f0>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f aea3 	bne.w	8001610 <HAL_GPIO_Init+0x10>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	48000800 	.word	0x48000800
 80018e8:	48000c00 	.word	0x48000c00
 80018ec:	48001000 	.word	0x48001000
 80018f0:	40010400 	.word	0x40010400

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001910:	e002      	b.n	8001918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43d9      	mvns	r1, r3
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	400b      	ands	r3, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fa48 	bl	8000e0c <HAL_GPIO_EXTI_Callback>
  }
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e08d      	b.n	8001ab6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff f960 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2224      	movs	r2, #36	@ 0x24
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	e006      	b.n	8001a10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d108      	bne.n	8001a2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	e007      	b.n	8001a3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69d9      	ldr	r1, [r3, #28]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	461a      	mov	r2, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	817b      	strh	r3, [r7, #10]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	f040 80fd 	bne.w	8001cdc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x30>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e0f6      	b.n	8001cde <HAL_I2C_Master_Transmit+0x21e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001af8:	f7ff fbf2 	bl	80012e0 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2319      	movs	r3, #25
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f001 f871 	bl	8002bf2 <I2C_WaitOnFlagUntilTimeout>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0e1      	b.n	8001cde <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2221      	movs	r2, #33	@ 0x21
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2210      	movs	r2, #16
 8001b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	893a      	ldrh	r2, [r7, #8]
 8001b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2bff      	cmp	r3, #255	@ 0xff
 8001b4a:	d906      	bls.n	8001b5a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	22ff      	movs	r2, #255	@ 0xff
 8001b50:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e007      	b.n	8001b6a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d024      	beq.n	8001bbc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	8979      	ldrh	r1, [r7, #10]
 8001bae:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce8 <HAL_I2C_Master_Transmit+0x228>)
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f001 fa6b 	bl	8003090 <I2C_TransferConfig>
 8001bba:	e066      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	8979      	ldrh	r1, [r7, #10]
 8001bc4:	4b48      	ldr	r3, [pc, #288]	@ (8001ce8 <HAL_I2C_Master_Transmit+0x228>)
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f001 fa60 	bl	8003090 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001bd0:	e05b      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	6a39      	ldr	r1, [r7, #32]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f001 f864 	bl	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e07b      	b.n	8001cde <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d034      	beq.n	8001c8a <HAL_I2C_Master_Transmit+0x1ca>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d130      	bne.n	8001c8a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2180      	movs	r1, #128	@ 0x80
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 ffdd 	bl	8002bf2 <I2C_WaitOnFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e04d      	b.n	8001cde <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2bff      	cmp	r3, #255	@ 0xff
 8001c4a:	d90e      	bls.n	8001c6a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	22ff      	movs	r2, #255	@ 0xff
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	8979      	ldrh	r1, [r7, #10]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f001 fa14 	bl	8003090 <I2C_TransferConfig>
 8001c68:	e00f      	b.n	8001c8a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	8979      	ldrh	r1, [r7, #10]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f001 fa03 	bl	8003090 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d19e      	bne.n	8001bd2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	6a39      	ldr	r1, [r7, #32]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f001 f84a 	bl	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e01a      	b.n	8001cde <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2220      	movs	r2, #32
 8001cae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_I2C_Master_Transmit+0x22c>)
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	80002000 	.word	0x80002000
 8001cec:	fe00e800 	.word	0xfe00e800

08001cf0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	817b      	strh	r3, [r7, #10]
 8001d00:	4613      	mov	r3, r2
 8001d02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	f040 80db 	bne.w	8001ec8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_I2C_Master_Receive+0x30>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0d4      	b.n	8001eca <HAL_I2C_Master_Receive+0x1da>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d28:	f7ff fada 	bl	80012e0 <HAL_GetTick>
 8001d2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2319      	movs	r3, #25
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 ff59 	bl	8002bf2 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0bf      	b.n	8001eca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2222      	movs	r2, #34	@ 0x22
 8001d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2210      	movs	r2, #16
 8001d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	893a      	ldrh	r2, [r7, #8]
 8001d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2bff      	cmp	r3, #255	@ 0xff
 8001d7a:	d90e      	bls.n	8001d9a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	8979      	ldrh	r1, [r7, #10]
 8001d8a:	4b52      	ldr	r3, [pc, #328]	@ (8001ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f001 f97c 	bl	8003090 <I2C_TransferConfig>
 8001d98:	e06d      	b.n	8001e76 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	8979      	ldrh	r1, [r7, #10]
 8001dac:	4b49      	ldr	r3, [pc, #292]	@ (8001ed4 <HAL_I2C_Master_Receive+0x1e4>)
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f001 f96b 	bl	8003090 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001dba:	e05c      	b.n	8001e76 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	6a39      	ldr	r1, [r7, #32]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fff9 	bl	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e07c      	b.n	8001eca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d034      	beq.n	8001e76 <HAL_I2C_Master_Receive+0x186>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d130      	bne.n	8001e76 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fee7 	bl	8002bf2 <I2C_WaitOnFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e04d      	b.n	8001eca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2bff      	cmp	r3, #255	@ 0xff
 8001e36:	d90e      	bls.n	8001e56 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	22ff      	movs	r2, #255	@ 0xff
 8001e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	8979      	ldrh	r1, [r7, #10]
 8001e46:	2300      	movs	r3, #0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f001 f91e 	bl	8003090 <I2C_TransferConfig>
 8001e54:	e00f      	b.n	8001e76 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	8979      	ldrh	r1, [r7, #10]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f001 f90d 	bl	8003090 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d19d      	bne.n	8001dbc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	6a39      	ldr	r1, [r7, #32]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 ff54 	bl	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e01a      	b.n	8001eca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_I2C_Master_Receive+0x1e8>)
 8001ea8:	400b      	ands	r3, r1
 8001eaa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001ec8:	2302      	movs	r3, #2
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	80002400 	.word	0x80002400
 8001ed8:	fe00e800 	.word	0xfe00e800

08001edc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	f040 80d6 	bne.w	80020aa <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0cc      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_I2C_IsDeviceReady+0x44>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e0c5      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x1d0>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2224      	movs	r2, #36	@ 0x24
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_I2C_IsDeviceReady+0x72>
 8001f3e:	897b      	ldrh	r3, [r7, #10]
 8001f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f4c:	e006      	b.n	8001f5c <HAL_I2C_IsDeviceReady+0x80>
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f58:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f9bd 	bl	80012e0 <HAL_GetTick>
 8001f66:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	bf0c      	ite	eq
 8001f76:	2301      	moveq	r3, #1
 8001f78:	2300      	movne	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f94:	e034      	b.n	8002000 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d01a      	beq.n	8001fd4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f9e:	f7ff f99f 	bl	80012e0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d302      	bcc.n	8001fb4 <HAL_I2C_IsDeviceReady+0xd8>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e06b      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b20      	cmp	r3, #32
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b10      	cmp	r3, #16
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002000:	7ffb      	ldrb	r3, [r7, #31]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_I2C_IsDeviceReady+0x130>
 8002006:	7fbb      	ldrb	r3, [r7, #30]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0c4      	beq.n	8001f96 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b10      	cmp	r3, #16
 8002018:	d01a      	beq.n	8002050 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	2120      	movs	r1, #32
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fde4 	bl	8002bf2 <I2C_WaitOnFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e03b      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2220      	movs	r2, #32
 800203a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e02d      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	2120      	movs	r1, #32
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 fdc9 	bl	8002bf2 <I2C_WaitOnFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e020      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2210      	movs	r2, #16
 8002070:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2220      	movs	r2, #32
 8002078:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	f63f af56 	bhi.w	8001f36 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
  }
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
  }
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00f      	beq.n	800212a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002128:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00f      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f043 0208 	orr.w	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002152:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00f      	beq.n	800217e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216c:	f043 0202 	orr.w	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800217c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 030b 	and.w	r3, r3, #11
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800218e:	68f9      	ldr	r1, [r7, #12]
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fbd5 	bl	8002940 <I2C_ITError>
  }
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70fb      	strb	r3, [r7, #3]
 80021d2:	4613      	mov	r3, r2
 80021d4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <I2C_Slave_ISR_IT+0x24>
 800223e:	2302      	movs	r3, #2
 8002240:	e0e2      	b.n	8002408 <I2C_Slave_ISR_IT+0x1ea>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f9b5 	bl	80025d0 <I2C_ITSlaveCplt>
 8002266:	e0ca      	b.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d04b      	beq.n	800230a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002278:	2b00      	cmp	r3, #0
 800227a:	d046      	beq.n	800230a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d128      	bne.n	80022d8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b28      	cmp	r3, #40	@ 0x28
 8002290:	d108      	bne.n	80022a4 <I2C_Slave_ISR_IT+0x86>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002298:	d104      	bne.n	80022a4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fafb 	bl	8002898 <I2C_ITListenCplt>
 80022a2:	e031      	b.n	8002308 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b29      	cmp	r3, #41	@ 0x29
 80022ae:	d10e      	bne.n	80022ce <I2C_Slave_ISR_IT+0xb0>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022b6:	d00a      	beq.n	80022ce <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2210      	movs	r2, #16
 80022be:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fc54 	bl	8002b6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f926 	bl	8002518 <I2C_ITSlaveSeqCplt>
 80022cc:	e01c      	b.n	8002308 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80022d6:	e08f      	b.n	80023f8 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2210      	movs	r2, #16
 80022de:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <I2C_Slave_ISR_IT+0xdc>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f8:	d17e      	bne.n	80023f8 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4619      	mov	r1, r3
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fb1d 	bl	8002940 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002306:	e077      	b.n	80023f8 <I2C_Slave_ISR_IT+0x1da>
 8002308:	e076      	b.n	80023f8 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02f      	beq.n	8002374 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800231a:	2b00      	cmp	r3, #0
 800231c:	d02a      	beq.n	8002374 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d018      	beq.n	800235a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d14b      	bne.n	80023fc <I2C_Slave_ISR_IT+0x1de>
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800236a:	d047      	beq.n	80023fc <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f8d3 	bl	8002518 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002372:	e043      	b.n	80023fc <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002388:	6939      	ldr	r1, [r7, #16]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f840 	bl	8002410 <I2C_ITAddrCplt>
 8002390:	e035      	b.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d030      	beq.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d02b      	beq.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d018      	beq.n	80023e2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	@ 0x28
 80023e0:	e00d      	b.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e8:	d002      	beq.n	80023f0 <I2C_Slave_ISR_IT+0x1d2>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f891 	bl	8002518 <I2C_ITSlaveSeqCplt>
 80023f6:	e002      	b.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80023f8:	bf00      	nop
 80023fa:	e000      	b.n	80023fe <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80023fc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002426:	2b28      	cmp	r3, #40	@ 0x28
 8002428:	d16a      	bne.n	8002500 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	b29b      	uxth	r3, r3
 8002444:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002448:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002456:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002464:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d138      	bne.n	80024e0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	09db      	lsrs	r3, r3, #7
 8002472:	b29a      	uxth	r2, r3
 8002474:	89bb      	ldrh	r3, [r7, #12]
 8002476:	4053      	eors	r3, r2
 8002478:	b29b      	uxth	r3, r3
 800247a:	f003 0306 	and.w	r3, r3, #6
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11c      	bne.n	80024bc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002494:	2b02      	cmp	r3, #2
 8002496:	d13b      	bne.n	8002510 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2208      	movs	r2, #8
 80024a4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024ae:	89ba      	ldrh	r2, [r7, #12]
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fe86 	bl	80021c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024ba:	e029      	b.n	8002510 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80024bc:	893b      	ldrh	r3, [r7, #8]
 80024be:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fe15 	bl	80030f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024d2:	89ba      	ldrh	r2, [r7, #12]
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	4619      	mov	r1, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fe74 	bl	80021c6 <HAL_I2C_AddrCallback>
}
 80024de:	e017      	b.n	8002510 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fe05 	bl	80030f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024f2:	89ba      	ldrh	r2, [r7, #12]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff fe64 	bl	80021c6 <HAL_I2C_AddrCallback>
}
 80024fe:	e007      	b.n	8002510 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e00c      	b.n	8002566 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002564:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b29      	cmp	r3, #41	@ 0x29
 8002570:	d112      	bne.n	8002598 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2228      	movs	r2, #40	@ 0x28
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2221      	movs	r2, #33	@ 0x21
 800257e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002580:	2101      	movs	r1, #1
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fdb6 	bl	80030f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff fe04 	bl	800219e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002596:	e017      	b.n	80025c8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80025a2:	d111      	bne.n	80025c8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2228      	movs	r2, #40	@ 0x28
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2222      	movs	r2, #34	@ 0x22
 80025b0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025b2:	2102      	movs	r1, #2
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fd9d 	bl	80030f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fdf5 	bl	80021b2 <HAL_I2C_SlaveRxCpltCallback>
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2220      	movs	r2, #32
 80025fa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025fc:	7afb      	ldrb	r3, [r7, #11]
 80025fe:	2b21      	cmp	r3, #33	@ 0x21
 8002600:	d002      	beq.n	8002608 <I2C_ITSlaveCplt+0x38>
 8002602:	7afb      	ldrb	r3, [r7, #11]
 8002604:	2b29      	cmp	r3, #41	@ 0x29
 8002606:	d108      	bne.n	800261a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002608:	f248 0101 	movw	r1, #32769	@ 0x8001
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fd71 	bl	80030f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2221      	movs	r2, #33	@ 0x21
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
 8002618:	e019      	b.n	800264e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800261a:	7afb      	ldrb	r3, [r7, #11]
 800261c:	2b22      	cmp	r3, #34	@ 0x22
 800261e:	d002      	beq.n	8002626 <I2C_ITSlaveCplt+0x56>
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	2b2a      	cmp	r3, #42	@ 0x2a
 8002624:	d108      	bne.n	8002638 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002626:	f248 0102 	movw	r1, #32770	@ 0x8002
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fd62 	bl	80030f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2222      	movs	r2, #34	@ 0x22
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30
 8002636:	e00a      	b.n	800264e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002638:	7afb      	ldrb	r3, [r7, #11]
 800263a:	2b28      	cmp	r3, #40	@ 0x28
 800263c:	d107      	bne.n	800264e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800263e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fd56 	bl	80030f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800265c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b89      	ldr	r3, [pc, #548]	@ (8002890 <I2C_ITSlaveCplt+0x2c0>)
 800266a:	400b      	ands	r3, r1
 800266c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa7d 	bl	8002b6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d013      	beq.n	80026a6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800268c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01f      	beq.n	80026d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026a4:	e017      	b.n	80026d6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0304 	bic.w	r3, r3, #4
 80026e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002718:	b29b      	uxth	r3, r3
 800271a:	3b01      	subs	r3, #1
 800271c:	b29a      	uxth	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	f043 0204 	orr.w	r2, r3, #4
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d049      	beq.n	80027d6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002748:	2b00      	cmp	r3, #0
 800274a:	d044      	beq.n	80027d6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d128      	bne.n	80027a8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b28      	cmp	r3, #40	@ 0x28
 8002760:	d108      	bne.n	8002774 <I2C_ITSlaveCplt+0x1a4>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002768:	d104      	bne.n	8002774 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800276a:	6979      	ldr	r1, [r7, #20]
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f893 	bl	8002898 <I2C_ITListenCplt>
 8002772:	e030      	b.n	80027d6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b29      	cmp	r3, #41	@ 0x29
 800277e:	d10e      	bne.n	800279e <I2C_ITSlaveCplt+0x1ce>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002786:	d00a      	beq.n	800279e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2210      	movs	r2, #16
 800278e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f9ec 	bl	8002b6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff febe 	bl	8002518 <I2C_ITSlaveSeqCplt>
 800279c:	e01b      	b.n	80027d6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2210      	movs	r2, #16
 80027a4:	61da      	str	r2, [r3, #28]
 80027a6:	e016      	b.n	80027d6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2210      	movs	r2, #16
 80027ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b4:	f043 0204 	orr.w	r2, r3, #4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <I2C_ITSlaveCplt+0x1fa>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c8:	d105      	bne.n	80027d6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f8b5 	bl	8002940 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d010      	beq.n	800280e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8a4 	bl	8002940 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b28      	cmp	r3, #40	@ 0x28
 8002802:	d141      	bne.n	8002888 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002804:	6979      	ldr	r1, [r7, #20]
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f846 	bl	8002898 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800280c:	e03c      	b.n	8002888 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002816:	d014      	beq.n	8002842 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fe7d 	bl	8002518 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <I2C_ITSlaveCplt+0x2c4>)
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fcd1 	bl	80021e2 <HAL_I2C_ListenCpltCallback>
}
 8002840:	e022      	b.n	8002888 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b22      	cmp	r3, #34	@ 0x22
 800284c:	d10e      	bne.n	800286c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fca4 	bl	80021b2 <HAL_I2C_SlaveRxCpltCallback>
}
 800286a:	e00d      	b.n	8002888 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fc8b 	bl	800219e <HAL_I2C_SlaveTxCpltCallback>
}
 8002888:	bf00      	nop
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	fe00e800 	.word	0xfe00e800
 8002894:	ffff0000 	.word	0xffff0000

08002898 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a25      	ldr	r2, [pc, #148]	@ (800293c <I2C_ITListenCplt+0xa4>)
 80028a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d022      	beq.n	8002914 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290c:	f043 0204 	orr.w	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002914:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fbeb 	bl	80030f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2210      	movs	r2, #16
 8002924:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fc57 	bl	80021e2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	ffff0000 	.word	0xffff0000

08002940 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002950:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a6d      	ldr	r2, [pc, #436]	@ (8002b14 <I2C_ITError+0x1d4>)
 800295e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b28      	cmp	r3, #40	@ 0x28
 8002976:	d005      	beq.n	8002984 <I2C_ITError+0x44>
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b29      	cmp	r3, #41	@ 0x29
 800297c:	d002      	beq.n	8002984 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b2a      	cmp	r3, #42	@ 0x2a
 8002982:	d10b      	bne.n	800299c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002984:	2103      	movs	r1, #3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fbb4 	bl	80030f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2228      	movs	r2, #40	@ 0x28
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a60      	ldr	r2, [pc, #384]	@ (8002b18 <I2C_ITError+0x1d8>)
 8002998:	635a      	str	r2, [r3, #52]	@ 0x34
 800299a:	e030      	b.n	80029fe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800299c:	f248 0103 	movw	r1, #32771	@ 0x8003
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fba7 	bl	80030f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8e1 	bl	8002b6e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b60      	cmp	r3, #96	@ 0x60
 80029b6:	d01f      	beq.n	80029f8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d114      	bne.n	80029f8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d109      	bne.n	80029f0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2210      	movs	r2, #16
 80029e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e8:	f043 0204 	orr.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2220      	movs	r2, #32
 80029f6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d039      	beq.n	8002a80 <I2C_ITError+0x140>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b11      	cmp	r3, #17
 8002a10:	d002      	beq.n	8002a18 <I2C_ITError+0xd8>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b21      	cmp	r3, #33	@ 0x21
 8002a16:	d133      	bne.n	8002a80 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a26:	d107      	bne.n	8002a38 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fdd1 	bl	80015e4 <HAL_DMA_GetState>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d017      	beq.n	8002a78 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4c:	4a33      	ldr	r2, [pc, #204]	@ (8002b1c <I2C_ITError+0x1dc>)
 8002a4e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe fd80 	bl	8001562 <HAL_DMA_Abort_IT>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d04d      	beq.n	8002b04 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a72:	4610      	mov	r0, r2
 8002a74:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a76:	e045      	b.n	8002b04 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f851 	bl	8002b20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a7e:	e041      	b.n	8002b04 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d039      	beq.n	8002afc <I2C_ITError+0x1bc>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b12      	cmp	r3, #18
 8002a8c:	d002      	beq.n	8002a94 <I2C_ITError+0x154>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b22      	cmp	r3, #34	@ 0x22
 8002a92:	d133      	bne.n	8002afc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aa2:	d107      	bne.n	8002ab4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ab2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe fd93 	bl	80015e4 <HAL_DMA_GetState>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d017      	beq.n	8002af4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	4a14      	ldr	r2, [pc, #80]	@ (8002b1c <I2C_ITError+0x1dc>)
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fd42 	bl	8001562 <HAL_DMA_Abort_IT>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002aee:	4610      	mov	r0, r2
 8002af0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af2:	e009      	b.n	8002b08 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f813 	bl	8002b20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002afa:	e005      	b.n	8002b08 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f80f 	bl	8002b20 <I2C_TreatErrorCallback>
  }
}
 8002b02:	e002      	b.n	8002b0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b04:	bf00      	nop
 8002b06:	e000      	b.n	8002b0a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b08:	bf00      	nop
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	ffff0000 	.word	0xffff0000
 8002b18:	0800221f 	.word	0x0800221f
 8002b1c:	08002bb7 	.word	0x08002bb7

08002b20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b60      	cmp	r3, #96	@ 0x60
 8002b32:	d10e      	bne.n	8002b52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fb5d 	bl	800220a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b50:	e009      	b.n	8002b66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff fb48 	bl	80021f6 <HAL_I2C_ErrorCallback>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d103      	bne.n	8002b8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d007      	beq.n	8002baa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699a      	ldr	r2, [r3, #24]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	619a      	str	r2, [r3, #24]
  }
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	2200      	movs	r2, #0
 8002be2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff ff9b 	bl	8002b20 <I2C_TreatErrorCallback>
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c02:	e03b      	b.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	6839      	ldr	r1, [r7, #0]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f961 	bl	8002ed0 <I2C_IsErrorOccurred>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e041      	b.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d02d      	beq.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c20:	f7fe fb5e 	bl	80012e0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d302      	bcc.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d122      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d113      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e00f      	b.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4013      	ands	r3, r2
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d0b4      	beq.n	8002c04 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb0:	e033      	b.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f90a 	bl	8002ed0 <I2C_IsErrorOccurred>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e031      	b.n	8002d2a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d025      	beq.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe fb07 	bl	80012e0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11a      	bne.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d013      	beq.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	f043 0220 	orr.w	r2, r3, #32
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e007      	b.n	8002d2a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d1c4      	bne.n	8002cb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3e:	e02f      	b.n	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f8c3 	bl	8002ed0 <I2C_IsErrorOccurred>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e02d      	b.n	8002db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d54:	f7fe fac4 	bl	80012e0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d302      	bcc.n	8002d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11a      	bne.n	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d013      	beq.n	8002da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e007      	b.n	8002db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d1c8      	bne.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002dc8:	e071      	b.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f87e 	bl	8002ed0 <I2C_IsErrorOccurred>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d13b      	bne.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d138      	bne.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d105      	bne.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d121      	bne.n	8002e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2210      	movs	r2, #16
 8002e20:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2204      	movs	r2, #4
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
 8002e5c:	e002      	b.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002e64:	f7fe fa3c 	bl	80012e0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d302      	bcc.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d119      	bne.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d00f      	beq.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d002      	beq.n	8002ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d083      	beq.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	fe00e800 	.word	0xfe00e800

08002ed0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	@ 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d068      	beq.n	8002fce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2210      	movs	r2, #16
 8002f02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f04:	e049      	b.n	8002f9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d045      	beq.n	8002f9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fe f9e7 	bl	80012e0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <I2C_IsErrorOccurred+0x54>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13a      	bne.n	8002f9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f46:	d121      	bne.n	8002f8c <I2C_IsErrorOccurred+0xbc>
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f4e:	d01d      	beq.n	8002f8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f50:	7cfb      	ldrb	r3, [r7, #19]
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d01a      	beq.n	8002f8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f66:	f7fe f9bb 	bl	80012e0 <HAL_GetTick>
 8002f6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6c:	e00e      	b.n	8002f8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f6e:	f7fe f9b7 	bl	80012e0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b19      	cmp	r3, #25
 8002f7a:	d907      	bls.n	8002f8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	f043 0320 	orr.w	r3, r3, #32
 8002f82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f8a:	e006      	b.n	8002f9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d1e9      	bne.n	8002f6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d003      	beq.n	8002fb0 <I2C_IsErrorOccurred+0xe0>
 8002fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0aa      	beq.n	8002f06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00b      	beq.n	8002ff8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f043 0308 	orr.w	r3, r3, #8
 8003008:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003012:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00b      	beq.n	800303c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f043 0302 	orr.w	r3, r3, #2
 800302a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003034:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800303c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01c      	beq.n	800307e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fd92 	bl	8002b6e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <I2C_IsErrorOccurred+0x1bc>)
 8003056:	400b      	ands	r3, r1
 8003058:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800307e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003082:	4618      	mov	r0, r3
 8003084:	3728      	adds	r7, #40	@ 0x28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	fe00e800 	.word	0xfe00e800

08003090 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	817b      	strh	r3, [r7, #10]
 800309e:	4613      	mov	r3, r2
 80030a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030a8:	7a7b      	ldrb	r3, [r7, #9]
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	0d5b      	lsrs	r3, r3, #21
 80030ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80030ce:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <I2C_TransferConfig+0x60>)
 80030d0:	430b      	orrs	r3, r1
 80030d2:	43db      	mvns	r3, r3
 80030d4:	ea02 0103 	and.w	r1, r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	03ff63ff 	.word	0x03ff63ff

080030f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00f      	beq.n	800312e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003114:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003122:	2b28      	cmp	r3, #40	@ 0x28
 8003124:	d003      	beq.n	800312e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800312c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00f      	beq.n	8003158 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800313e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800314c:	2b28      	cmp	r3, #40	@ 0x28
 800314e:	d003      	beq.n	8003158 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003156:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da03      	bge.n	8003168 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003166:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003168:	887b      	ldrh	r3, [r7, #2]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d103      	bne.n	8003176 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	2b20      	cmp	r3, #32
 800317a:	d103      	bne.n	8003184 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f043 0320 	orr.w	r3, r3, #32
 8003182:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d103      	bne.n	8003192 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003190:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43da      	mvns	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	400a      	ands	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d138      	bne.n	8003238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e032      	b.n	800323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	@ 0x24
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b20      	cmp	r3, #32
 800325a:	d139      	bne.n	80032d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003266:	2302      	movs	r3, #2
 8003268:	e033      	b.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2224      	movs	r2, #36	@ 0x24
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40007000 	.word	0x40007000

080032fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800330a:	d130      	bne.n	800336e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800330c:	4b23      	ldr	r3, [pc, #140]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003318:	d038      	beq.n	800338c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800331a:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003322:	4a1e      	ldr	r2, [pc, #120]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003324:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800332a:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2232      	movs	r2, #50	@ 0x32
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	4a1b      	ldr	r2, [pc, #108]	@ (80033a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0c9b      	lsrs	r3, r3, #18
 800333c:	3301      	adds	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003340:	e002      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3b01      	subs	r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003348:	4b14      	ldr	r3, [pc, #80]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003354:	d102      	bne.n	800335c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f2      	bne.n	8003342 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800335c:	4b0f      	ldr	r3, [pc, #60]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003368:	d110      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e00f      	b.n	800338e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337a:	d007      	beq.n	800338c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800337c:	4b07      	ldr	r3, [pc, #28]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003384:	4a05      	ldr	r2, [pc, #20]	@ (800339c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003386:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800338a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000
 80033a0:	20000004 	.word	0x20000004
 80033a4:	431bde83 	.word	0x431bde83

080033a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f000 bc02 	b.w	8003bc0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033bc:	4b96      	ldr	r3, [pc, #600]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c6:	4b94      	ldr	r3, [pc, #592]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80e4 	beq.w	80035a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4c>
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b0c      	cmp	r3, #12
 80033e8:	f040 808b 	bne.w	8003502 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	f040 8087 	bne.w	8003502 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f4:	4b88      	ldr	r3, [pc, #544]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_OscConfig+0x64>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e3d9      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	4b81      	ldr	r3, [pc, #516]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d004      	beq.n	8003426 <HAL_RCC_OscConfig+0x7e>
 800341c:	4b7e      	ldr	r3, [pc, #504]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003424:	e005      	b.n	8003432 <HAL_RCC_OscConfig+0x8a>
 8003426:	4b7c      	ldr	r3, [pc, #496]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003432:	4293      	cmp	r3, r2
 8003434:	d223      	bcs.n	800347e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fd54 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e3ba      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800344a:	4b73      	ldr	r3, [pc, #460]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a72      	ldr	r2, [pc, #456]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b70      	ldr	r3, [pc, #448]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	496d      	ldr	r1, [pc, #436]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003468:	4b6b      	ldr	r3, [pc, #428]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	4968      	ldr	r1, [pc, #416]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003478:	4313      	orrs	r3, r2
 800347a:	604b      	str	r3, [r1, #4]
 800347c:	e025      	b.n	80034ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347e:	4b66      	ldr	r3, [pc, #408]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a65      	ldr	r2, [pc, #404]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003484:	f043 0308 	orr.w	r3, r3, #8
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4960      	ldr	r1, [pc, #384]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349c:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	495b      	ldr	r1, [pc, #364]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fd14 	bl	8003ee8 <RCC_SetFlashLatencyFromMSIRange>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e37a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ca:	f000 fc81 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b51      	ldr	r3, [pc, #324]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	4950      	ldr	r1, [pc, #320]	@ (800361c <HAL_RCC_OscConfig+0x274>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	fa22 f303 	lsr.w	r3, r2, r3
 80034e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003620 <HAL_RCC_OscConfig+0x278>)
 80034e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003624 <HAL_RCC_OscConfig+0x27c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fea6 	bl	8001240 <HAL_InitTick>
 80034f4:	4603      	mov	r3, r0
 80034f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d052      	beq.n	80035a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	e35e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d032      	beq.n	8003570 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800350a:	4b43      	ldr	r3, [pc, #268]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a42      	ldr	r2, [pc, #264]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003516:	f7fd fee3 	bl	80012e0 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800351e:	f7fd fedf 	bl	80012e0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e347      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003530:	4b39      	ldr	r3, [pc, #228]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800353c:	4b36      	ldr	r3, [pc, #216]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a35      	ldr	r2, [pc, #212]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003542:	f043 0308 	orr.w	r3, r3, #8
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4930      	ldr	r1, [pc, #192]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800355a:	4b2f      	ldr	r3, [pc, #188]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	492b      	ldr	r1, [pc, #172]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
 800356e:	e01a      	b.n	80035a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003570:	4b29      	ldr	r3, [pc, #164]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a28      	ldr	r2, [pc, #160]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800357c:	f7fd feb0 	bl	80012e0 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003584:	f7fd feac 	bl	80012e0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e314      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003596:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x1dc>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d073      	beq.n	800369a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d005      	beq.n	80035c4 <HAL_RCC_OscConfig+0x21c>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d10e      	bne.n	80035dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d063      	beq.n	8003698 <HAL_RCC_OscConfig+0x2f0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d15f      	bne.n	8003698 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e2f1      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x24c>
 80035e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e025      	b.n	8003640 <HAL_RCC_OscConfig+0x298>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035fc:	d114      	bne.n	8003628 <HAL_RCC_OscConfig+0x280>
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a05      	ldr	r2, [pc, #20]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b03      	ldr	r3, [pc, #12]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a02      	ldr	r2, [pc, #8]	@ (8003618 <HAL_RCC_OscConfig+0x270>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x298>
 8003618:	40021000 	.word	0x40021000
 800361c:	08004690 	.word	0x08004690
 8003620:	20000004 	.word	0x20000004
 8003624:	20000008 	.word	0x20000008
 8003628:	4ba0      	ldr	r3, [pc, #640]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a9f      	ldr	r2, [pc, #636]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b9d      	ldr	r3, [pc, #628]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a9c      	ldr	r2, [pc, #624]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fe4a 	bl	80012e0 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7fd fe46 	bl	80012e0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	@ 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e2ae      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003662:	4b92      	ldr	r3, [pc, #584]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x2a8>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fe36 	bl	80012e0 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fd fe32 	bl	80012e0 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	@ 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e29a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800368a:	4b88      	ldr	r3, [pc, #544]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x2d0>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d060      	beq.n	8003768 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_OscConfig+0x310>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d119      	bne.n	80036e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d116      	bne.n	80036e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036b8:	4b7c      	ldr	r3, [pc, #496]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_OscConfig+0x328>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e277      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b76      	ldr	r3, [pc, #472]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	4973      	ldr	r1, [pc, #460]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e4:	e040      	b.n	8003768 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d023      	beq.n	8003736 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ee:	4b6f      	ldr	r3, [pc, #444]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6e      	ldr	r2, [pc, #440]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fdf1 	bl	80012e0 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd fded 	bl	80012e0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e255      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003714:	4b65      	ldr	r3, [pc, #404]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b62      	ldr	r3, [pc, #392]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	495f      	ldr	r1, [pc, #380]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
 8003734:	e018      	b.n	8003768 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b5d      	ldr	r3, [pc, #372]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a5c      	ldr	r2, [pc, #368]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800373c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fd fdcd 	bl	80012e0 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374a:	f7fd fdc9 	bl	80012e0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e231      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d03c      	beq.n	80037ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377c:	4b4b      	ldr	r3, [pc, #300]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800377e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003782:	4a4a      	ldr	r2, [pc, #296]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd fda8 	bl	80012e0 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003794:	f7fd fda4 	bl	80012e0 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e20c      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a6:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ef      	beq.n	8003794 <HAL_RCC_OscConfig+0x3ec>
 80037b4:	e01b      	b.n	80037ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b6:	4b3d      	ldr	r3, [pc, #244]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037bc:	4a3b      	ldr	r2, [pc, #236]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fd fd8b 	bl	80012e0 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ce:	f7fd fd87 	bl	80012e0 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1ef      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e0:	4b32      	ldr	r3, [pc, #200]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ef      	bne.n	80037ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80a6 	beq.w	8003948 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037fc:	2300      	movs	r3, #0
 80037fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003800:	4b2a      	ldr	r3, [pc, #168]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380c:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003810:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003816:	6593      	str	r3, [r2, #88]	@ 0x58
 8003818:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003824:	2301      	movs	r3, #1
 8003826:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003828:	4b21      	ldr	r3, [pc, #132]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d118      	bne.n	8003866 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003834:	4b1e      	ldr	r3, [pc, #120]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1d      	ldr	r2, [pc, #116]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 800383a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003840:	f7fd fd4e 	bl	80012e0 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fd fd4a 	bl	80012e0 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1b2      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800385a:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <HAL_RCC_OscConfig+0x508>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d108      	bne.n	8003880 <HAL_RCC_OscConfig+0x4d8>
 800386e:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003874:	4a0d      	ldr	r2, [pc, #52]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800387e:	e029      	b.n	80038d4 <HAL_RCC_OscConfig+0x52c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b05      	cmp	r3, #5
 8003886:	d115      	bne.n	80038b4 <HAL_RCC_OscConfig+0x50c>
 8003888:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388e:	4a07      	ldr	r2, [pc, #28]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800389e:	4a03      	ldr	r2, [pc, #12]	@ (80038ac <HAL_RCC_OscConfig+0x504>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x52c>
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	4b9a      	ldr	r3, [pc, #616]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	4a99      	ldr	r2, [pc, #612]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c4:	4b96      	ldr	r3, [pc, #600]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	4a95      	ldr	r2, [pc, #596]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d016      	beq.n	800390a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fd fd00 	bl	80012e0 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fd fcfc 	bl	80012e0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e162      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fa:	4b89      	ldr	r3, [pc, #548]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ed      	beq.n	80038e4 <HAL_RCC_OscConfig+0x53c>
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7fd fce9 	bl	80012e0 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fd fce5 	bl	80012e0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e14b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003928:	4b7d      	ldr	r3, [pc, #500]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1ed      	bne.n	8003912 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d105      	bne.n	8003948 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800393c:	4b78      	ldr	r3, [pc, #480]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003940:	4a77      	ldr	r2, [pc, #476]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003946:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d03c      	beq.n	80039ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01c      	beq.n	8003996 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800395c:	4b70      	ldr	r3, [pc, #448]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 800395e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003962:	4a6f      	ldr	r2, [pc, #444]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fd fcb8 	bl	80012e0 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003974:	f7fd fcb4 	bl	80012e0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e11c      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003986:	4b66      	ldr	r3, [pc, #408]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <HAL_RCC_OscConfig+0x5cc>
 8003994:	e01b      	b.n	80039ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003996:	4b62      	ldr	r3, [pc, #392]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003998:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800399c:	4a60      	ldr	r2, [pc, #384]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd fc9b 	bl	80012e0 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ae:	f7fd fc97 	bl	80012e0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e0ff      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039c0:	4b57      	ldr	r3, [pc, #348]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 80039c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ef      	bne.n	80039ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80f3 	beq.w	8003bbe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	2b02      	cmp	r3, #2
 80039de:	f040 80c9 	bne.w	8003b74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039e2:	4b4f      	ldr	r3, [pc, #316]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d12c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a00:	3b01      	subs	r3, #1
 8003a02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d123      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d11b      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d113      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d06b      	beq.n	8003b28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d062      	beq.n	8003b1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a56:	4b32      	ldr	r3, [pc, #200]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0ac      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a66:	4b2e      	ldr	r3, [pc, #184]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003a6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a72:	f7fd fc35 	bl	80012e0 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fd fc31 	bl	80012e0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e099      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8c:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f0      	bne.n	8003a7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a98:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	4b21      	ldr	r3, [pc, #132]	@ (8003b24 <HAL_RCC_OscConfig+0x77c>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003aa8:	3a01      	subs	r2, #1
 8003aaa:	0112      	lsls	r2, r2, #4
 8003aac:	4311      	orrs	r1, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ab2:	0212      	lsls	r2, r2, #8
 8003ab4:	4311      	orrs	r1, r2
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003aba:	0852      	lsrs	r2, r2, #1
 8003abc:	3a01      	subs	r2, #1
 8003abe:	0552      	lsls	r2, r2, #21
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ac6:	0852      	lsrs	r2, r2, #1
 8003ac8:	3a01      	subs	r2, #1
 8003aca:	0652      	lsls	r2, r2, #25
 8003acc:	4311      	orrs	r1, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ad2:	06d2      	lsls	r2, r2, #27
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4912      	ldr	r1, [pc, #72]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003adc:	4b10      	ldr	r3, [pc, #64]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a0c      	ldr	r2, [pc, #48]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003af4:	f7fd fbf4 	bl	80012e0 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd fbf0 	bl	80012e0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e058      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <HAL_RCC_OscConfig+0x778>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b1a:	e050      	b.n	8003bbe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e04f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
 8003b20:	40021000 	.word	0x40021000
 8003b24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b28:	4b27      	ldr	r3, [pc, #156]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d144      	bne.n	8003bbe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b34:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a23      	ldr	r2, [pc, #140]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a20      	ldr	r2, [pc, #128]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b4c:	f7fd fbc8 	bl	80012e0 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fbc4 	bl	80012e0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e02c      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b66:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x7ac>
 8003b72:	e024      	b.n	8003bbe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d01f      	beq.n	8003bba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a12      	ldr	r2, [pc, #72]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003b80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b86:	f7fd fbab 	bl	80012e0 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fd fba7 	bl	80012e0 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e00f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ba0:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003bac:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	4905      	ldr	r1, [pc, #20]	@ (8003bc8 <HAL_RCC_OscConfig+0x820>)
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <HAL_RCC_OscConfig+0x824>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60cb      	str	r3, [r1, #12]
 8003bb8:	e001      	b.n	8003bbe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	feeefffc 	.word	0xfeeefffc

08003bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0e7      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4b75      	ldr	r3, [pc, #468]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d910      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b72      	ldr	r3, [pc, #456]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f023 0207 	bic.w	r2, r3, #7
 8003bfa:	4970      	ldr	r1, [pc, #448]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b6e      	ldr	r3, [pc, #440]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0cf      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	4b66      	ldr	r3, [pc, #408]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d908      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c30:	4b63      	ldr	r3, [pc, #396]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4960      	ldr	r1, [pc, #384]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04c      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	4b5a      	ldr	r3, [pc, #360]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d121      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e0a6      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6e:	4b54      	ldr	r3, [pc, #336]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d115      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e09a      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c86:	4b4e      	ldr	r3, [pc, #312]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e08e      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c96:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e086      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b46      	ldr	r3, [pc, #280]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4943      	ldr	r1, [pc, #268]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb8:	f7fd fb12 	bl	80012e0 <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fd fb0e 	bl	80012e0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e06e      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	4b31      	ldr	r3, [pc, #196]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d208      	bcs.n	8003d16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b2e      	ldr	r3, [pc, #184]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	492b      	ldr	r1, [pc, #172]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d16:	4b29      	ldr	r3, [pc, #164]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d210      	bcs.n	8003d46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d24:	4b25      	ldr	r3, [pc, #148]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 0207 	bic.w	r2, r3, #7
 8003d2c:	4923      	ldr	r1, [pc, #140]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d34:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <HAL_RCC_ClockConfig+0x1ec>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e036      	b.n	8003db4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d52:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4918      	ldr	r1, [pc, #96]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4910      	ldr	r1, [pc, #64]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d84:	f000 f824 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	490b      	ldr	r1, [pc, #44]	@ (8003dc4 <HAL_RCC_ClockConfig+0x1f4>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	4a09      	ldr	r2, [pc, #36]	@ (8003dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8003da2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <HAL_RCC_ClockConfig+0x1fc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fd fa49 	bl	8001240 <HAL_InitTick>
 8003dae:	4603      	mov	r3, r0
 8003db0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003db2:	7afb      	ldrb	r3, [r7, #11]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	08004690 	.word	0x08004690
 8003dc8:	20000004 	.word	0x20000004
 8003dcc:	20000008 	.word	0x20000008

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b089      	sub	sp, #36	@ 0x24
 8003dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dde:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x34>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d121      	bne.n	8003e42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d11e      	bne.n	8003e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e04:	4b34      	ldr	r3, [pc, #208]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e10:	4b31      	ldr	r3, [pc, #196]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	e005      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e20:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d102      	bne.n	8003e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e48:	4b25      	ldr	r3, [pc, #148]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e004      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e54:	4b23      	ldr	r3, [pc, #140]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d134      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d003      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0xac>
 8003e74:	e005      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e78:	617b      	str	r3, [r7, #20]
      break;
 8003e7a:	e005      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e7e:	617b      	str	r3, [r7, #20]
      break;
 8003e80:	e002      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	617b      	str	r3, [r7, #20]
      break;
 8003e86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e88:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	3301      	adds	r3, #1
 8003e94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e96:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	fb03 f202 	mul.w	r2, r3, r2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	0e5b      	lsrs	r3, r3, #25
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	@ 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	080046a0 	.word	0x080046a0
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	007a1200 	.word	0x007a1200

08003ee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f00:	f7ff f9ee 	bl	80032e0 <HAL_PWREx_GetVoltageRange>
 8003f04:	6178      	str	r0, [r7, #20]
 8003f06:	e014      	b.n	8003f32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0c:	4a24      	ldr	r2, [pc, #144]	@ (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f14:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f20:	f7ff f9de 	bl	80032e0 <HAL_PWREx_GetVoltageRange>
 8003f24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f38:	d10b      	bne.n	8003f52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b80      	cmp	r3, #128	@ 0x80
 8003f3e:	d919      	bls.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f44:	d902      	bls.n	8003f4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f46:	2302      	movs	r3, #2
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e013      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	e010      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b80      	cmp	r3, #128	@ 0x80
 8003f56:	d902      	bls.n	8003f5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f58:	2303      	movs	r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	e00a      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b80      	cmp	r3, #128	@ 0x80
 8003f62:	d102      	bne.n	8003f6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f64:	2302      	movs	r3, #2
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	e004      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b70      	cmp	r3, #112	@ 0x70
 8003f6e:	d101      	bne.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f70:	2301      	movs	r3, #1
 8003f72:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f023 0207 	bic.w	r2, r3, #7
 8003f7c:	4909      	ldr	r1, [pc, #36]	@ (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f84:	4b07      	ldr	r3, [pc, #28]	@ (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	40022000 	.word	0x40022000

08003fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d031      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fcc:	d01a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fd2:	d814      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003fde:	4b5d      	ldr	r3, [pc, #372]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a5c      	ldr	r2, [pc, #368]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fea:	e00c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fa22 	bl	800443c <RCCEx_PLLSAI1_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	74fb      	strb	r3, [r7, #19]
      break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400c:	4b51      	ldr	r3, [pc, #324]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	494e      	ldr	r1, [pc, #312]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004022:	e001      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 809e 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800403a:	4b46      	ldr	r3, [pc, #280]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004050:	4b40      	ldr	r3, [pc, #256]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004054:	4a3f      	ldr	r2, [pc, #252]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405a:	6593      	str	r3, [r2, #88]	@ 0x58
 800405c:	4b3d      	ldr	r3, [pc, #244]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004068:	2301      	movs	r3, #1
 800406a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406c:	4b3a      	ldr	r3, [pc, #232]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a39      	ldr	r2, [pc, #228]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004076:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004078:	f7fd f932 	bl	80012e0 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004080:	f7fd f92e 	bl	80012e0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d902      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	74fb      	strb	r3, [r7, #19]
        break;
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004094:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d15a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d019      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040c2:	4b24      	ldr	r3, [pc, #144]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	4b21      	ldr	r3, [pc, #132]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040de:	4b1d      	ldr	r3, [pc, #116]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ee:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d016      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd f8ee 	bl	80012e0 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	e00b      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fd f8ea 	bl	80012e0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d902      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	74fb      	strb	r3, [r7, #19]
            break;
 800411e:	e006      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ec      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800412e:	7cfb      	ldrb	r3, [r7, #19]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004134:	4b07      	ldr	r3, [pc, #28]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004142:	4904      	ldr	r1, [pc, #16]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800414a:	e009      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	74bb      	strb	r3, [r7, #18]
 8004150:	e006      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004160:	7c7b      	ldrb	r3, [r7, #17]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004166:	4b8d      	ldr	r3, [pc, #564]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416a:	4a8c      	ldr	r2, [pc, #560]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800416c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004170:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800417e:	4b87      	ldr	r3, [pc, #540]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004184:	f023 0203 	bic.w	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4983      	ldr	r1, [pc, #524]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a0:	4b7e      	ldr	r3, [pc, #504]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	f023 020c 	bic.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	497b      	ldr	r1, [pc, #492]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c2:	4b76      	ldr	r3, [pc, #472]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	4972      	ldr	r1, [pc, #456]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e4:	4b6d      	ldr	r3, [pc, #436]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	496a      	ldr	r1, [pc, #424]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004206:	4b65      	ldr	r3, [pc, #404]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004214:	4961      	ldr	r1, [pc, #388]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004228:	4b5c      	ldr	r3, [pc, #368]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	4959      	ldr	r1, [pc, #356]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800424a:	4b54      	ldr	r3, [pc, #336]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	4950      	ldr	r1, [pc, #320]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800426c:	4b4b      	ldr	r3, [pc, #300]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004272:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427a:	4948      	ldr	r1, [pc, #288]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800428e:	4b43      	ldr	r3, [pc, #268]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004294:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	493f      	ldr	r1, [pc, #252]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d028      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042b0:	4b3a      	ldr	r3, [pc, #232]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042be:	4937      	ldr	r1, [pc, #220]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ce:	d106      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d0:	4b32      	ldr	r3, [pc, #200]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a31      	ldr	r2, [pc, #196]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80042d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042da:	60d3      	str	r3, [r2, #12]
 80042dc:	e011      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042e6:	d10c      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f8a4 	bl	800443c <RCCEx_PLLSAI1_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d028      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800430e:	4b23      	ldr	r3, [pc, #140]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004314:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	491f      	ldr	r1, [pc, #124]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800432c:	d106      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800432e:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	4a1a      	ldr	r2, [pc, #104]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004338:	60d3      	str	r3, [r2, #12]
 800433a:	e011      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004340:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004344:	d10c      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f000 f875 	bl	800443c <RCCEx_PLLSAI1_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02b      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437a:	4908      	ldr	r1, [pc, #32]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004386:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800438a:	d109      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b03      	ldr	r3, [pc, #12]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a02      	ldr	r2, [pc, #8]	@ (800439c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
 8004398:	e014      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f843 	bl	800443c <RCCEx_PLLSAI1_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80043c0:	7cfb      	ldrb	r3, [r7, #19]
 80043c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01c      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043d0:	4b19      	ldr	r3, [pc, #100]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	4916      	ldr	r1, [pc, #88]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ee:	d10c      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	2102      	movs	r1, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f820 	bl	800443c <RCCEx_PLLSAI1_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004416:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004424:	4904      	ldr	r1, [pc, #16]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800442c:	7cbb      	ldrb	r3, [r7, #18]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000

0800443c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800444a:	4b74      	ldr	r3, [pc, #464]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d018      	beq.n	8004488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004456:	4b71      	ldr	r3, [pc, #452]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0203 	and.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d10d      	bne.n	8004482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
       ||
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800446e:	4b6b      	ldr	r3, [pc, #428]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
       ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d047      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	e044      	b.n	8004512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d018      	beq.n	80044c2 <RCCEx_PLLSAI1_Config+0x86>
 8004490:	2b03      	cmp	r3, #3
 8004492:	d825      	bhi.n	80044e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004494:	2b01      	cmp	r3, #1
 8004496:	d002      	beq.n	800449e <RCCEx_PLLSAI1_Config+0x62>
 8004498:	2b02      	cmp	r3, #2
 800449a:	d009      	beq.n	80044b0 <RCCEx_PLLSAI1_Config+0x74>
 800449c:	e020      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800449e:	4b5f      	ldr	r3, [pc, #380]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d11d      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ae:	e01a      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b0:	4b5a      	ldr	r3, [pc, #360]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c0:	e013      	b.n	80044ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044c2:	4b56      	ldr	r3, [pc, #344]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ce:	4b53      	ldr	r3, [pc, #332]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044de:	e006      	b.n	80044ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e004      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e6:	bf00      	nop
 80044e8:	e002      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ea:	bf00      	nop
 80044ec:	e000      	b.n	80044f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10d      	bne.n	8004512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044f6:	4b49      	ldr	r3, [pc, #292]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	3b01      	subs	r3, #1
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	430b      	orrs	r3, r1
 800450c:	4943      	ldr	r1, [pc, #268]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	4313      	orrs	r3, r2
 8004510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d17c      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004518:	4b40      	ldr	r3, [pc, #256]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a3f      	ldr	r2, [pc, #252]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800451e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004524:	f7fc fedc 	bl	80012e0 <HAL_GetTick>
 8004528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800452a:	e009      	b.n	8004540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800452c:	f7fc fed8 	bl	80012e0 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d902      	bls.n	8004540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	73fb      	strb	r3, [r7, #15]
        break;
 800453e:	e005      	b.n	800454c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004540:	4b36      	ldr	r3, [pc, #216]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ef      	bne.n	800452c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d15f      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d110      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004558:	4b30      	ldr	r3, [pc, #192]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004560:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6892      	ldr	r2, [r2, #8]
 8004568:	0211      	lsls	r1, r2, #8
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68d2      	ldr	r2, [r2, #12]
 800456e:	06d2      	lsls	r2, r2, #27
 8004570:	430a      	orrs	r2, r1
 8004572:	492a      	ldr	r1, [pc, #168]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	610b      	str	r3, [r1, #16]
 8004578:	e027      	b.n	80045ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d112      	bne.n	80045a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004580:	4b26      	ldr	r3, [pc, #152]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004588:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6892      	ldr	r2, [r2, #8]
 8004590:	0211      	lsls	r1, r2, #8
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6912      	ldr	r2, [r2, #16]
 8004596:	0852      	lsrs	r2, r2, #1
 8004598:	3a01      	subs	r2, #1
 800459a:	0552      	lsls	r2, r2, #21
 800459c:	430a      	orrs	r2, r1
 800459e:	491f      	ldr	r1, [pc, #124]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	610b      	str	r3, [r1, #16]
 80045a4:	e011      	b.n	80045ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a6:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6892      	ldr	r2, [r2, #8]
 80045b6:	0211      	lsls	r1, r2, #8
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6952      	ldr	r2, [r2, #20]
 80045bc:	0852      	lsrs	r2, r2, #1
 80045be:	3a01      	subs	r2, #1
 80045c0:	0652      	lsls	r2, r2, #25
 80045c2:	430a      	orrs	r2, r1
 80045c4:	4915      	ldr	r1, [pc, #84]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045ca:	4b14      	ldr	r3, [pc, #80]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a13      	ldr	r2, [pc, #76]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fc fe83 	bl	80012e0 <HAL_GetTick>
 80045da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045dc:	e009      	b.n	80045f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045de:	f7fc fe7f 	bl	80012e0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d902      	bls.n	80045f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	73fb      	strb	r3, [r7, #15]
          break;
 80045f0:	e005      	b.n	80045fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f2:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ef      	beq.n	80045de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	4903      	ldr	r1, [pc, #12]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e0>)
 800460e:	4313      	orrs	r3, r2
 8004610:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000

08004620 <memset>:
 8004620:	4402      	add	r2, r0
 8004622:	4603      	mov	r3, r0
 8004624:	4293      	cmp	r3, r2
 8004626:	d100      	bne.n	800462a <memset+0xa>
 8004628:	4770      	bx	lr
 800462a:	f803 1b01 	strb.w	r1, [r3], #1
 800462e:	e7f9      	b.n	8004624 <memset+0x4>

08004630 <__libc_init_array>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	4d0d      	ldr	r5, [pc, #52]	@ (8004668 <__libc_init_array+0x38>)
 8004634:	4c0d      	ldr	r4, [pc, #52]	@ (800466c <__libc_init_array+0x3c>)
 8004636:	1b64      	subs	r4, r4, r5
 8004638:	10a4      	asrs	r4, r4, #2
 800463a:	2600      	movs	r6, #0
 800463c:	42a6      	cmp	r6, r4
 800463e:	d109      	bne.n	8004654 <__libc_init_array+0x24>
 8004640:	4d0b      	ldr	r5, [pc, #44]	@ (8004670 <__libc_init_array+0x40>)
 8004642:	4c0c      	ldr	r4, [pc, #48]	@ (8004674 <__libc_init_array+0x44>)
 8004644:	f000 f818 	bl	8004678 <_init>
 8004648:	1b64      	subs	r4, r4, r5
 800464a:	10a4      	asrs	r4, r4, #2
 800464c:	2600      	movs	r6, #0
 800464e:	42a6      	cmp	r6, r4
 8004650:	d105      	bne.n	800465e <__libc_init_array+0x2e>
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	f855 3b04 	ldr.w	r3, [r5], #4
 8004658:	4798      	blx	r3
 800465a:	3601      	adds	r6, #1
 800465c:	e7ee      	b.n	800463c <__libc_init_array+0xc>
 800465e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004662:	4798      	blx	r3
 8004664:	3601      	adds	r6, #1
 8004666:	e7f2      	b.n	800464e <__libc_init_array+0x1e>
 8004668:	080046d0 	.word	0x080046d0
 800466c:	080046d0 	.word	0x080046d0
 8004670:	080046d0 	.word	0x080046d0
 8004674:	080046d4 	.word	0x080046d4

08004678 <_init>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	bf00      	nop
 800467c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467e:	bc08      	pop	{r3}
 8004680:	469e      	mov	lr, r3
 8004682:	4770      	bx	lr

08004684 <_fini>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	bf00      	nop
 8004688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468a:	bc08      	pop	{r3}
 800468c:	469e      	mov	lr, r3
 800468e:	4770      	bx	lr
